<?xml version="1.0" encoding="utf-8"?>
<EasyQuestProfile xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <QuestsSorted>
    <QuestsSorted Action="RunCode" NameClass="SearingGorge.initializeGateDetection();&#xD;&#xA;SearingGorgeFixedPathfinding.Initialize();&#xD;&#xA;&#xD;&#xA;FNVQuesterAuthSettings.Load();&#xD;&#xA;        if (FNVQuesterAuthSettings.CurrentSetting.TransactionId == null)&#xD;&#xA;        {&#xD;&#xA;            FNVQuesterAuthSettings.CurrentSetting.ToForm();&#xD;&#xA;        }&#xD;&#xA;        FNVQuesterAuthSettings.CurrentSetting.Save();&#xD;&#xA;        new Authentication(FNVQuesterAuthSettings.CurrentSetting.TransactionId, &quot;e8b609dcf76e&quot;); &#xD;&#xA;        ControlAuthentication.SetControl(5);&#xD;&#xA;&#xD;&#xA;NpcDB.AcceptOnlyProfileNpc = true;&#xD;&#xA;wManager.wManagerSetting.CurrentSetting.AttackBeforeBeingAttacked = true;&#xD;&#xA;QuesterSettings.SettingsEasternKingdoms();&#xD;&#xA;wManager.Wow.Forms.UserControlTabGeneralSettings.ReloadGeneralSettings();&#xD;&#xA;&#xD;&#xA;wManager.wManagerSetting.CurrentSetting.SearchRadius = 50;&#xD;&#xA;" />
    <QuestsSorted Action="RunCode" NameClass="ProgressSettings.Initialize();&#xD;&#xA;wManager.Wow.Helpers.Quest.QuesterCurrentContext.CurrentStep = ProgressSettings.CurrentSettings.searingGorgeEins - 1;&#xD;&#xA;&#xD;&#xA;if(!wManager.wManagerSetting.CurrentSetting.DoNotSellList.Contains(&quot;Silk Cloth&quot;))&#xD;&#xA;{&#xD;&#xA;wManager.wManagerSetting.CurrentSetting.DoNotSellList.Add(&quot;Silk Cloth&quot;);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;Logging.Write(&quot;[FNV_Quester]: Loading current Quester step &quot; + (ProgressSettings.CurrentSettings.searingGorgeEins));&#xD;&#xA;&#xD;&#xA;Thread p = new Thread(() =&gt;&#xD;&#xA;{    &#xD;&#xA;ProgressSettings.inProgress = true;&#xD;&#xA;Logging.Write(&quot;[FNV_Quester]: Progress saver initialized&quot;);&#xD;&#xA; &#xD;&#xA; while(robotManager.Products.Products.IsStarted)&#xD;&#xA; {&#xD;&#xA;if(!ProgressSettings.inProgress)&#xD;&#xA;{&#xD;&#xA;ProgressSettings.Dispose();&#xD;&#xA;Logging.Write(&quot;[FNV_Quester]: Progress saver disposed&quot;);&#xD;&#xA;break;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;  if (Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause)&#xD;&#xA;  {&#xD;&#xA; if(ProgressSettings.CurrentSettings.searingGorgeEins &lt; wManager.Wow.Helpers.Quest.QuesterCurrentContext.CurrentStep)&#xD;&#xA;{&#xD;&#xA;ProgressSettings.CurrentSettings.searingGorgeEins = wManager.Wow.Helpers.Quest.QuesterCurrentContext.CurrentStep;&#xD;&#xA;ProgressSettings.CurrentSettings.Save();&#xD;&#xA;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;  Thread.Sleep(1000);&#xD;&#xA; }&#xD;&#xA;&#xD;&#xA;});&#xD;&#xA;&#xD;&#xA;p.Start();" />
    <QuestsSorted Action="Wait" NameClass="1" />
    <QuestsSorted Action="Wait" NameClass="1" />
    <QuestsSorted Action="RunCode" NameClass="FlightMaster.takeTaxi(&quot;Stormwind&quot;, &quot;Modan&quot;);" />
    <QuestsSorted Action="Pulse" NameClass="ROUTEGoToSearingGorge" />
    <QuestsSorted Action="RunCode" NameClass="FlightMaster.discoverTaxi(&quot;Searing Gorge&quot;);" />
    <QuestsSorted Action="PickUp" NameClass="CurseTheseFatFingers" />
    <QuestsSorted Action="PickUp" NameClass="FieryMenace" />
    <QuestsSorted Action="PickUp" NameClass="DivineRetribution" />
    <QuestsSorted Action="RunCode" NameClass="var position = new Vector3(-6679.93f, -1194.36f, 240.2135f);&#xD;&#xA;int npcEntryId = 8479;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;wManager.Wow.Bot.Tasks.GoToTask.ToPositionAndIntecractWithNpc(position, npcEntryId);&#xD;&#xA;System.Threading.Thread.Sleep(1000 * 2);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;" />
    <QuestsSorted Action="RunCode" NameClass="System.Threading.Thread.Sleep(1000 * 2);&#xD;&#xA;&#xD;&#xA;Usefuls.SelectGossipOption(1);&#xD;&#xA;System.Threading.Thread.Sleep(1000 * 2);&#xD;&#xA;&#xD;&#xA;Usefuls.SelectGossipOption(1);&#xD;&#xA;System.Threading.Thread.Sleep(1000 * 2);&#xD;&#xA;&#xD;&#xA;Usefuls.SelectGossipOption(1);&#xD;&#xA;System.Threading.Thread.Sleep(1000 * 2);&#xD;&#xA;&#xD;&#xA;Usefuls.SelectGossipOption(1);&#xD;&#xA;System.Threading.Thread.Sleep(1000 * 2);&#xD;&#xA;&#xD;&#xA;wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 3000);" />
    <QuestsSorted Action="TurnIn" NameClass="DivineRetribution" />
    <QuestsSorted Action="PickUp" NameClass="TheFlawlessFlame1" />
    <QuestsSorted Action="PickUp" NameClass="JOBOPPORTUNITYCullingtheCompetition1" />
    <QuestsSorted Action="PickUp" NameClass="STOLENSmithingTuyereandLookoutsSpyglass1" />
    <QuestsSorted Action="Pulse" NameClass="JOBOPPORTUNITYCullingtheCompetition1" />
    <QuestsSorted Action="Pulse" NameClass="JOBOPPORTUNITYCullingtheCompetition2" />
    <QuestsSorted Action="Pulse" NameClass="STOLENSmithingTuyereandLookoutsSpyglass1" />
    <QuestsSorted Action="Pulse" NameClass="STOLENSmithingTuyereandLookoutsSpyglass2" />
    <QuestsSorted Action="TurnIn" NameClass="JOBOPPORTUNITYCullingtheCompetition1" />
    <QuestsSorted Action="TurnIn" NameClass="STOLENSmithingTuyereandLookoutsSpyglass1" />
    <QuestsSorted Action="Pulse" NameClass="CurseTheseFatFingers" />
    <QuestsSorted Action="Pulse" NameClass="FieryMenace" />
    <QuestsSorted Action="Pulse" NameClass="TheFlawlessFlame2" />
    <QuestsSorted Action="Pulse" NameClass="TheFlawlessFlame1" />
    <QuestsSorted Action="TurnIn" NameClass="TheFlawlessFlame1" />
    <QuestsSorted Action="PickUp" NameClass="ForgingtheShaft" />
    <QuestsSorted Action="TurnIn" NameClass="FieryMenace" />
    <QuestsSorted Action="TurnIn" NameClass="CurseTheseFatFingers" />
    <QuestsSorted Action="Pulse" NameClass="ForgingtheShaft" />
    <QuestsSorted Action="TurnIn" NameClass="ForgingtheShaft" />
    <QuestsSorted Action="RunCode" NameClass="wManager.Wow.Bot.States.ToTown.ForceToTown = true;" />
    <QuestsSorted Action="Pulse" NameClass="ROUTEThoriumPointToOuthouse" />
    <QuestsSorted Action="If" NameClass="ItemsManager.GetItemCountById(11818) &gt; 0 || Quest.HasQuest(4451)" />
    <QuestsSorted Action="PickUp" NameClass="TheKeytoFreedom" />
    <QuestsSorted Action="TurnIn" NameClass="TheKeytoFreedom" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="PickUp" NameClass="Caught" />
    <QuestsSorted Action="Pulse" NameClass="Caught" />
    <QuestsSorted Action="If" NameClass="ItemsManager.GetItemCountById(4306) &lt; 15" />
    <QuestsSorted Action="Pulse" NameClass="ROUTEOuthouseGoToGrindForSilkCloth" />
    <QuestsSorted Action="Pulse" NameClass="Caught2" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="Pulse" NameClass="ROUTEGrindForSilkClothBackToOuthouse" />
    <QuestsSorted Action="TurnIn" NameClass="Caught" />
    <QuestsSorted Action="RunCode" NameClass="wManager.wManagerSetting.CurrentSetting.DoNotSellList.Remove(&quot;Silk Cloth&quot;);" />
    <QuestsSorted Action="Pulse" NameClass="GRINDGrindTo49" />
    <QuestsSorted Action="Pulse" NameClass="ROUTEOuthouseBackToThoriumPoint" />
    <QuestsSorted Action="RunCode" NameClass="FlightMaster.takeTaxi(&quot;Searing Gorge&quot;, &quot;Duskwood&quot;);" />
    <QuestsSorted Action="RunCode" NameClass="wManager.wManagerSetting.CurrentSetting.SearchRadius = 100;&#xD;&#xA;&#xD;&#xA;ProgressSettings.Dispose();&#xD;&#xA;ProgressSettings.inProgress = false;&#xD;&#xA;SearingGorgeFixedPathfinding.Dispose();&#xD;&#xA;&#xD;&#xA;FNVSettings.Initialize();&#xD;&#xA;FNVSettings.CurrentSettings.searingGorgeEins = true;&#xD;&#xA;FNVSettings.Dispose();" />
    <QuestsSorted Action="LoadProfile" NameClass="FNV_V2\#0 START_FNVLauncher_V2.xml" />
  </QuestsSorted>
  <NpcQuest>
    <NPCQuest Id="14627" Name="Hansel Heavyhands" GameObject="false">
      <PickUpQuests>
        <int>7723</int>
        <int>7724</int>
        <int>7727</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>7723</int>
        <int>7724</int>
        <int>7727</int>
      </TurnInQuests>
      <Position X="-6513.62" Y="-1183.78" Z="309.2551" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="14624" Name="Master Smith Burninate" GameObject="false">
      <PickUpQuests>
        <int>7737</int>
        <int>8242</int>
        <int>8241</int>
        <int>7736</int>
        <int>7722</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>7737</int>
        <int>8242</int>
        <int>8241</int>
        <int>7736</int>
        <int>7722</int>
      </TurnInQuests>
      <Position X="-6520.281" Y="-1187.756" Z="309.2551" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="8479" Name="Kalaran Windblade" GameObject="false">
      <PickUpQuests>
        <int>3441</int>
        <int>3443</int>
        <int>3462</int>
        <int>3452</int>
        <int>3442</int>
        <int>3453</int>
        <int>3454</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>3441</int>
        <int>3443</int>
        <int>3452</int>
        <int>3442</int>
        <int>3453</int>
      </TurnInQuests>
      <Position X="-6679.93" Y="-1194.36" Z="240.2135" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="179827" Name="Wanted/Missing/Lost &amp; Found" GameObject="true">
      <PickUpQuests>
        <int>7729</int>
        <int>7728</int>
        <int>7701</int>
      </PickUpQuests>
      <TurnInQuests />
      <Position X="-6493.8" Y="-1162.98" Z="309.189" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="14626" Name="Taskmaster Scrange" GameObject="false">
      <PickUpQuests />
      <TurnInQuests>
        <int>7729</int>
        <int>7728</int>
      </TurnInQuests>
      <Position X="-6509.16" Y="-1192.52" Z="309.2552" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="173265" Name="Wooden Outhouse" GameObject="true">
      <PickUpQuests>
        <int>4449</int>
        <int>4450</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>4449</int>
        <int>4451</int>
      </TurnInQuests>
      <Position X="-7024.78" Y="-1786.5" Z="265.828" Type="Flying" />
    </NPCQuest>
  </NpcQuest>
  <Npc>
    <Npc>
      <Position X="-9472.8" Y="-5.32661" Z="49.7947" />
      <Entry>906</Entry>
      <Name>Maximillian Crowe</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>WarlockTrainer</Type>
      <ContinentId>Azeroth</ContinentId>
    </Npc>
    <Npc>
      <Position X="-9471.67" Y="34.451" Z="63.82062" />
      <Entry>328</Entry>
      <Name>Zaldimar Wefhellt</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>MageTrainer</Type>
      <ContinentId>Azeroth</ContinentId>
    </Npc>
    <Npc>
      <Position X="-8752.3" Y="377.572" Z="101.0563" Type="Flying" />
      <Entry>918</Entry>
      <Name>Osborne the Night Man</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>RogueTrainer</Type>
      <ContinentId>Azeroth</ContinentId>
    </Npc>
    <Npc>
      <Position X="-8705.41" Y="329.59" Z="111.689" />
      <Entry>914</Entry>
      <Name>Ander Germaine</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>WarriorTrainer</Type>
      <ContinentId>Azeroth</ContinentId>
    </Npc>
    <Npc>
      <Position X="-8415" Y="553.182" Z="95.62836" />
      <Entry>5515</Entry>
      <Name>Einris Brightspear</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>HunterTrainer</Type>
      <ContinentId>Azeroth</ContinentId>
    </Npc>
    <Npc>
      <Position X="-8512" Y="862.364" Z="109.8441" />
      <Entry>376</Entry>
      <Name>High Priestess Laurena</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>PriestTrainer</Type>
      <ContinentId>Azeroth</ContinentId>
    </Npc>
    <Npc>
      <Position X="-8577" Y="881.698" Z="106.519" />
      <Entry>928</Entry>
      <Name>Lord Grayson Shadowbreaker</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>PaladinTrainer</Type>
      <ContinentId>Azeroth</ContinentId>
    </Npc>
    <Npc>
      <Position X="-8742" Y="1095.41" Z="93.711" Type="Flying" />
      <Entry>5505</Entry>
      <Name>Theridran</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>DruidTrainer</Type>
      <ContinentId>Azeroth</ContinentId>
    </Npc>
    <Npc>
      <Position X="-5035.67" Y="-1234.64" Z="507.752" />
      <Entry>5114</Entry>
      <Name>Bilban Tosslespanner</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>WarriorTrainer</Type>
      <ContinentId>Azeroth</ContinentId>
    </Npc>
    <Npc>
      <Position X="-5010.39" Y="-1274.05" Z="507.752" />
      <Entry>5116</Entry>
      <Name>Olmin Burningbeard</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>HunterTrainer</Type>
      <ContinentId>Azeroth</ContinentId>
    </Npc>
    <Npc>
      <Position X="-4650.12" Y="-1120.8" Z="508.5507" />
      <Entry>5167</Entry>
      <Name>Fenthwick</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>RogueTrainer</Type>
      <ContinentId>Azeroth</ContinentId>
    </Npc>
    <Npc>
      <Position X="-4608.55" Y="-1109.55" Z="511.6082" />
      <Entry>5173</Entry>
      <Name>Alexander Calder</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>WarlockTrainer</Type>
      <ContinentId>Azeroth</ContinentId>
    </Npc>
    <Npc>
      <Position X="-4604.94" Y="-921.489" Z="501.0735" />
      <Entry>5145</Entry>
      <Name>Juli Stormkettle</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>MageTrainer</Type>
      <ContinentId>Azeroth</ContinentId>
    </Npc>
    <Npc>
      <Position X="-4612.25" Y="-909.152" Z="501.062" />
      <Entry>11406</Entry>
      <Name>High Priest Rohan</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>PriestTrainer</Type>
      <ContinentId>Azeroth</ContinentId>
    </Npc>
    <Npc>
      <Position X="-4592.85" Y="-907.687" Z="502.7669" />
      <Entry>5148</Entry>
      <Name>Beldruk Doombrow</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>PaladinTrainer</Type>
      <ContinentId>Azeroth</ContinentId>
    </Npc>
    <Npc>
      <Position X="-6524.04" Y="-1188.72" Z="309.2563" Type="Flying" />
      <Entry>14624</Entry>
      <Name>Master Smith Burninate</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>Vendor</Type>
      <ContinentId>Azeroth</ContinentId>
    </Npc>
    <Npc>
      <Position X="-6524.04" Y="-1188.72" Z="309.2563" Type="Flying" />
      <Entry>14624</Entry>
      <Name>Master Smith Burninate</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>Repair</Type>
      <ContinentId>Azeroth</ContinentId>
    </Npc>
  </Npc>
  <EasyQuests>
    <EasyQuest>
      <Name>Curse These Fat Fingers</Name>
      <QuestId>
        <int>7723</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="-6692.18" Y="-1388.65" Z="240.7585" />
          <Vector3 X="-6724.103" Y="-1142.142" Z="244.9858" />
          <Vector3 X="-6788.979" Y="-1028.951" Z="244.05" />
          <Vector3 X="-6886.727" Y="-999.5573" Z="242.2933" />
          <Vector3 X="-6997.038" Y="-1051.166" Z="241.6677" />
          <Vector3 X="-6912.484" Y="-1250.623" Z="178.4363" />
        </HotSpots>
        <EntryTarget>
          <int>5854</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>true</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Fiery Menace!</Name>
      <QuestId>
        <int>7724</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="-7201.158" Y="-973.7694" Z="244.4574" />
          <Vector3 X="-6994.05" Y="-1002.432" Z="241.6668" />
          <Vector3 X="-6867.555" Y="-910.0649" Z="241.7068" />
          <Vector3 X="-6765.096" Y="-956.2848" Z="242.1918" />
          <Vector3 X="-6694.994" Y="-1038.679" Z="242.5072" />
        </HotSpots>
        <EntryTarget>
          <int>5858</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>true</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Incendosaurs? Whateverosaur is More Like It</Name>
      <QuestId>
        <int>7727</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="-6637.771" Y="-1471.094" Z="167.6603" />
          <Vector3 X="-6528.385" Y="-1461.082" Z="147.8071" />
          <Vector3 X="-6462.46" Y="-1413.151" Z="145.5881" />
          <Vector3 X="-6420.333" Y="-1336.324" Z="137.5408" />
          <Vector3 X="-6498.784" Y="-1298.593" Z="136.3202" />
          <Vector3 X="-6480.929" Y="-1439.487" Z="151.3727" />
          <Vector3 X="-6657.496" Y="-1467.222" Z="168.0714" />
          <Vector3 X="-6409.83" Y="-1336.914" Z="136.0645" />
        </HotSpots>
        <EntryTarget>
          <int>9318</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>true</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>What the Flux?</Name>
      <QuestId>
        <int>7722</int>
      </QuestId>
      <QuestType>Gatherer</QuestType>
      <QuestClass xsi:type="GathererEasyQuestClass">
        <HotSpots />
        <EntryIdObjects />
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>true</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Divine Retribution</Name>
      <QuestId>
        <int>3441</int>
      </QuestId>
      <QuestType>None</QuestType>
      <QuestClass />
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>true</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>The Flawless Flame1</Name>
      <QuestId>
        <int>3442</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="-6750.359" Y="-1015.057" Z="237.7801" />
          <Vector3 X="-7239.335" Y="-990.8987" Z="242.1202" />
          <Vector3 X="-7025.109" Y="-1490.858" Z="238.6563" />
          <Vector3 X="-6745.384" Y="-1648.29" Z="192.0758" />
          <Vector3 X="-6770.264" Y="-1598.888" Z="189.6382" />
          <Vector3 X="-6827.731" Y="-1370.355" Z="169.4042" />
        </HotSpots>
        <EntryTarget>
          <int>5852</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>true</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>The Flawless Flame2</Name>
      <QuestId>
        <int>3442</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="-6716.659" Y="-1184.72" Z="240.4" />
          <Vector3 X="-6674.325" Y="-1270.524" Z="239.5175" />
          <Vector3 X="-6902.218" Y="-866.6324" Z="250.8284" />
          <Vector3 X="-7056.788" Y="-1007.795" Z="239.4012" />
          <Vector3 X="-7213.718" Y="-1016.813" Z="239.4457" />
          <Vector3 X="-7022.699" Y="-1353.368" Z="239.5087" />
          <Vector3 X="-6665.333" Y="-1451.469" Z="244.99" />
          <Vector3 X="-7215.24" Y="-1624.088" Z="246.6387" />
        </HotSpots>
        <EntryTarget>
          <int>5855</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>true</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Forging the Shaft</Name>
      <QuestId>
        <int>3443</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="-6687.62" Y="-1422.202" Z="241.9684" />
          <Vector3 X="-6871.339" Y="-1281.464" Z="242.5821" />
          <Vector3 X="-6850.614" Y="-1180.313" Z="241.1613" />
          <Vector3 X="-6895.144" Y="-1066.463" Z="240.0145" />
          <Vector3 X="-6962.053" Y="-1517.804" Z="245.1316" />
        </HotSpots>
        <EntryTarget>
          <int>5846</int>
          <int>5840</int>
          <int>5844</int>
          <int>8566</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>true</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTEGoToIcendosaur</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="-6650.448" Y="-1162.734" Z="244.2354" />
          <Vector3 X="-6654.731" Y="-1173.986" Z="244.0371" />
          <Vector3 X="-6660.906" Y="-1186.323" Z="243.1426" />
          <Vector3 X="-6666.574" Y="-1195.159" Z="242.2348" />
          <Vector3 X="-6672.5" Y="-1203.827" Z="241.2714" />
          <Vector3 X="-6678.494" Y="-1212.447" Z="240.4079" />
          <Vector3 X="-6684.547" Y="-1221.027" Z="240.0326" />
          <Vector3 X="-6690.463" Y="-1229.7" Z="240.8211" />
          <Vector3 X="-6696.236" Y="-1238.471" Z="241.1528" />
          <Vector3 X="-6702.139" Y="-1247.154" Z="240.3726" />
          <Vector3 X="-6708.419" Y="-1255.568" Z="241.0777" />
          <Vector3 X="-6714.836" Y="-1263.879" Z="242.95" />
          <Vector3 X="-6721.356" Y="-1272.109" Z="244.0421" />
          <Vector3 X="-6728.301" Y="-1279.979" Z="243.8769" />
          <Vector3 X="-6735.025" Y="-1288.042" Z="242.8325" />
          <Vector3 X="-6741.202" Y="-1296.532" Z="242.1148" />
          <Vector3 X="-6747.035" Y="-1305.258" Z="241.7843" />
          <Vector3 X="-6752.511" Y="-1314.217" Z="241.0119" />
          <Vector3 X="-6757.324" Y="-1323.544" Z="240.5563" />
          <Vector3 X="-6760.84" Y="-1331.311" Z="240.6317" />
          <Vector3 X="-6761.138" Y="-1336.885" Z="240.9006" />
          <Vector3 X="-6761.089" Y="-1347.385" Z="241.1577" />
          <Vector3 X="-6761.072" Y="-1357.885" Z="240.8947" />
          <Vector3 X="-6761.206" Y="-1360.169" Z="240.7973" />
          <Vector3 X="-6760.63" Y="-1362.73" Z="240.7479" />
          <Vector3 X="-6760.487" Y="-1366.252" Z="240.6713" />
          <Vector3 X="-6763.238" Y="-1368.882" Z="240.4592" />
          <Vector3 X="-6766.936" Y="-1370.766" Z="240.004" />
          <Vector3 X="-6769.931" Y="-1372.361" Z="237.6432" />
          <Vector3 X="-6773.05" Y="-1374.169" Z="234.955" />
          <Vector3 X="-6775.988" Y="-1375.872" Z="230.0571" />
          <Vector3 X="-6779.016" Y="-1377.627" Z="220.2572" />
          <Vector3 X="-6782.282" Y="-1379.08" Z="215.7837" />
          <Vector3 X="-6785.529" Y="-1380.635" Z="214.2408" />
          <Vector3 X="-6788.676" Y="-1381.908" Z="213.0671" />
          <Vector3 X="-6792.024" Y="-1383.243" Z="209.9155" />
          <Vector3 X="-6795.18" Y="-1384.496" Z="206.7671" />
          <Vector3 X="-6798.457" Y="-1385.958" Z="201.0649" />
          <Vector3 X="-6800.691" Y="-1388.49" Z="200.738" />
          <Vector3 X="-6802.308" Y="-1391.591" Z="200.5853" />
          <Vector3 X="-6802.985" Y="-1393.317" Z="200.5096" />
          <Vector3 X="-6803.248" Y="-1389.805" Z="200.5351" />
          <Vector3 X="-6801.141" Y="-1387.132" Z="200.7777" />
          <Vector3 X="-6797.909" Y="-1385.815" Z="200.918" />
          <Vector3 X="-6794.557" Y="-1384.813" Z="200.3143" />
          <Vector3 X="-6784.768" Y="-1382.053" Z="198.4101" />
          <Vector3 X="-6778.75" Y="-1381.87" Z="197.2343" />
          <Vector3 X="-6775.497" Y="-1381.778" Z="196.6245" />
          <Vector3 X="-6767.954" Y="-1380.417" Z="195.3765" />
          <Vector3 X="-6763.097" Y="-1379.541" Z="194.8965" />
          <Vector3 X="-6753.418" Y="-1377.796" Z="193.7108" />
          <Vector3 X="-6740.47" Y="-1375.767" Z="191.2156" />
          <Vector3 X="-6731.404" Y="-1377.636" Z="187.6315" />
          <Vector3 X="-6724.43" Y="-1384.547" Z="184.221" />
          <Vector3 X="-6715.542" Y="-1397.037" Z="183.5207" />
          <Vector3 X="-6703.436" Y="-1410.351" Z="178.1684" />
          <Vector3 X="-6691.954" Y="-1422.842" Z="171.6725" />
          <Vector3 X="-6684.191" Y="-1434.076" Z="169.4628" />
          <Vector3 X="-6675.108" Y="-1449.034" Z="168.1595" />
          <Vector3 X="-6671.432" Y="-1455.114" Z="167.8738" />
          <Vector3 X="-6663.867" Y="-1463.038" Z="167.608" />
          <Vector3 X="-6651.829" Y="-1469.351" Z="168.0073" />
          <Vector3 X="-6637.809" Y="-1473.869" Z="167.5975" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTESaurBackToThoriumPoint</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="-6637.809" Y="-1473.869" Z="167.5975" />
          <Vector3 X="-6642.319" Y="-1471.954" Z="167.7656" />
          <Vector3 X="-6658.277" Y="-1466.173" Z="168.0927" />
          <Vector3 X="-6670.868" Y="-1452.943" Z="167.4754" />
          <Vector3 X="-6680.501" Y="-1438.333" Z="168.2781" />
          <Vector3 X="-6690.814" Y="-1424.908" Z="170.794" />
          <Vector3 X="-6702.906" Y="-1411.499" Z="177.7316" />
          <Vector3 X="-6714.572" Y="-1398.471" Z="183.3161" />
          <Vector3 X="-6722.826" Y="-1384.329" Z="182.8402" />
          <Vector3 X="-6734.609" Y="-1371.283" Z="189.2319" />
          <Vector3 X="-6751.264" Y="-1371.592" Z="194.1066" />
          <Vector3 X="-6768.661" Y="-1376.306" Z="195.8085" />
          <Vector3 X="-6785.958" Y="-1381.49" Z="198.4404" />
          <Vector3 X="-6802.065" Y="-1386.681" Z="200.7326" />
          <Vector3 X="-6804.186" Y="-1393.866" Z="200.4079" />
          <Vector3 X="-6805.819" Y="-1406.859" Z="201.3785" />
          <Vector3 X="-6799.651" Y="-1421.809" Z="204.7339" />
          <Vector3 X="-6795.157" Y="-1428.018" Z="206.2812" />
          <Vector3 X="-6785.002" Y="-1438.719" Z="206.3132" />
          <Vector3 X="-6782.879" Y="-1441.232" Z="206.1414" />
          <Vector3 X="-6776.581" Y="-1453.342" Z="204.1407" />
          <Vector3 X="-6768.325" Y="-1469.405" Z="199.8604" />
          <Vector3 X="-6760.583" Y="-1484.471" Z="191.1771" />
          <Vector3 X="-6756.115" Y="-1493.165" Z="184.1103" />
          <Vector3 X="-6752.632" Y="-1502.954" Z="186.8811" />
          <Vector3 X="-6748.63" Y="-1513.714" Z="190.502" />
          <Vector3 X="-6743.283" Y="-1530.67" Z="194.8204" />
          <Vector3 X="-6735.331" Y="-1556.566" Z="193.0181" />
          <Vector3 X="-6727.823" Y="-1580.841" Z="192.5573" />
          <Vector3 X="-6718.146" Y="-1605.984" Z="193.362" />
          <Vector3 X="-6700.098" Y="-1623.741" Z="204.1535" />
          <Vector3 X="-6681.439" Y="-1642.996" Z="220.3288" />
          <Vector3 X="-6673.096" Y="-1666.918" Z="229.666" />
          <Vector3 X="-6672.965" Y="-1693.044" Z="238.8614" />
          <Vector3 X="-6678.927" Y="-1718.521" Z="250.6619" />
          <Vector3 X="-6671.129" Y="-1743.218" Z="259.8976" />
          <Vector3 X="-6666.176" Y="-1751.694" Z="259.743" />
          <Vector3 X="-6657.586" Y="-1761.234" Z="258.7914" />
          <Vector3 X="-6633.168" Y="-1767.147" Z="248.6543" />
          <Vector3 X="-6611.145" Y="-1752.418" Z="244.1438" />
          <Vector3 X="-6602.545" Y="-1729.111" Z="244.673" />
          <Vector3 X="-6608.431" Y="-1702.943" Z="244.3398" />
          <Vector3 X="-6614.971" Y="-1678.438" Z="244.7071" />
          <Vector3 X="-6620.907" Y="-1652.015" Z="245.8416" />
          <Vector3 X="-6630.768" Y="-1628.921" Z="244.1532" />
          <Vector3 X="-6641.104" Y="-1603.903" Z="244.4535" />
          <Vector3 X="-6648.079" Y="-1579.471" Z="244.4595" />
          <Vector3 X="-6657.54" Y="-1554.331" Z="243.6712" />
          <Vector3 X="-6672.73" Y="-1533.963" Z="242.6908" />
          <Vector3 X="-6689.198" Y="-1512.456" Z="243.1265" />
          <Vector3 X="-6701.771" Y="-1490.434" Z="241.0037" />
          <Vector3 X="-6711.82" Y="-1465.297" Z="240.1772" />
          <Vector3 X="-6721.364" Y="-1441.772" Z="240.1348" />
          <Vector3 X="-6732.842" Y="-1417.236" Z="240.614" />
          <Vector3 X="-6741.496" Y="-1393.382" Z="242.3625" />
          <Vector3 X="-6747.055" Y="-1366.897" Z="241.3829" />
          <Vector3 X="-6748.146" Y="-1341.685" Z="242.5285" />
          <Vector3 X="-6738.783" Y="-1316.447" Z="241.339" />
          <Vector3 X="-6727.365" Y="-1293.746" Z="241.704" />
          <Vector3 X="-6715.571" Y="-1270.296" Z="242.9763" />
          <Vector3 X="-6703.432" Y="-1247.041" Z="240.2365" />
          <Vector3 X="-6687.753" Y="-1224.999" Z="240.1976" />
          <Vector3 X="-6673.065" Y="-1204.265" Z="241.1756" />
          <Vector3 X="-6668.787" Y="-1198.224" Z="241.8804" />
          <Vector3 X="-6661.713" Y="-1188.18" Z="243.0258" />
          <Vector3 X="-6649.921" Y="-1163.844" Z="244.2731" />
          <Vector3 X="-6640.207" Y="-1140.364" Z="245.2517" />
          <Vector3 X="-6637.698" Y="-1134.3" Z="244.8467" />
          <Vector3 X="-6627.35" Y="-1108.417" Z="244.3947" />
          <Vector3 X="-6623.341" Y="-1095.92" Z="244.3302" />
          <Vector3 X="-6616.25" Y="-1071.523" Z="245.2199" />
          <Vector3 X="-6612.407" Y="-1055.271" Z="245.0738" />
          <Vector3 X="-6608.175" Y="-1030.216" Z="244.5927" />
          <Vector3 X="-6604.96" Y="-1023.718" Z="244.5662" />
          <Vector3 X="-6599.32" Y="-1029.653" Z="248.4705" />
          <Vector3 X="-6581.835" Y="-1050.083" Z="262.4468" />
          <Vector3 X="-6560.156" Y="-1063.081" Z="271.8474" />
          <Vector3 X="-6534.672" Y="-1072.208" Z="281.4973" />
          <Vector3 X="-6512.445" Y="-1078.006" Z="289.5692" />
          <Vector3 X="-6490.87" Y="-1092.392" Z="297.9088" />
          <Vector3 X="-6481.512" Y="-1115.966" Z="305.106" />
          <Vector3 X="-6491.334" Y="-1140.114" Z="307.454" />
          <Vector3 X="-6505.987" Y="-1161.888" Z="308.2827" />
          <Vector3 X="-6508.319" Y="-1165.254" Z="308.5034" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTEGoToSearingGorge</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="-5368.881" Y="-3082.195" Z="350.1786" />
          <Vector3 X="-5381" Y="-3086.949" Z="352.1922" />
          <Vector3 X="-5400.022" Y="-3093.832" Z="350.3175" />
          <Vector3 X="-5425.892" Y="-3101.87" Z="352.2012" />
          <Vector3 X="-5456.016" Y="-3110.832" Z="349.1772" />
          <Vector3 X="-5490.346" Y="-3121.943" Z="347.5659" />
          <Vector3 X="-5521.191" Y="-3135.847" Z="345.7788" />
          <Vector3 X="-5551.454" Y="-3153.422" Z="339.67" />
          <Vector3 X="-5581.412" Y="-3171.519" Z="330.2286" />
          <Vector3 X="-5612.123" Y="-3188.297" Z="324.4341" />
          <Vector3 X="-5642.46" Y="-3205.618" Z="326.2633" />
          <Vector3 X="-5673.71" Y="-3223.711" Z="319.0561" />
          <Vector3 X="-5703.092" Y="-3240.579" Z="310.2776" />
          <Vector3 X="-5733.728" Y="-3257.498" Z="308.9935" />
          <Vector3 X="-5764.875" Y="-3273.461" Z="306.3389" />
          <Vector3 X="-5796.636" Y="-3288.163" Z="298.0524" />
          <Vector3 X="-5830.483" Y="-3294.822" Z="294.5222" />
          <Vector3 X="-5866.433" Y="-3291.343" Z="292.1434" />
          <Vector3 X="-5900.183" Y="-3288.401" Z="287.8138" />
          <Vector3 X="-5936.14" Y="-3290.93" Z="279.5102" />
          <Vector3 X="-5969.254" Y="-3298.087" Z="271.9138" />
          <Vector3 X="-6004.18" Y="-3307.287" Z="264.4543" />
          <Vector3 X="-6036.65" Y="-3316.956" Z="258.7831" />
          <Vector3 X="-6068.779" Y="-3330.667" Z="255.8768" />
          <Vector3 X="-6100.448" Y="-3345.562" Z="254.374" />
          <Vector3 X="-6132.966" Y="-3361.269" Z="249.5366" />
          <Vector3 X="-6162.736" Y="-3377.441" Z="243.4045" />
          <Vector3 X="-6194.753" Y="-3391.458" Z="239.1886" />
          <Vector3 X="-6229.213" Y="-3397.106" Z="239.1604" />
          <Vector3 X="-6265.164" Y="-3399.828" Z="239.1655" />
          <Vector3 X="-6297.961" Y="-3392.134" Z="241.9677" />
          <Vector3 X="-6331.465" Y="-3378.694" Z="241.3815" />
          <Vector3 X="-6360.191" Y="-3360.823" Z="241.6683" />
          <Vector3 X="-6391.417" Y="-3342.721" Z="241.6669" />
          <Vector3 X="-6408.768" Y="-3333.455" Z="241.6669" />
          <Vector3 X="-6415.495" Y="-3329.855" Z="241.6669" />
          <Vector3 X="-6446.052" Y="-3312.79" Z="241.6669" />
          <Vector3 X="-6478.892" Y="-3301.104" Z="241.6669" />
          <Vector3 X="-6512.784" Y="-3292.367" Z="241.7633" />
          <Vector3 X="-6546.502" Y="-3282.989" Z="241.828" />
          <Vector3 X="-6579.847" Y="-3272.353" Z="241.7256" />
          <Vector3 X="-6613.16" Y="-3261.718" Z="241.1935" />
          <Vector3 X="-6646.502" Y="-3251.074" Z="241.0407" />
          <Vector3 X="-6680.552" Y="-3243.062" Z="240.7441" />
          <Vector3 X="-6714.146" Y="-3233.505" Z="240.744" />
          <Vector3 X="-6741.266" Y="-3211.903" Z="240.744" />
          <Vector3 X="-6759.513" Y="-3182.104" Z="240.744" />
          <Vector3 X="-6776.507" Y="-3151.507" Z="240.744" />
          <Vector3 X="-6792.122" Y="-3120.192" Z="240.6602" />
          <Vector3 X="-6805.443" Y="-3086.636" Z="240.8907" />
          <Vector3 X="-6815.075" Y="-3054.204" Z="241.6657" />
          <Vector3 X="-6826.672" Y="-3020.212" Z="241.6657" />
          <Vector3 X="-6846.616" Y="-2992.835" Z="243.5006" />
          <Vector3 X="-6868.136" Y="-2963.828" Z="242.9149" />
          <Vector3 X="-6877.512" Y="-2932.398" Z="243.4831" />
          <Vector3 X="-6872.472" Y="-2897.766" Z="242.3512" />
          <Vector3 X="-6873.504" Y="-2862.999" Z="242.27" />
          <Vector3 X="-6879.112" Y="-2828.474" Z="241.6671" />
          <Vector3 X="-6874.094" Y="-2794.106" Z="241.7" />
          <Vector3 X="-6868.313" Y="-2778.853" Z="241.6927" />
          <Vector3 X="-6865.614" Y="-2775.364" Z="241.8437" />
          <Vector3 X="-6848.405" Y="-2757.316" Z="242.3318" />
          <Vector3 X="-6840.855" Y="-2750.959" Z="241.7117" />
          <Vector3 X="-6815.322" Y="-2727.121" Z="241.715" />
          <Vector3 X="-6795.719" Y="-2698.147" Z="241.7686" />
          <Vector3 X="-6777.65" Y="-2668.172" Z="241.6667" />
          <Vector3 X="-6758.467" Y="-2637.568" Z="242.9113" />
          <Vector3 X="-6752.275" Y="-2626.282" Z="243.3772" />
          <Vector3 X="-6762.477" Y="-2601.232" Z="242.0826" />
          <Vector3 X="-6768.971" Y="-2595.418" Z="241.6781" />
          <Vector3 X="-6761.196" Y="-2572.639" Z="242.0286" />
          <Vector3 X="-6753.354" Y="-2539.972" Z="242.2521" />
          <Vector3 X="-6756.455" Y="-2530.053" Z="241.6731" />
          <Vector3 X="-6778.589" Y="-2512.256" Z="242.8959" />
          <Vector3 X="-6794.247" Y="-2502.18" Z="242.3221" />
          <Vector3 X="-6810.299" Y="-2490.909" Z="245.9523" />
          <Vector3 X="-6814.204" Y="-2483.079" Z="249.0365" />
          <Vector3 X="-6820.943" Y="-2475.868" Z="247.3031" />
          <Vector3 X="-6842.032" Y="-2448.246" Z="244.3044" />
          <Vector3 X="-6842.125" Y="-2421.996" Z="244.8752" />
          <Vector3 X="-6846.759" Y="-2388.656" Z="246.8338" />
          <Vector3 X="-6855.731" Y="-2372.626" Z="246.144" />
          <Vector3 X="-6876.396" Y="-2347.188" Z="242.8891" />
          <Vector3 X="-6890.754" Y="-2326.497" Z="241.5601" />
          <Vector3 X="-6903.239" Y="-2295.069" Z="243.8218" />
          <Vector3 X="-6914.377" Y="-2262.08" Z="240.7443" />
          <Vector3 X="-6908.507" Y="-2227.75" Z="245.6684" />
          <Vector3 X="-6909.152" Y="-2192.92" Z="256.3032" />
          <Vector3 X="-6916.689" Y="-2158.798" Z="266.5458" />
          <Vector3 X="-6925.956" Y="-2125.117" Z="279.136" />
          <Vector3 X="-6936.95" Y="-2091.913" Z="282.4891" />
          <Vector3 X="-6944.599" Y="-2058.032" Z="282.8284" />
          <Vector3 X="-6944.92" Y="-2023.079" Z="282.4776" />
          <Vector3 X="-6938.473" Y="-1988.682" Z="282.4776" />
          <Vector3 X="-6933.625" Y="-1965.096" Z="282.6029" />
          <Vector3 X="-6930.843" Y="-1955.626" Z="283.0231" />
          <Vector3 X="-6928.061" Y="-1946.157" Z="280.1203" />
          <Vector3 X="-6920.599" Y="-1913.162" Z="268.6217" />
          <Vector3 X="-6917.472" Y="-1903.804" Z="265.5724" />
          <Vector3 X="-6908.723" Y="-1880.172" Z="258.0139" />
          <Vector3 X="-6896.771" Y="-1854.39" Z="249.6732" />
          <Vector3 X="-6885.42" Y="-1845.894" Z="246.2373" />
          <Vector3 X="-6861.848" Y="-1841.133" Z="241.3565" />
          <Vector3 X="-6829.212" Y="-1848.959" Z="244.1664" />
          <Vector3 X="-6795.515" Y="-1861.965" Z="244.1448" />
          <Vector3 X="-6763.39" Y="-1872.713" Z="244.1947" />
          <Vector3 X="-6729.586" Y="-1885.434" Z="244.144" />
          <Vector3 X="-6697.132" Y="-1893.647" Z="244.144" />
          <Vector3 X="-6684.247" Y="-1891.35" Z="244.144" />
          <Vector3 X="-6669.723" Y="-1881.664" Z="244.2611" />
          <Vector3 X="-6655.552" Y="-1862.289" Z="244.9631" />
          <Vector3 X="-6644.33" Y="-1843.565" Z="247.2149" />
          <Vector3 X="-6628.258" Y="-1821.442" Z="245.8841" />
          <Vector3 X="-6610.446" Y="-1793.054" Z="244.1442" />
          <Vector3 X="-6602.983" Y="-1758.858" Z="244.1447" />
          <Vector3 X="-6598.604" Y="-1724.219" Z="244.1439" />
          <Vector3 X="-6611.725" Y="-1692.19" Z="244.9062" />
          <Vector3 X="-6619.572" Y="-1658.203" Z="246.6005" />
          <Vector3 X="-6623.198" Y="-1644.419" Z="244.3255" />
          <Vector3 X="-6625.932" Y="-1637.295" Z="244.1867" />
          <Vector3 X="-6640.391" Y="-1607.823" Z="244.4532" />
          <Vector3 X="-6651.034" Y="-1581.505" Z="244.3688" />
          <Vector3 X="-6652.932" Y="-1571.819" Z="244.0472" />
          <Vector3 X="-6657.5" Y="-1538.257" Z="244.3992" />
          <Vector3 X="-6660.684" Y="-1514.4" Z="244.4539" />
          <Vector3 X="-6684.926" Y="-1489.222" Z="242.3557" />
          <Vector3 X="-6705.029" Y="-1460.742" Z="240.6277" />
          <Vector3 X="-6723.096" Y="-1430.766" Z="240.2707" />
          <Vector3 X="-6739.309" Y="-1399.782" Z="242.2059" />
          <Vector3 X="-6750.019" Y="-1366.595" Z="241.3332" />
          <Vector3 X="-6747.126" Y="-1332.223" Z="241.5876" />
          <Vector3 X="-6732.107" Y="-1300.735" Z="241.8526" />
          <Vector3 X="-6714.512" Y="-1270.486" Z="242.746" />
          <Vector3 X="-6696.922" Y="-1240.246" Z="241.1286" />
          <Vector3 X="-6693.086" Y="-1233.651" Z="241.1396" />
          <Vector3 X="-6678.782" Y="-1207.861" Z="240.3851" />
          <Vector3 X="-6662.858" Y="-1176.793" Z="242.6677" />
          <Vector3 X="-6660.357" Y="-1171.939" Z="243.2684" />
          <Vector3 X="-6661.761" Y="-1164.44" Z="243.4966" />
          <Vector3 X="-6643.545" Y="-1133.322" Z="244.4531" />
          <Vector3 X="-6626.716" Y="-1102.644" Z="244.2204" />
          <Vector3 X="-6615.789" Y="-1069.668" Z="245.257" />
          <Vector3 X="-6608.684" Y="-1035.444" Z="245.3691" />
          <Vector3 X="-6604.542" Y="-1020.307" Z="244.8449" />
          <Vector3 X="-6603.214" Y="-994.1004" Z="244.1179" />
          <Vector3 X="-6603.457" Y="-966.7459" Z="244.1494" />
          <Vector3 X="-6604.15" Y="-956.9016" Z="244.5269" />
          <Vector3 X="-6595.005" Y="-1030.47" Z="251.3198" />
          <Vector3 X="-6592.847" Y="-1034.908" Z="254.497" />
          <Vector3 X="-6585.823" Y="-1044.819" Z="260.4974" />
          <Vector3 X="-6564.337" Y="-1059.797" Z="269.8153" />
          <Vector3 X="-6540.001" Y="-1069.508" Z="279.5809" />
          <Vector3 X="-6514.478" Y="-1075.559" Z="288.3852" />
          <Vector3 X="-6492.85" Y="-1085.001" Z="295.8984" />
          <Vector3 X="-6486.164" Y="-1098.151" Z="300.3405" />
          <Vector3 X="-6483.969" Y="-1104.317" Z="301.9892" />
          <Vector3 X="-6490.532" Y="-1121.983" Z="305.5594" />
          <Vector3 X="-6493.11" Y="-1128.922" Z="306.2846" />
          <Vector3 X="-6504.218" Y="-1152.594" Z="307.8384" />
          <Vector3 X="-6512.486" Y="-1158.951" Z="308.1078" />
          <Vector3 X="-6535.191" Y="-1165.802" Z="309.2553" />
          <Vector3 X="-6545.773" Y="-1167.451" Z="309.256" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>JOB OPPORTUNITY: Culling the Competition1</Name>
      <QuestId>
        <int>7729</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="-6789.963" Y="-1085.573" Z="242.9369" />
          <Vector3 X="-6682.65" Y="-1345.57" Z="247.9507" />
          <Vector3 X="-6693.95" Y="-1419.49" Z="242.2779" />
          <Vector3 X="-6904.858" Y="-1328.246" Z="178.3199" />
          <Vector3 X="-6912.338" Y="-1254.726" Z="178.5574" />
          <Vector3 X="-6865.524" Y="-1225.495" Z="176.5951" />
          <Vector3 X="-6764.788" Y="-1188.495" Z="186.6247" />
          <Vector3 X="-6728.102" Y="-1246.617" Z="182.6585" />
        </HotSpots>
        <EntryTarget>
          <int>5846</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>true</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>JOB OPPORTUNITY: Culling the Competition2</Name>
      <QuestId>
        <int>7729</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="-6871.333" Y="-1284.278" Z="242.8953" />
          <Vector3 X="-6844.536" Y="-1375.809" Z="168.9324" />
          <Vector3 X="-6857.178" Y="-1197.08" Z="181.4068" />
          <Vector3 X="-6764.788" Y="-1188.495" Z="186.6247" />
          <Vector3 X="-6728.102" Y="-1246.617" Z="182.6585" />
        </HotSpots>
        <EntryTarget>
          <int>5844</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>true</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>STOLEN: Smithing Tuyere and Lookout's Spyglass1</Name>
      <QuestId>
        <int>7728</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="-6846.154" Y="-1234.306" Z="240.6791" />
        </HotSpots>
        <EntryTarget>
          <int>5840</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>true</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>STOLEN: Smithing Tuyere and Lookout's Spyglass2</Name>
      <QuestId>
        <int>7728</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="-6932.923" Y="-1033.236" Z="243.1224" />
          <Vector3 X="-6984.888" Y="-1500.635" Z="241.7879" />
        </HotSpots>
        <EntryTarget>
          <int>8566</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>true</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>The Key to Freedom</Name>
      <QuestId>
        <int>4451</int>
      </QuestId>
      <QuestType>None</QuestType>
      <QuestClass />
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>true</PickUpQuestOnItem>
      <PickUpQuestOnItemID>11818</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTEThoriumPointToOuthouse</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="-6511.914" Y="-1165.57" Z="308.5357" />
          <Vector3 X="-6506.049" Y="-1158.215" Z="308.0374" />
          <Vector3 X="-6498.81" Y="-1148.876" Z="307.8934" />
          <Vector3 X="-6490.101" Y="-1133.731" Z="306.6637" />
          <Vector3 X="-6484.961" Y="-1117.09" Z="304.9331" />
          <Vector3 X="-6485.021" Y="-1099.635" Z="300.8143" />
          <Vector3 X="-6492.935" Y="-1085.31" Z="295.9213" />
          <Vector3 X="-6509.1" Y="-1078.685" Z="290.6175" />
          <Vector3 X="-6526.792" Y="-1075.143" Z="284.0805" />
          <Vector3 X="-6543.355" Y="-1071.736" Z="278.6043" />
          <Vector3 X="-6558.699" Y="-1063.371" Z="272.4105" />
          <Vector3 X="-6574.4" Y="-1055.759" Z="265.8864" />
          <Vector3 X="-6588.653" Y="-1049.021" Z="260.0768" />
          <Vector3 X="-6590.735" Y="-1043.5" Z="258.1116" />
          <Vector3 X="-6594.725" Y="-1033.792" Z="253.1006" />
          <Vector3 X="-6599.099" Y="-1024.326" Z="246.1368" />
          <Vector3 X="-6608.732" Y="-1024.613" Z="244.2991" />
          <Vector3 X="-6614.329" Y="-1033.119" Z="244.3299" />
          <Vector3 X="-6615.074" Y="-1046.873" Z="244.4136" />
          <Vector3 X="-6616.56" Y="-1064.263" Z="244.9966" />
          <Vector3 X="-6616.899" Y="-1081.711" Z="245.0305" />
          <Vector3 X="-6623.303" Y="-1097.938" Z="244.3059" />
          <Vector3 X="-6631.598" Y="-1113.347" Z="244.2428" />
          <Vector3 X="-6638.988" Y="-1129.186" Z="244.4531" />
          <Vector3 X="-6643.261" Y="-1146.131" Z="245.016" />
          <Vector3 X="-6647.134" Y="-1163.166" Z="244.5161" />
          <Vector3 X="-6651.197" Y="-1180.152" Z="244.42" />
          <Vector3 X="-6656.178" Y="-1196.922" Z="244.3479" />
          <Vector3 X="-6662.576" Y="-1213.194" Z="243.3888" />
          <Vector3 X="-6673.63" Y="-1226.584" Z="241.2462" />
          <Vector3 X="-6683.74" Y="-1235.709" Z="242.1321" />
          <Vector3 X="-6682.143" Y="-1244.846" Z="242.9231" />
          <Vector3 X="-6678.83" Y="-1262.024" Z="239.5466" />
          <Vector3 X="-6674.796" Y="-1279.053" Z="239.5533" />
          <Vector3 X="-6670.469" Y="-1295.998" Z="242.7151" />
          <Vector3 X="-6664.195" Y="-1312.332" Z="242.4708" />
          <Vector3 X="-6659.167" Y="-1329.059" Z="243.2831" />
          <Vector3 X="-6656.748" Y="-1346.326" Z="246.0332" />
          <Vector3 X="-6658.146" Y="-1364.305" Z="247.9616" />
          <Vector3 X="-6659.435" Y="-1381.196" Z="244.9163" />
          <Vector3 X="-6660.452" Y="-1398.663" Z="242.7564" />
          <Vector3 X="-6661.744" Y="-1416.108" Z="243.048" />
          <Vector3 X="-6665.454" Y="-1433.174" Z="243.5535" />
          <Vector3 X="-6671.269" Y="-1449.679" Z="243.1771" />
          <Vector3 X="-6674.603" Y="-1466.77" Z="244.4816" />
          <Vector3 X="-6674.349" Y="-1484.26" Z="243.5949" />
          <Vector3 X="-6672.314" Y="-1501.6" Z="241.957" />
          <Vector3 X="-6667.39" Y="-1518.39" Z="243.5441" />
          <Vector3 X="-6662.132" Y="-1535.082" Z="243.8527" />
          <Vector3 X="-6657.327" Y="-1551.901" Z="243.7853" />
          <Vector3 X="-6653.883" Y="-1569.042" Z="243.9897" />
          <Vector3 X="-6647.722" Y="-1585.342" Z="244.465" />
          <Vector3 X="-6639.599" Y="-1600.843" Z="244.5316" />
          <Vector3 X="-6631.472" Y="-1616.341" Z="244.5534" />
          <Vector3 X="-6623.902" Y="-1632.116" Z="244.4019" />
          <Vector3 X="-6617.801" Y="-1648.467" Z="244.7024" />
          <Vector3 X="-6616.093" Y="-1665.815" Z="245.1727" />
          <Vector3 X="-6613.762" Y="-1683.15" Z="244.5228" />
          <Vector3 X="-6609.781" Y="-1700.673" Z="244.585" />
          <Vector3 X="-6601.768" Y="-1715.587" Z="244.5589" />
          <Vector3 X="-6597.053" Y="-1732.307" Z="244.144" />
          <Vector3 X="-6596.456" Y="-1741.035" Z="244.144" />
          <Vector3 X="-6597.059" Y="-1751.403" Z="244.146" />
          <Vector3 X="-6602.078" Y="-1768.732" Z="244.1441" />
          <Vector3 X="-6607.449" Y="-1785.38" Z="244.1441" />
          <Vector3 X="-6611.105" Y="-1802.494" Z="244.144" />
          <Vector3 X="-6615.37" Y="-1818.876" Z="244.144" />
          <Vector3 X="-6622.808" Y="-1834.67" Z="244.144" />
          <Vector3 X="-6633.517" Y="-1848.477" Z="244.144" />
          <Vector3 X="-6646.066" Y="-1860.66" Z="244.3695" />
          <Vector3 X="-6661.357" Y="-1868.965" Z="244.5621" />
          <Vector3 X="-6677.891" Y="-1874.696" Z="245.0081" />
          <Vector3 X="-6694.66" Y="-1879.691" Z="244.3635" />
          <Vector3 X="-6711.856" Y="-1882.865" Z="243.6691" />
          <Vector3 X="-6729.297" Y="-1882.516" Z="244.2127" />
          <Vector3 X="-6746.121" Y="-1877.803" Z="244.1441" />
          <Vector3 X="-6762.496" Y="-1871.629" Z="244.1728" />
          <Vector3 X="-6778.874" Y="-1865.463" Z="244.1451" />
          <Vector3 X="-6795.823" Y="-1859.292" Z="244.1429" />
          <Vector3 X="-6811.741" Y="-1853.496" Z="244.144" />
          <Vector3 X="-6828.174" Y="-1847.505" Z="244.2064" />
          <Vector3 X="-6844.895" Y="-1840.707" Z="243.6894" />
          <Vector3 X="-6853.856" Y="-1835.444" Z="242.4663" />
          <Vector3 X="-6871.845" Y="-1827.564" Z="240.7375" />
          <Vector3 X="-6885.523" Y="-1816.72" Z="240.7435" />
          <Vector3 X="-6897.806" Y="-1804.255" Z="240.7435" />
          <Vector3 X="-6910.254" Y="-1791.173" Z="240.7435" />
          <Vector3 X="-6920.627" Y="-1777.799" Z="240.7435" />
          <Vector3 X="-6926.762" Y="-1760.965" Z="240.7835" />
          <Vector3 X="-6929.416" Y="-1744.238" Z="242.1094" />
          <Vector3 X="-6932.722" Y="-1727.072" Z="242.2096" />
          <Vector3 X="-6938.178" Y="-1710.475" Z="241.6676" />
          <Vector3 X="-6946.115" Y="-1694.93" Z="243.1733" />
          <Vector3 X="-6950.57" Y="-1688.693" Z="243.2225" />
          <Vector3 X="-6954.977" Y="-1679.926" Z="242.879" />
          <Vector3 X="-6967.571" Y="-1667.004" Z="240.8135" />
          <Vector3 X="-6981.56" Y="-1657.713" Z="240.7441" />
          <Vector3 X="-6998.501" Y="-1653.566" Z="241.976" />
          <Vector3 X="-7016.473" Y="-1653.611" Z="240.5871" />
          <Vector3 X="-7032.739" Y="-1658.214" Z="242.0015" />
          <Vector3 X="-7046.457" Y="-1664.983" Z="242.5719" />
          <Vector3 X="-7062.536" Y="-1670.408" Z="243.9338" />
          <Vector3 X="-7069.121" Y="-1675.265" Z="241.9515" />
          <Vector3 X="-7079.063" Y="-1689.323" Z="240.3033" />
          <Vector3 X="-7079.323" Y="-1693.679" Z="240.3032" />
          <Vector3 X="-7078.059" Y="-1705.096" Z="240.9183" />
          <Vector3 X="-7076.839" Y="-1715.521" Z="241.8155" />
          <Vector3 X="-7074.895" Y="-1725.839" Z="242.0405" />
          <Vector3 X="-7073.084" Y="-1736.161" Z="245.1568" />
          <Vector3 X="-7068.756" Y="-1745.654" Z="250.5038" />
          <Vector3 X="-7062.646" Y="-1754.167" Z="252.506" />
          <Vector3 X="-7058.911" Y="-1763.948" Z="258.2838" />
          <Vector3 X="-7052.902" Y="-1772.374" Z="262.1931" />
          <Vector3 X="-7044.064" Y="-1777.957" Z="265.3258" />
          <Vector3 X="-7034.492" Y="-1782.269" Z="265.8346" />
          <Vector3 X="-7029.962" Y="-1784.229" Z="265.8346" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Caught!</Name>
      <QuestId>
        <int>4449</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="-7005.285" Y="-1689.267" Z="241.7619" />
          <Vector3 X="-6633.6" Y="-1875.703" Z="244.1425" />
        </HotSpots>
        <EntryTarget>
          <int>5839</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>true</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Caught!2</Name>
      <QuestId>
        <int>4449</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="-6422.905" Y="-3355.255" Z="241.667" />
          <Vector3 X="-6412.783" Y="-3193.926" Z="281.1996" />
        </HotSpots>
        <EntryTarget>
          <int>2739</int>
          <int>2740</int>
          <int>2743</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>true</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTEGrindForSilkClothBackToOuthouse</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="-6419.48" Y="-3354.023" Z="241.667" />
          <Vector3 X="-6447.614" Y="-3333.255" Z="241.667" />
          <Vector3 X="-6478.348" Y="-3312.224" Z="241.6716" />
          <Vector3 X="-6505.63" Y="-3294.214" Z="241.7017" />
          <Vector3 X="-6538.876" Y="-3280.331" Z="241.7415" />
          <Vector3 X="-6573.579" Y="-3270.313" Z="241.7429" />
          <Vector3 X="-6607.235" Y="-3260.705" Z="241.2834" />
          <Vector3 X="-6638.736" Y="-3251.712" Z="240.7497" />
          <Vector3 X="-6672.795" Y="-3243.858" Z="240.7439" />
          <Vector3 X="-6709.245" Y="-3236.452" Z="240.7435" />
          <Vector3 X="-6736.261" Y="-3218.01" Z="240.7435" />
          <Vector3 X="-6753.605" Y="-3186.342" Z="240.7435" />
          <Vector3 X="-6771.132" Y="-3158.665" Z="240.7441" />
          <Vector3 X="-6790.374" Y="-3126.792" Z="240.6486" />
          <Vector3 X="-6800.48" Y="-3103.819" Z="240.7422" />
          <Vector3 X="-6802.02" Y="-3098.58" Z="240.744" />
          <Vector3 X="-6811.49" Y="-3070.866" Z="241.5261" />
          <Vector3 X="-6816.159" Y="-3062.189" Z="241.6669" />
          <Vector3 X="-6833.761" Y="-3034.561" Z="241.6669" />
          <Vector3 X="-6853.208" Y="-3002.873" Z="242.4484" />
          <Vector3 X="-6869.892" Y="-2973.387" Z="242.5775" />
          <Vector3 X="-6887.044" Y="-2941.6" Z="244.121" />
          <Vector3 X="-6902.419" Y="-2911.413" Z="245.5702" />
          <Vector3 X="-6915.022" Y="-2877.611" Z="242.108" />
          <Vector3 X="-6918.651" Y="-2844.058" Z="243.1059" />
          <Vector3 X="-6916.291" Y="-2808.04" Z="241.6669" />
          <Vector3 X="-6908.133" Y="-2775.198" Z="242.4649" />
          <Vector3 X="-6896.472" Y="-2742.199" Z="241.7395" />
          <Vector3 X="-6884.4" Y="-2708.157" Z="241.6672" />
          <Vector3 X="-6873.449" Y="-2676.095" Z="242.7312" />
          <Vector3 X="-6861.775" Y="-2641.914" Z="241.6682" />
          <Vector3 X="-6851.172" Y="-2609.741" Z="240.744" />
          <Vector3 X="-6842.861" Y="-2574.604" Z="240.7439" />
          <Vector3 X="-6839.094" Y="-2541.015" Z="240.7439" />
          <Vector3 X="-6839.624" Y="-2504.904" Z="241.7508" />
          <Vector3 X="-6840.767" Y="-2472.164" Z="241.6859" />
          <Vector3 X="-6842.254" Y="-2434.994" Z="244.5592" />
          <Vector3 X="-6844.337" Y="-2402.395" Z="246.2477" />
          <Vector3 X="-6852.328" Y="-2385.729" Z="247.0721" />
          <Vector3 X="-6873.869" Y="-2361.181" Z="245.7786" />
          <Vector3 X="-6891.232" Y="-2328.248" Z="242.2649" />
          <Vector3 X="-6900.413" Y="-2296.967" Z="242.2818" />
          <Vector3 X="-6908.019" Y="-2260.524" Z="240.7439" />
          <Vector3 X="-6907.955" Y="-2226.741" Z="246.0531" />
          <Vector3 X="-6910.648" Y="-2192.091" Z="256.6478" />
          <Vector3 X="-6914.481" Y="-2176.814" Z="261.4633" />
          <Vector3 X="-6918.699" Y="-2159.85" Z="266.5753" />
          <Vector3 X="-6922.028" Y="-2142.671" Z="271.7471" />
          <Vector3 X="-6925.458" Y="-2126.089" Z="278.4559" />
          <Vector3 X="-6931.553" Y="-2109.099" Z="283.3069" />
          <Vector3 X="-6937.718" Y="-2093.321" Z="282.492" />
          <Vector3 X="-6943.364" Y="-2076.188" Z="282.4771" />
          <Vector3 X="-6945.711" Y="-2059.433" Z="282.6077" />
          <Vector3 X="-6946.141" Y="-2041.381" Z="282.4776" />
          <Vector3 X="-6944.813" Y="-2025.066" Z="282.4776" />
          <Vector3 X="-6942.558" Y="-2007.713" Z="282.4776" />
          <Vector3 X="-6939.749" Y="-1989.308" Z="282.4776" />
          <Vector3 X="-6935.829" Y="-1972.832" Z="282.4814" />
          <Vector3 X="-6930.542" Y="-1955.567" Z="282.9331" />
          <Vector3 X="-6925.367" Y="-1940.029" Z="277.3764" />
          <Vector3 X="-6921.151" Y="-1921.897" Z="271.0278" />
          <Vector3 X="-6917.553" Y="-1904.771" Z="265.8417" />
          <Vector3 X="-6911.923" Y="-1888.213" Z="260.6484" />
          <Vector3 X="-6906.01" Y="-1872.339" Z="255.5655" />
          <Vector3 X="-6900.146" Y="-1856.447" Z="250.7463" />
          <Vector3 X="-6900.056" Y="-1838.524" Z="245.5188" />
          <Vector3 X="-6903.891" Y="-1820.911" Z="241.3732" />
          <Vector3 X="-6908.903" Y="-1805.317" Z="240.7441" />
          <Vector3 X="-6913.077" Y="-1787.252" Z="240.7441" />
          <Vector3 X="-6912.828" Y="-1781.891" Z="240.7441" />
          <Vector3 X="-6906.063" Y="-1766.396" Z="242.1257" />
          <Vector3 X="-6898.497" Y="-1749.465" Z="243.2578" />
          <Vector3 X="-6896.723" Y="-1732.676" Z="241.7334" />
          <Vector3 X="-6903.134" Y="-1716.172" Z="240.9756" />
          <Vector3 X="-6915.396" Y="-1703.691" Z="243.7113" />
          <Vector3 X="-6929.226" Y="-1692.997" Z="242.4669" />
          <Vector3 X="-6942.868" Y="-1683.947" Z="243.7721" />
          <Vector3 X="-6959.234" Y="-1675.068" Z="242.179" />
          <Vector3 X="-6974.18" Y="-1667.094" Z="240.7459" />
          <Vector3 X="-6990.113" Y="-1658.593" Z="240.7597" />
          <Vector3 X="-7005.553" Y="-1650.354" Z="242.286" />
          <Vector3 X="-7020.133" Y="-1643.84" Z="243.5133" />
          <Vector3 X="-7037.492" Y="-1648.825" Z="243.8298" />
          <Vector3 X="-7052.952" Y="-1656.755" Z="243.991" />
          <Vector3 X="-7067.153" Y="-1667.875" Z="243.8581" />
          <Vector3 X="-7079.246" Y="-1679.737" Z="240.3113" />
          <Vector3 X="-7088.995" Y="-1691.505" Z="241.6669" />
          <Vector3 X="-7092.325" Y="-1698.987" Z="240.3038" />
          <Vector3 X="-7098.298" Y="-1715.353" Z="242.3604" />
          <Vector3 X="-7098.195" Y="-1733.333" Z="242.5787" />
          <Vector3 X="-7090.564" Y="-1748.836" Z="249.7753" />
          <Vector3 X="-7081.401" Y="-1760.416" Z="256.8629" />
          <Vector3 X="-7066.789" Y="-1775.666" Z="263.3505" />
          <Vector3 X="-7051.005" Y="-1781.537" Z="265.5345" />
          <Vector3 X="-7033.178" Y="-1784.419" Z="265.8342" />
          <Vector3 X="-7028.856" Y="-1785.1" Z="265.8342" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTEOuthouseGoToGrindForSilkCloth</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="-7034.987" Y="-1783.63" Z="265.8339" />
          <Vector3 X="-7040.352" Y="-1782.235" Z="265.8339" />
          <Vector3 X="-7047.122" Y="-1780.489" Z="265.6446" />
          <Vector3 X="-7050.49" Y="-1779.537" Z="265.1625" />
          <Vector3 X="-7060.682" Y="-1777.013" Z="263.1318" />
          <Vector3 X="-7070.828" Y="-1774.318" Z="262.9047" />
          <Vector3 X="-7074.567" Y="-1772.315" Z="261.9095" />
          <Vector3 X="-7079.324" Y="-1763.736" Z="258.36" />
          <Vector3 X="-7083.308" Y="-1758.937" Z="256.0999" />
          <Vector3 X="-7086.807" Y="-1754.187" Z="253.5127" />
          <Vector3 X="-7087.717" Y="-1750.815" Z="250.4707" />
          <Vector3 X="-7088.52" Y="-1747.409" Z="249.3497" />
          <Vector3 X="-7089.218" Y="-1744.094" Z="247.0578" />
          <Vector3 X="-7090.07" Y="-1740.476" Z="245.3161" />
          <Vector3 X="-7090.476" Y="-1737.108" Z="243.2826" />
          <Vector3 X="-7091.02" Y="-1729.455" Z="241.7394" />
          <Vector3 X="-7089.908" Y="-1711.995" Z="243.0886" />
          <Vector3 X="-7086.11" Y="-1695.018" Z="240.7279" />
          <Vector3 X="-7081.607" Y="-1691.294" Z="241.1744" />
          <Vector3 X="-7065.521" Y="-1683.163" Z="241.6844" />
          <Vector3 X="-7049.902" Y="-1675.268" Z="242.1739" />
          <Vector3 X="-7039.85" Y="-1670.923" Z="241.8356" />
          <Vector3 X="-7023.291" Y="-1665.397" Z="241.2796" />
          <Vector3 X="-7005.9" Y="-1664.842" Z="241.668" />
          <Vector3 X="-6989.236" Y="-1669.825" Z="241.2044" />
          <Vector3 X="-6973.3" Y="-1677.041" Z="240.7455" />
          <Vector3 X="-6958.939" Y="-1687.008" Z="241.9968" />
          <Vector3 X="-6945.747" Y="-1697.635" Z="242.8172" />
          <Vector3 X="-6931.462" Y="-1708.658" Z="242.2842" />
          <Vector3 X="-6916.717" Y="-1718.082" Z="241.9144" />
          <Vector3 X="-6903.161" Y="-1728.967" Z="242.1882" />
          <Vector3 X="-6895.692" Y="-1744.669" Z="242.9731" />
          <Vector3 X="-6894.411" Y="-1762.043" Z="241.6876" />
          <Vector3 X="-6895.552" Y="-1778.941" Z="241.7076" />
          <Vector3 X="-6896.805" Y="-1796.956" Z="240.744" />
          <Vector3 X="-6898.465" Y="-1814.375" Z="240.5387" />
          <Vector3 X="-6900.672" Y="-1834.502" Z="244.377" />
          <Vector3 X="-6903.848" Y="-1859.663" Z="251.8499" />
          <Vector3 X="-6909.965" Y="-1879.816" Z="258.0562" />
          <Vector3 X="-6915.058" Y="-1901.089" Z="264.5035" />
          <Vector3 X="-6921.167" Y="-1926.619" Z="272.3732" />
          <Vector3 X="-6925.604" Y="-1944.07" Z="278.818" />
          <Vector3 X="-6932.63" Y="-1964.247" Z="283.0102" />
          <Vector3 X="-6939.522" Y="-1989.558" Z="282.4781" />
          <Vector3 X="-6944.047" Y="-2015.405" Z="282.4781" />
          <Vector3 X="-6945.961" Y="-2041.581" Z="282.4781" />
          <Vector3 X="-6944.462" Y="-2068.573" Z="282.4785" />
          <Vector3 X="-6936.022" Y="-2094.292" Z="282.4866" />
          <Vector3 X="-6928.308" Y="-2115.898" Z="281.8445" />
          <Vector3 X="-6924.145" Y="-2130.104" Z="276.4937" />
          <Vector3 X="-6918.257" Y="-2154.813" Z="267.8973" />
          <Vector3 X="-6911.648" Y="-2180.207" Z="260.1178" />
          <Vector3 X="-6902.489" Y="-2206.536" Z="251.8333" />
          <Vector3 X="-6895.125" Y="-2231.693" Z="244.1833" />
          <Vector3 X="-6894.448" Y="-2256.205" Z="240.7442" />
          <Vector3 X="-6898.822" Y="-2282.926" Z="240.7442" />
          <Vector3 X="-6897.541" Y="-2309.117" Z="242.2638" />
          <Vector3 X="-6893.083" Y="-2318.401" Z="243.5704" />
          <Vector3 X="-6886.025" Y="-2326.174" Z="241.6124" />
          <Vector3 X="-6878.465" Y="-2333.457" Z="241.311" />
          <Vector3 X="-6870.894" Y="-2340.729" Z="244.323" />
          <Vector3 X="-6863.611" Y="-2348.286" Z="246.3017" />
          <Vector3 X="-6857.212" Y="-2356.605" Z="248.7065" />
          <Vector3 X="-6851.688" Y="-2365.529" Z="248.0289" />
          <Vector3 X="-6847.569" Y="-2374.811" Z="246.7561" />
          <Vector3 X="-6843.884" Y="-2385" Z="247.4444" />
          <Vector3 X="-6840.444" Y="-2394.921" Z="248.2668" />
          <Vector3 X="-6836.708" Y="-2404.733" Z="248.377" />
          <Vector3 X="-6834.163" Y="-2414.565" Z="247.9746" />
          <Vector3 X="-6832.77" Y="-2425.308" Z="248.9082" />
          <Vector3 X="-6831.649" Y="-2435.748" Z="248.102" />
          <Vector3 X="-6830.104" Y="-2446.359" Z="247.3119" />
          <Vector3 X="-6828.005" Y="-2463.71" Z="244.8374" />
          <Vector3 X="-6826.137" Y="-2480.541" Z="243.5948" />
          <Vector3 X="-6823.038" Y="-2498.299" Z="241.6856" />
          <Vector3 X="-6819.906" Y="-2515.516" Z="242.3288" />
          <Vector3 X="-6817.015" Y="-2532.772" Z="242.4134" />
          <Vector3 X="-6813.935" Y="-2550.52" Z="243.0116" />
          <Vector3 X="-6807.005" Y="-2565.968" Z="241.0007" />
          <Vector3 X="-6798.426" Y="-2581.212" Z="240.7623" />
          <Vector3 X="-6791.866" Y="-2597.431" Z="243.374" />
          <Vector3 X="-6785.942" Y="-2613.894" Z="244.4121" />
          <Vector3 X="-6781.929" Y="-2631.458" Z="241.0689" />
          <Vector3 X="-6778.691" Y="-2648.121" Z="241.6667" />
          <Vector3 X="-6775.138" Y="-2665.254" Z="241.6667" />
          <Vector3 X="-6767.306" Y="-2681.421" Z="241.9792" />
          <Vector3 X="-6757.052" Y="-2694.944" Z="241.7909" />
          <Vector3 X="-6747.348" Y="-2709.481" Z="241.6671" />
          <Vector3 X="-6738.759" Y="-2724.727" Z="241.695" />
          <Vector3 X="-6726.003" Y="-2745.788" Z="242.4373" />
          <Vector3 X="-6712.968" Y="-2768.572" Z="241.6693" />
          <Vector3 X="-6700.504" Y="-2791.666" Z="241.7773" />
          <Vector3 X="-6689.868" Y="-2814.74" Z="242.4387" />
          <Vector3 X="-6679.142" Y="-2838.698" Z="241.9904" />
          <Vector3 X="-6667.886" Y="-2863.319" Z="242.803" />
          <Vector3 X="-6662.382" Y="-2875.234" Z="241.8355" />
          <Vector3 X="-6655.222" Y="-2890.896" Z="241.6656" />
          <Vector3 X="-6641.641" Y="-2913.228" Z="241.6938" />
          <Vector3 X="-6625.563" Y="-2933.968" Z="241.6681" />
          <Vector3 X="-6615.189" Y="-2949.699" Z="241.8821" />
          <Vector3 X="-6593.952" Y="-2966.397" Z="244.1424" />
          <Vector3 X="-6573.451" Y="-2977.445" Z="247.0234" />
          <Vector3 X="-6564.214" Y="-2982.436" Z="248.8732" />
          <Vector3 X="-6550.585" Y="-2991.771" Z="252.4696" />
          <Vector3 X="-6547.239" Y="-3007.886" Z="257.0962" />
          <Vector3 X="-6548.624" Y="-3025.875" Z="261.7427" />
          <Vector3 X="-6550.517" Y="-3043.78" Z="266.1744" />
          <Vector3 X="-6554.804" Y="-3060.193" Z="267.6287" />
          <Vector3 X="-6558.09" Y="-3077.871" Z="268.054" />
          <Vector3 X="-6557.361" Y="-3095.325" Z="268.2535" />
          <Vector3 X="-6554.693" Y="-3112.62" Z="266.6377" />
          <Vector3 X="-6553.987" Y="-3129.56" Z="263.0663" />
          <Vector3 X="-6554.9" Y="-3147.031" Z="259.591" />
          <Vector3 X="-6556.5" Y="-3164.458" Z="256.5546" />
          <Vector3 X="-6557.192" Y="-3181.93" Z="253.5778" />
          <Vector3 X="-6554.88" Y="-3199.227" Z="250.2084" />
          <Vector3 X="-6547.178" Y="-3214.84" Z="247.4577" />
          <Vector3 X="-6536.204" Y="-3228.464" Z="245.461" />
          <Vector3 X="-6524.921" Y="-3241.1" Z="243.5739" />
          <Vector3 X="-6512.659" Y="-3254.358" Z="241.9814" />
          <Vector3 X="-6500.77" Y="-3267.2" Z="241.6808" />
          <Vector3 X="-6488.739" Y="-3279.906" Z="241.6676" />
          <Vector3 X="-6476.214" Y="-3292.128" Z="241.6676" />
          <Vector3 X="-6464.16" Y="-3304.03" Z="241.6676" />
          <Vector3 X="-6451.819" Y="-3317.215" Z="241.6676" />
          <Vector3 X="-6439.88" Y="-3330.01" Z="241.6676" />
          <Vector3 X="-6428.705" Y="-3341.986" Z="241.6676" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>GRINDGrindTo49</Name>
      <QuestId />
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="-6663.139" Y="-1777.414" Z="259.1898" />
          <Vector3 X="-6858.749" Y="-1713.95" Z="251.5215" />
          <Vector3 X="-7188.936" Y="-1680.873" Z="240.5618" />
          <Vector3 X="-7167.721" Y="-1449.673" Z="243.4396" />
        </HotSpots>
        <EntryTarget>
          <int>5856</int>
          <int>5857</int>
        </EntryTarget>
        <IsGrinderNotQuest>true</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>48</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTEOuthouseBackToThoriumPoint</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="-7042.152" Y="-1782.561" Z="265.8337" />
          <Vector3 X="-7047.22" Y="-1781.715" Z="265.7267" />
          <Vector3 X="-7055.865" Y="-1780.365" Z="265.2085" />
          <Vector3 X="-7065.593" Y="-1778.823" Z="263.7784" />
          <Vector3 X="-7070.656" Y="-1777.456" Z="263.8473" />
          <Vector3 X="-7073.9" Y="-1770.653" Z="261.3823" />
          <Vector3 X="-7079.207" Y="-1762.762" Z="257.8481" />
          <Vector3 X="-7084.256" Y="-1756.287" Z="255.1305" />
          <Vector3 X="-7088.115" Y="-1751.414" Z="251.0043" />
          <Vector3 X="-7091.665" Y="-1745.129" Z="248.2343" />
          <Vector3 X="-7094.278" Y="-1735.32" Z="242.3842" />
          <Vector3 X="-7092.239" Y="-1725.066" Z="242.1723" />
          <Vector3 X="-7088.255" Y="-1715.393" Z="242.7643" />
          <Vector3 X="-7083.221" Y="-1706.178" Z="241.2534" />
          <Vector3 X="-7076.546" Y="-1694.37" Z="240.3033" />
          <Vector3 X="-7062.904" Y="-1684.019" Z="241.6828" />
          <Vector3 X="-7046.522" Y="-1679.808" Z="241.7348" />
          <Vector3 X="-7028.583" Y="-1677.806" Z="240.3076" />
          <Vector3 X="-7011.102" Y="-1677.183" Z="240.6859" />
          <Vector3 X="-6993.605" Y="-1677.536" Z="241.6668" />
          <Vector3 X="-6976.221" Y="-1679.359" Z="241.218" />
          <Vector3 X="-6960.422" Y="-1685.245" Z="241.8977" />
          <Vector3 X="-6946.381" Y="-1695.602" Z="243.0781" />
          <Vector3 X="-6934.656" Y="-1709.993" Z="241.8811" />
          <Vector3 X="-6928.737" Y="-1725.743" Z="244.3943" />
          <Vector3 X="-6924.806" Y="-1742.796" Z="244.0233" />
          <Vector3 X="-6921.23" Y="-1759.925" Z="243.7515" />
          <Vector3 X="-6917.423" Y="-1776.983" Z="240.7442" />
          <Vector3 X="-6906.101" Y="-1797.196" Z="240.7442" />
          <Vector3 X="-6886.668" Y="-1815.939" Z="240.7424" />
          <Vector3 X="-6866.328" Y="-1832.531" Z="240.8012" />
          <Vector3 X="-6844.256" Y="-1844.853" Z="243.8249" />
          <Vector3 X="-6819.683" Y="-1854.083" Z="244.1451" />
          <Vector3 X="-6795.306" Y="-1863.821" Z="244.1753" />
          <Vector3 X="-6770.604" Y="-1872.609" Z="244.1559" />
          <Vector3 X="-6745.503" Y="-1880.291" Z="244.144" />
          <Vector3 X="-6723.475" Y="-1887.635" Z="244.144" />
          <Vector3 X="-6705.836" Y="-1893.598" Z="244.1439" />
          <Vector3 X="-6690.184" Y="-1888.886" Z="244.0662" />
          <Vector3 X="-6678.773" Y="-1875.674" Z="245.0503" />
          <Vector3 X="-6667.992" Y="-1861.188" Z="244.852" />
          <Vector3 X="-6655.849" Y="-1850.26" Z="246.3314" />
          <Vector3 X="-6641.746" Y="-1839.926" Z="247.534" />
          <Vector3 X="-6630.11" Y="-1826.199" Z="246.4842" />
          <Vector3 X="-6622.211" Y="-1810.6" Z="245.0312" />
          <Vector3 X="-6615.454" Y="-1794.464" Z="244.1439" />
          <Vector3 X="-6610.362" Y="-1777.723" Z="244.1514" />
          <Vector3 X="-6605.384" Y="-1761.531" Z="244.1439" />
          <Vector3 X="-6600.215" Y="-1744.23" Z="244.1436" />
          <Vector3 X="-6598.532" Y="-1726.897" Z="244.1436" />
          <Vector3 X="-6605.28" Y="-1711.18" Z="244.1539" />
          <Vector3 X="-6615.368" Y="-1696.487" Z="244.3206" />
          <Vector3 X="-6616.304" Y="-1679.614" Z="244.6142" />
          <Vector3 X="-6615.578" Y="-1662.141" Z="245.2974" />
          <Vector3 X="-6619.266" Y="-1645.234" Z="244.5038" />
          <Vector3 X="-6628.837" Y="-1630.587" Z="244.1567" />
          <Vector3 X="-6637.376" Y="-1615.318" Z="244.4543" />
          <Vector3 X="-6644.481" Y="-1599.328" Z="244.4543" />
          <Vector3 X="-6650.998" Y="-1583.103" Z="244.3824" />
          <Vector3 X="-6657.195" Y="-1566.739" Z="243.5809" />
          <Vector3 X="-6663.084" Y="-1550.26" Z="242.847" />
          <Vector3 X="-6666.433" Y="-1534.272" Z="243.338" />
          <Vector3 X="-6670.165" Y="-1519.018" Z="243.2207" />
          <Vector3 X="-6676.567" Y="-1502.731" Z="241.9646" />
          <Vector3 X="-6677.767" Y="-1496.964" Z="241.8802" />
          <Vector3 X="-6673.354" Y="-1480.03" Z="244.3131" />
          <Vector3 X="-6668.678" Y="-1460.367" Z="245.5614" />
          <Vector3 X="-6666.046" Y="-1443.066" Z="244.363" />
          <Vector3 X="-6663.493" Y="-1426.32" Z="243.0467" />
          <Vector3 X="-6660.421" Y="-1408.523" Z="243.2612" />
          <Vector3 X="-6658.044" Y="-1391.762" Z="242.8535" />
          <Vector3 X="-6656.846" Y="-1373.745" Z="247.8582" />
          <Vector3 X="-6656.511" Y="-1356.829" Z="247.9902" />
          <Vector3 X="-6657.867" Y="-1338.824" Z="246.2512" />
          <Vector3 X="-6662.646" Y="-1322.617" Z="242.3636" />
          <Vector3 X="-6668.488" Y="-1305.54" Z="242.1559" />
          <Vector3 X="-6671.907" Y="-1288.954" Z="242.2246" />
          <Vector3 X="-6672.691" Y="-1270.968" Z="239.4884" />
          <Vector3 X="-6669.085" Y="-1254.433" Z="242.0084" />
          <Vector3 X="-6664.547" Y="-1236.968" Z="242.6456" />
          <Vector3 X="-6659.958" Y="-1219.505" Z="244.0768" />
          <Vector3 X="-6655.796" Y="-1203.085" Z="244.7073" />
          <Vector3 X="-6652.158" Y="-1185.969" Z="244.7677" />
          <Vector3 X="-6648.784" Y="-1168.798" Z="244.4608" />
          <Vector3 X="-6646.262" Y="-1154.814" Z="244.4624" />
          <Vector3 X="-6641.292" Y="-1138.04" Z="244.7397" />
          <Vector3 X="-6634.957" Y="-1122.337" Z="244.4948" />
          <Vector3 X="-6627.916" Y="-1106.316" Z="244.2415" />
          <Vector3 X="-6621.134" Y="-1090.184" Z="244.2889" />
          <Vector3 X="-6616.799" Y="-1073.42" Z="245.3677" />
          <Vector3 X="-6616.685" Y="-1055.971" Z="244.7109" />
          <Vector3 X="-6612.233" Y="-1039.055" Z="244.7527" />
          <Vector3 X="-6608.971" Y="-1029.781" Z="244.4564" />
          <Vector3 X="-6604.808" Y="-1025.432" Z="244.6128" />
          <Vector3 X="-6601.659" Y="-1022.396" Z="244.6113" />
          <Vector3 X="-6593.902" Y="-1029.944" Z="251.7578" />
          <Vector3 X="-6586.27" Y="-1045.655" Z="260.3609" />
          <Vector3 X="-6571.875" Y="-1054.266" Z="266.3694" />
          <Vector3 X="-6555.779" Y="-1062.436" Z="273.3093" />
          <Vector3 X="-6539.85" Y="-1069.512" Z="279.6295" />
          <Vector3 X="-6522.92" Y="-1073.793" Z="285.2962" />
          <Vector3 X="-6505.934" Y="-1077.974" Z="291.4091" />
          <Vector3 X="-6491.799" Y="-1084.964" Z="296.1593" />
          <Vector3 X="-6487.585" Y="-1091.317" Z="298.1548" />
          <Vector3 X="-6484.861" Y="-1109.141" Z="303.0396" />
          <Vector3 X="-6490.692" Y="-1125.019" Z="305.9295" />
          <Vector3 X="-6497.74" Y="-1140.418" Z="307.0166" />
          <Vector3 X="-6505.522" Y="-1156.716" Z="307.9874" />
          <Vector3 X="-6509.76" Y="-1165.591" Z="308.5268" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
  </EasyQuests>
  <Script>using robotManager.Helpful;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Threading;
using wManager.Events;
using wManager.Wow.Bot.Tasks;
using wManager.Wow.Enums;
using wManager.Wow.Helpers;
using wManager.Wow.ObjectManager;
using System.ComponentModel;
using System.Configuration;
using System.Net;
using System.Windows.Forms;
using robotManager.Products;
using System.Threading.Tasks;



//FlightMaster
public class FlightMaster
{

    private int priority;

    public FlightMaster(int priority)
    {
        this.priority = priority;
    }

    public static void main(String[] args)
    {
        FlightMaster temp = new FlightMaster(1);
        Logging.Write("Stuff");
    }


    public static int timer = 0;
    public static Vector3 myPositionAtStart = new Vector3(0, 0, 0);
    public static bool _deleteOldPath = false;
    public static bool _isLaunched ;
    static bool longMoveState = false;
    static Vector3 checkDistanceToDestination;
    private static int travelDistance = 1250;
    private static float saveDistance;
    public static Vector3 destinationVector = new Vector3(0, 0, 0);

    //public static MovementEvents.MovementCancelableHandler MovementEventsOnOnMovementPulse { get; private set; }

    // public static List&lt;FlightMasterDB&gt; FML = fillDB();

    public void startFlightMaster()
    {
        Logging.Write("[FNV_Quester]: Flight Master initialized");
        _isLaunched = true;
        FNVQuesterFlightMaster.Load();
        //flightMasterLoop();
    }

    public void start()
    {
        //Logging.Write("Subscribing to event");
       // SubscribeToEvent();
       // watchForEvents();
    }

    public void stop()
    {
        //Logging.Write("Unsubscribing to event");
        //UnSubscribeEvents();
    }

    public static void disposeFlightMaster()
    {
        _isLaunched = false;
        FNVQuesterFlightMaster.CurrentSettings.Save();
        //clearOldPath();
        //_deleteOldPath = true;
        //UnSubscribeEvents();
        //MovementEvents.OnMovementPulse -= new MovementEvents.MovementCancelableHandler(FlightMaster.MovementEventsOnOnMovementPulse);
        //Logging.Write("[FNV_Quester]: Flight Master disposed");
    }

    public static void disposeFlightMaster(int wert)
    {
        _isLaunched = false;
        if(wert == 1)
        {
            Logging.Write("Flight Master stopped, dead");
        }
        else
        {
            Logging.Write("Flight Master stopped, combat");
        }
    }


    private void SubscribeToEvent()
    {
         MovementEvents.OnMovementPulse += MovementEventsOnOnMovementPulse;
    }

    public void UnSubscribeEvents()
    {
        MovementEvents.OnMovementPulse -= MovementEventsOnOnMovementPulse;
    }

    private void watchForEvents()
    {

        EventsLuaWithArgs.OnEventsLuaWithArgs += (LuaEventsId id, List&lt;string&gt; args) =&gt;
        {


            if (id == wManager.Wow.Enums.LuaEventsId.PLAYER_DEAD)
            {
                Logging.Write("[FNV_Quester]: Player died, stop Flight Master");
                disposeFlightMaster(1);
            }
            if (id == wManager.Wow.Enums.LuaEventsId.PLAYER_ENTER_COMBAT)
            {
                disposeFlightMaster(2);
          		  Logging.Write("[FNV_Quester]: Player entered combat, stop Flight Master");
            }

        };

    }


    private void MovementEventsOnOnMovementPulse(List&lt;Vector3&gt; path, CancelEventArgs cancelEventArgs)
    {
        if(timer &lt; 1)
        {
            checkDistanceToDestination = path.Last&lt;Vector3&gt;();
            longMove(path.Last&lt;Vector3&gt;());
            destinationVector = path.Last&lt;Vector3&gt;();
            if(ObjectManager.Me.Position.DistanceTo(destinationVector) &gt; 1000 &amp;&amp; !_isLaunched)
                startFlightMaster();
        }
        else
        {
            Logging.Write("[FNV_Quester]: Taxi in Pause");
        }
    }

    public bool longMove(Vector3 destination)
    {
        saveDistance = new Vector3(destination).DistanceTo(ObjectManager.Me.Position);
        if(new Vector3(destination).DistanceTo(ObjectManager.Me.Position) &lt; travelDistance)
        {
            longMoveState = false;
            return false;
        }
        else
        {
            longMoveState = true;
            return true;
        }
    }


    public static FlightMasterDB getClosestFlightMasterFrom()
    {
        List&lt;FlightMasterDB&gt; FMLnfmd = fillDB();
        float tempDistance = 99999;
        FlightMasterDB returnObject = new FlightMasterDB("null", 0, new Vector3(0, 0, 0), false);

        foreach(var a in FMLnfmd)
        {
            if(a.alreadyDiscovered &amp;&amp; a.position.DistanceTo(ObjectManager.Me.Position) &lt; tempDistance &amp;&amp; (a.continent == checkContinent()))
            {
                tempDistance = a.position.DistanceTo(ObjectManager.Me.Position);
                returnObject = a;
            }
        }
        return returnObject;
    }

    public static FlightMasterDB getClosestFlightMasterTo()
    {
        List&lt;FlightMasterDB&gt; FMLgcfmt = fillDB();
        float tempDistance = 99999;
        FlightMasterDB returnObject = new FlightMasterDB("null", 0, new Vector3(0, 0, 0), false);

        foreach(var a in FMLgcfmt)
        {
            if(a.alreadyDiscovered &amp;&amp; a.position.DistanceTo(destinationVector) &lt; tempDistance &amp;&amp; (a.continent == checkContinent()))
            {
                tempDistance = a.position.DistanceTo(destinationVector);
                returnObject = a;
            }
        }
        return returnObject;
    }

    public static bool checkContinent()
    {
        if(Usefuls.ContinentId == (int)ContinentId.Kalimdor)
        {
            return true;
        }
        else
        {
            return false;
        }
        
    }

    public static void waitFlying()
    {

        while(ObjectManager.Me.IsOnTaxi)
        {
            Logging.Write("[FNV_Quester]: On taxi, waiting");
            Thread.Sleep(30000);
        }

        Logging.Write("[FNV_Quester]: Arrived at destination Flight Master, finished waiting");
    }

    public static List&lt;FlightMasterDB&gt; fillDB()
    {
        //True = Kalimdor ; False = Eastern Kingdoms
        List&lt;FlightMasterDB&gt; FMListe = new List&lt;FlightMasterDB&gt;();
        FlightMasterDB Stormwind = new FlightMasterDB("Stormwind", 352, new Vector3(-8835.76f, 490.084f, 109.6157f), false);
        FMListe.Add(Stormwind);
        FlightMasterDB ArathiHighlands = new FlightMasterDB("Arathi", 2835, new Vector3(-1240.03f, -2513.96f, 21.92969f), false);
        FMListe.Add(ArathiHighlands);
        FlightMasterDB Ashenvale = new FlightMasterDB("Ashenvale", 4267, new Vector3(2828.4f, -284.3f, 106.7f), true);
        FMListe.Add(Ashenvale);
        FlightMasterDB Darkshore = new FlightMasterDB("Darkshore", 3841, new Vector3(6343.2f, 561.651f, 15.79876f), true);
        FMListe.Add(Darkshore);
        FlightMasterDB Stranglethorn = new FlightMasterDB("Stranglethorn", 2859, new Vector3(-14477.9f, 464.101f, 36.38163f), false);
        FMListe.Add(Stranglethorn);
        FlightMasterDB Duskwood = new FlightMasterDB("Duskwood", 2409, new Vector3(-10513.8f, -1258.79f, 41.43174f), false);
        FMListe.Add(Duskwood);
        FlightMasterDB FeralasFeathermoon = new FlightMasterDB("Feralas, Feathermoon", 8019, new Vector3(-4370.5f, 3340f, 12f), true);
        FMListe.Add(FeralasFeathermoon);
        FlightMasterDB FeralasThalanaar = new FlightMasterDB("Feralas, Thalanaar", 4319, new Vector3(-4491f, -781f, -40f), true);
        FMListe.Add(FeralasThalanaar);
        FlightMasterDB Tanaris = new FlightMasterDB("Tanaris", 7823, new Vector3(-7224.9f, -3738.2f, 8.4f), true);
        FMListe.Add(Tanaris);
        FlightMasterDB Hinterlands = new FlightMasterDB("The Hinterlands", 8018, new Vector3(282.1f, -2001.3f, 194.1f), false);
        FMListe.Add(Hinterlands);
        FlightMasterDB Ironforge = new FlightMasterDB("Ironforge", 1573, new Vector3(-4821.13f, -1152.4f, 502.2116f), false);
        FMListe.Add(Ironforge);
        FlightMasterDB Menethil = new FlightMasterDB("Wetlands", 1571, new Vector3(-3793.2f, -782.052f, 9.014864f), false);
        FMListe.Add(Menethil);
        FlightMasterDB TheBarrens = new FlightMasterDB("The Barrens", 16227, new Vector3(-898.246f, -3769.65f, 11.71021f), true);
        FMListe.Add(TheBarrens);
        FlightMasterDB Redridge = new FlightMasterDB("Redridge Mountains", 931, new Vector3(-9435.8f, -2234.79f, 69.43174f), false);
        FMListe.Add(Redridge);
        FlightMasterDB Teldrassil = new FlightMasterDB("Teldrassil", 3838, new Vector3(8640.58f, 841.118f, 23.26363f), true);
        FMListe.Add(Teldrassil);
        FlightMasterDB Southshore = new FlightMasterDB("Hillsbrad Foothiils", 2432, new Vector3(-715.146f, -512.134f, 26.54455f), false);
        FMListe.Add(Southshore);
        FlightMasterDB Stonetalon = new FlightMasterDB("Stonetalon Mountains", 4407, new Vector3(2682.83f, 1466.45f, 233.6483f), true);
        FMListe.Add(Stonetalon);
        FlightMasterDB Thelsamar = new FlightMasterDB("Loch Modan", 1572, new Vector3(-5424.85f, -2929.87f, 347.5623f), false);
        FMListe.Add(Thelsamar);
        FlightMasterDB Theramore = new FlightMasterDB("Dustwallow Marsh", 4321, new Vector3(-3828.88f, -4517.51f, 10.66067f), true);
        FMListe.Add(Theramore);
        FlightMasterDB WesternP = new FlightMasterDB("Western Pleaguelands", 12596, new Vector3(928.3f, -1429.1f, 64.8f), false);
        FMListe.Add(WesternP);
        FlightMasterDB Westfall = new FlightMasterDB("Westfall", 523, new Vector3(-10628.8f, 1037.79f, 34.43174f), false);
        FMListe.Add(Westfall);
        FlightMasterDB EasternP = new FlightMasterDB("Eastern Pleaguelands", 12617, new Vector3(2269.9f, -5345.4f, 86.9f), false);
        FMListe.Add(EasternP);
        FlightMasterDB SearingGorge = new FlightMasterDB("Searing Gorge", 2941, new Vector3(-6559.1f, -1169.4f, 309.8f), false);
        FMListe.Add(SearingGorge);
        FlightMasterDB BurningSteppes = new FlightMasterDB("Burning Steppes", 2299, new Vector3(-8365.1f, -2758.5f, 185.6f), false);
        FMListe.Add(BurningSteppes);
        FlightMasterDB BlastedLands = new FlightMasterDB("Blasted Lands", 8609, new Vector3(-11110.2f, -3437.1f, 79.2f), false);
        FMListe.Add(BlastedLands);
        FlightMasterDB Azshara = new FlightMasterDB("Azshara", 12577, new Vector3(2718.2f, -3880.8f, 101.4f), true);
        FMListe.Add(Azshara);
        FlightMasterDB Felwood = new FlightMasterDB("Felwood", 12578, new Vector3(6204.2f, -1951.4f, 571.3f), true);
        FMListe.Add(Felwood);
        FlightMasterDB Winterspring = new FlightMasterDB("Winterspring", 11138, new Vector3(6800.5f, -4742.4f, 701.5f), true);
        FMListe.Add(Winterspring);
        FlightMasterDB UngoroCreater = new FlightMasterDB("Ungoro Crater", 10583, new Vector3(-6110.5f, -1140.4f, -186.9f), true);
        FMListe.Add(UngoroCreater);
        FlightMasterDB Silithus = new FlightMasterDB("Silithus", 15177, new Vector3(-6758.6f, 775.6f, 89f), true);
        FMListe.Add(Silithus);
        FlightMasterDB Desolace = new FlightMasterDB("Desolace", 6706, new Vector3(136f, 1326f, 193f), true);
        FMListe.Add(Desolace);
        return FMListe;
    }

    public static bool validFlight(String from, String to)
    {
        bool von = false;
        bool zu = false;
        List&lt;FlightMasterDB&gt; FMLvf = fillDB();

        for(int i = 0; i &lt; FMLvf.Count; i++)
        {
            if(FMLvf[i].name.Contains(from))
            {
                von = FMLvf[i].continent;
            }
            if(FMLvf[i].name.Contains(to))
            {
                zu = FMLvf[i].continent;
            }
        }
        return von != zu;
    }

    public static bool discoveredTaxiNodes(String from, String to)
    {

        List&lt;FlightMasterDB&gt; FMLDTN = fillDB();

        foreach(var ele in FMLDTN)
        {
            if(ele.name.Contains(from))
            {
                if(!ele.alreadyDiscovered)
                {
                    Logging.Write("[FNV_Quester]: Taxi node from " + ele.name + " has not been discovered so far. Abort taking taxi.");
                    return false;
                }
            }
        }

        foreach(var ele in FMLDTN)
        {
            if(ele.name.Contains(to))
            {
                if(!ele.alreadyDiscovered)
                {
                    Logging.Write("[FNV_Quester]: Taxi node to " + ele.name + " has not been discovered so far. Abort taking taxi.");
                    return false;
                }
            }
        }
        return true;
    }

    public static void takeTaxi(String from, String to)
    {

        List&lt;FlightMasterDB&gt; FMLtt = fillDB();
        bool canProceed = true;
        try
        {
            FMLtt = fillDB();
        }
        catch(Exception e)
        {
            Logging.Write("Error: " + e);
        }


        Vector3 myPos = ObjectManager.Me.Position;

        if(Usefuls.MapZoneName.Contains(to))
        {
            canProceed = false;
            Logging.Write("[FNV_Quester]: Already in the zone we are going to travel to. Skip flying");
        }

        if(canProceed)
        {

            if(validFlight(from, to))
            {
                Logging.Write("[FNV_Quester]: Unable to fly between Kalimdor and Eastern Kingdoms");
            }

            var position = new Vector3();
            int npcEntryId = 0;

            for(int i = 0; i &lt; FMLtt.Count; i++)
            {
                if(FMLtt[i].name.Contains(from))
                {
                    position = FMLtt[i].position;
                    npcEntryId = FMLtt[i].NPCId;
                    FMLtt[i].name.Contains(from);
                }
            }


            if(!ObjectManager.Me.IsOnTaxi)
            {
                wManager.wManagerSetting.ClearBlacklistOfCurrentProductSession();

                while(!wManager.Wow.Bot.Tasks.GoToTask.ToPositionAndIntecractWithNpc(position, npcEntryId, -1, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore) &amp;&amp; !Fight.InFight)
                {
                    wManager.wManagerSetting.ClearBlacklistOfCurrentProductSession();
                    wManager.Wow.Bot.Tasks.GoToTask.ToPositionAndIntecractWithNpc(position, npcEntryId, -1, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore);
                }
                if(wManager.Wow.Bot.Tasks.GoToTask.ToPositionAndIntecractWithNpc(position, npcEntryId, -1, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore))
                {
                    while(!ObjectManager.Me.IsOnTaxi)
                    {
                        Usefuls.SelectGossipOption(GossipOptionsType.taxi);

                        int node = Lua.LuaDoString&lt;int&gt;("for i=0,30 do if string.find(TaxiNodeName(i),'" + to + "') then return i end end");
                        Lua.LuaDoString("TakeTaxiNode(" + node + ")");
                        Logging.Write("[FNV_Quester]: Taking Taxi from " + from + " to " + to);
                        Thread.Sleep(Usefuls.Latency + 2500);
                    }
                }
            }
            waitFlying();
            return;
        }
    }

    public static void discoverTaxi(String discoverName)
    {
        FNVQuesterFlightMaster.Load();
        List&lt;FlightMasterDB&gt; FMLdt = fillDB();

        var position = new Vector3();
        int npcEntryId = 0;
        int j = 0;
        bool alreadyDiscoveredFlightMaster = false;

        for(int i = 0; i &lt; FMLdt.Count; i++)
        {
            if(FMLdt[i].name.Contains(discoverName))
            {
                if(FMLdt[i].alreadyDiscovered)
                {
                    Logging.Write("[FNV_Quester]: Flight Master of " + FMLdt[i].name + " already discovered. Skip it.");
                    alreadyDiscoveredFlightMaster = true;
                    break;
                }

                position = FMLdt[i].position;
                npcEntryId = FMLdt[i].NPCId;
                j = i;
            }
        }

        if(!alreadyDiscoveredFlightMaster)
        {

            if(!ObjectManager.Me.IsOnTaxi)
            {
                wManager.wManagerSetting.ClearBlacklistOfCurrentProductSession();

                while(!wManager.Wow.Bot.Tasks.GoToTask.ToPositionAndIntecractWithNpc(position, npcEntryId, -1, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore))
                {
                   // wManager.Wow.Helpers.Conditions.ForceIgnoreIsAttacked = true;
                    wManager.wManagerSetting.ClearBlacklistOfCurrentProductSession();
                    wManager.Wow.Bot.Tasks.GoToTask.ToPositionAndIntecractWithNpc(position, npcEntryId, -1, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore);
                }
                if(wManager.Wow.Bot.Tasks.GoToTask.ToPositionAndIntecractWithNpc(position, npcEntryId, -1, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore))
                {
                    Usefuls.SelectGossipOption(GossipOptionsType.taxi);
                    Thread.Sleep(Usefuls.Latency + 250);
                    //wManager.Wow.Helpers.Conditions.ForceIgnoreIsAttacked = true;
                }
            }
            Logging.Write("[FNV_Quester]: Flight Master " + FMLdt[j].name + " discovered");
            FMLdt[j].alreadyDiscovered = true;
            FNVQuesterFlightMaster.flightMasterSaveChanges(FMLdt[j]);
            //wManager.Wow.Helpers.Conditions.ForceIgnoreIsAttacked = false;
            
        }
        timer = 0;
        return;
    }

    }

    public class FlightMasterDB
    {
        public FlightMasterDB(String name, int NPCId, Vector3 position, bool continent, bool alreadyDiscovered)
        {
            this.name = name;
            this.NPCId = NPCId;
            this.position = position;
            this.continent = continent;
            this.alreadyDiscovered = alreadyDiscovered;
        }

        public FlightMasterDB(String name, int NPCId, Vector3 position, bool continent)
        {
            this.name = name;
            this.NPCId = NPCId;
            this.position = position;
            this.continent = continent;
            
        }

        public int NPCId { get; set; }
        public Vector3 position { get; set; }
        public String name { get; set; }
        public bool continent { get; set; }
        public bool alreadyDiscovered { get; set; }

    }

//Tram
public class Tram
{

    //Stormwind to Ironforge
    static Vector3 positionTramInIronforge = new Vector3(4.58065, 28.2097, 6.90526);
    static Vector3 positionTramInStormwind = new Vector3(4.581913, 2511.531, 7.091796);

    static Vector3 positionWaitTramIronforge = new Vector3(19.1, 28, -4.3);
    static Vector3 positionOnTramIronforge = new Vector3(4.8, 28.1, -4.3);

    static Vector3 positionWaitTramStormwind = new Vector3(15.3, 2510.4, -4.3);
    static Vector3 positionOnTramStormwind = new Vector3(4.3, 2510.6, -4.3);

    static Vector3 enterStormwindInside = new Vector3(67, 2490.7, -4.3);
    static Vector3 enterIronforgeInside = new Vector3(64.5, 10.2, -4.3);

    static Vector3 enterStormwindOutside = new Vector3(-8365, 536.9, 91.8);
    static Vector3 enterIronforgeOutside = new Vector3(-4836.7, -1304.6, 501.9);

    static Vector3 leavePosIronforge = new Vector3(-10.6, 30.2, -4.3);
    static Vector3 leavePosStormwind = new Vector3(-10.6, 2510.9, -4.3);

    static Vector3 playerFellDownIronforge = new Vector3(4.5, 28, -13.9);

    static int[] tramEntryArray = new int[6] { 176080, 176082, 176083, 176084, 176085, 176081 };

    //Ironforge to Stormwind
    static Vector3 waitPosPlayerInStormwindToIronforge = new Vector3(-32.8, 2512.1, -4.3);

    //Pos where upper Tram arrives and waits in Stormwind
    static Vector3 waitPosTramSwTramStormwind = new Vector3(-45.4007, 2512.15, 6.90526);
    //Pos where player waits on upper tram in Stormwind
    static Vector3 waitPosPlayerSwTramStormwind = new Vector3(-45.20206, 2512.266, -3.562748);

    static Vector3 waitPosSwTramIronforge = new Vector3(-45.399, 30.38013, 5.877773);

    static Vector3 leavePosSwTramIronforge = new Vector3(-61.8, 30.3, -4.3);
    static Vector3 waitPlayerOnTramPosSwTramIronforge = new Vector3(-34.49804, 2511.917, -4.3);
    static Vector3 posPlayerOnTramSwToIfInIronforge = new Vector3(-20.9837, 2459.93, -4.297);

    static Vector3 playerFellDownStormwind = new Vector3(-45, 2512.6, -13.9);

    static bool isRestarted = false;
    static Process[] pname = Process.GetProcessesByName(AppDomain.CurrentDomain.FriendlyName.Remove(AppDomain.CurrentDomain.FriendlyName.Length - 4));
    static Vector3 nullVector = new Vector3(0, 0, 0);


    public static void restartTram(String from)
    {
        switch(from)
        {
            case ("Stormwind"):
                takeTramStormwind();
                break;
            case ("Ironforge"):
                takeTramIronforge();
                break;
            default:
                Logging.Write("Something failed");
                break;
        }
    }

    public static void end()
    {
        Logging.Write("[FNV_Quester]: Ending Tream");
    }



    public static void takeTramStormwind()
    {
        Logging.Write("[FNV_Quester]: Taking Tram from Stormwind to Ironforge");

        if(!Usefuls.MapZoneName.Contains("Deep"))
        {
            while(!GoToTask.ToPosition(enterStormwindOutside))
            {
                GoToTask.ToPosition(enterStormwindOutside);
                Thread.Sleep(250);
            }

            wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;
            Logging.Write("[FNV_Quester]: Disable teleport during Tram");
            wManager.Wow.Helpers.MovementManager.Face(new Vector3(-8353.4, 521.4, 91.8));

            while(!Usefuls.MapZoneName.Contains("Deep"))
            {
                wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 250);
                Thread.Sleep(robotManager.Helpful.Others.Random(25, 50));
            }

        }

        if(Usefuls.MapZoneName.Contains("Deep"))
        {
            if(!GoToTask.ToPosition(enterStormwindInside))
            {
                GoToTask.ToPosition(enterStormwindInside);
                Thread.Sleep(250);
            }
            while(!GoToTask.ToPosition(waitPosPlayerInStormwindToIronforge))
            {
                GoToTask.ToPosition(waitPosPlayerInStormwindToIronforge);
                Thread.Sleep(250);
            }

            wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;
            var tram = (WoWGameObject)null;

            try
            {
                tram = chooseTramStormwind();
            }
            catch
            {

            }


            if(tram != null &amp;&amp; ObjectManager.Me.Position.DistanceTo(tram.Position) &lt; 200 &amp;&amp; !tram.Position.Equals(nullVector))
            {
                Logging.Write("[FNV_Quester]: Bad circle, restart... .");
                isRestarted = true;
                takeTramStormwind();
                end();
            }

            if(!isRestarted)
            {

                if(tram != null &amp;&amp; tram.Position.DistanceTo(nullVector) &gt; 1)
                {
                    while(tram.Position.DistanceTo(waitPosTramSwTramStormwind) &gt;= 5 || ObjectManager.Me.Position.DistanceTo(waitPosPlayerInStormwindToIronforge) &gt;= 5)
                    {
                        Thread.Sleep(500);
                    }

                    if(tram.Position.DistanceTo(waitPosTramSwTramStormwind) &lt; 5)
                    {
                        Lua.LuaDoString("ClearTarget()");
                        wManager.Wow.Helpers.MovementManager.Face(waitPosPlayerSwTramStormwind);

                        while(ObjectManager.Me.Position.DistanceTo(waitPosPlayerSwTramStormwind) &gt; 1)
                        {
                            MovementManager.MoveTo(waitPosPlayerSwTramStormwind);
                            Thread.Sleep(1000);

                            if(ObjectManager.Me.Position.DistanceTo(playerFellDownStormwind) &lt; 4)
                            {
                                Logging.Write("[FNV_Quester]: Fell down, while trying to take tram. Restart...");
                                restartTram("Stormwind");
                            }
                        }

                        GoToTask.ToPosition(waitPosPlayerSwTramStormwind);
                    }

                    while(tram.Position.DistanceTo(waitPosSwTramIronforge) &gt; 5)
                    {
                        Thread.Sleep(3000);
                    }

                    if(ObjectManager.Me.HaveBuff("Stealth"))
                    {
                        Lua.LuaDoString("CastSpellByName('Stealth')");
                    }

                    wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 1500);

                    if(ObjectManager.Me.Position.DistanceTo(posPlayerOnTramSwToIfInIronforge) &lt; 5)
                    {
                        MovementManager.MoveTo(leavePosSwTramIronforge);
                        Thread.Sleep(1000);

                        while(ObjectManager.Me.Position.DistanceTo(leavePosSwTramIronforge) &gt; 4)
                        {
                            MovementManager.MoveTo(leavePosSwTramIronforge);
                            Thread.Sleep(1000);
                        }
                    }

                    if(Usefuls.MapZoneName.Contains("Deep"))
                    {
                        if(!GoToTask.ToPosition(enterIronforgeInside))
                        {
                            GoToTask.ToPosition(enterIronforgeInside);
                            Thread.Sleep(250);
                        }
                    }

                    while(Usefuls.MapZoneName.Contains("Deep"))
                    {
                        wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 250);
                        Thread.Sleep(robotManager.Helpful.Others.Random(25, 50));
                    }

                    Logging.Write("[FNV_Quester]: Re enable teleport ");
                    wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = true;


                    while(!GoToTask.ToPosition(enterIronforgeOutside))
                    {
                        wManager.Wow.Helpers.MovementManager.Face(enterIronforgeOutside);
                        GoToTask.ToPosition(enterIronforgeOutside);
                        Thread.Sleep(250);
                    }

                }
                else if(Usefuls.MapZoneName.Contains("Tram") || Usefuls.MapZoneName.Contains("Stormwind"))
                {
                    Logging.Write("[FNV_Quester]: Unable to find tram, restart... .");
                    isRestarted = true;
                    restartTram("Stormwind");
                }

            }
        }

        isRestarted = false;
    }

    public static WoWGameObject chooseTramIronforge()
    {
        List&lt;WoWGameObject&gt; tramList = new List&lt;WoWGameObject&gt;();
        var tramTemp = (WoWGameObject)null;

        foreach(int ele in tramEntryArray)
        {
            tramTemp = null;
            try
            {
                tramTemp = ObjectManager.GetWoWGameObjectByEntry(ele).OrderBy(o =&gt; o.GetDistance).FirstOrDefault();
            }
            catch
            {
            }

            if(tramTemp != null &amp;&amp; tramTemp.IsValid &amp;&amp; !tramTemp.Equals((WoWGameObject)null) &amp;&amp; tramTemp.ToString().Contains("Subway"))
            {
                tramList.Add(tramTemp);
            }
            else
            {

            }
        }

        float distance = 0;
        float entryDistance = 0;
        foreach(var ele in tramList)
        {
            if(ObjectManager.Me.Position.DistanceTo(ele.Position) &gt;= distance)
            {
                distance = ObjectManager.Me.Position.DistanceTo(ele.Position);
                entryDistance = ele.Entry;
            }
        }

        foreach(var ele in tramList)
        {
            if(ele.Entry == entryDistance &amp;&amp; ele != null &amp;&amp; !ele.Position.Equals(nullVector))
            {
                if(ObjectManager.Me.Position.DistanceTo(ele.Position) &lt; 200)
                {
                    Logging.Write("[FNV_Quester]: Bad circle, restart... .");
                    restartTram("Ironforge");
                }

                Logging.Write("[FNV_Quester]: Choosing tram id: " + ele.Entry + " with a current position of " + ele.Position);
                return ele;
            }
        }
        return null;
    }

    public static WoWGameObject chooseTramStormwind()
    {
        List&lt;WoWGameObject&gt; tramList = new List&lt;WoWGameObject&gt;();
        var tramTemp = (WoWGameObject)null;

        foreach(int ele in tramEntryArray)
        {
            tramTemp = null;
            try
            {
                tramTemp = ObjectManager.GetWoWGameObjectByEntry(ele).OrderBy(o =&gt; o.GetDistance).FirstOrDefault();
            }
            catch
            {
            }

            if(tramTemp != null &amp;&amp; tramTemp.IsValid &amp;&amp; !tramTemp.Equals((WoWGameObject)null) &amp;&amp; tramTemp.ToString().Contains("Subway"))
            {
                tramList.Add(tramTemp);
            }
            else
            {

            }
        }

        float distance = 99999;
        float entryDistance = 0;
        foreach(var ele in tramList)
        {
            if(ObjectManager.Me.Position.DistanceTo(ele.Position) &lt;= distance)
            {
                distance = ObjectManager.Me.Position.DistanceTo(ele.Position);
                entryDistance = ele.Entry;
            }
        }

        foreach(var ele in tramList)
        {
            if(ele.Entry == entryDistance &amp;&amp; ele != null &amp;&amp; !ele.Position.Equals(nullVector))
            {
                if(ObjectManager.Me.Position.DistanceTo(ele.Position) &lt; 200)
                {
                    Logging.Write("[FNV_Quester]: Bad circle, restart... .");
                    restartTram("Stormwind");
                }

                Logging.Write("[FNV_Quester]: Choosing tram id: " + ele.Entry + " with a current position of " + ele.Position);
                return ele;
            }
        }

        return null;
    }

    public static void takeTramIronforge()
    {
        Logging.Write("[FNV_Quester]: Taking Tram from Ironforge to Stormwind");

        if(!Usefuls.MapZoneName.Contains("Deep"))
        {
            while(!GoToTask.ToPosition(enterIronforgeOutside))
            {
                GoToTask.ToPosition(enterIronforgeOutside);
                Thread.Sleep(250);
            }

            wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;
            Logging.Write("[FNV_Quester]: Disable teleport during Tram");
            wManager.Wow.Helpers.MovementManager.Face(new Vector3(-4839.4, -1320.9, 501.9));

            while(!Usefuls.MapZoneName.Contains("Deep"))
            {
                wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 250);
                Thread.Sleep(robotManager.Helpful.Others.Random(25, 50));
            }
        }

        if(Usefuls.MapZoneName.Contains("Deep"))
        {
            if(!GoToTask.ToPosition(enterIronforgeInside))
            {
                GoToTask.ToPosition(enterIronforgeInside);
                Thread.Sleep(250);
            }

            var pathEins = new List&lt;Vector3&gt;() {
new Vector3(42.56478f, 10.32987f, -4.29664f, "None"),
new Vector3(36.11083f, 10.30502f, -4.29664f, "None"),
new Vector3(29.11088f, 10.27806f, -4.29664f, "None"),
new Vector3(25.49891f, 10.26415f, -4.29664f, "None"),
new Vector3(20.57794f, 10.2452f, -4.29664f, "None"),
new Vector3(16.61328f, 11.97739f, -4.29664f, "None"),
new Vector3(17.03823f, 18.79025f, -4.29664f, "None"),
new Vector3(19.41723f, 25.35655f, -4.29664f, "None"),
};


                        while(ObjectManager.Me.Position.DistanceTo2D(pathEins.Last&lt;Vector3&gt;()) &gt; 5)
                        {
                            MovementManager.Go(pathEins); // or MovementManager.GoLoop(path);
                        }

            while(!GoToTask.ToPosition(positionWaitTramIronforge))
            {
                GoToTask.ToPosition(positionWaitTramIronforge);
                Thread.Sleep(250);
            }

            wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;

            var tram = (WoWGameObject)null;

            try
            {
                tram = chooseTramIronforge();
            }
            catch
            {

            }

            if(ObjectManager.Me.Position.DistanceTo(tram.Position) &lt; 200 &amp;&amp; tram != null &amp;&amp; !tram.Position.Equals(nullVector))
            {
                Logging.Write("[FNV_Quester]: Bad circle, restart... .");
                isRestarted = true;
                restartTram("Ironforge");
                end();
            }

            if(!isRestarted)
            {

                if(tram != null &amp;&amp; tram.Position.DistanceTo(nullVector) &gt; 1)
                {


                    while(tram.Position.DistanceTo(positionTramInIronforge) &gt;= 5 &amp;&amp; Usefuls.MapZoneName.Contains("Deep") &amp;&amp; !tram.Position.Equals(nullVector))
                    {
                        Thread.Sleep(1000);
                    }


                    if(tram.Position.DistanceTo(positionTramInIronforge) &lt; 5 &amp;&amp; Usefuls.MapZoneName.Contains("Deep"))
                    {
                        Lua.LuaDoString("ClearTarget()");
                        wManager.Wow.Helpers.MovementManager.Face(positionOnTramIronforge);

                        while(ObjectManager.Me.Position.DistanceTo(positionOnTramIronforge) &gt; 2)
                        {
                            MovementManager.MoveTo(positionOnTramIronforge);
                            Thread.Sleep(1000);

                            if(ObjectManager.Me.Position.DistanceTo(playerFellDownIronforge) &lt; 4)
                            {
                                Logging.Write("[FNV_Quester]: Fell down, while trying to take tram. Restart");
                                restartTram("Ironforge");
                            }
                        }

                        GoToTask.ToPosition(positionOnTramIronforge);
                    }


                    while(tram.Position.DistanceTo(positionTramInStormwind) &gt; 5 &amp;&amp; Usefuls.MapZoneName.Contains("Deep"))
                    {
                        Thread.Sleep(3000);
                    }

                    if(ObjectManager.Me.Position.DistanceTo(positionOnTramStormwind) &lt; 5 &amp;&amp; Usefuls.MapZoneName.Contains("Deep"))
                    {

                        Vector3 leavingTramPos = new Vector3(-4.500117, 2510.398, -4.18221, "None");
                        Vector3 leavingTramPosZwei = new Vector3(-8.363175, 2510.536, -4.291304, "None");

                        MovementManager.MoveTo(leavingTramPos);
                        Thread.Sleep(1000);
                        MovementManager.MoveTo(leavingTramPosZwei);
                        Thread.Sleep(1000);

                        var pathZwei = new List&lt;Vector3&gt;() {
new Vector3(-8.722651f, 2521.781f, -4.296569f, "None"),
new Vector3(-8.406331f, 2528.227f, -4.296569f, "None"),
new Vector3(-5.509378f, 2534.194f, -4.296569f, "None"),
new Vector3(1.102043f, 2536.338f, -4.296569f, "None"),
new Vector3(8.024714f, 2535.66f, -4.296569f, "None"),
new Vector3(13.7771f, 2531.926f, -4.296569f, "None"),
new Vector3(15.53208f, 2525.218f, -4.296569f, "None"),
new Vector3(19.39666f, 2520.334f, -4.296569f, "None"),
new Vector3(26.3053f, 2519.244f, -4.296569f, "None"),
new Vector3(31.07252f, 2514.534f, -4.296569f, "None"),
new Vector3(32.08603f, 2507.629f, -4.296569f, "None"),
new Vector3(32.20792f, 2500.735f, -4.296569f, "None"),
new Vector3(32.69915f, 2493.784f, -4.296569f, "None"),
new Vector3(38.39471f, 2490.469f, -4.296569f, "None"),
new Vector3(45.39016f, 2490.699f, -4.296569f, "None"),
new Vector3(52.39009f, 2490.728f, -4.296569f, "None"),
new Vector3(55.99506f, 2490.741f, -4.296569f, "None"),
new Vector3(62.99502f, 2490.766f, -4.296569f, "None"),
};


                        while(ObjectManager.Me.Position.DistanceTo2D(pathZwei.Last&lt;Vector3&gt;()) &gt; 5)
                        {
                            MovementManager.Go(pathZwei); // or MovementManager.GoLoop(path);

                            if(ObjectManager.Me.Position.DistanceTo2D(pathZwei.Last&lt;Vector3&gt;()) &lt;= 5)
                                break;
                        }


                        //MovementManager.MoveTo(leavePosStormwind);
                        /*
                        while(ObjectManager.Me.Position.DistanceTo(leavePosStormwind) &gt; 4)
                        {
                            MovementManager.MoveTo(leavePosStormwind);
                            Thread.Sleep(1000);

                        } */

                    }

                    if(Usefuls.MapZoneName.Contains("Deep"))
                    {
                        if(!GoToTask.ToPosition(enterStormwindInside))
                        {
                            GoToTask.ToPosition(enterStormwindInside);
                            Thread.Sleep(250);
                        }
                    }

                    while(Usefuls.MapZoneName.Contains("Deep"))
                    {
                        wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 250);
                        Thread.Sleep(robotManager.Helpful.Others.Random(25, 50));
                    }

                    Logging.Write("Re enable teleport ");
                    wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = true;


                    while(!GoToTask.ToPosition(enterStormwindOutside))
                    {
                        wManager.Wow.Helpers.MovementManager.Face(enterStormwindOutside);
                        GoToTask.ToPosition(enterStormwindOutside);
                        Thread.Sleep(250);
                    }

                }
                else if(Usefuls.MapZoneName.Contains("Tram") || Usefuls.MapZoneName.Contains("Ironforge"))
                {
                    Logging.Write("[FNV_Quester]: Unable to find tram, restart... .");
                    isRestarted = true;
                    restartTram("Ironforge");
                }

            }
        }
        isRestarted = false;
    }

    /*
    public static void takeTramIronforge()
    {
        Logging.Write("[FNV_Quester]: Taking Tram from Ironforge to Stormwind");

        if(!Usefuls.MapZoneName.Contains("Deep"))
        {
            while(!GoToTask.ToPosition(enterIronforgeOutside))
            {
                GoToTask.ToPosition(enterIronforgeOutside);
                Thread.Sleep(250);
            }

            wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;
            Logging.Write("[FNV_Quester]: Disable teleport during Tram");
            wManager.Wow.Helpers.MovementManager.Face(new Vector3(-4839.4, -1320.9, 501.9));

            while(!Usefuls.MapZoneName.Contains("Deep"))
            {
                wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 250);
                Thread.Sleep(robotManager.Helpful.Others.Random(25, 50));
            }
        }

        if(Usefuls.MapZoneName.Contains("Deep"))
        {
            if(!GoToTask.ToPosition(enterIronforgeInside))
            {
                GoToTask.ToPosition(enterIronforgeInside);
                Thread.Sleep(250);
            }

            GoToTask.ToPosition(new Vector3(26.31003, 9.936551, -4.29664));
            Thread.Sleep(250);
            GoToTask.ToPosition(new Vector3(17.09965, 12.71437, -4.29664));
            Thread.Sleep(250);
            GoToTask.ToPosition(new Vector3(18.14983, 22.89955, -4.29664));
            Thread.Sleep(250);

            while(!GoToTask.ToPosition(positionWaitTramIronforge))
            {
                GoToTask.ToPosition(positionWaitTramIronforge);
                Thread.Sleep(250);
            }

            wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;

            var tram = (WoWGameObject)null;

            try
            {
                tram = chooseTramIronforge();
            }
            catch
            {

            }

            if(ObjectManager.Me.Position.DistanceTo(tram.Position) &lt; 200 &amp;&amp; tram != null &amp;&amp; !tram.Position.Equals(nullVector))
            {
                Logging.Write("[FNV_Quester]: Bad circle, restart... .");
                isRestarted = true;
                restartTram("Ironforge");
                end();
            }

            if(!isRestarted)
            {

                if(tram != null &amp;&amp; tram.Position.DistanceTo(nullVector) &gt; 1)
                {


                    while(tram.Position.DistanceTo(positionTramInIronforge) &gt;= 5 &amp;&amp; Usefuls.MapZoneName.Contains("Deep") &amp;&amp; !tram.Position.Equals(nullVector))
                    {
                        Thread.Sleep(1000);
                    }


                    if(tram.Position.DistanceTo(positionTramInIronforge) &lt; 5 &amp;&amp; Usefuls.MapZoneName.Contains("Deep"))
                    {
                        Lua.LuaDoString("ClearTarget()");
                        wManager.Wow.Helpers.MovementManager.Face(positionOnTramIronforge);

                        while(ObjectManager.Me.Position.DistanceTo(positionOnTramIronforge) &gt; 2)
                        {
                            wManager.Wow.Helpers.MovementManager.Face(positionOnTramIronforge);
                            wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 125);
                            Thread.Sleep(robotManager.Helpful.Others.Random(10, 25));

                            if(ObjectManager.Me.Position.DistanceTo(playerFellDownIronforge) &lt; 4)
                            {
                                Logging.Write("[FNV_Quester]: Fell down, while trying to take tram. Restart");
                                restartTram("Ironforge");
                            }
                        }

                        GoToTask.ToPosition(positionOnTramIronforge);
                    }


                    while(tram.Position.DistanceTo(positionTramInStormwind) &gt; 5 &amp;&amp; Usefuls.MapZoneName.Contains("Deep"))
                    {
                        Thread.Sleep(3000);
                    }

                    if(ObjectManager.Me.Position.DistanceTo(positionOnTramStormwind) &lt; 5 &amp;&amp; Usefuls.MapZoneName.Contains("Deep"))
                    {

                        wManager.Wow.Helpers.Move.StrafeLeft(Move.MoveAction.PressKey, 350);

                        while(ObjectManager.Me.Position.DistanceTo(leavePosStormwind) &gt; 4)
                        {
                            wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 125);
                            Thread.Sleep(robotManager.Helpful.Others.Random(10, 25));

                        }

                    }

                    if(Usefuls.MapZoneName.Contains("Deep"))
                    {
                        if(!GoToTask.ToPosition(enterStormwindInside))
                        {
                            GoToTask.ToPosition(enterStormwindInside);
                            Thread.Sleep(250);
                        }
                    }

                    while(Usefuls.MapZoneName.Contains("Deep"))
                    {
                        wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 250);
                        Thread.Sleep(robotManager.Helpful.Others.Random(25, 50));
                    }

                    Logging.Write("Re enable teleport ");
                    wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = true;


                    while(!GoToTask.ToPosition(enterStormwindOutside))
                    {
                        wManager.Wow.Helpers.MovementManager.Face(enterStormwindOutside);
                        GoToTask.ToPosition(enterStormwindOutside);
                        Thread.Sleep(250);
                    }

                }
                else if(Usefuls.MapZoneName.Contains("Tram") || Usefuls.MapZoneName.Contains("Ironforge"))
                {
                    Logging.Write("[FNV_Quester]: Unable to find tram, restart... .");
                    isRestarted = true;
                    restartTram("Ironforge");
                }

            }
        }
        isRestarted = false;
    }
    */
}

//Additional functions for quests
public class Quests
{
    public static void abandon(string questName)
    {
        wManager.Wow.Helpers.Lua.LuaDoString("local name = '" + questName + "' for i=1,GetNumQuestLogEntries() do local questTitle, level, questTag, suggestedGroup, isHeader, isCollapsed, isComplete = GetQuestLogTitle(i) if string.find(questTitle, name) then SelectQuestLogEntry(i) SetAbandonQuest() AbandonQuest() end end");

    }

    public static bool hasFailed(string questName)
    {
        int temp = 0;
        temp = wManager.Wow.Helpers.Lua.LuaDoString&lt;int&gt;("local name = '" + questName + "'  for i=1,GetNumQuestLogEntries() do local questTitle, level, questTag, suggestedGroup, isHeader, isCollapsed, isComplete = GetQuestLogTitle(i) if string.find(questTitle, name) then SelectQuestLogEntry(i) local questTimer = GetQuestLogTimeLeft() return questTimer end end");

        if(temp &gt; 8)
        {
            return false;
        }
        else
        {
            return true;
        }
    }

    public static bool isComplete(string questName)
    {
        int temp;
        temp = wManager.Wow.Helpers.Lua.LuaDoString&lt;int&gt;("local name = '" + questName + "'  for i=1,GetNumQuestLogEntries() do local questTitle, level, questTag, isHeader, isCollapsed, isComplete = GetQuestLogTitle(i) if string.find(questTitle, name) then local questTitleZ, levelZ, questTagZ, isHeaderZ, isCollapsedZ, isCompleteZ = GetQuestLogTitle(i) return isCompleteZ end end");

        if(temp == 1)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    public static bool isFailed(string questName)
    {
        int temp;
        temp = wManager.Wow.Helpers.Lua.LuaDoString&lt;int&gt;("local name = '" + questName + "'  for i=1,GetNumQuestLogEntries() do local questTitle, level, questTag, isHeader, isCollapsed, isComplete = GetQuestLogTitle(i) if string.find(questTitle, name) then local questTitleZ, levelZ, questTagZ, isHeaderZ, isCollapsedZ, isCompleteZ = GetQuestLogTitle(i) return isCompleteZ end end");

        if(temp == -1)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
}


public class ProgressSettings : Settings
{
    public static bool inProgress = false;
        public static void Initialize()
        {
            ProgressSettings.Load();
        }

        public static void Dispose()
        {
            ProgressSettings.CurrentSettings.Save();
            //isLaunched = false;
        }

        public void Settings()
        {
            ProgressSettings.Load();
            ProgressSettings.CurrentSettings.ToForm();
            ProgressSettings.CurrentSettings.Save();
        }

    public ProgressSettings()
    {
        this.launcher = 2;
        this.dwarfStart = 1 + 1;
        this.humanStart = 1 + 1;
        this.nightelfStart = 1 + 1;
        this.dwarfHunter = 1 + 1;
        this.nightelfHunter = 1 + 1;
        this.nightelfDruid = 1 + 1;
        this.warlock = 1 + 1;
        this.kharanos = 1 + 1;
        this.elwynn = 1 + 1;
        this.westfallEins = 1 + 1;
        this.lochModanEins = 1 + 1;
        this.darkshoreEins = 10 + 1;
        this.westfallZwei = 1 + 1;
        this.lochModanZwei = 1 + 1;
        this.darkshoreZwei = 6 + 1;
        this.westfallDrei = 1 + 1;
        this.redridge = 1 + 1;
        this.duskwoodEins = 1 + 1;
        this.stonetalon = 14 + 1;
        this.darkshoreDrei = 1 + 1;
        this.duskwoodZwei = 1 + 1;
        this.wetlandsEins = 1 + 1;
        this.ashenvaleEins = 7 + 1;
        this.wetlandsZwei = 1 + 1;
        this.duskwoodDrei = 2 + 1;
        this.ashenvaleZwei = 7 + 1;
        this.duskwoodVier = 2 + 1;
        this.ashenvaleDrei = 6 + 1;
        this.thousandNeedles = 7 + 1;
        this.desolaceEins = 7 + 1;
        this.hillsbradEins = 2 + 1;
        this.stranglethornEins = 2 + 1;
        this.stranglethornZwei = 2 + 1;
        this.hillsbradZwei = 2 + 1;
        this.arathiEins = 2 + 1;
        this.stranglethornDrei = 2 + 1;
        this.dustwallowEins = 10 + 1;
        this.desolaceZwei = 9 + 1;
        this.swampOfSorrowsEins = 2 + 1;
        this.stranglethornVier = 2 + 1;
        this.badlandsEins = 2 + 1;
        this.alteracMountain = 2 + 1;
        this.badlandsZwei = 2 + 1;
        this.tanarisEins = 7 + 1;
        this.stranglethornFünf  = 2 + 1;
        this.hinterlandsEins = 2 + 1;
        this.feralasEins = 7 + 1;
        this.hinterlandsZwei = 2 + 1;

                //48+

        this.hinterlandsDrei = 2 + 1;
        this.blastedLandsEins = 2 + 1;
        this.blastedLandsZwei = 2 + 1;
        this.blastedLandsDrei = 2 + 1;
        this.burningSteppesEins = 2 + 1;
        this.burningSteppesZwei = 2 + 1;
        this.burningSteppesDrei = 2 + 1;
        this.easternPleaguelandsEins = 2 + 1;
        this.easternPleaguelandsZwei = 2 + 1;
        this.easternPleaguelandsDrei = 2 + 1;
        this.searingGorgeEins = 2 + 1;
        this.searingGorgeZwei = 2 + 1;
        this.searingGorgeDrei = 2 + 1;
        this.swampOfSorrowsZwei = 2 + 1;
        this.westernPleaguelandsEins = 2 + 1;
        this.westernPleaguelandsZwei = 2 + 1;
        this.westernPleaguelandsDrei = 2 + 1;

        //48+ Kalimdor

        this.azsharaEins = 7 + 1;
        this.azsharaZwei = 7 + 1;
        this.azsharaDrei = 7 + 1;
        this.felwoodEins = 7 + 1;
        this.felwoodZwei = 7 + 1;
        this.felwoodDrei = 7 + 1;
        this.silithusEins = 7 + 1;
        this.silithusZwei = 7 + 1;
        this.silithusDrei = 7 + 1;
        this.feralasZwei = 7 + 1;
        this.feralasDrei = 7 + 1;
        this.feralasVier = 7 + 1;
        this.tanarisZwei = 7 + 1;
        this.tanarisDrei = 7 + 1;
        this.ungoroEins = 7 + 1;
        this.ungoroZwei = 7 + 1;
        this.ungoroDrei = 7 + 1;
        this.winterspringEins = 7 + 1; 
        this.winterspringZwei = 7 + 1;
        this.winterspringDrei = 7 + 1;
        this.winterspringVier = 7 + 1;
    }
    

      public static ProgressSettings CurrentSettings { get; set; }

        public bool Save()
        {
            try
            {
                return Save(AdviserFilePathAndName("FNV_Progress", ObjectManager.Me.Name + "." + Usefuls.RealmName));
            }
            catch(Exception e)
            {
                Logging.WriteDebug("FNV_Progress =&gt; Save(): " + e);
                return false;
            }
        }

        public static bool Load()
        {
            try
            {
                if(File.Exists(AdviserFilePathAndName("FNV_Progress", ObjectManager.Me.Name + "." + Usefuls.RealmName)))
                {
                    CurrentSettings = Load&lt;ProgressSettings&gt;(AdviserFilePathAndName("FNV_Progress", ObjectManager.Me.Name + "." + Usefuls.RealmName));
                    return true;
                }

                ProgressSettings.CurrentSettings = new ProgressSettings();
            }
            catch(Exception e)
            {
                Logging.WriteDebug("FNV_Progress =&gt; Load(): " + e);
            }
            return false;
        }

    public static bool ResetCurrentCharactersProgressSaver()
    {
        try
        {
            if(File.Exists(AdviserFilePathAndName("FNV_Progress", ObjectManager.Me.Name + "." + Usefuls.RealmName)))
            {
                File.Delete(AdviserFilePathAndName("FNV_Progress", ObjectManager.Me.Name + "." + Usefuls.RealmName));
                ProgressSettings.CurrentSettings = new ProgressSettings();
                Logging.Write("[FNV_Quester]: FNV_Progress file of " + ObjectManager.Me.Name + " on server " + Usefuls.RealmName + " successfully deleted");
                return true;
            }
            else
            {
                Logging.Write("[FNV_Quester]: No FNV_Progress file found for " + ObjectManager.Me.Name + " on server " + Usefuls.RealmName);
                return false;
            }
        }
        catch(Exception e)
        {
            Logging.WriteDebug("FNV_Progress =&gt; Load(): " + e);
        }
         return false;
    }

        public int launcher { get; set; }
        public int dwarfStart { get; set; }
        public int dwarfHunter { get; set; }
        public int nightelfHunter { get; set; }
        public int nightelfDruid { get; set; }
        public int warlock { get; set; }
        public int nightelfStart { get; set; }
        public int humanStart { get; set; }
        public int kharanos { get; set; }
        public int elwynn { get; set; }
        public int westfallEins { get; set; }
        public int lochModanEins { get; set; }
        public int darkshoreEins { get; set; }
        public int westfallZwei { get; set; }
        public int lochModanZwei { get; set; }
        public int darkshoreZwei { get; set; }
        public int westfallDrei { get; set; }
        public int redridge { get; set; }
        public int duskwoodEins { get; set; }
        public int darkshoreDrei { get; set; }
        public int stonetalon { get; set; }
        public int duskwoodZwei { get; set; }
        public int wetlandsEins { get; set; }
        public int ashenvaleEins { get; set; }
        public int wetlandsZwei { get; set; }
        public int duskwoodDrei { get; set; }
        public int ashenvaleZwei { get; set; }
        public int duskwoodVier { get; set; }
        public int ashenvaleDrei { get; set; }
        public int thousandNeedles { get; set; }
        public int desolaceEins { get; set; }
        public int hillsbradEins { get; set; }
        public int stranglethornEins { get; set; }
        public int stranglethornZwei{ get; set; }
        public int hillsbradZwei { get; set; }
        public int arathiEins { get; set; }
        public int stranglethornDrei { get; set; }
        public int dustwallowEins { get; set; }
        public int desolaceZwei { get; set; }
        public int badlandsEins { get; set; }
        public int swampOfSorrowsEins { get; set; }
        public int stranglethornVier { get; set; }
        public int alteracMountain { get; set; }
        public int badlandsZwei { get; set; }
        public int tanarisEins { get; set; }
        public int stranglethornFünf { get; set; }
        public int hinterlandsEins { get; set; }
        public int feralasEins { get; set; }
        public int hinterlandsZwei { get; set; }

        //48+ Eastern Kingdoms
        public int hinterlandsDrei { get; set; }
        public int blastedLandsEins { get; set; }
        public int blastedLandsZwei { get; set; }
        public int blastedLandsDrei { get; set; }
        public int burningSteppesEins { get; set; }
        public int burningSteppesZwei { get; set; }
        public int burningSteppesDrei { get; set; }
        public int easternPleaguelandsEins { get; set; }
        public int easternPleaguelandsZwei { get; set; }
        public int easternPleaguelandsDrei { get; set; }
        public int searingGorgeEins { get; set; }
        public int searingGorgeZwei { get; set; }
        public int searingGorgeDrei { get; set; }
        public int swampOfSorrowsZwei { get; set; }
        public int westernPleaguelandsEins { get; set; }
        public int westernPleaguelandsZwei { get; set; }
        public int westernPleaguelandsDrei { get; set; }

        //48+ Kalimdor

        public int azsharaEins { get; set; }
        public int azsharaZwei { get; set; }
        public int azsharaDrei { get; set; }
        public int felwoodEins { get; set; }
        public int felwoodZwei { get; set; }
        public int felwoodDrei { get; set; }
        public int silithusEins { get; set; }
        public int silithusZwei { get; set; }
        public int silithusDrei { get; set; }
        public int feralasZwei { get; set; }
        public int feralasDrei { get; set; }
        public int feralasVier { get; set; }
        public int tanarisZwei { get; set; }
        public int tanarisDrei { get; set; }
        public int ungoroEins { get; set; }
        public int ungoroZwei { get; set; }
        public int ungoroDrei { get; set; }
        public int winterspringEins { get; set; }
        public int winterspringZwei { get; set; }
        public int winterspringDrei { get; set; }
        public int winterspringVier { get; set; }





}


/*
    //Settings   
    public class QuesterSettings
    {
        private static bool isLaunched;

        public static void Initialize()
        {
            isLaunched = true;
            FNVSettings.Load();

            while(isLaunched &amp; Products.IsStarted)
            {
                Thread.Sleep(500);
                Dispose();
            }
        }

        public static void Dispose()
        {
            FNVSettings.CurrentSettings.Save();
            //isLaunched = false;
        }

        public void Settings()
        {
            FNVSettings.Load();
            FNVSettings.CurrentSettings.ToForm();
            FNVSettings.CurrentSettings.Save();
        }
    }

    */

    [Serializable]
    public class FNVSettings : Settings
    {

        public static bool inProgress = false;
        public static void Initialize()
        {
            FNVSettings.Load();
        }

        public static void Dispose()
        {
            FNVSettings.CurrentSettings.Save();
            //isLaunched = false;
        }

        public void Settings()
        {
            FNVSettings.Load();
            FNVSettings.CurrentSettings.ToForm();
            FNVSettings.CurrentSettings.Save();
        }

        public FNVSettings()
        {
        //Completed profiles -&gt; True == completed
        this.launcher = false;
        this.dwarfStart = false;
        this.humanStart = false;
        this.nightelfStart = false;
        this.dwarfHunter = false;
        this.nightelfHunter = false;
        this.nightelfDruid = false;
        this.warlock = false;
        this.kharanos = false;
        this.elwynn = false;
        this.westfallEins = false;
        this.lochModanEins = false;
        this.darkshoreEins = false;
        this.westfallZwei = false;
        this.lochModanZwei = false;
        this.darkshoreZwei = false;
        this.westfallDrei = false;
        this.redridge = false;
        this.duskwoodEins = false;
        this.darkshoreDrei = false;
        this.stonetalon = false;
        this.duskwoodZwei = false;
        this.wetlandsEins = false;
        this.ashenvaleEins = false;
        this.wetlandsZwei = false;
        this.duskwoodDrei = false;
        this.ashenvaleZwei = false;
        this.duskwoodVier = false;
        this.ashenvaleDrei = false;
        this.thousandNeedles = false;
        this.desolaceEins = false; 
        this.hillsbradEins = false; 
        this.stranglethornEins = false;
        this.stranglethornZwei = false;
        this.hillsbradZwei = false;
        this.arathiEins = false;
        this.stranglethornDrei = false;
        this.dustwallowEins = false; 
        this.desolaceZwei = false; 
        this.swampOfSorrowsEins = false; 
        this.stranglethornVier = false; 
        this.badlandsEins = false; 
        this.alteracMountain = false;
        this.badlandsZwei = false;
        this.tanarisEins = false;
        this.stranglethornFünf  = false;
        this.hinterlandsEins = false;
        this.feralasEins = false; 
        this.hinterlandsZwei = false; 

        //48+

        this.hinterlandsDrei = false; 
        this.blastedLandsEins = false; 
        this.blastedLandsZwei = false; 
        this.blastedLandsDrei = false; 
        this.burningSteppesEins = false; 
        this.burningSteppesZwei = false; 
        this.burningSteppesDrei = false; 
        this.easternPleaguelandsEins = false; 
        this.easternPleaguelandsZwei = false; 
        this.easternPleaguelandsDrei = false; 
        this.searingGorgeEins = false; 
        this.searingGorgeZwei = false; 
        this.searingGorgeDrei = false; 
        this.swampOfSorrowsZwei = false; 
        this.westernPleaguelandsEins = false; 
        this.westernPleaguelandsZwei = false; 
        this.westernPleaguelandsDrei = false; 

        //48+ Kalimdor

        this.azsharaEins = false; 
        this.azsharaZwei = false; 
        this.azsharaDrei = false; 
        this.felwoodEins = false; 
        this.felwoodZwei = false; 
        this.felwoodDrei = false; 
        this.silithusEins = false; 
        this.silithusZwei = false; 
        this.silithusDrei = false; 
        this.feralasZwei = false; 
        this.feralasDrei = false; 
        this.feralasVier = false; 
        this.tanarisZwei = false; 
        this.tanarisDrei = false; 
        this.ungoroEins = false; 
        this.ungoroZwei = false; 
        this.ungoroDrei = false; 
        this.winterspringEins = false; 
        this.winterspringZwei = false; 
        this.winterspringDrei = false; 
        this.winterspringVier = false; 

            //FlightMaster discovered
            //Eastern Kingdoms
            this.ArathiHighlands = false;
            this.Wetlands = false;
            this.WesternPlaguelands = false;
            this.EasternPlaguelands = false;
            this.HillsbradFoothills = false;
            this.TheHinterlands = false;
            this.LochModan = false;
            this.Ironforge = false;
            this.SearingGorge = false;
            this.BurningSteppes = false;
            this.RedridgeMountains = false;
            this.Stormwind = false;
            this.Westfall = false;
            this.Duskwood = false;
            this.StranglethornValley = false;
            this.BlastedLands = false;

            //Kalimdor
            this.Teldrassil = false;
            this.Darkshore = false;
            this.Winterspring = false;
            this.Azshara = false;
            this.Ashenvale = false;
            this.StonetalonMountains = false;
            this.Desolace = false;
            this.TheBarrens = false;
            this.Tanaris = false;
            this.FeralasFeathermoon = false;
            this.FeralasThalanaar = false;
            this.UngoroCrater = false;
            this.DustwallowMarsh = false;
            this.Silithus = false;
            this.Moonglade = false;
            this.Felwood = false;

        }

    public static void flightMasterSaveChanges(FlightMasterDB needToChange)
    {

        if(needToChange.name.Contains("Arathi"))
            CurrentSettings.ArathiHighlands = true;

        if(needToChange.name.Contains("Wetlands"))
            CurrentSettings.Wetlands = true;

        if(needToChange.name.Contains("Western"))
            CurrentSettings.WesternPlaguelands = true;

        if(needToChange.name.Contains("Eastern"))
            CurrentSettings.EasternPlaguelands = true;

        if(needToChange.name.Contains("Hillsbrad"))
            CurrentSettings.HillsbradFoothills = true;

        if(needToChange.name.Contains("Hinterlands"))
            CurrentSettings.TheHinterlands = true;

        if(needToChange.name.Contains("Modan"))
            CurrentSettings.LochModan = true;

        if(needToChange.name.Contains("Ironforge"))
            CurrentSettings.Ironforge = true;

        if(needToChange.name.Contains("Searing"))
            CurrentSettings.SearingGorge = true;

        if(needToChange.name.Contains("Burning"))
            CurrentSettings.BurningSteppes = true;

        if(needToChange.name.Contains("Redridge"))
            CurrentSettings.RedridgeMountains = true;

        if(needToChange.name.Contains("Stormwind"))
            CurrentSettings.Stormwind = true;

        if(needToChange.name.Contains("Westfall"))
            CurrentSettings.Westfall = true;

        if(needToChange.name.Contains("Duskwood"))
            CurrentSettings.Duskwood = true;

        if(needToChange.name.Contains("Stranglethorn"))
            CurrentSettings.StranglethornValley = true;

        if(needToChange.name.Contains("Blasted"))
            CurrentSettings.BlastedLands = true;

        if(needToChange.name.Contains("Teldrassil"))
            CurrentSettings.Teldrassil = true;

        if(needToChange.name.Contains("Darkshore"))
            CurrentSettings.Darkshore = true;

        if(needToChange.name.Contains("Winterspring"))
            CurrentSettings.Winterspring = true;

        if(needToChange.name.Contains("Azshara"))
            CurrentSettings.Azshara = true;

        if(needToChange.name.Contains("Ashenvale"))
            CurrentSettings.Ashenvale = true;

        if(needToChange.name.Contains("Stonetalon"))
            CurrentSettings.StonetalonMountains = true;

        if(needToChange.name.Contains("Desolace"))
            CurrentSettings.Desolace = true;

        if(needToChange.name.Contains("TheBarrens"))
            CurrentSettings.TheBarrens = true;

        if(needToChange.name.Contains("Tanaris"))
            CurrentSettings.Tanaris = true;

        if(needToChange.name.Contains("TheBarrens"))
            CurrentSettings.TheBarrens = true;

        if(needToChange.name.Contains("Feathermoon"))
            CurrentSettings.FeralasFeathermoon = true;

        if(needToChange.name.Contains("Thalanaar"))
            CurrentSettings.FeralasThalanaar = true;

        if(needToChange.name.Contains("ro Crater"))
            CurrentSettings.UngoroCrater = true;

        if(needToChange.name.Contains("Dustwallow"))
            CurrentSettings.DustwallowMarsh = true;

        if(needToChange.name.Contains("Silithus"))
            CurrentSettings.Silithus = true;

        if(needToChange.name.Contains("Felwood"))
            CurrentSettings.Felwood = true;
            
            FNVSettings.CurrentSettings.Save();
            Logging.Write("[FNV_Quester]: Settings saved of Flight Master " + needToChange.name);
            return;
    }

        public static void flightMasterSaveChanges(String needToChange)
    {

        if(needToChange.Contains("Arathi"))
            CurrentSettings.ArathiHighlands = true;

        if(needToChange.Contains("Wetlands"))
            CurrentSettings.Wetlands = true;

        if(needToChange.Contains("Western"))
            CurrentSettings.WesternPlaguelands = true;

        if(needToChange.Contains("Eastern"))
            CurrentSettings.EasternPlaguelands = true;

        if(needToChange.Contains("Hillsbrad"))
            CurrentSettings.HillsbradFoothills = true;

        if(needToChange.Contains("Hinterlands"))
            CurrentSettings.TheHinterlands = true;

        if(needToChange.Contains("Modan"))
            CurrentSettings.LochModan = true;

        if(needToChange.Contains("Ironforge"))
            CurrentSettings.Ironforge = true;

        if(needToChange.Contains("Searing"))
            CurrentSettings.SearingGorge = true;

        if(needToChange.Contains("Burning"))
            CurrentSettings.BurningSteppes = true;

        if(needToChange.Contains("Redridge"))
            CurrentSettings.RedridgeMountains = true;

        if(needToChange.Contains("Stormwind"))
            CurrentSettings.Stormwind = true;

        if(needToChange.Contains("Westfall"))
            CurrentSettings.Westfall = true;

        if(needToChange.Contains("Duskwood"))
            CurrentSettings.Duskwood = true;

        if(needToChange.Contains("Stranglethorn"))
            CurrentSettings.StranglethornValley = true;

        if(needToChange.Contains("Blasted"))
            CurrentSettings.BlastedLands = true;

        if(needToChange.Contains("Teldrassil"))
            CurrentSettings.Teldrassil = true;

        if(needToChange.Contains("Darkshore"))
            CurrentSettings.Darkshore = true;

        if(needToChange.Contains("Winterspring"))
            CurrentSettings.Winterspring = true;

        if(needToChange.Contains("Azshara"))
            CurrentSettings.Azshara = true;

        if(needToChange.Contains("Ashenvale"))
            CurrentSettings.Ashenvale = true;

        if(needToChange.Contains("Stonetalon"))
            CurrentSettings.StonetalonMountains = true;

        if(needToChange.Contains("Desolace"))
            CurrentSettings.Desolace = true;

        if(needToChange.Contains("TheBarrens"))
            CurrentSettings.TheBarrens = true;

        if(needToChange.Contains("Tanaris"))
            CurrentSettings.Tanaris = true;

        if(needToChange.Contains("TheBarrens"))
            CurrentSettings.TheBarrens = true;

        if(needToChange.Contains("Feathermoon"))
            CurrentSettings.FeralasFeathermoon = true;

        if(needToChange.Contains("Thalanaar"))
            CurrentSettings.FeralasThalanaar = true;

        if(needToChange.Contains("ro Crater"))
            CurrentSettings.UngoroCrater = true;

        if(needToChange.Contains("Dustwallow"))
            CurrentSettings.DustwallowMarsh = true;

        if(needToChange.Contains("Silithus"))
            CurrentSettings.Silithus = true;

        if(needToChange.Contains("Felwood"))
            CurrentSettings.Felwood = true;
            
            FNVSettings.CurrentSettings.Save();
            Logging.Write("[FNV_Quester]: Settings saved of Flight Master " + needToChange);
            return;
    }

        public static FNVSettings CurrentSettings { get; set; }

        public bool Save()
        {
            try
            {
                return Save(AdviserFilePathAndName("FNV_Quester", ObjectManager.Me.Name + "." + Usefuls.RealmName));
            }
            catch(Exception e)
            {
                Logging.WriteDebug("FNV_Quester =&gt; Save(): " + e);
                return false;
            }
        }

        public static bool Load()
        {
            try
            {
                if(File.Exists(AdviserFilePathAndName("FNV_Quester", ObjectManager.Me.Name + "." + Usefuls.RealmName)))
                {
                    CurrentSettings = Load&lt;FNVSettings&gt;(AdviserFilePathAndName("FNV_Quester", ObjectManager.Me.Name + "." + Usefuls.RealmName));
                    return true;
                }

                FNVSettings.CurrentSettings = new FNVSettings();
            }
            catch(Exception e)
            {
                Logging.WriteDebug("FNV_Quester =&gt; Load(): " + e);
            }
            return false;
        }

        //Finished profiles -&gt; True == completed
        public bool launcher { get; set; }
        public bool dwarfStart { get; set; }
        public bool dwarfHunter { get; set; }
        public bool nightelfHunter { get; set; }
        public bool nightelfDruid { get; set; }
        public bool warlock { get; set; }
        public bool nightelfStart { get; set; }
        public bool humanStart { get; set; }
        public bool kharanos { get; set; }
        public bool elwynn { get; set; }
        public bool westfallEins { get; set; }
        public bool lochModanEins { get; set; }
        public bool darkshoreEins { get; set; }
        public bool westfallZwei { get; set; }
        public bool lochModanZwei { get; set; }
        public bool darkshoreZwei { get; set; }
        public bool westfallDrei { get; set; }
        public bool redridge { get; set; }
        public bool duskwoodEins { get; set; }
        public bool darkshoreDrei { get; set; }
        public bool stonetalon { get; set; }
        public bool duskwoodZwei { get; set; }
        public bool wetlandsEins { get; set; }
        public bool ashenvaleEins { get; set; }
        public bool wetlandsZwei { get; set; }
        public bool duskwoodDrei { get; set; }
        public bool ashenvaleZwei { get; set; }
        public bool duskwoodVier { get; set; }
        public bool ashenvaleDrei { get; set; }
        public bool thousandNeedles { get; set; }
        public bool desolaceEins { get; set; }
        public bool hillsbradEins { get; set; }
        public bool stranglethornEins { get; set; }
        public bool stranglethornZwei{ get; set; }
        public bool hillsbradZwei { get; set; }
        public bool arathiEins { get; set; }
        public bool stranglethornDrei { get; set; }
        public bool dustwallowEins { get; set; }
        public bool desolaceZwei { get; set; }
        public bool swampOfSorrowsEins { get; set; }
        public bool stranglethornVier { get; set; }
        public bool badlandsEins { get; set; }
        public bool alteracMountain { get; set; }
        public bool badlandsZwei { get; set; }
        public bool tanarisEins { get; set; }
        public bool stranglethornFünf { get; set; }
        public bool hinterlandsEins { get; set; }
        public bool feralasEins { get; set; }
        public bool hinterlandsZwei { get; set; }

                //48+ Eastern Kingdoms
        public bool hinterlandsDrei { get; set; }
        public bool blastedLandsEins { get; set; }
        public bool blastedLandsZwei { get; set; }
        public bool blastedLandsDrei { get; set; }
        public bool burningSteppesEins { get; set; }
        public bool burningSteppesZwei { get; set; }
        public bool burningSteppesDrei { get; set; }
        public bool easternPleaguelandsEins { get; set; }
        public bool easternPleaguelandsZwei { get; set; }
        public bool easternPleaguelandsDrei { get; set; }
        public bool searingGorgeEins { get; set; }
        public bool searingGorgeZwei { get; set; }
        public bool searingGorgeDrei { get; set; }
        public bool swampOfSorrowsZwei { get; set; }
        public bool westernPleaguelandsEins { get; set; }
        public bool westernPleaguelandsZwei { get; set; }
        public bool westernPleaguelandsDrei { get; set; }

        //48+ Kalimdor

        public bool azsharaEins { get; set; }
        public bool azsharaZwei { get; set; }
        public bool azsharaDrei { get; set; }
        public bool felwoodEins { get; set; }
        public bool felwoodZwei { get; set; }
        public bool felwoodDrei { get; set; }
        public bool silithusEins { get; set; }
        public bool silithusZwei { get; set; }
        public bool silithusDrei { get; set; }
        public bool feralasZwei { get; set; }
        public bool feralasDrei { get; set; }
        public bool feralasVier { get; set; }
        public bool tanarisZwei { get; set; }
        public bool tanarisDrei { get; set; }
        public bool ungoroEins { get; set; }
        public bool ungoroZwei { get; set; }
        public bool ungoroDrei { get; set; }
        public bool winterspringEins { get; set; }
        public bool winterspringZwei { get; set; }
        public bool winterspringDrei { get; set; }
        public bool winterspringVier { get; set; }



       // public bool hinterlandsZwei { get; set; }

        public bool defaultSettings { get; set; }
       // public bool dwarfStart { get; set; }
       // public bool nightelfStart { get; set; }
        //public bool humanStart { get; set; }
      //  public bool westfallEins { get; set; }
        public bool lochModan { get; set; }
        public bool auberdine { get; set; }
       // public bool westfallZwei { get; set; }
        public bool lakeshire { get; set; }
        public bool wetlands { get; set; }
        public bool ashenvale { get; set; }
       // public bool thousandNeedles { get; set; }
        public bool dustwallow { get; set; }
        public bool badlands { get; set; }
        public bool alterac { get; set; }
        public bool swampOfSorrows { get; set; }
        public bool tanaris { get; set; }
        public bool stranglethorn { get; set; }
        //public bool hinterlandsEins { get; set; }
        public bool feralas { get; set; }
       // public bool hinterlandsZwei { get; set; }

        //FlightMaster
        //Eastern Kingdoms
        public bool Stormwind { get; set; }
        public bool Westfall { get; set; }
        public bool RedridgeMountains { get; set; }
        public bool Duskwood { get; set; }
        public bool StranglethornValley { get; set; }
        public bool Ironforge { get; set; }
        public bool BurningSteppes { get; set; }
        public bool BlastedLands { get; set; }
        public bool SearingGorge { get; set; }
        public bool LochModan { get; set; }
        public bool Wetlands { get; set; }
        public bool ArathiHighlands { get; set; }
        public bool HillsbradFoothills { get; set; }
        public bool WesternPlaguelands { get; set; }
        public bool EasternPlaguelands { get; set; }
        public bool TheHinterlands { get; set; }

        //Kalimdor
        public bool Ashenvale { get; set; }
        public bool Azshara { get; set; }
        public bool Darkshore { get; set; }
        public bool Teldrassil { get; set; }
        public bool Desolace { get; set; }
        public bool DustwallowMarsh { get; set; }
        public bool Felwood { get; set; }
        public bool FeralasFeathermoon { get; set; }
        public bool FeralasThalanaar { get; set; }
        public bool Moonglade { get; set; }
        public bool Silithus { get; set; }
        public bool StonetalonMountains { get; set; }
        public bool Tanaris { get; set; }
        public bool TheBarrens { get; set; }
        public bool UngoroCrater { get; set; }
        public bool Winterspring { get; set; }

    }

    //Buy and check bags
    public class bags
    {
        public static bool bagsStarted = false;

        public static int bagsEquipped()
        {
            int returnValue = 0;
            string empty = "";

            for(int i = 20; i &lt;= 23; i++)
            {
                empty = wManager.Wow.Helpers.Lua.LuaDoString&lt;string&gt;("return GetInventoryItemLink('player', " + i + ")");

                if(empty.Contains("o"))
                    returnValue++;
            }

            return returnValue;
        }

        public static string checkMoney()
        {
            string returnVariableNameZ = "";

            returnVariableNameZ = wManager.Wow.Helpers.Lua.LuaDoString("returnVariableNameZ = GetMoney() return returnVariableNameZ", returnVariableNameZ);

            return returnVariableNameZ;
        }

        public static bool canEquip()
        {
            string returnVariableName = "";

            returnVariableName = wManager.Wow.Helpers.Lua.LuaDoString("returnVariableName = GetInventoryItemLink('player', 23 ) return returnVariableName", returnVariableName);


            if(returnVariableName.Equals(""))
            {
                return true;
            }
            else
            {
                return false;
            }

        }

    }


    //Abandon Quests
    public class abandonQuest
    {

        public static void abandon(string questName)
        {

            string name = questName;

            wManager.Wow.Helpers.Lua.LuaDoString("local name = '" + name + "' for i=1,GetNumQuestLogEntries() do local questTitle, level, questTag, suggestedGroup, isHeader, isCollapsed, isComplete = GetQuestLogTitle(i) if string.find(questTitle, name) then SelectQuestLogEntry(i) SetAbandonQuest() AbandonQuest() end end");


        }

    }



    //Throw away items - by Reapler
    public class throwAway
    {
        public static int GetItemQuantity(string itemName)
        {
            var execute =
                "local itemCount = 0; " +
                "for b=0,4 do " +
                    "if GetBagName(b) then " +
                        "for s=1, GetContainerNumSlots(b) do " +
                            "local itemLink = GetContainerItemLink(b, s) " +
                            "if itemLink then " +
                                "local _, stackCount = GetContainerItemInfo(b, s)\t " +
                                "if string.find(itemLink, \"" + itemName + "\") then " +
                                    "itemCount = itemCount + stackCount; " +
                                "end " +
                            "end " +
                        "end " +
                    "end " +
                "end; " +
                "return itemCount; ";
            return Lua.LuaDoString&lt;int&gt;(execute);
        }

        /// &lt;summary&gt;
        /// Used to delete all items by name.
        /// &lt;/summary&gt;
        /// &lt;param name="itemName"&gt;The item to delete.&lt;/param&gt;
        /// &lt;param name="leaveAmount"&gt;The amount of items which remain in the bag.&lt;/param&gt;
        /// &lt;remarks&gt;Bug at links with "-"&lt;/remarks&gt;
        public static void DeleteItems(string itemName, int leaveAmount)
        {
            var itemQuantity = GetItemQuantity(itemName) - leaveAmount;
            if(string.IsNullOrWhiteSpace(itemName) || itemQuantity &lt;= 0)
                return;
            var execute =
                "local itemCount = " + itemQuantity + "; " +
                "local deleted = 0; " +
                "for b=0,4 do " +
                    "if GetBagName(b) then " +
                        "for s=1, GetContainerNumSlots(b) do " +
                            "local itemLink = GetContainerItemLink(b, s) " +
                            "if itemLink then " +
                                "local _, stackCount = GetContainerItemInfo(b, s)\t " +
                                "local leftItems = itemCount - deleted; " +
                                "if string.find(itemLink, \"" + itemName + "\") and leftItems &gt; 0 then " +
                                    "if stackCount &lt;= 1 then " +
                                        "PickupContainerItem(b, s); " +
                                        "DeleteCursorItem(); " +
                                        "deleted = deleted + 1; " +
                                    "else " +
                                        "if (leftItems &gt; stackCount) then " +
                                            "SplitContainerItem(b, s, stackCount); " +
                                            "DeleteCursorItem(); " +
                                            "deleted = deleted + stackCount; " +
                                        "else " +
                                            "SplitContainerItem(b, s, leftItems); " +
                                            "DeleteCursorItem(); " +
                                            "deleted = deleted + leftItems; " +
                                        "end " +
                                    "end " +
                                "end " +
                            "end " +
                        "end " +
                    "end " +
                "end; ";
            Lua.LuaDoString(execute);
        }
    }


public class Darnassus
{
    private static Vector3 darnassusEnterPos = new Vector3(8775.104, 962.8825, 30.33067);
    private static Vector3 darnassusLeavePos = new Vector3(9945.827, 2598.705, 1316.187);

    public static void enter()
    {
        Logging.Write("[FNV_Quester]: Moving to position to enter Darnassus portal...");

        GoToTask.ToPosition(darnassusEnterPos);

        Logging.Write("[FNV_Quester]: Enter Darnassus, disable teleport...");

        wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;

        Vector3 pos = new Vector3(8812.807f, 972.6884f, 32.50122f);

        while(ObjectManager.Me.Position.DistanceTo(pos) &gt; 1 &amp;&amp; Usefuls.SubMapZoneName.Contains("theran Village"))
        {
            wManager.Wow.Helpers.MovementManager.Face(pos);
            wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 125);
            Thread.Sleep(robotManager.Helpful.Others.Random(10, 25));
        }

        Logging.Write("[FNV_Quester]: Reenable teleport");

        wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = true;
    }

    public static void leave()
    {
        Logging.Write("[FNV_Quester]: Moving to position to leave Darnassus portal...");

        GoToTask.ToPosition(darnassusLeavePos);

        Logging.Write("[FNV_Quester]: Leave Darnassus, disable teleport...");

        wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;

        Vector3 pos = new Vector3(9946.378f, 2642.551f, 1316.749f);

        while(ObjectManager.Me.Position.DistanceTo(pos) &gt; 1 &amp;&amp; Usefuls.MapZoneName.Contains("Darnassus"))
        {
            wManager.Wow.Helpers.MovementManager.Face(pos);
            wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 125);
            Thread.Sleep(robotManager.Helpful.Others.Random(10, 25));
        }

        Logging.Write("[FNV_Quester]: Reenable teleport");
        wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = true;
    }
}

    [Serializable]
    public class FNVQuesterFlightMaster : Settings
    {
        public FNVQuesterFlightMaster()
        {
            //FlightMaster discovered
            //Eastern Kingdoms
            this.ArathiHighlands = false;
            this.Wetlands = false;
            this.WesternPlaguelands = false;
            this.EasternPlaguelands = false;
            this.HillsbradFoothills = false;
            this.TheHinterlands = false;
            this.LochModan = false;
            this.Ironforge = false;
            this.SearingGorge = false;
            this.BurningSteppes = false;
            this.RedridgeMountains = false;
            this.Stormwind = false;
            this.Westfall = false;
            this.Duskwood = false;
            this.StranglethornValley = false;
            this.BlastedLands = false;

            //Kalimdor
            this.Teldrassil = false;
            this.Darkshore = false;
            this.Winterspring = false;
            this.Azshara = false;
            this.Ashenvale = false;
            this.StonetalonMountains = false;
            this.Desolace = false;
            this.TheBarrens = false;
            this.Tanaris = false;
            this.FeralasFeathermoon = false;
            this.FeralasThalanaar = false;
            this.UngoroCrater = false;
            this.DustwallowMarsh = false;
            this.Silithus = false;
            this.Moonglade = false;
            this.Felwood = false;

        }

    public static void flightMasterSaveChanges(FlightMasterDB needToChange)
    {

        if(needToChange.name.Contains("Arathi"))
            CurrentSettings.ArathiHighlands = true;

        if(needToChange.name.Contains("Wetlands"))
            CurrentSettings.Wetlands = true;

        if(needToChange.name.Contains("Western"))
            CurrentSettings.WesternPlaguelands = true;

        if(needToChange.name.Contains("Eastern"))
            CurrentSettings.EasternPlaguelands = true;

        if(needToChange.name.Contains("Hillsbrad"))
            CurrentSettings.HillsbradFoothills = true;

        if(needToChange.name.Contains("Hinterlands"))
            CurrentSettings.TheHinterlands = true;

        if(needToChange.name.Contains("Modan"))
            CurrentSettings.LochModan = true;

        if(needToChange.name.Contains("Ironforge"))
            CurrentSettings.Ironforge = true;

        if(needToChange.name.Contains("Searing"))
            CurrentSettings.SearingGorge = true;

        if(needToChange.name.Contains("Burning"))
            CurrentSettings.BurningSteppes = true;

        if(needToChange.name.Contains("Redridge"))
            CurrentSettings.RedridgeMountains = true;

        if(needToChange.name.Contains("Stormwind"))
            CurrentSettings.Stormwind = true;

        if(needToChange.name.Contains("Westfall"))
            CurrentSettings.Westfall = true;

        if(needToChange.name.Contains("Duskwood"))
            CurrentSettings.Duskwood = true;

        if(needToChange.name.Contains("Stranglethorn"))
            CurrentSettings.StranglethornValley = true;

        if(needToChange.name.Contains("Blasted"))
            CurrentSettings.BlastedLands = true;

        if(needToChange.name.Contains("Teldrassil"))
            CurrentSettings.Teldrassil = true;

        if(needToChange.name.Contains("Darkshore"))
            CurrentSettings.Darkshore = true;

        if(needToChange.name.Contains("Winterspring"))
            CurrentSettings.Winterspring = true;

        if(needToChange.name.Contains("Azshara"))
            CurrentSettings.Azshara = true;

        if(needToChange.name.Contains("Ashenvale"))
            CurrentSettings.Ashenvale = true;

        if(needToChange.name.Contains("Stonetalon"))
            CurrentSettings.StonetalonMountains = true;

        if(needToChange.name.Contains("Desolace"))
            CurrentSettings.Desolace = true;

        if(needToChange.name.Contains("Tanaris"))
            CurrentSettings.Tanaris = true;

        if(needToChange.name.Contains("The Barrens"))
            CurrentSettings.TheBarrens = true;

        if(needToChange.name.Contains("Feathermoon"))
            CurrentSettings.FeralasFeathermoon = true;

        if(needToChange.name.Contains("Thalanaar"))
            CurrentSettings.FeralasThalanaar = true;

        if(needToChange.name.Contains("ro Crater"))
            CurrentSettings.UngoroCrater = true;

        if(needToChange.name.Contains("Dustwallow"))
            CurrentSettings.DustwallowMarsh = true;

        if(needToChange.name.Contains("Silithus"))
            CurrentSettings.Silithus = true;

        if(needToChange.name.Contains("Felwood"))
            CurrentSettings.Felwood = true;

        FNVQuesterFlightMaster.CurrentSettings.Save();
        Logging.Write("[FNV_FlightMaster]: Settings saved of Flight Master " + needToChange.name);
        return;
    }

        public static FNVQuesterFlightMaster CurrentSettings { get; set; }

        public bool Save()
        {
            try
            {
                return Save(AdviserFilePathAndName("FNVQuesterFlightMaster", ObjectManager.Me.Name + "." + Usefuls.RealmName));
            }
            catch(Exception e)
            {
                Logging.WriteDebug("FNVQuesterFlightMaster =&gt; Save(): " + e);
                return false;
            }
        }

        public static bool Load()
        {
            try
            {
                if(File.Exists(AdviserFilePathAndName("FNVQuesterFlightMaster", ObjectManager.Me.Name + "." + Usefuls.RealmName)))
                {
                    CurrentSettings = Load&lt;FNVQuesterFlightMaster&gt;(AdviserFilePathAndName("FNVQuesterFlightMaster", ObjectManager.Me.Name + "." + Usefuls.RealmName));
                    return true;
                }

                FNVQuesterFlightMaster.CurrentSettings = new FNVQuesterFlightMaster();
            }
            catch(Exception e)
            {
                Logging.WriteDebug("FNVQuesterFlightMaster =&gt; Load(): " + e);
            }
            return false;
        }


        //FlightMaster
        //Eastern Kingdoms
        public bool Stormwind { get; set; }
        public bool Westfall { get; set; }
        public bool RedridgeMountains { get; set; }
        public bool Duskwood { get; set; }
        public bool StranglethornValley { get; set; }
        public bool Ironforge { get; set; }
        public bool BurningSteppes { get; set; }
        public bool BlastedLands { get; set; }
        public bool SearingGorge { get; set; }
        public bool LochModan { get; set; }
        public bool Wetlands { get; set; }
        public bool ArathiHighlands { get; set; }
        public bool HillsbradFoothills { get; set; }
        public bool WesternPlaguelands { get; set; }
        public bool EasternPlaguelands { get; set; }
        public bool TheHinterlands { get; set; }

        //Kalimdor

        public bool Ashenvale { get; set; }
        public bool Azshara { get; set; }
        public bool Darkshore { get; set; }
        public bool Teldrassil { get; set; }
        public bool Desolace { get; set; }
        public bool DustwallowMarsh { get; set; }
        public bool Felwood { get; set; }
        public bool FeralasFeathermoon { get; set; }
        public bool FeralasThalanaar { get; set; }
        public bool Moonglade { get; set; }
        public bool Silithus { get; set; }
        public bool StonetalonMountains { get; set; }
        public bool Tanaris { get; set; }
        public bool TheBarrens { get; set; }
        public bool UngoroCrater { get; set; }
        public bool Winterspring { get; set; }

    }

public class Boat
{
    private static bool _boatTaken = false;

    public static void menethilToAuberdine()
    {

        // Settings
        var zeppelinEntryId = 176310; // Zeppelin/Ship EntryId
                                      // From
        var fromZeppelinWaitPosition = new Vector3(-3709.475, -575.0988, 0); // Position where Zeppelin/Ship waits players (from)
        var fromPlayerWaitPosition = new Vector3(-3727.4, -581.3, 6.2); // Position where the player waits Zeppelin/Ship (from)
        var fromPlayerInZeppelinPosition = new Vector3(-3713.333, -571.7416, 6.098111); // Position where the player waits in the Zeppelin/Ship (from)
                                                                                        // To
        var toZeppelinWaitPosition = new Vector3(6406.216, 823.0809, 0); // Position where Zeppelin/Ship waits players (to)
        var toPlayerLeavePosition = new Vector3(6461.408, 806.1595, 6.770809); // Position to go out the Zeppelin/Ship (to)
                                                                               //Pos1
        var enterPos1 = new Vector3(-3724.827, -581.0698, 6.191196);
        //Pos2
        var enterPos2 = new Vector3(-3723.727, -580.3727, 6.184784);
        _boatTaken = false;

        if(!_boatTaken)
        {
            // Change WRobot settings:
            Logging.Write("[FNV_Quester]: Taking boat from Menethil to Auberdine");
            wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;
            wManager.wManagerSetting.CurrentSetting.Repair = false;
            wManager.wManagerSetting.CurrentSetting.Selling = false;
            wManager.wManagerSetting.CurrentSetting.UsePathsFinder = false;

            // Code:
            if(!Conditions.InGameAndConnectedAndProductStartedNotInPause)
                return;

            while(Products.IsStarted &amp;&amp; !_boatTaken)
            {
                while(Usefuls.ContinentId != (int)ContinentId.Kalimdor)
                {
                    if(!ObjectManager.Me.InTransport)
                    {
                        if(GoToTask.ToPosition(fromPlayerWaitPosition))
                        {
                            var zeppelin = ObjectManager.GetWoWGameObjectByEntry(zeppelinEntryId).OrderBy(o =&gt; o.GetDistance).FirstOrDefault();
                            if(zeppelin != null &amp;&amp; zeppelin.Position.DistanceTo(fromZeppelinWaitPosition) &lt; 1)
                            {

                                MovementManager.MoveTo(enterPos1);
                                if(GoToTask.ToPosition(enterPos1))
                                    MovementManager.MoveTo(enterPos2);

                                Lua.LuaDoString("ClearTarget()");

                                //wManager.Wow.Helpers.MovementManager.Face(new Vector3(-3713.333, -571.7416, 6.098111));

                                MovementManager.MoveTo(fromPlayerInZeppelinPosition);
                            }
                        }
                    }
                }
                while(Usefuls.ContinentId == (int)ContinentId.Kalimdor)
                {
                    if(ObjectManager.Me.InTransport)
                    {
                        var zeppelin = ObjectManager.GetWoWGameObjectByEntry(zeppelinEntryId).OrderBy(o =&gt; o.GetDistance).FirstOrDefault();
                        if(zeppelin != null &amp;&amp; zeppelin.Position.DistanceTo(toZeppelinWaitPosition) &lt; 1)
                        {
                            MovementManager.MoveTo(toPlayerLeavePosition);
                            break;
                        }
                    }
                }

                Logging.Write("[FNV_Quester]: Boat taken from Menethil to Auberdine");

                wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = true;
                wManager.wManagerSetting.CurrentSetting.Repair = true;
                wManager.wManagerSetting.CurrentSetting.Selling = true;
                wManager.wManagerSetting.CurrentSetting.UsePathsFinder = true;
                _boatTaken = true;
            }
            return;
        }
        return;
    }
}

public class Key
{
    public static bool haveKey(int keyId)
    {
        bool haveKey = Lua.LuaDoString&lt;bool&gt;("local itemIdSearch = " + keyId + "; local bag = KEYRING_CONTAINER; for slot = 1,MAX_CONTAINER_ITEMS do local itemLink = GetContainerItemLink(bag,slot); local _, itemCount = GetContainerItemInfo(bag,slot); if itemLink and itemCount then local _,_,itemId = string.find(itemLink, '.*|Hitem:(%d+):.*'); if itemId and tonumber(itemId) == itemIdSearch then return true end end end return false");
        return haveKey;
    }
}




public class Authentication
{
    
    private readonly string orderId;
    private readonly string productId;
    private readonly string wRobotAuthKey;

    private readonly BackgroundWorker _validationThread = new BackgroundWorker();
    private bool _isRunning = false;
    private string authUrl;

    public Authentication(string orderId, string productId)
    {
    
        return;  if (orderId == null)
        {
            MessageBox.Show("You need to enter your transaction id (from your Rocketr email) into the plugin settings to use this!");
        }

        this.orderId = orderId;
        this.productId = productId;

        this.wRobotAuthKey = robotManager.Helpful.Others.StringBetween(authManager.LoginServer.GetSubcriptionInfoThread(), robotManager.Translate.Get("License Key") + ": ", "...  - " + robotManager.Translate.Get("Subscription time expire"));
            authUrl = "http://51.38.127.249:8080/authenticate?orderId=" + orderId.Trim() + "&amp;productId=" + productId + "&amp;wRobotAuthKey=" + wRobotAuthKey;
        


        _isRunning = true;
        _validationThread.DoWork += CheckValidiation;
        _validationThread.RunWorkerAsync();
    }
    
    ~Authentication()
    {
        _isRunning = false;
        _validationThread.DoWork -= CheckValidiation;
        _validationThread.Dispose();
    }

    private void CheckValidiation(object sender, DoWorkEventArgs e)
    {
        while (Products.IsStarted &amp;&amp; _isRunning)
        {
            try
            {
                bool timedOut = false;
                HttpWebResponse content = null;
                try
                {
                    var request = (HttpWebRequest)WebRequest.Create(authUrl);
                    request.Timeout = 30000;
                    request.ReadWriteTimeout = 30000;
                    content = (HttpWebResponse)request.GetResponse();
                }
                catch (Exception ex)
                {
                    timedOut = true;
                }
                
                //give it another try
                if ((content != null &amp;&amp; content.StatusCode != HttpStatusCode.OK) || timedOut)
                {
                    Thread.Sleep(60 * 1000);
                    try
                    {
                        var request = (HttpWebRequest)WebRequest.Create(authUrl);
                        request.Timeout = 30000;
                        request.ReadWriteTimeout = 30000;
                        content = (HttpWebResponse)request.GetResponse();
                        timedOut = false;
                    }
                    catch (Exception ex)
                    {
                        timedOut = true;
                    }
                }

                string result = content != null ? new StreamReader(content.GetResponseStream()).ReadToEnd() : "false";

                if (!bool.Parse(result) || (content != null &amp;&amp; content.StatusCode != HttpStatusCode.OK) || timedOut)
                {
                    Products.ProductStop();
                    _isRunning = false;
                    _validationThread.DoWork -= CheckValidiation;
                    _validationThread.Dispose();
                    MessageBox.Show("You are trying to use a different wRobot key with the same order Id or your wRobot key is used by more than 10 IPs. \n\nBot name: " + ObjectManager.Me.Name + "\n\nIf your wRobot key has changed recently (f.e. after purchasing a new one), please contact FNV316");
                    return;
                }

                Thread.Sleep(60 * 1000);
            }
            catch (Exception exp)
            {
                Logging.WriteError("" + exp);
            }
        }
    }
}

    /*
    static ControlAuthentication()
    { return;
        new Thread(() =&gt;
        {
            while (!Conditions.InGameAndConnectedAndAliveAndProductStarted)
            {
                Thread.Sleep(500);
            }
            Thread.Sleep(30000);
            string status = Logging.Status;
            if (_controlVariable != 5 &amp;&amp; !status.Contains("To Town") &amp;&amp; !status.Contains("Regeneration") &amp;&amp; !status.Contains("Attacked") &amp;&amp; !status.Contains("Trainers") &amp;&amp; !status.Contains("Ressurect") &amp;&amp; !status.Contains("Started"))
            {
                Products.ProductStop();
                MessageBox.Show("Please enter your ID faster, restart the Bot now.");
            }
            Logging.Write("[FNV_Quester]: Launcher authentication sucessful");
        }).Start();
    }
    */

public class ControlAuthentication
{
    private static volatile int _controlVariable = 0;
    private static int _timeout = 0;
    private static bool _isRunning = true;
    private static bool disposeAuthThread = false;
    private static string profileName = "";

    public static void SetControl(int control)
    {
        _controlVariable = control;
    }

    static ControlAuthentication()
    { return;
        new Thread(() =&gt;
        {
            profileName = wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName;

            while(_isRunning &amp;&amp; !disposeAuthThread &amp;&amp; (wManager.Wow.Helpers.Conditions.ProductIsStarted || wManager.Wow.Helpers.Conditions.ProductInPause))
            {
                if(!wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName.Equals(profileName))
                {
                    disposeAuthThread = true;
                    break;
                }

                if(!wManager.Wow.Helpers.Conditions.ProductIsStarted)
                {
                    disposeAuthThread = true;
                    break;
                }

                while(wManager.Wow.Helpers.Quest.QuesterCurrentContext.CurrentStep &lt; 2)
                {
                    Thread.Sleep(500);

                    if(_controlVariable == 5 || !wManager.Wow.Helpers.Conditions.ProductIsStarted)
                        break;

                    _timeout += 500;

                    if(_timeout &gt;= 910000)
                    {
                        Products.ProductStop();
                        MessageBox.Show("[FNV_Quester]: Timeout error. Unable to authenticate for more than 15 minutes. \n\nBot name: " + ObjectManager.Me.Name);
                        break;
                    }
                }

                _isRunning = false;

                if(wManager.Wow.Helpers.Conditions.ProductIsStarted || wManager.Wow.Helpers.Conditions.ProductInPause)
                {
                    Thread.Sleep(60000);

                    if(_controlVariable != 5)
                    {
                        Products.ProductStop();
                        MessageBox.Show("[FNV_Quester]: Please enter your ID faster or make sure the authentication step is enabled (#0 START_FNVLauncher_V2 -&gt; Step [1], any other profile -&gt; Step [0]). \nRestart the Bot now. \n\nBot name: " + ObjectManager.Me.Name);
                    }
                    /*
                    else
                    {
                        if(!disposeAuthThread &amp;&amp; wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName.Equals(profileName) &amp;&amp; Conditions.ProductIsStarted)
                            Logging.Write("[FNV_Quester]: Authentication sucessful");
                    }
                    */
                    _timeout = 0;
                    _isRunning = true;
                }
            }

        }).Start();
    }
    
}

[Serializable]
public class FNVQuesterAuthSettings : robotManager.Helpful.Settings
{
    [Setting]
    [Category("__IMPORTANT__")]
    [DisplayName("Rocketr Order id")]
    [Description("This is your tracking number for when you purchased this product, it is required to use this consistently. You can find it within your product delivery e-mail")]
    public string TransactionId { get { return "free"; } set { } }

    public FNVQuesterAuthSettings()
    {
        TransactionId = null;
    }
    
    public static FNVQuesterAuthSettings CurrentSetting { get; set; }

    public bool Save()
    {
        try
        {
            return Save(AdviserFilePathAndName("FNVQuester_AuthSettings", "Vanilla_Alliance"));
        }
        catch (Exception e)
        {
            robotManager.Helpful.Logging.Write("FNVQuester_AuthSettings &gt; Save(): " + e);
            return false;
        }
    }

    public static bool Load()
    {
        try
        {
            if (File.Exists(AdviserFilePathAndName("FNVQuester_AuthSettings", "Vanilla_Alliance")))
            {
                CurrentSetting =
                    Load&lt;FNVQuesterAuthSettings&gt;(AdviserFilePathAndName("FNVQuester_AuthSettings", "Vanilla_Alliance"));
                return true;
            }
            CurrentSetting = new FNVQuesterAuthSettings();
        }
        catch (Exception e)
        {
            robotManager.Helpful.Logging.Write("FNVQuester_AuthSettings &gt; Load(): " + e);
        }
        return false;
    }
}

public class SearingGorge
{
     private static bool _isStarted = false;
     private static bool _inPause = false;
     private static int gateId = 161536;
     private static Vector3 gatePosition = new Vector3(-6756, -1166, 187);

    public static void initializeGateDetection()
    {
        if(!_isStarted)
        {
            Logging.Write("[FNV_Quester]: Searing Gorge gate detection initialized");
            _isStarted = true;
            MovementEvents.OnSeemStuck += MovementEventsOnOnSeemStuck;
        }
    }

    private static void pause()
    {
        for(int i = 0; i &lt; 15000; i += 1000)
        {
            Thread.Sleep(1000);
        }
        _inPause = false;
        return;
    }

    public static void disposeGateDetection()
    {
        if(_isStarted)
        {
            Logging.Write("[FNV_Quester]: Searing Gorge gate detection disposed");
            _isStarted = false;
            MovementEvents.OnSeemStuck -= MovementEventsOnOnSeemStuck;
        }
    }

    private static void MovementEventsOnOnSeemStuck()
    {
        Logging.Write("SeemStuck detected");

        if(ObjectManager.Me.Position.DistanceTo(gatePosition) &lt;= 10 &amp;&amp; !_inPause)
        {
            Logging.Write("[FNV_Quester]: Stuck at Quarry Gate, trying to open it...");

            GoToTask.ToPositionAndIntecractWithGameObject(gatePosition, gateId, -1, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore);
            
            if(GoToTask.ToPositionAndIntecractWithGameObject(gatePosition, gateId, -1, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore))
            {
               // _inPause = true;
               // pause();
            }
        }
    }
}

public class SearingGorgeFixedPathfinding
{
    private static List&lt;Vector3&gt; brokenLocationNodes = new List&lt;Vector3&gt;();
    private static bool _inProcessing;
    private static Vector3 currentDestination = new Vector3(0, 0, 0);
    private static string status = "";

    private static void ApplyNodes()
    {
        Vector3 thoriumPoint = new Vector3(-6514, -1162, 308);
        brokenLocationNodes.Add(thoriumPoint);
    }

    public static void Initialize()
    {
        Logging.Write("[FNV_Quester]: Thorium Point pathfinder workaround started");
        MovementEvents.OnMovementPulse += MovementEventsOnOnMovementPulse;
        MovementEvents.OnSeemStuck += MovementEventsOnOnSeemStuck;
        Logging.OnChanged += LoggingEvents_OnChangedStatus;
        ApplyNodes();
        _inProcessing = false;
    }

    public static void Dispose()
    {
        MovementEvents.OnMovementPulse -= MovementEventsOnOnMovementPulse;
        MovementEvents.OnSeemStuck -= MovementEventsOnOnSeemStuck;
        Logging.OnChanged -= LoggingEvents_OnChangedStatus;
    }

    private static void MovementEventsOnOnSeemStuck()
    {
        _inProcessing = false;
    }

    private static void MovementEventsOnOnMovementPulse(List&lt;Vector3&gt; points, CancelEventArgs cancelable)
    {  
        //status = Logging.Status;
        if(CheckDestination(points.LastOrDefault&lt;Vector3&gt;()) &amp;&amp; !_inProcessing &amp;&amp; ObjectManager.Me.Position.DistanceTo(points.Last&lt;Vector3&gt;()) &gt; 50 &amp;&amp; !status.Contains("Follow Path"))
        {
            _inProcessing = true;
            Logging.Write("[FNV_Quester]: Destination vector within broken path finder range. Using custom path for movement to enter instead");
            cancelable.Cancel = true;
            UseCustomPathIn(points.LastOrDefault&lt;Vector3&gt;());
            cancelable.Cancel = false;
            _inProcessing = false;
        }

        if(CheckDestination(ObjectManager.Me.Position) &amp;&amp; !_inProcessing &amp;&amp; ObjectManager.Me.Position.DistanceTo(points.Last&lt;Vector3&gt;()) &gt; 50 &amp;&amp; !status.Contains("Follow Path"))
        {
            _inProcessing = true;
            Logging.Write("[FNV_Quester]: Starting vector within broken path finder range. Using custom path for movement to leave instead");
            cancelable.Cancel = true;
            UseCustomPathOut(points.LastOrDefault&lt;Vector3&gt;());
            cancelable.Cancel = false;
            _inProcessing = false;
        }

        if(CheckDestination(ObjectManager.Me.Position) &amp;&amp; !_inProcessing &amp;&amp; CheckDestination(points.Last&lt;Vector3&gt;()) &amp;&amp; ObjectManager.Me.Position.DistanceTo(points.Last&lt;Vector3&gt;()) &gt; 10 &amp;&amp; !status.Contains("Follow Path"))
        {
            _inProcessing = true;
            currentDestination = points.Last&lt;Vector3&gt;();
            Logging.Write("[FNV_Quester]: Starting and destination vector within broken path finder range. Using custom path for movement instead");
            cancelable.Cancel = true;
            UseCustomPathLoop(points.LastOrDefault&lt;Vector3&gt;());
            cancelable.Cancel = false;
            _inProcessing = false;
        }
    }

    
    private static void LoggingEvents_OnChangedStatus(object sender, Logging.LoggingChangeEventArgs e)
    {
        status = Logging.Status;
    }
    

    private static bool CheckDestination(Vector3 destination)
    {
        foreach(var ele in brokenLocationNodes)
        {
            //Logging.Write("Distance is: " + destination.DistanceTo(ele)); 
            if(destination.DistanceTo(ele) &lt;= 60)
                return true;
        }
        return false;
    }

    private static void UseCustomPathIn(Vector3 destination)
    {

        Vector3 currentDestination = new Vector3(0, 0, 0);

        var path = new List&lt;Vector3&gt;() {
new Vector3(-6605.966f, -1023.291f, 244.5074f, "None"),
new Vector3(-6601.826f, -1023.744f, 244.9385f, "None"),
new Vector3(-6597.218f, -1026.855f, 248.186f, "None"),
new Vector3(-6593.908f, -1031.353f, 252.414f, "None"),
new Vector3(-6591.3f, -1036.307f, 255.8175f, "None"),
new Vector3(-6588.852f, -1041.541f, 258.5742f, "None"),
new Vector3(-6586.07f, -1046.571f, 260.5392f, "None"),
new Vector3(-6582.013f, -1050.151f, 262.3918f, "None"),
new Vector3(-6577.125f, -1052.881f, 264.4617f, "None"),
new Vector3(-6572.03f, -1055.201f, 266.5196f, "None"),
new Vector3(-6566.89f, -1057.423f, 268.521f, "None"),
new Vector3(-6561.761f, -1059.671f, 270.6708f, "None"),
new Vector3(-6556.499f, -1062.034f, 272.971f, "None"),
new Vector3(-6551.548f, -1064.268f, 275.2576f, "None"),
new Vector3(-6546.625f, -1066.932f, 277.3527f, "None"),
new Vector3(-6541.8f, -1069.774f, 279.032f, "None"),
new Vector3(-6536.636f, -1071.892f, 280.7285f, "None"),
new Vector3(-6531.107f, -1072.746f, 282.576f, "None"),
new Vector3(-6525.543f, -1073.38f, 284.4381f, "None"),
new Vector3(-6519.98f, -1074.023f, 286.3544f, "None"),
new Vector3(-6514.447f, -1074.884f, 288.3375f, "None"),
new Vector3(-6508.975f, -1076.073f, 290.369f, "None"),
new Vector3(-6503.632f, -1077.715f, 292.0928f, "None"),
new Vector3(-6498.638f, -1080.577f, 293.695f, "None"),
new Vector3(-6494.001f, -1083.713f, 295.3442f, "None"),
new Vector3(-6490.028f, -1087.634f, 296.9394f, "None"),
new Vector3(-6486.872f, -1092.256f, 298.4525f, "None"),
new Vector3(-6484.295f, -1097.215f, 300.1746f, "None"),
new Vector3(-6483.278f, -1102.701f, 301.5711f, "None"),
new Vector3(-6483.816f, -1108.252f, 302.851f, "None"),
new Vector3(-6485.005f, -1113.707f, 304.0922f, "None"),
new Vector3(-6487.139f, -1118.884f, 305.0337f, "None"),
new Vector3(-6489.344f, -1124.032f, 305.7626f, "None"),
new Vector3(-6491.585f, -1129.163f, 306.1504f, "None"),
new Vector3(-6494.281f, -1134.475f, 306.4971f, "None"),
new Vector3(-6497.214f, -1139.442f, 306.8915f, "None"),
new Vector3(-6500.032f, -1144.085f, 307.3696f, "None"),
new Vector3(-6503.025f, -1149.016f, 307.632f, "None"),
new Vector3(-6505.93f, -1153.804f, 307.8793f, "None"),
new Vector3(-6508.76f, -1158.441f, 307.9853f, "None"),
new Vector3(-6512.148f, -1162.893f, 308.3222f, "None"),
new Vector3(-6517.508f, -1163.161f, 308.5844f, "None"),
            };

        foreach(var ele in path)
        {
            if(ele.DistanceTo(destination) &lt; ele.DistanceTo(currentDestination))
                currentDestination = ele;
        }

        if(wManager.Wow.Bot.Tasks.GoToTask.ToPosition(path.First&lt;Vector3&gt;(), 3.5f, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore))
        {
            wManager.Wow.Bot.Tasks.GoToTask.ToPosition(path.First&lt;Vector3&gt;(), 3.5f, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore);
        }

        while(ObjectManager.Me.Position.DistanceTo(currentDestination) &gt; 5 &amp;&amp; !currentDestination.Equals((Vector3)null) &amp;&amp; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore)
        {
            MovementManager.Go(path);
            Thread.Sleep(100);
        }

        //Logging.Write("Finished takeCustomPath");
        //Reenable();
        _inProcessing = false;
        return;
    }

    private static void UseCustomPathOut(Vector3 destination)
    {

        Vector3 currentDestination = new Vector3(0, 0, 0);

        var path = new List&lt;Vector3&gt;() {
new Vector3(-6520.889f, -1186.334f, 309.2557f, "None"),
new Vector3(-6511.543f, -1163.732f, 308.3743f, "None"),
new Vector3(-6508.988f, -1161.179f, 308.1429f, "None"),
new Vector3(-6504.05f, -1156.218f, 308.0315f, "None"),
new Vector3(-6501.398f, -1153.294f, 308.1518f, "None"),
new Vector3(-6495.091f, -1144.908f, 307.875f, "None"),
new Vector3(-6489.66f, -1136.319f, 307.1272f, "None"),
new Vector3(-6484.931f, -1126.579f, 306.6054f, "None"),
new Vector3(-6481.782f, -1116.925f, 305.3705f, "None"),
new Vector3(-6480.768f, -1106.506f, 302.6744f, "None"),
new Vector3(-6483.211f, -1096.021f, 299.9566f, "None"),
new Vector3(-6488.722f, -1087.545f, 297.2002f, "None"),
new Vector3(-6496.905f, -1080.999f, 294.2147f, "None"),
new Vector3(-6506.868f, -1076.894f, 291.0374f, "None"),
new Vector3(-6516.972f, -1075.943f, 287.6053f, "None"),
new Vector3(-6527.435f, -1075.096f, 283.8497f, "None"),
new Vector3(-6537.802f, -1073.449f, 280.6175f, "None"),
new Vector3(-6548.082f, -1070.127f, 276.9659f, "None"),
new Vector3(-6556.992f, -1065.242f, 273.4804f, "None"),
new Vector3(-6566.444f, -1059.943f, 269.1368f, "None"),
new Vector3(-6575.575f, -1055.484f, 265.3927f, "None"),
new Vector3(-6585.064f, -1050.99f, 261.5944f, "None"),
new Vector3(-6592.596f, -1046.345f, 258.3036f, "None"),
new Vector3(-6594.945f, -1035.768f, 253.8222f, "None"),
new Vector3(-6598.657f, -1026.457f, 247.278f, "None"),
new Vector3(-6605.125f, -1027.011f, 244.9202f, "None"),
new Vector3(-6614.792f, -1030.953f, 244.2407f, "None"),
};

        foreach(var ele in path)
        {
            if(ele.DistanceTo(destination) &lt; ele.DistanceTo(currentDestination))
                currentDestination = ele;
        }

        if(wManager.Wow.Bot.Tasks.GoToTask.ToPosition(path.First&lt;Vector3&gt;(), 3.5f, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore))
        {
            wManager.Wow.Bot.Tasks.GoToTask.ToPosition(path.First&lt;Vector3&gt;(), 3.5f, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore);
        }

        while(ObjectManager.Me.Position.DistanceTo(currentDestination) &gt; 5 &amp;&amp; !currentDestination.Equals((Vector3)null) &amp;&amp; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore)
        {
            MovementManager.Go(path);
            Thread.Sleep(100);
        }

       // Logging.Write("Finished takeCustomPathOut");
        //Reenable();
        _inProcessing = false;
        return;
    }

    private static void UseCustomPathLoop(Vector3 destination)
    {

var path = new List&lt;Vector3&gt;() {
new Vector3(-6511.968f, -1178.022f, 309.2499f, "None"),
new Vector3(-6514.226f, -1180.391f, 309.2652f, "None"),
new Vector3(-6514.92f, -1183.646f, 309.2562f, "None"),
new Vector3(-6512.791f, -1186.548f, 309.2562f, "None"),
new Vector3(-6510.783f, -1189.414f, 309.2562f, "None"),
new Vector3(-6509.006f, -1192.427f, 309.2562f, "None"),
new Vector3(-6512.155f, -1191.501f, 309.2562f, "None"),
new Vector3(-6515.301f, -1190.243f, 309.2562f, "None"),
new Vector3(-6518.614f, -1189.136f, 309.2562f, "None"),
new Vector3(-6522.209f, -1188.875f, 309.2562f, "None"),
new Vector3(-6524.712f, -1188.661f, 309.2562f, "None"),
new Vector3(-6522.414f, -1187.187f, 309.2562f, "None"),
new Vector3(-6521.051f, -1184.315f, 309.2562f, "None"),
new Vector3(-6522.533f, -1181.164f, 309.5719f, "None"),
new Vector3(-6525.171f, -1178.908f, 310.5407f, "None"),
new Vector3(-6528.434f, -1177.668f, 311.458f, "None"),
new Vector3(-6531.906f, -1176.674f, 311.5628f, "None"),
new Vector3(-6535.271f, -1175.711f, 311.0577f, "None"),
new Vector3(-6538.62f, -1174.692f, 310.2652f, "None"),
new Vector3(-6541.887f, -1173.795f, 309.7975f, "None"),
new Vector3(-6545.396f, -1172.942f, 309.3479f, "None"),
new Vector3(-6548.806f, -1172.151f, 309.2578f, "None"),
new Vector3(-6552.216f, -1171.361f, 309.2927f, "None"),
new Vector3(-6555.617f, -1170.538f, 309.4913f, "None"),
new Vector3(-6558.993f, -1169.615f, 309.787f, "None"),
new Vector3(-6559.922f, -1167.805f, 309.8352f, "None"),
new Vector3(-6556.908f, -1165.864f, 310.0252f, "None"),
new Vector3(-6553.557f, -1164.877f, 310.0215f, "None"),
new Vector3(-6550.08f, -1164.484f, 309.926f, "None"),
new Vector3(-6544.97f, -1163.94f, 309.7741f, "None"),
new Vector3(-6534.195f, -1162.793f, 309.3187f, "None"),
new Vector3(-6523.741f, -1161.811f, 309.0215f, "None"),
new Vector3(-6513.615f, -1160.933f, 308.2635f, "None"),
new Vector3(-6506.418f, -1160.309f, 308.1041f, "None"),
new Vector3(-6502.819f, -1159.997f, 308.3569f, "None"),
new Vector3(-6499.444f, -1159.705f, 308.7631f, "None"),
new Vector3(-6496.717f, -1159.744f, 309.0773f, "None"),
new Vector3(-6495.118f, -1161.894f, 309.1303f, "None"),
new Vector3(-6493f, -1162.4f, 309.2f, "None"),
new Vector3(-6495.47f, -1165.365f, 309.19f, "None"),
new Vector3(-6496.578f, -1168.801f, 309.2209f, "None"),
new Vector3(-6497.424f, -1172.189f, 309.2521f, "None"),
new Vector3(-6496.599f, -1175.496f, 311.4286f, "None"),
new Vector3(-6494.471f, -1178.274f, 314.4402f, "None"),
new Vector3(-6492.365f, -1181.069f, 316.9778f, "None"),
new Vector3(-6490.402f, -1183.967f, 319.4284f, "None"),
new Vector3(-6488.469f, -1186.885f, 322.0103f, "None"),
new Vector3(-6486.568f, -1189.69f, 324.5566f, "None"),
new Vector3(-6484.392f, -1192.128f, 325.7157f, "None"),
new Vector3(-6479.565f, -1189.753f, 325.8502f, "None"),
new Vector3(-6477.512f, -1187.101f, 325.9147f, "None"),
new Vector3(-6478.307f, -1183.857f, 325.7819f, "None"),
new Vector3(-6480.627f, -1181.089f, 325.6377f, "None"),
new Vector3(-6482.864f, -1178.397f, 325.7611f, "None"),
new Vector3(-6485f, -1175.625f, 325.7878f, "None"),
new Vector3(-6487.067f, -1172.94f, 325.5157f, "None"),
new Vector3(-6489.333f, -1170.127f, 325.4131f, "None"),
new Vector3(-6492.227f, -1171.737f, 325.9383f, "None"),
new Vector3(-6495.255f, -1173.477f, 326.5012f, "None"),
new Vector3(-6498.819f, -1173.806f, 326.2171f, "None"),
new Vector3(-6501.867f, -1173.776f, 325.811f, "None"),
new Vector3(-6504.835f, -1175.808f, 325.9436f, "None"),
new Vector3(-6507.222f, -1178.351f, 326.3931f, "None"),
new Vector3(-6507.92f, -1181.704f, 326.9203f, "None"),
new Vector3(-6506.445f, -1184.833f, 327.1803f, "None"),
new Vector3(-6504.251f, -1187.702f, 326.8068f, "None"),
new Vector3(-6502.15f, -1190.501f, 326.4582f, "None"),
new Vector3(-6500.116f, -1193.21f, 326.1217f, "None"),
new Vector3(-6498.121f, -1196.085f, 325.64f, "None"),
new Vector3(-6496.097f, -1199.072f, 325.2523f, "None"),
new Vector3(-6493.148f, -1199.734f, 325.4391f, "None"),
new Vector3(-6490.279f, -1197.56f, 325.5786f, "None"),
new Vector3(-6488.075f, -1194.888f, 325.6983f, "None"),
new Vector3(-6489.056f, -1191.798f, 324.8035f, "None"),
new Vector3(-6491.162f, -1189.002f, 322.1753f, "None"),
new Vector3(-6493.301f, -1186.232f, 319.5414f, "None"),
new Vector3(-6495.447f, -1183.467f, 316.7057f, "None"),
new Vector3(-6497.518f, -1180.777f, 313.957f, "None"),
new Vector3(-6499.785f, -1177.831f, 311.3158f, "None"),
new Vector3(-6501.965f, -1175.094f, 309.255f, "None"),
new Vector3(-6504.853f, -1173.284f, 309.1891f, "None"),
new Vector3(-6507.97f, -1174.138f, 309.1942f, "None"),
new Vector3(-6511.066f, -1175.981f, 309.2368f, "None"),
new Vector3(-6513.179f, -1177.529f, 309.2469f, "None"),
};


        foreach(var ele in path)
        {
            if(ele.DistanceTo(destination) &lt; ele.DistanceTo(currentDestination))
                currentDestination = ele;
        }

        if(wManager.Wow.Bot.Tasks.GoToTask.ToPosition(path.First&lt;Vector3&gt;(), 3.5f, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore))
        {
            wManager.Wow.Bot.Tasks.GoToTask.ToPosition(path.First&lt;Vector3&gt;(), 3.5f, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore);
        }
        

        while(ObjectManager.Me.Position.DistanceTo(currentDestination) &gt; 2 &amp;&amp; !currentDestination.Equals((Vector3)null) &amp;&amp; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore)
        {
            if(ObjectManager.Me.Position.DistanceTo(currentDestination) &lt;= 2)
            {
                break;
            }
            
            MovementManager.Go(path);
            Thread.Sleep(100);
        }

        MovementManager.MoveTo(currentDestination);

        //Logging.Write("Finished takeCustomPathLoop");
        currentDestination = new Vector3(0, 0, 0);
        //Reenable();
        _inProcessing = false;
        return;
    }

    //By Matenia
    private static async void Reenable()
    {
        //Logging.Write("Enter reenable");
        await Task.Run(() =&gt;
        {
            Products.InPause = true;
            if(ObjectManager.Me.WowClass == WoWClass.Hunter)
                Lua.LuaDoString("RotaOn = false");
            MovementManager.StopMove();
            MovementManager.CurrentPath.Clear();
            MovementManager.CurrentPathOrigine.Clear();
            Thread.Sleep(5000);
            Products.InPause = false;
            if(ObjectManager.Me.WowClass == WoWClass.Hunter)
                Lua.LuaDoString("RotaOn = true");
            Logging.Write("[VanillaFlightMaster]: Resetting pathing");
        });
    }

}

public class QuesterSettings
{

    public static void ClassSettings()
    {
        if(ObjectManager.Me.WowClass == WoWClass.Warlock)
        {
            switch(ObjectManager.Me.Level / 10)
            {
                case (1):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (2):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (3):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (4):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 45;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 45;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (5):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 50;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 50;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (6):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 50;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 50;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                default:
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;
            }

            if(wManager.wManagerSetting.CurrentSetting.DrinkName.Length &lt; 2)
            {
                wManager.wManagerSetting.CurrentSetting.DrinkIsSpell = false;
                wManager.wManagerSetting.CurrentSetting.DrinkName = "Refreshing Spring Water";
            }


            if(wManager.wManagerSetting.CurrentSetting.FoodName.Length &lt; 2)
            {
                wManager.wManagerSetting.CurrentSetting.FoodIsSpell = false;
                wManager.wManagerSetting.CurrentSetting.FoodName = "Tough Hunk of Bread";
            }

            Logging.Write("[FNV_Quester]: Using default food / drink settings for Warlock");
        }

        if(ObjectManager.Me.WowClass == WoWClass.Warrior)
        {
            switch(ObjectManager.Me.Level / 10)
            {

                case (1):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;

                case (2):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;

                case (3):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 60;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 70;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;

                case (4):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 80;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;

                case (5):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 100;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 80;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;

                case (6):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 120;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 80;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;

                default:
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;
            }

            if(wManager.wManagerSetting.CurrentSetting.FoodName.Length &lt; 2)
            {
                wManager.wManagerSetting.CurrentSetting.FoodIsSpell = false;
                wManager.wManagerSetting.CurrentSetting.FoodName = "Tough Hunk of Bread";
            }

            Logging.Write("[FNV_Quester]: Using default food / drink settings for Warrior");
        }

        if(ObjectManager.Me.WowClass == WoWClass.Rogue)
        {
            switch(ObjectManager.Me.Level / 10)
            {
                case (1):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;

                case (2):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;

                case (3):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;

                case (4):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 75;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;

                case (5):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 100;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 80;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;

                case (6):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 120;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 80;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;

                default:
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;
            }


            if(wManager.wManagerSetting.CurrentSetting.FoodName.Length &lt; 2)
            {
                wManager.wManagerSetting.CurrentSetting.FoodIsSpell = false;
                wManager.wManagerSetting.CurrentSetting.FoodName = "Tough Hunk of Bread";
            }

            Logging.Write("[FNV_Quester]: Using default food / drink settings for Rogue");
        }

        if(ObjectManager.Me.WowClass == WoWClass.Mage)
        {
            switch(ObjectManager.Me.Level / 10)
            {
                case (1):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 50;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (2):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 50;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (3):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 50;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (4):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 60;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 70;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (5):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 60;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 75;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (6):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 60;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 75;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                default:
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 50;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;
            }

            if(wManager.wManagerSetting.CurrentSetting.DrinkName.Length &lt; 2)
            {
                wManager.wManagerSetting.CurrentSetting.DrinkIsSpell = false;
                wManager.wManagerSetting.CurrentSetting.DrinkName = "Refreshing Spring Water";
            }


            if(wManager.wManagerSetting.CurrentSetting.FoodName.Length &lt; 2)
            {
                wManager.wManagerSetting.CurrentSetting.FoodIsSpell = false;
                wManager.wManagerSetting.CurrentSetting.FoodName = "Tough Hunk of Bread";
            }

            Logging.Write("[FNV_Quester]: Using default food / drink settings for Mage");
        }

        if(ObjectManager.Me.WowClass == WoWClass.Druid)
        {
            switch(ObjectManager.Me.Level / 10)
            {
                case (1):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (2):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (3):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (4):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 45;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (5):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 50;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (6):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                default:
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;
            }

            if(wManager.wManagerSetting.CurrentSetting.DrinkName.Length &lt; 2)
            {
                wManager.wManagerSetting.CurrentSetting.DrinkIsSpell = false;
                wManager.wManagerSetting.CurrentSetting.DrinkName = "Refreshing Spring Water";
            }

            if(wManager.wManagerSetting.CurrentSetting.FoodName.Length &lt; 2)
            {
                wManager.wManagerSetting.CurrentSetting.FoodName = "Healing Touch";
                wManager.wManagerSetting.CurrentSetting.FoodIsSpell = true;
            }

            Logging.Write("[FNV_Quester]: Using default food / drink settings for Druid");
        }

        if(ObjectManager.Me.WowClass == WoWClass.Paladin)
        {

            switch(ObjectManager.Me.Level / 10)
            {
                case (1):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (2):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (3):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 60;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (4):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 45;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (5):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 50;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (6):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 100;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 55;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                default:
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;
            }

            if(wManager.wManagerSetting.CurrentSetting.DrinkName.Length &lt; 2)
            {
                wManager.wManagerSetting.CurrentSetting.DrinkIsSpell = false;
                wManager.wManagerSetting.CurrentSetting.DrinkName = "Refreshing Spring Water";
            }

            if(wManager.wManagerSetting.CurrentSetting.FoodName.Length &lt; 2)
            {
                wManager.wManagerSetting.CurrentSetting.FoodName = "Holy Light";
                wManager.wManagerSetting.CurrentSetting.FoodIsSpell = true;
            }


            Logging.Write("[FNV_Quester]: Using default food / drink settings for Paladin");
        }

        if(ObjectManager.Me.WowClass == WoWClass.Hunter)
        {
            switch(ObjectManager.Me.Level / 10)
            {
                case (1):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    Lua.LuaDoString("DEFAULT_CHAT_FRAME:AddMessage('[FNV_Quester]: Do not forget that wRobot counts empty bag slots of ammo bags as free bag space!')");
                    break;

                case (2):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (3):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (4):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 60;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 60;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (5):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (6):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                default:
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    Lua.LuaDoString("DEFAULT_CHAT_FRAME:AddMessage('[FNV_Quester]: Do not forget that wRobot counts empty bag slots of ammo bags as free bag space!')");
                    break;
            }

            if(wManager.wManagerSetting.CurrentSetting.DrinkName.Length &lt; 2)
            {
                wManager.wManagerSetting.CurrentSetting.DrinkIsSpell = false;
                wManager.wManagerSetting.CurrentSetting.DrinkName = "Refreshing Spring Water";
            }

            if(wManager.wManagerSetting.CurrentSetting.FoodName.Length &lt; 2)
            {
                wManager.wManagerSetting.CurrentSetting.FoodIsSpell = false;
                wManager.wManagerSetting.CurrentSetting.FoodName = "Tough Hunk of Bread";
            }

            Logging.Write("[FNV_Quester]: Using default food / drink settings for Hunter");

        }
    }

    public static void SettingsEasternKingdoms()
    {
        //Eastern Kingdoms only
        wManager.wManagerSetting.CurrentSetting.TrainNewSkills = true;

        wManager.wManagerSetting.CurrentSetting.DontStartFighting = false;
        wManager.wManagerSetting.CurrentSetting.DetectNodesStuck = true;
        wManager.wManagerSetting.CurrentSetting.CanAttackUnitsAlreadyInFight = false;
        wManager.wManagerSetting.CurrentSetting.AvoidBlacklistedZonesPathFinder = true;
        wManager.wManagerSetting.CurrentSetting.AttackElite = false;
        wManager.wManagerSetting.CurrentSetting.AttackBeforeBeingAttacked = true;
        wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = true;
        wManager.wManagerSetting.CurrentSetting.FlightMasterTaxiUse = false;
        wManager.wManagerSetting.CurrentSetting.IgnoreFightWhenInMove = false;

        wManager.wManagerSetting.CurrentSetting.Repair = true;
        wManager.wManagerSetting.CurrentSetting.SellGray = true;
        wManager.wManagerSetting.CurrentSetting.SellGreen = true;
        wManager.wManagerSetting.CurrentSetting.Selling = true;
        wManager.wManagerSetting.CurrentSetting.SellWhite = true;
        wManager.wManagerSetting.CurrentSetting.MinFreeBagSlotsToGoToTown = 4;

        wManager.wManagerSetting.CurrentSetting.SearchRadius = 100;
        wManager.wManagerSetting.CurrentSetting.MaxUnitsNear = 100;

        wManager.wManagerSetting.CurrentSetting.WallDistancePathFinder = 2;
        wManager.wManagerSetting.CurrentSetting.AddToNpcDb = false;
        wManager.wManagerSetting.CurrentSetting.BlackListIfNotCompletePath = false;
        wManager.wManagerSetting.CurrentSetting.UseCTM = true;
        wManager.wManagerSetting.CurrentSetting.UseLuaToMove = true;

        wManager.wManagerSetting.CurrentSetting.NpcScanAuctioneer = false;
        wManager.wManagerSetting.CurrentSetting.NpcScanMailboxes = false;
        wManager.wManagerSetting.CurrentSetting.NpcScanRepair = false;
        wManager.wManagerSetting.CurrentSetting.NpcScanVendor = false;

        wManager.wManagerSetting.CurrentSetting.HarvestHerbs = false;
        wManager.wManagerSetting.CurrentSetting.HarvestMinerals = false;

        wManager.wManagerSetting.CurrentSetting.AvoidBlacklistedZonesPathFinder = true;
        wManager.wManagerSetting.CurrentSetting.AvoidWallWithRays = true;
        wManager.wManagerSetting.CurrentSetting.BlackListTrainingDummy = true;
        wManager.wManagerSetting.CurrentSetting.BlackListZoneWhereDead = false;
        wManager.wManagerSetting.CurrentSetting.CalcuCombatRange = false;
        wManager.wManagerSetting.CurrentSetting.CanAttackUnitsAlreadyInFight = false;
        wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;
        wManager.wManagerSetting.CurrentSetting.DetectNodesStuck = true;
        wManager.wManagerSetting.CurrentSetting.DontStartFighting = false;
        wManager.wManagerSetting.CurrentSetting.FlightMasterDiscoverRange = 50;
        wManager.wManagerSetting.CurrentSetting.FlightMasterTaxiUse = false;
        wManager.wManagerSetting.CurrentSetting.HarvestAvoidPlayersRadius = 1;
        wManager.wManagerSetting.CurrentSetting.HarvestDuringLongMove = false;
        wManager.wManagerSetting.CurrentSetting.HarvestTimber = false;
        wManager.wManagerSetting.CurrentSetting.HelpingGroupMembers = true;
        wManager.wManagerSetting.CurrentSetting.IgnoreCombatWithPet = false;
        wManager.wManagerSetting.CurrentSetting.IgnoreFightDuringFarmIfDruidForm = false;
        wManager.wManagerSetting.CurrentSetting.IgnoreFightGoundMount = true;
        wManager.wManagerSetting.CurrentSetting.LootChests = false;
        wManager.wManagerSetting.CurrentSetting.LootMobs = true;
        wManager.wManagerSetting.CurrentSetting.MountDistance = 100;
        wManager.wManagerSetting.CurrentSetting.Relogger = true;
        wManager.wManagerSetting.CurrentSetting.SecurityPauseBotIfNerbyPlayer = false;
        wManager.wManagerSetting.CurrentSetting.RecordChatInLog = true;
        wManager.wManagerSetting.CurrentSetting.SecurityShutdownComputer = false;
        wManager.wManagerSetting.CurrentSetting.UsePathsFinder = true;
        wManager.wManagerSetting.CurrentSetting.UseSpiritHealer = false;
        wManager.wManagerSetting.CurrentSetting.WaitResurrectionSickness = true;
        wManager.wManagerSetting.CurrentSetting.WallDistancePathFinder = 2;

        ClassSettings();

        if(Conditions.ForceIgnoreIsAttacked)
        {
            Logging.Write("[FNV_Quester]: Force ignore attack is enabled, going to disable it...");
            Conditions.ForceIgnoreIsAttacked = false;
        }

         wManager.wManagerSetting.CurrentSetting.Save();
         Thread.Sleep(500);
         wManager.wManagerSetting.CurrentSetting.Save();

        wManager.Wow.Forms.UserControlTabGeneralSettings.ReloadGeneralSettings();

        Logging.Write("[FNV_Quester]: Applied default settings for Eastern Kingdoms");

        return;
    }

    public static void SettingsKalimdor()
    {
        //Kalimdor only
        wManager.wManagerSetting.CurrentSetting.TrainNewSkills = false;

        wManager.wManagerSetting.CurrentSetting.DontStartFighting = false;
        wManager.wManagerSetting.CurrentSetting.DetectNodesStuck = true;
        wManager.wManagerSetting.CurrentSetting.CanAttackUnitsAlreadyInFight = false;
        wManager.wManagerSetting.CurrentSetting.AvoidBlacklistedZonesPathFinder = true;
        wManager.wManagerSetting.CurrentSetting.AttackElite = false;
        wManager.wManagerSetting.CurrentSetting.AttackBeforeBeingAttacked = true;
        wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = true;
        wManager.wManagerSetting.CurrentSetting.FlightMasterTaxiUse = false;
        wManager.wManagerSetting.CurrentSetting.IgnoreFightWhenInMove = false;

        wManager.wManagerSetting.CurrentSetting.Repair = true;
        wManager.wManagerSetting.CurrentSetting.SellGray = true;
        wManager.wManagerSetting.CurrentSetting.SellGreen = true;
        wManager.wManagerSetting.CurrentSetting.Selling = true;
        wManager.wManagerSetting.CurrentSetting.SellWhite = true;
        wManager.wManagerSetting.CurrentSetting.MinFreeBagSlotsToGoToTown = 4;

        wManager.wManagerSetting.CurrentSetting.SearchRadius = 100;
        wManager.wManagerSetting.CurrentSetting.MaxUnitsNear = 100;

        wManager.wManagerSetting.CurrentSetting.WallDistancePathFinder = 2;
        wManager.wManagerSetting.CurrentSetting.AddToNpcDb = false;
        wManager.wManagerSetting.CurrentSetting.BlackListIfNotCompletePath = false;
        wManager.wManagerSetting.CurrentSetting.UseCTM = true;
        wManager.wManagerSetting.CurrentSetting.UseLuaToMove = true;

        wManager.wManagerSetting.CurrentSetting.NpcScanAuctioneer = false;
        wManager.wManagerSetting.CurrentSetting.NpcScanMailboxes = false;
        wManager.wManagerSetting.CurrentSetting.NpcScanRepair = false;
        wManager.wManagerSetting.CurrentSetting.NpcScanVendor = false;

        wManager.wManagerSetting.CurrentSetting.HarvestHerbs = false;
        wManager.wManagerSetting.CurrentSetting.HarvestMinerals = false;

        wManager.wManagerSetting.CurrentSetting.AvoidBlacklistedZonesPathFinder = true;
        wManager.wManagerSetting.CurrentSetting.AvoidWallWithRays = true;
        wManager.wManagerSetting.CurrentSetting.BlackListTrainingDummy = true;
        wManager.wManagerSetting.CurrentSetting.BlackListZoneWhereDead = false;
        wManager.wManagerSetting.CurrentSetting.CalcuCombatRange = false;
        wManager.wManagerSetting.CurrentSetting.CanAttackUnitsAlreadyInFight = false;
        wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;
        wManager.wManagerSetting.CurrentSetting.DetectNodesStuck = true;
        wManager.wManagerSetting.CurrentSetting.DontStartFighting = false;
        wManager.wManagerSetting.CurrentSetting.FlightMasterDiscoverRange = 50;
        wManager.wManagerSetting.CurrentSetting.FlightMasterTaxiUse = false;
        wManager.wManagerSetting.CurrentSetting.HarvestAvoidPlayersRadius = 1;
        wManager.wManagerSetting.CurrentSetting.HarvestDuringLongMove = false;
        wManager.wManagerSetting.CurrentSetting.HarvestTimber = false;
        wManager.wManagerSetting.CurrentSetting.HelpingGroupMembers = true;
        wManager.wManagerSetting.CurrentSetting.IgnoreCombatWithPet = false;
        wManager.wManagerSetting.CurrentSetting.IgnoreFightDuringFarmIfDruidForm = false;
        wManager.wManagerSetting.CurrentSetting.IgnoreFightGoundMount = true;
        wManager.wManagerSetting.CurrentSetting.LootChests = false;
        wManager.wManagerSetting.CurrentSetting.LootMobs = true;
        wManager.wManagerSetting.CurrentSetting.MountDistance = 100;
        wManager.wManagerSetting.CurrentSetting.Relogger = true;
        wManager.wManagerSetting.CurrentSetting.SecurityPauseBotIfNerbyPlayer = false;
        wManager.wManagerSetting.CurrentSetting.RecordChatInLog = true;
        wManager.wManagerSetting.CurrentSetting.SecurityShutdownComputer = false;
        wManager.wManagerSetting.CurrentSetting.UsePathsFinder = true;
        wManager.wManagerSetting.CurrentSetting.UseSpiritHealer = false;
        wManager.wManagerSetting.CurrentSetting.WaitResurrectionSickness = true;
        wManager.wManagerSetting.CurrentSetting.WallDistancePathFinder = 2;

        ClassSettings();

        if(Conditions.ForceIgnoreIsAttacked)
        {
            Logging.Write("[FNV_Quester]: Force ignore attack is enabled, going to disable it...");
            Conditions.ForceIgnoreIsAttacked = false;
        }

         wManager.wManagerSetting.CurrentSetting.Save();
         Thread.Sleep(500);
         wManager.wManagerSetting.CurrentSetting.Save();

        wManager.Wow.Forms.UserControlTabGeneralSettings.ReloadGeneralSettings();

        Logging.Write("[FNV_Quester]: Applied default settings for Kalimdor");

        return;
    }

}


public class Blackspots
{
   

    public static void StartThread()
    {

    Thread BlackspotValidation = new Thread(() =&gt;
    {
        Logging.Write("[FNV_Quester]: Blackspot validation started");
        Dictionary&lt;Vector3, float&gt; blackspots = new Dictionary&lt;Vector3, float&gt;();
        bool _isStarted = false;

        string profileName = "FNV_V2\\#0 START_FNVLauncher_V2.xml";
        string currentProfileName = wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName;
        int counter = 0;

        if(!_isStarted)
        {
            _isStarted = true;

            while(wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName.Equals(profileName) &amp;&amp; Conditions.ProductIsStarted)
            {
                Thread.Sleep(1000);
            }

            while(Conditions.ProductIsStarted || Conditions.ProductInPause)
            {

                if(wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName.Equals(profileName))
                    break;

                if(counter &gt; 300)
                {
                    Logging.Write("[FNV_Quester]: Clear blacklist of current product session");
                    wManager.wManagerSetting.ClearBlacklistOfCurrentProductSession();
                    counter = 0;
                }

                if(wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported)
                    wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;

                if(!wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName.Equals(currentProfileName))
                {
                    Logging.Write("[FNV_Quester]: Profile has been changed. Reset current blackspots and save blackspots of loaded profile...");
                    currentProfileName = wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName;

                    blackspots.Clear();

                    foreach(var temp in wManager.wManagerSetting.GetListZoneBlackListed())
                    {
                        blackspots.Add(temp.GetPosition(), temp.Radius);
                    }
                }

                if(blackspots.Count &gt; wManager.wManagerSetting.GetListZoneBlackListed().Count)
                {
                    Logging.Write("[FNV_Quester]: Reaply default blackspots");
                    try
                    {
                        foreach(var temp in blackspots)
                        {
                            if (!wManager.wManagerSetting.GetListZoneBlackListed().Any(b =&gt; b.GetPosition().DistanceTo(temp.Key) &lt; 0.1 &amp;&amp; System.Math.Abs(b.Radius - temp.Value) &lt; 0.1))
                                wManager.wManagerSetting.AddBlackListZone(temp.Key, temp.Value, true);
                        }
                    }
                    catch(Exception e)
                    {
                    }
                }

                if(wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName.Equals(profileName))
                    break;

                counter++;
                Thread.Sleep(1000);
            }
        }
        _isStarted = false;
        Logging.Write("[FNV_Quester]: Blackspot validation disposed");

    });

        BlackspotValidation.Start();
    }
}

public class ProfileRestarter
{
    private static bool _IsAfk = false;
    private static Vector3 afkPosition = (Vector3)null;
    private static int timer = 0;
    private static bool _isSubscribed = false;
    private static void WatchForEvents()
    {
        if(!_isSubscribed)
        {
            _isSubscribed = true;

            EventsLuaWithArgs.OnEventsLuaWithArgs += (LuaEventsId id, List&lt;string&gt; args) =&gt;
            {
                if(id == wManager.Wow.Enums.LuaEventsId.CHAT_MSG_SYSTEM &amp;&amp; Conditions.ProductIsStartedNotInPause)
                {

                    if(args.FirstOrDefault().Contains("You are now AFK"))
                    {
                        _IsAfk = true;
                        timer = 0;
                        afkPosition = ObjectManager.Me.Position;
                    }
                }
            };
        }
    }

    public static void StartProfileRestarter()
    {

        Thread ProfileRestarterThread = new Thread(() =&gt;
        {
            Logging.Write("[FNV_Quester]: Profile Restarter initialized");

            string profileName = "FNV_V2\\#0 START_FNVLauncher_V2.xml";
            string currentProfileName = wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName;


            while((wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName.Equals(profileName) || !ObjectManager.Me.GetMove) &amp;&amp; Conditions.ProductIsStarted)
            {
                Thread.Sleep(1000);
            }

            if(!_isSubscribed)
            {
                Thread.Sleep(Usefuls.Latency + 500);
                WatchForEvents();
            }

            while(Conditions.ProductIsStarted || Conditions.ProductInPause)
            {

                if(wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName.Equals(profileName))
                    break;

                while(_IsAfk &amp;&amp; timer &lt; 600 &amp;&amp; !wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName.Equals(profileName))
                {
                    Thread.Sleep(1000);
                    timer++;
                }

                if(_IsAfk &amp;&amp; timer &gt;= 600 &amp;&amp; ObjectManager.Me.Position.DistanceTo(afkPosition) &lt; 25)
                {
                    Logging.Write("[FNV_Quester]: Bot seems to stopped / went AFK for too long. Restart of profile in process...");
                    wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName = profileName;
                    robotManager.Products.Products.ProductRestart();
                    break;
                }

                timer = 0;
                _IsAfk = false;
                Thread.Sleep(10000);
            }

            Logging.Write("[FNV_Quester]: Profile Restarter disposed");

        });

        ProfileRestarterThread.Start();
    }
}


class test
{


    public static void testen()
    {

    }
}
    </Script>
  <OffMeshConnections>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-6534.241" Y="-1177.797" Z="311.8607" />
        <Vector3 X="-6525.245" Y="-1175.659" Z="310.893" />
        <Vector3 X="-6518.448" Y="-1179.869" Z="309.386" />
        <Vector3 X="-6522.146" Y="-1186.968" Z="309.2552" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Unidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>false</TryToUseEvenIfCanFindPathSuccess>
      <Name>Thorium Point</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-6661.951" Y="-1319.291" Z="242.66" />
        <Vector3 X="-6680.136" Y="-1328.331" Z="247.9123" />
        <Vector3 X="-6703.401" Y="-1343.398" Z="242.2457" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Unidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>false</TryToUseEvenIfCanFindPathSuccess>
      <Name>Hill Searing Gore</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-6658.208" Y="-1313.253" Z="243.838" />
        <Vector3 X="-6676.315" Y="-1310.164" Z="242.0017" />
        <Vector3 X="-6701.406" Y="-1305.355" Z="240.5561" />
        <Vector3 X="-6720.286" Y="-1307.626" Z="241.543" />
        <Vector3 X="-6722.701" Y="-1317.477" Z="240.6904" />
        <Vector3 X="-6714.237" Y="-1335.571" Z="240.123" />
        <Vector3 X="-6717.652" Y="-1364.287" Z="246.9535" />
        <Vector3 X="-6707.523" Y="-1372.426" Z="240.0138" />
        <Vector3 X="-6704.394" Y="-1380.339" Z="240.0706" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Unidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>false</TryToUseEvenIfCanFindPathSuccess>
      <Name>Hill Searing Gore 2</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-6659.911" Y="-1324.804" Z="243.0881" />
        <Vector3 X="-6653.2" Y="-1339.474" Z="245.8166" />
        <Vector3 X="-6649.7" Y="-1357.486" Z="248.7948" />
        <Vector3 X="-6650.288" Y="-1374.627" Z="247.2625" />
        <Vector3 X="-6656.255" Y="-1387.107" Z="243.1059" />
        <Vector3 X="-6659.47" Y="-1397.312" Z="242.8232" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Unidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>false</TryToUseEvenIfCanFindPathSuccess>
      <Name>Hill Searing Gore 3</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-6658.748" Y="-1323.158" Z="243.4632" />
        <Vector3 X="-6668.086" Y="-1309.11" Z="241.9388" />
        <Vector3 X="-6676.887" Y="-1296.223" Z="242.0561" />
        <Vector3 X="-6683.671" Y="-1286.765" Z="242.0283" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Unidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>false</TryToUseEvenIfCanFindPathSuccess>
      <Name>Hill Searing Gore 4</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-6659.039" Y="-1214.036" Z="244.3054" />
        <Vector3 X="-6642.043" Y="-1138.052" Z="244.6045" />
        <Vector3 X="-6618.194" Y="-1085.43" Z="244.6632" />
        <Vector3 X="-6613.349" Y="-1039.318" Z="244.5992" />
        <Vector3 X="-6603.95" Y="-1020.539" Z="244.5078" />
        <Vector3 X="-6587.414" Y="-1047.498" Z="260.1747" />
        <Vector3 X="-6540.617" Y="-1069.614" Z="279.3863" />
        <Vector3 X="-6495.06" Y="-1080.037" Z="294.6483" />
        <Vector3 X="-6480.762" Y="-1100.06" Z="301.2901" />
        <Vector3 X="-6495.042" Y="-1141.261" Z="307.1827" />
        <Vector3 X="-6522.528" Y="-1170.115" Z="309.9784" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Unidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>false</TryToUseEvenIfCanFindPathSuccess>
      <Name>Thorium Point Main large</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-6605.533" Y="-1074.982" Z="246.8364" />
        <Vector3 X="-6619.306" Y="-1063.775" Z="244.7769" />
        <Vector3 X="-6605.597" Y="-1018.195" Z="246.1557" />
        <Vector3 X="-6592.501" Y="-1039.637" Z="256.2677" />
        <Vector3 X="-6577.64" Y="-1054.44" Z="264.5468" />
        <Vector3 X="-6489.417" Y="-1086.653" Z="296.9299" />
        <Vector3 X="-6486.339" Y="-1120.527" Z="305.4604" />
        <Vector3 X="-6515.938" Y="-1168.832" Z="309.1423" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Unidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>false</TryToUseEvenIfCanFindPathSuccess>
      <Name>Thorium Point Main large -1</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-6571.581" Y="-1063.47" Z="269.3446" />
        <Vector3 X="-6567.285" Y="-1057.173" Z="268.3513" />
        <Vector3 X="-6487.053" Y="-1085.636" Z="297.3468" />
        <Vector3 X="-6481.868" Y="-1117.233" Z="305.4526" />
        <Vector3 X="-6520.901" Y="-1173.833" Z="310.1823" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Unidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>false</TryToUseEvenIfCanFindPathSuccess>
      <Name>Thorium Point Main large -2</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-6555.018" Y="-1079.952" Z="281.281" />
        <Vector3 X="-6545.31" Y="-1071.117" Z="277.9051" />
        <Vector3 X="-6490.654" Y="-1077.529" Z="295.9637" />
        <Vector3 X="-6481.345" Y="-1115.209" Z="304.8842" />
        <Vector3 X="-6518.374" Y="-1171.849" Z="309.7987" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Unidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>false</TryToUseEvenIfCanFindPathSuccess>
      <Name>Thorium Point Main medium</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-6510.323" Y="-1081.033" Z="290.9734" />
        <Vector3 X="-6484.438" Y="-1087.847" Z="298.1053" />
        <Vector3 X="-6487.486" Y="-1132.903" Z="306.9377" />
        <Vector3 X="-6519.688" Y="-1172.998" Z="310.0202" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Unidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>false</TryToUseEvenIfCanFindPathSuccess>
      <Name>Thorium Point Main short</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-6601.505" Y="-1020.903" Z="244.6903" />
        <Vector3 X="-6585.333" Y="-1048.561" Z="261.0725" />
        <Vector3 X="-6542.476" Y="-1070.697" Z="278.7289" />
        <Vector3 X="-6493.875" Y="-1080.158" Z="295.0308" />
        <Vector3 X="-6482.6" Y="-1100.535" Z="301.1094" />
        <Vector3 X="-6490.491" Y="-1129.309" Z="306.2355" />
        <Vector3 X="-6512.04" Y="-1164.469" Z="308.4487" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Bidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>true</TryToUseEvenIfCanFindPathSuccess>
      <Name>Thorium Point Main Entrance</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-6601.505" Y="-1020.903" Z="244.6903" />
        <Vector3 X="-6585.333" Y="-1048.561" Z="261.0725" />
        <Vector3 X="-6542.476" Y="-1070.697" Z="278.7289" />
        <Vector3 X="-6493.875" Y="-1080.158" Z="295.0308" />
        <Vector3 X="-6482.6" Y="-1100.535" Z="301.1094" />
        <Vector3 X="-6490.491" Y="-1129.309" Z="306.2355" />
        <Vector3 X="-6512.04" Y="-1164.469" Z="308.4487" />
        <Vector3 X="-6512.04" Y="-1164.469" Z="308.4487" />
        <Vector3 X="-6500.48" Y="-1174.16" Z="309.2464" />
        <Vector3 X="-6491.501" Y="-1185.426" Z="319.8343" />
        <Vector3 X="-6484.601" Y="-1195.942" Z="325.9867" />
        <Vector3 X="-6473.803" Y="-1188.494" Z="326.1521" />
        <Vector3 X="-6488.278" Y="-1168.906" Z="325.073" />
        <Vector3 X="-6498.563" Y="-1176.525" Z="326.5802" />
        <Vector3 X="-6501.3" Y="-1173.249" Z="325.8294" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Bidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>true</TryToUseEvenIfCanFindPathSuccess>
      <Name>Thorium Point Main Entrance to Overseer</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-6512.04" Y="-1164.469" Z="308.4487" />
        <Vector3 X="-6500.48" Y="-1174.16" Z="309.2464" />
        <Vector3 X="-6491.501" Y="-1185.426" Z="319.8343" />
        <Vector3 X="-6484.601" Y="-1195.942" Z="325.9867" />
        <Vector3 X="-6473.803" Y="-1188.494" Z="326.1521" />
        <Vector3 X="-6488.278" Y="-1168.906" Z="325.073" />
        <Vector3 X="-6498.563" Y="-1176.525" Z="326.5802" />
        <Vector3 X="-6501.3" Y="-1173.249" Z="325.8294" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Bidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>true</TryToUseEvenIfCanFindPathSuccess>
      <Name>Thorium Point - Middle to Overseer</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-6601.505" Y="-1020.903" Z="244.6903" />
        <Vector3 X="-6585.333" Y="-1048.561" Z="261.0725" />
        <Vector3 X="-6542.476" Y="-1070.697" Z="278.7289" />
        <Vector3 X="-6493.875" Y="-1080.158" Z="295.0308" />
        <Vector3 X="-6482.6" Y="-1100.535" Z="301.1094" />
        <Vector3 X="-6490.491" Y="-1129.309" Z="306.2355" />
        <Vector3 X="-6512.04" Y="-1164.469" Z="308.4487" />
        <Vector3 X="-6511.471" Y="-1163.664" Z="308.3686" />
        <Vector3 X="-6531.705" Y="-1166.636" Z="309.2316" />
        <Vector3 X="-6558.128" Y="-1169.551" Z="309.7784" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Bidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>true</TryToUseEvenIfCanFindPathSuccess>
      <Name>Thorium Point Main Entrance to Flight Master</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-6511.471" Y="-1163.664" Z="308.3686" />
        <Vector3 X="-6531.705" Y="-1166.636" Z="309.2316" />
        <Vector3 X="-6558.128" Y="-1169.551" Z="309.7784" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Bidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>true</TryToUseEvenIfCanFindPathSuccess>
      <Name>Thorium Point - Middle to Flight Master</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-6601.505" Y="-1020.903" Z="244.6903" />
        <Vector3 X="-6585.333" Y="-1048.561" Z="261.0725" />
        <Vector3 X="-6542.476" Y="-1070.697" Z="278.7289" />
        <Vector3 X="-6493.875" Y="-1080.158" Z="295.0308" />
        <Vector3 X="-6482.6" Y="-1100.535" Z="301.1094" />
        <Vector3 X="-6490.491" Y="-1129.309" Z="306.2355" />
        <Vector3 X="-6512.04" Y="-1164.469" Z="308.4487" />
        <Vector3 X="-6512.349" Y="-1164.263" Z="308.4394" />
        <Vector3 X="-6494.693" Y="-1163.359" Z="309.1673" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Bidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>true</TryToUseEvenIfCanFindPathSuccess>
      <Name>Thorium Point Main Entrance to Wanted Poster</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-6512.349" Y="-1164.263" Z="308.4394" />
        <Vector3 X="-6494.693" Y="-1163.359" Z="309.1673" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Bidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>true</TryToUseEvenIfCanFindPathSuccess>
      <Name>Thorium Point - Middle to Wanted Poster</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-6601.505" Y="-1020.903" Z="244.6903" />
        <Vector3 X="-6585.333" Y="-1048.561" Z="261.0725" />
        <Vector3 X="-6542.476" Y="-1070.697" Z="278.7289" />
        <Vector3 X="-6493.875" Y="-1080.158" Z="295.0308" />
        <Vector3 X="-6482.6" Y="-1100.535" Z="301.1094" />
        <Vector3 X="-6490.491" Y="-1129.309" Z="306.2355" />
        <Vector3 X="-6512.04" Y="-1164.469" Z="308.4487" />
        <Vector3 X="-6512.87" Y="-1164.814" Z="308.4901" />
        <Vector3 X="-6517.886" Y="-1181.463" Z="309.2669" />
        <Vector3 X="-6524.321" Y="-1189.085" Z="309.2552" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Bidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>true</TryToUseEvenIfCanFindPathSuccess>
      <Name>Thorium Point Main Entrance to Master Smith</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-6512.87" Y="-1164.814" Z="308.4901" />
        <Vector3 X="-6517.886" Y="-1181.463" Z="309.2669" />
        <Vector3 X="-6524.321" Y="-1189.085" Z="309.2552" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Bidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>true</TryToUseEvenIfCanFindPathSuccess>
      <Name>Thorium Point - Middle to Master Smith</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-6601.505" Y="-1020.903" Z="244.6903" />
        <Vector3 X="-6585.333" Y="-1048.561" Z="261.0725" />
        <Vector3 X="-6542.476" Y="-1070.697" Z="278.7289" />
        <Vector3 X="-6493.875" Y="-1080.158" Z="295.0308" />
        <Vector3 X="-6482.6" Y="-1100.535" Z="301.1094" />
        <Vector3 X="-6490.491" Y="-1129.309" Z="306.2355" />
        <Vector3 X="-6512.04" Y="-1164.469" Z="308.4487" />
        <Vector3 X="-6511.733" Y="-1163.873" Z="308.3919" />
        <Vector3 X="-6519.813" Y="-1177.392" Z="309.6992" />
        <Vector3 X="-6513.391" Y="-1181.138" Z="309.255" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Bidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>true</TryToUseEvenIfCanFindPathSuccess>
      <Name>Thorium Point Main Entrance to Heavy Hands</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-6511.733" Y="-1163.873" Z="308.3919" />
        <Vector3 X="-6519.813" Y="-1177.392" Z="309.6992" />
        <Vector3 X="-6513.391" Y="-1181.138" Z="309.255" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Bidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>true</TryToUseEvenIfCanFindPathSuccess>
      <Name>Thorium Point - Middle to Heavyhands</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-6601.505" Y="-1020.903" Z="244.6903" />
        <Vector3 X="-6585.333" Y="-1048.561" Z="261.0725" />
        <Vector3 X="-6542.476" Y="-1070.697" Z="278.7289" />
        <Vector3 X="-6493.875" Y="-1080.158" Z="295.0308" />
        <Vector3 X="-6482.6" Y="-1100.535" Z="301.1094" />
        <Vector3 X="-6490.491" Y="-1129.309" Z="306.2355" />
        <Vector3 X="-6512.04" Y="-1164.469" Z="308.4487" />
        <Vector3 X="-6512.471" Y="-1163.363" Z="308.3689" />
        <Vector3 X="-6521.668" Y="-1181.514" Z="309.4813" />
        <Vector3 X="-6509.728" Y="-1192.684" Z="309.2555" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Bidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>true</TryToUseEvenIfCanFindPathSuccess>
      <Name>Thorium Point Main Entrance to Taskmaster</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-6512.471" Y="-1163.363" Z="308.3689" />
        <Vector3 X="-6521.668" Y="-1181.514" Z="309.4813" />
        <Vector3 X="-6509.728" Y="-1192.684" Z="309.2555" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Bidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>true</TryToUseEvenIfCanFindPathSuccess>
      <Name>Thorium Point - Middle to Taskmaster</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-6757.496" Y="-1161.888" Z="186.5603" />
        <Vector3 X="-6757.285" Y="-1133.667" Z="185.6102" />
        <Vector3 X="-6740.207" Y="-1122.663" Z="185.5773" />
        <Vector3 X="-6717.449" Y="-1139.881" Z="185.5667" />
        <Vector3 X="-6669.065" Y="-1183.742" Z="182.0959" />
        <Vector3 X="-6648.897" Y="-1196.677" Z="182.1231" />
        <Vector3 X="-6573.735" Y="-1215.263" Z="186.5178" />
        <Vector3 X="-6552.149" Y="-1226.082" Z="185.296" />
        <Vector3 X="-6501.782" Y="-1255.616" Z="180.3925" />
        <Vector3 X="-6437.784" Y="-1304.765" Z="180.9377" />
        <Vector3 X="-6455.014" Y="-1307.053" Z="180.923" />
        <Vector3 X="-6489.437" Y="-1307.112" Z="192.6859" />
        <Vector3 X="-6509.597" Y="-1296.831" Z="198.8885" />
        <Vector3 X="-6520.38" Y="-1282.931" Z="200.0163" />
        <Vector3 X="-6536.472" Y="-1271.069" Z="206.5495" />
        <Vector3 X="-6571.489" Y="-1273.53" Z="208.7418" />
        <Vector3 X="-6603.641" Y="-1276.293" Z="208.7418" />
        <Vector3 X="-6629.44" Y="-1294.362" Z="208.7418" />
        <Vector3 X="-6658.703" Y="-1321.581" Z="209.3349" />
        <Vector3 X="-6688.774" Y="-1354.998" Z="211.9139" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Bidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>true</TryToUseEvenIfCanFindPathSuccess>
      <Name>The Slag Pit Quarry Gate to other side out</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-6552.36" Y="-1078.698" Z="279.9848" />
        <Vector3 X="-6547.379" Y="-1069.685" Z="277.1037" />
        <Vector3 X="-6506.344" Y="-1074.569" Z="291.13" />
        <Vector3 X="-6487.28" Y="-1086.178" Z="297.3564" />
        <Vector3 X="-6483.383" Y="-1113.687" Z="304.1726" />
        <Vector3 X="-6514.389" Y="-1173.298" Z="309.3342" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Unidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>true</TryToUseEvenIfCanFindPathSuccess>
      <Name>Thorium Point - Entrance additional</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-6501.498" Y="-1088.489" Z="296.4226" />
        <Vector3 X="-6494.568" Y="-1079.476" Z="294.7771" />
        <Vector3 X="-6481.317" Y="-1100.215" Z="301.2381" />
        <Vector3 X="-6491.515" Y="-1131.707" Z="306.3077" />
        <Vector3 X="-6513.996" Y="-1169.101" Z="308.9964" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Bidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>true</TryToUseEvenIfCanFindPathSuccess>
      <Name>Thorium Point - Entrance additional 2</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-6601.96" Y="-1022.578" Z="244.5793" />
        <Vector3 X="-6586.604" Y="-1049.31" Z="260.7748" />
        <Vector3 X="-6550.212" Y="-1065.917" Z="275.8676" />
        <Vector3 X="-6514.152" Y="-1075.803" Z="288.53" />
        <Vector3 X="-6484.715" Y="-1087.746" Z="298.0352" />
        <Vector3 X="-6486.106" Y="-1118.503" Z="305.0748" />
        <Vector3 X="-6499.43" Y="-1155.016" Z="308.7513" />
        <Vector3 X="-6494.658" Y="-1163.987" Z="309.1862" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Bidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>true</TryToUseEvenIfCanFindPathSuccess>
      <Name>Thorium Point Entrance To Wanted Poster / Captain Lolo</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-6602.655" Y="-1021.395" Z="244.5762" />
        <Vector3 X="-6588.401" Y="-1045.24" Z="259.4051" />
        <Vector3 X="-6561.003" Y="-1060.092" Z="270.9514" />
        <Vector3 X="-6533.673" Y="-1073.651" Z="281.8553" />
        <Vector3 X="-6503.428" Y="-1077.308" Z="292.1214" />
        <Vector3 X="-6484.947" Y="-1092.553" Z="298.8258" />
        <Vector3 X="-6487.13" Y="-1121.029" Z="305.4124" />
        <Vector3 X="-6509.742" Y="-1163.247" Z="308.3062" />
        <Vector3 X="-6512.825" Y="-1178.353" Z="309.2509" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Bidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>true</TryToUseEvenIfCanFindPathSuccess>
      <Name>Thorium Point Entrance To Evonice</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-6603.53" Y="-1021.761" Z="244.5143" />
        <Vector3 X="-6594.264" Y="-1032.169" Z="252.6203" />
        <Vector3 X="-6584.865" Y="-1052.633" Z="262.0863" />
        <Vector3 X="-6557.569" Y="-1062.05" Z="272.5345" />
        <Vector3 X="-6535.901" Y="-1073.687" Z="281.2064" />
        <Vector3 X="-6502.191" Y="-1075.968" Z="292.3947" />
        <Vector3 X="-6485.633" Y="-1091.874" Z="298.585" />
        <Vector3 X="-6485.579" Y="-1111.864" Z="303.6564" />
        <Vector3 X="-6492.707" Y="-1133.687" Z="306.4282" />
        <Vector3 X="-6514.422" Y="-1168.48" Z="308.9718" />
        <Vector3 X="-6519.62" Y="-1176.827" Z="309.7419" />
        <Vector3 X="-6513.674" Y="-1183.398" Z="309.2563" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Bidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>true</TryToUseEvenIfCanFindPathSuccess>
      <Name>Thorium Point Entrance To Heavyhands</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-6602.735" Y="-1020.957" Z="244.59" />
        <Vector3 X="-6594.59" Y="-1033.649" Z="253.1209" />
        <Vector3 X="-6587.575" Y="-1050.953" Z="260.8711" />
        <Vector3 X="-6556.388" Y="-1063.939" Z="273.3087" />
        <Vector3 X="-6537.113" Y="-1073.738" Z="280.8904" />
        <Vector3 X="-6499.85" Y="-1076.95" Z="293.1443" />
        <Vector3 X="-6482.987" Y="-1097.018" Z="300.2282" />
        <Vector3 X="-6489.753" Y="-1127.435" Z="306.1011" />
        <Vector3 X="-6502.878" Y="-1145.872" Z="307.4517" />
        <Vector3 X="-6508.655" Y="-1166.411" Z="308.6172" />
        <Vector3 X="-6497.517" Y="-1179.763" Z="313.3661" />
        <Vector3 X="-6490.38" Y="-1188.332" Z="322.0923" />
        <Vector3 X="-6485.198" Y="-1195.93" Z="325.9364" />
        <Vector3 X="-6474.735" Y="-1188.295" Z="326.0964" />
        <Vector3 X="-6489.714" Y="-1167.952" Z="324.9846" />
        <Vector3 X="-6500.863" Y="-1173.97" Z="325.9643" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Bidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>true</TryToUseEvenIfCanFindPathSuccess>
      <Name>Thorium Point Entrance To Oilfist</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-6607.067" Y="-1021.864" Z="244.5527" />
        <Vector3 X="-6594.872" Y="-1030.13" Z="251.2173" />
        <Vector3 X="-6588.039" Y="-1048.612" Z="260.1778" />
        <Vector3 X="-6564.932" Y="-1059.801" Z="269.5984" />
        <Vector3 X="-6537.82" Y="-1072.797" Z="280.5062" />
        <Vector3 X="-6503.007" Y="-1076.345" Z="292.1721" />
        <Vector3 X="-6488.27" Y="-1088.561" Z="297.4995" />
        <Vector3 X="-6483.378" Y="-1106.394" Z="302.4271" />
        <Vector3 X="-6491.004" Y="-1129.786" Z="306.2383" />
        <Vector3 X="-6520.338" Y="-1180.392" Z="309.4835" />
        <Vector3 X="-6508.982" Y="-1192.753" Z="309.2555" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Bidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>true</TryToUseEvenIfCanFindPathSuccess>
      <Name>Thorium Point Entrance To Scrange</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-6607" Y="-1020.685" Z="244.6993" />
        <Vector3 X="-6595.864" Y="-1025.234" Z="248.1016" />
        <Vector3 X="-6591.159" Y="-1043.789" Z="258.0219" />
        <Vector3 X="-6578.921" Y="-1052.964" Z="263.9572" />
        <Vector3 X="-6543.94" Y="-1069.785" Z="278.2704" />
        <Vector3 X="-6510.482" Y="-1075.331" Z="289.7772" />
        <Vector3 X="-6493.904" Y="-1082.43" Z="295.2039" />
        <Vector3 X="-6483.067" Y="-1098.194" Z="300.4992" />
        <Vector3 X="-6487.33" Y="-1115.744" Z="304.444" />
        <Vector3 X="-6497.679" Y="-1138.53" Z="306.838" />
        <Vector3 X="-6517.053" Y="-1175.88" Z="309.5525" />
        <Vector3 X="-6523.733" Y="-1188.89" Z="309.2553" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Bidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>true</TryToUseEvenIfCanFindPathSuccess>
      <Name>Thorium Point Entrance To Burninate</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-6603.082" Y="-1020.701" Z="244.5524" />
        <Vector3 X="-6593.433" Y="-1035.225" Z="254.3034" />
        <Vector3 X="-6587.516" Y="-1049.972" Z="260.5758" />
        <Vector3 X="-6565.367" Y="-1059.333" Z="269.3601" />
        <Vector3 X="-6541.326" Y="-1072.302" Z="279.2804" />
        <Vector3 X="-6503.859" Y="-1076.675" Z="291.9713" />
        <Vector3 X="-6487.287" Y="-1088.952" Z="297.7595" />
        <Vector3 X="-6484.871" Y="-1107.866" Z="302.7881" />
        <Vector3 X="-6490.749" Y="-1132.32" Z="306.4093" />
        <Vector3 X="-6509.48" Y="-1159.236" Z="308.0287" />
        <Vector3 X="-6533.706" Y="-1165.882" Z="309.2591" />
        <Vector3 X="-6558.921" Y="-1169.468" Z="309.7935" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Bidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>true</TryToUseEvenIfCanFindPathSuccess>
      <Name>Thorium Point Entrance To FlightMaster Alliance</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-6601.819" Y="-1020.17" Z="244.5934" />
        <Vector3 X="-6592.693" Y="-1037.489" Z="255.5427" />
        <Vector3 X="-6585.485" Y="-1052.221" Z="261.8006" />
        <Vector3 X="-6565.731" Y="-1060.211" Z="269.4209" />
        <Vector3 X="-6539.4" Y="-1071.968" Z="279.8046" />
        <Vector3 X="-6510.19" Y="-1076.221" Z="289.9713" />
        <Vector3 X="-6488.733" Y="-1085.286" Z="296.9193" />
        <Vector3 X="-6483.01" Y="-1102.358" Z="301.5121" />
        <Vector3 X="-6488.805" Y="-1130.587" Z="306.454" />
        <Vector3 X="-6503.958" Y="-1133.4" Z="307.5455" />
        <Vector3 X="-6528.964" Y="-1109.202" Z="310.2292" />
        <Vector3 X="-6559.199" Y="-1100.054" Z="310.2401" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Bidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>true</TryToUseEvenIfCanFindPathSuccess>
      <Name>Thorium Point Entrance To FlightMaster Horde</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-6494.577" Y="-1164.149" Z="309.1936" />
        <Vector3 X="-6512.276" Y="-1172.6" Z="309.1117" />
        <Vector3 X="-6512.696" Y="-1178.684" Z="309.2542" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Bidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>true</TryToUseEvenIfCanFindPathSuccess>
      <Name>Thorium Point - Wanted / Captain Lolo to Sootsmoker</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-6494.741" Y="-1164.142" Z="309.1872" />
        <Vector3 X="-6520.112" Y="-1171.973" Z="310.0089" />
        <Vector3 X="-6513.752" Y="-1183.446" Z="309.2563" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Bidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>true</TryToUseEvenIfCanFindPathSuccess>
      <Name>Thorium Point - Wanted / Captain Lolo to Heavyhands</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-6494.87" Y="-1163.532" Z="309.1655" />
        <Vector3 X="-6523.096" Y="-1175.123" Z="310.5824" />
        <Vector3 X="-6509.995" Y="-1191.534" Z="309.2553" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Bidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>true</TryToUseEvenIfCanFindPathSuccess>
      <Name>Thorium Point - Wanted / Captain Lolo to Scrange</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-6494.952" Y="-1164.176" Z="309.1796" />
        <Vector3 X="-6509.927" Y="-1170.863" Z="309.0095" />
        <Vector3 X="-6517.947" Y="-1183.258" Z="309.2551" />
        <Vector3 X="-6523.888" Y="-1188.636" Z="309.2551" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Bidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>true</TryToUseEvenIfCanFindPathSuccess>
      <Name>Thorium Point - Wanted / Captain Lolo to Burninate</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-6494.846" Y="-1163.891" Z="309.176" />
        <Vector3 X="-6522.938" Y="-1166.608" Z="309.2498" />
        <Vector3 X="-6559.246" Y="-1169.563" Z="309.7877" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Bidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>true</TryToUseEvenIfCanFindPathSuccess>
      <Name>Thorium Point - Wanted / Captain Lolo to FlightMaster Alliance</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-6494.871" Y="-1163.666" Z="309.1691" />
        <Vector3 X="-6501.388" Y="-1149.305" Z="307.7253" />
        <Vector3 X="-6502.463" Y="-1133.942" Z="307.3072" />
        <Vector3 X="-6530.806" Y="-1108.083" Z="310.1946" />
        <Vector3 X="-6558.878" Y="-1100.579" Z="310.2585" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Bidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>true</TryToUseEvenIfCanFindPathSuccess>
      <Name>Thorium Point - Wanted / Captain Lolo to FlightMaster Horde</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-6494.754" Y="-1163.899" Z="309.1795" />
        <Vector3 X="-6500.789" Y="-1170.656" Z="309.1721" />
        <Vector3 X="-6495.159" Y="-1179.261" Z="314.5693" />
        <Vector3 X="-6488.203" Y="-1189.344" Z="323.6468" />
        <Vector3 X="-6484.532" Y="-1194.914" Z="326.0062" />
        <Vector3 X="-6474.518" Y="-1188.056" Z="326.1024" />
        <Vector3 X="-6488.939" Y="-1169.073" Z="325.1467" />
        <Vector3 X="-6500.682" Y="-1173.374" Z="325.9242" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Bidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>true</TryToUseEvenIfCanFindPathSuccess>
      <Name>Thorium Point - Wanted / Captain Lolo to Oilfist</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-6513.063" Y="-1178.906" Z="309.2597" />
        <Vector3 X="-6513.465" Y="-1183.038" Z="309.256" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Bidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>true</TryToUseEvenIfCanFindPathSuccess>
      <Name>Thorium Point - Sootsmoker to Heavyhands</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-6513.28" Y="-1178.384" Z="309.2553" />
        <Vector3 X="-6518.656" Y="-1183.837" Z="309.2552" />
        <Vector3 X="-6509.296" Y="-1192.408" Z="309.2552" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Bidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>true</TryToUseEvenIfCanFindPathSuccess>
      <Name>Thorium Point - Sootsmoker to Scrange</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-6512.913" Y="-1177.933" Z="309.2489" />
        <Vector3 X="-6518.978" Y="-1184.236" Z="309.2562" />
        <Vector3 X="-6523.85" Y="-1188.475" Z="309.2562" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Bidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>true</TryToUseEvenIfCanFindPathSuccess>
      <Name>Thorium Point - Sootsmoker to Burninate</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-6512.833" Y="-1177.947" Z="309.2479" />
        <Vector3 X="-6531.749" Y="-1165.899" Z="309.2311" />
        <Vector3 X="-6559.06" Y="-1169.501" Z="309.7917" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Bidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>true</TryToUseEvenIfCanFindPathSuccess>
      <Name>Thorium Point - Sootsmoker to FlightMaster Alliance</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-6512.537" Y="-1178.489" Z="309.2502" />
        <Vector3 X="-6496.465" Y="-1141.286" Z="307.132" />
        <Vector3 X="-6523.725" Y="-1116.676" Z="309.9709" />
        <Vector3 X="-6548.408" Y="-1103.701" Z="309.2918" />
        <Vector3 X="-6558.99" Y="-1100.018" Z="310.1993" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Bidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>true</TryToUseEvenIfCanFindPathSuccess>
      <Name>Thorium Point - Sootsmoker to FlightMaster Horde</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-6512.779" Y="-1178.627" Z="309.2539" />
        <Vector3 X="-6502.872" Y="-1169.355" Z="309.0314" />
        <Vector3 X="-6497.377" Y="-1176.83" Z="311.7181" />
        <Vector3 X="-6491.314" Y="-1185.265" Z="319.8161" />
        <Vector3 X="-6484.394" Y="-1196.15" Z="326.0034" />
        <Vector3 X="-6473.775" Y="-1188.256" Z="326.15" />
        <Vector3 X="-6489.121" Y="-1167.76" Z="324.9107" />
        <Vector3 X="-6500.553" Y="-1173.537" Z="325.9585" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Bidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>true</TryToUseEvenIfCanFindPathSuccess>
      <Name>Thorium Point - Sootsmoker to Oilfist</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-6513.268" Y="-1184.474" Z="309.2556" />
        <Vector3 X="-6509.228" Y="-1192.321" Z="309.2556" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Bidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>true</TryToUseEvenIfCanFindPathSuccess>
      <Name>Thorium Point - Heavyhands to Scrange</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-6513.587" Y="-1183.866" Z="309.2556" />
        <Vector3 X="-6523.98" Y="-1188.836" Z="309.2556" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Bidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>true</TryToUseEvenIfCanFindPathSuccess>
      <Name>Thorium Point - Heavyhands to Burninate</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-6513.79" Y="-1183.689" Z="309.2556" />
        <Vector3 X="-6533.615" Y="-1167.509" Z="309.3212" />
        <Vector3 X="-6558.777" Y="-1169.518" Z="309.7925" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Bidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>true</TryToUseEvenIfCanFindPathSuccess>
      <Name>Thorium Point - Heavyhands to FlightMaster Alliance</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-6513.643" Y="-1183.823" Z="309.2556" />
        <Vector3 X="-6514.618" Y="-1169.745" Z="309.1413" />
        <Vector3 X="-6495.278" Y="-1136.991" Z="306.6286" />
        <Vector3 X="-6521.325" Y="-1118.716" Z="309.795" />
        <Vector3 X="-6541.419" Y="-1104.503" Z="309.7031" />
        <Vector3 X="-6558.862" Y="-1100.338" Z="310.2243" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Bidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>true</TryToUseEvenIfCanFindPathSuccess>
      <Name>Thorium Point - Heavyhands to FlightMaster Horde</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-6513.632" Y="-1183.424" Z="309.2555" />
        <Vector3 X="-6516.318" Y="-1175.687" Z="309.5157" />
        <Vector3 X="-6503.881" Y="-1170.012" Z="309.0331" />
        <Vector3 X="-6494.934" Y="-1181.751" Z="316.0767" />
        <Vector3 X="-6485.117" Y="-1195.701" Z="325.9471" />
        <Vector3 X="-6474.241" Y="-1188.359" Z="326.1255" />
        <Vector3 X="-6489.186" Y="-1168.02" Z="324.9633" />
        <Vector3 X="-6501.502" Y="-1173.45" Z="325.8244" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Bidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>true</TryToUseEvenIfCanFindPathSuccess>
      <Name>Thorium Point - Heavyhands to Oilfist</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-6509.341" Y="-1192.159" Z="309.2554" />
        <Vector3 X="-6517.263" Y="-1185.237" Z="309.2554" />
        <Vector3 X="-6524.116" Y="-1188.577" Z="309.2554" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Bidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>true</TryToUseEvenIfCanFindPathSuccess>
      <Name>Thorium Point - Scrange to Burninate</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-6509.214" Y="-1192.327" Z="309.2554" />
        <Vector3 X="-6522.054" Y="-1177.849" Z="310.0768" />
        <Vector3 X="-6531.367" Y="-1168.159" Z="309.3442" />
        <Vector3 X="-6558.853" Y="-1169.39" Z="309.7984" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Bidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>true</TryToUseEvenIfCanFindPathSuccess>
      <Name>Thorium Point - Scrange to FlightMaster Alliance</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-6509.025" Y="-1192.728" Z="309.2563" />
        <Vector3 X="-6518.818" Y="-1182.116" Z="309.2563" />
        <Vector3 X="-6509.256" Y="-1164.154" Z="308.3844" />
        <Vector3 X="-6496.468" Y="-1140.13" Z="306.9844" />
        <Vector3 X="-6513.98" Y="-1122.836" Z="309.2502" />
        <Vector3 X="-6535.519" Y="-1105.658" Z="310.093" />
        <Vector3 X="-6550.876" Y="-1102.168" Z="309.282" />
        <Vector3 X="-6558.929" Y="-1100.224" Z="310.219" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Bidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>true</TryToUseEvenIfCanFindPathSuccess>
      <Name>Thorium Point - Scrange to FlightMaster Horde</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-6509.818" Y="-1192.146" Z="309.2551" />
        <Vector3 X="-6517.939" Y="-1181.574" Z="309.2629" />
        <Vector3 X="-6507.027" Y="-1170.455" Z="308.9922" />
        <Vector3 X="-6500.492" Y="-1174.012" Z="309.2433" />
        <Vector3 X="-6493.417" Y="-1183.461" Z="317.9409" />
        <Vector3 X="-6487.544" Y="-1191.773" Z="325.4317" />
        <Vector3 X="-6484.782" Y="-1195.709" Z="325.9764" />
        <Vector3 X="-6473.842" Y="-1187.689" Z="326.1352" />
        <Vector3 X="-6487.758" Y="-1169.698" Z="325.2308" />
        <Vector3 X="-6490.23" Y="-1168.281" Z="325.0794" />
        <Vector3 X="-6500.922" Y="-1173.514" Z="325.9078" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Bidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>true</TryToUseEvenIfCanFindPathSuccess>
      <Name>Thorium Point - Scrange to Oilfist</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-6524.186" Y="-1188.689" Z="309.2554" />
        <Vector3 X="-6516.698" Y="-1185.395" Z="309.2554" />
        <Vector3 X="-6525.125" Y="-1165.794" Z="309.2479" />
        <Vector3 X="-6545.957" Y="-1168.104" Z="309.2551" />
        <Vector3 X="-6559.012" Y="-1169.39" Z="309.7971" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Bidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>true</TryToUseEvenIfCanFindPathSuccess>
      <Name>Thorium Point - Burninate to FlightMaster Alliance</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-6523.48" Y="-1188.877" Z="309.2564" />
        <Vector3 X="-6517.561" Y="-1183.684" Z="309.2564" />
        <Vector3 X="-6507.878" Y="-1163.95" Z="308.3889" />
        <Vector3 X="-6497.215" Y="-1139.992" Z="306.9613" />
        <Vector3 X="-6514.825" Y="-1121.888" Z="309.3412" />
        <Vector3 X="-6537.052" Y="-1105.048" Z="310.0318" />
        <Vector3 X="-6559.134" Y="-1100.159" Z="310.2443" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Bidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>true</TryToUseEvenIfCanFindPathSuccess>
      <Name>Thorium Point - Burninate to FlightMaster Horde</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-6524.101" Y="-1188.782" Z="309.2556" />
        <Vector3 X="-6516.933" Y="-1182.03" Z="309.2737" />
        <Vector3 X="-6503.261" Y="-1170.762" Z="309.1001" />
        <Vector3 X="-6496.967" Y="-1177.88" Z="312.6039" />
        <Vector3 X="-6492.375" Y="-1184.662" Z="319.0468" />
        <Vector3 X="-6484.829" Y="-1195.808" Z="325.9707" />
        <Vector3 X="-6474.709" Y="-1188.552" Z="326.1028" />
        <Vector3 X="-6488.917" Y="-1168.071" Z="324.9558" />
        <Vector3 X="-6501.234" Y="-1173.494" Z="325.8641" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Bidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>true</TryToUseEvenIfCanFindPathSuccess>
      <Name>Thorium Point - Burninate to Oilfist</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-6559.05" Y="-1169.292" Z="309.8" />
        <Vector3 X="-6539.765" Y="-1167.357" Z="309.2553" />
        <Vector3 X="-6507.109" Y="-1158.816" Z="308.0273" />
        <Vector3 X="-6496.99" Y="-1138.192" Z="306.7732" />
        <Vector3 X="-6517.631" Y="-1118.067" Z="309.7647" />
        <Vector3 X="-6538.968" Y="-1104.549" Z="309.9007" />
        <Vector3 X="-6559.5" Y="-1100.147" Z="310.306" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Bidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>true</TryToUseEvenIfCanFindPathSuccess>
      <Name>Thorium Point - FlightMaster Alliance to FlightMaster Horde</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-6558.707" Y="-1169.295" Z="309.8021" />
        <Vector3 X="-6532.162" Y="-1165.893" Z="309.2368" />
        <Vector3 X="-6506.312" Y="-1164.432" Z="308.4971" />
        <Vector3 X="-6498.97" Y="-1174.095" Z="309.4694" />
        <Vector3 X="-6492.917" Y="-1182.675" Z="317.6849" />
        <Vector3 X="-6487.703" Y="-1190.627" Z="324.6535" />
        <Vector3 X="-6484.833" Y="-1195.418" Z="325.975" />
        <Vector3 X="-6474.505" Y="-1188.591" Z="326.1152" />
        <Vector3 X="-6489.637" Y="-1167.554" Z="324.9053" />
        <Vector3 X="-6500.666" Y="-1173.366" Z="325.9253" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Bidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>true</TryToUseEvenIfCanFindPathSuccess>
      <Name>Thorium Point - FlightMaster Alliance to Oilfist</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-6558.735" Y="-1100.21" Z="310.1829" />
        <Vector3 X="-6533.244" Y="-1106.409" Z="310.2155" />
        <Vector3 X="-6507.931" Y="-1126.736" Z="308.7027" />
        <Vector3 X="-6500.805" Y="-1138.866" Z="307.0637" />
        <Vector3 X="-6507.154" Y="-1164.008" Z="308.4216" />
        <Vector3 X="-6500.421" Y="-1172.47" Z="309.2275" />
        <Vector3 X="-6494.438" Y="-1180.684" Z="315.7948" />
        <Vector3 X="-6489.059" Y="-1188.909" Z="323.0126" />
        <Vector3 X="-6484.727" Y="-1195.481" Z="325.9845" />
        <Vector3 X="-6474.565" Y="-1188.847" Z="326.1159" />
        <Vector3 X="-6489.394" Y="-1167.597" Z="324.8972" />
        <Vector3 X="-6501.952" Y="-1173.794" Z="325.802" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Bidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>true</TryToUseEvenIfCanFindPathSuccess>
      <Name>Thorium Point - FlightMaster Horde to Oilfist</Name>
    </OffMeshConnection>
  </OffMeshConnections>
  <BlacklistNpc />
  <BlacklistNpcType />
  <Blackspots>
    <Blackspot X="-6895.33643" Y="-1065.14856" Z="240.013779" Radius="50" Continent="None" Comment="" />
    <Blackspot X="-6907.211" Y="-1095.113" Z="256.756" Radius="50" Continent="None" Comment="" />
    <Blackspot X="-6989.33154" Y="-1121.63354" Z="242.17218" Radius="75" Continent="None" Comment="" />
    <Blackspot X="-6996.19971" Y="-1147.789" Z="257.873169" Radius="75" Continent="None" Comment="" />
    <Blackspot X="-7019.702" Y="-1309.55151" Z="241.69577" Radius="50" Continent="None" Comment="" />
    <Blackspot X="-7023.52441" Y="-1280.188" Z="258.564117" Radius="50" Continent="None" Comment="" />
    <Blackspot X="-6941.24756" Y="-1629.89526" Z="242.814529" Radius="66" Continent="None" Comment="" />
    <Blackspot X="-6979.267" Y="-1721.9408" Z="241.6992" Radius="25" Continent="None" Comment="" />
    <Blackspot X="-7025.00342" Y="-1715.05615" Z="241.66713" Radius="25" Continent="None" Comment="" />
  </Blackspots>
</EasyQuestProfile>