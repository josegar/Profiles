<?xml version="1.0" encoding="utf-8"?>
<EasyQuestProfile xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <QuestsSorted>
    <QuestsSorted Action="RunCode" NameClass="FNVQuesterAuthSettings.Load();&#xD;&#xA;        if (FNVQuesterAuthSettings.CurrentSetting.TransactionId == null)&#xD;&#xA;        {&#xD;&#xA;            FNVQuesterAuthSettings.CurrentSetting.ToForm();&#xD;&#xA;        }&#xD;&#xA;        FNVQuesterAuthSettings.CurrentSetting.Save();&#xD;&#xA;        new Authentication(FNVQuesterAuthSettings.CurrentSetting.TransactionId, &quot;e8b609dcf76e&quot;); &#xD;&#xA;        ControlAuthentication.SetControl(5);&#xD;&#xA;&#xD;&#xA;NpcDB.AcceptOnlyProfileNpc = true;&#xD;&#xA;wManager.wManagerSetting.CurrentSetting.AttackBeforeBeingAttacked = true;&#xD;&#xA;QuesterSettings.SettingsKalimdor();&#xD;&#xA;wManager.Wow.Forms.UserControlTabGeneralSettings.ReloadGeneralSettings();" />
    <QuestsSorted Action="If" NameClass="Usefuls.ContinentId == (int) ContinentId.Azeroth" />
    <QuestsSorted Action="Pulse" NameClass="BOATShipMenethilToAuberdine" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="RunCode" NameClass="ProgressSettings.Initialize();&#xD;&#xA;wManager.Wow.Helpers.Quest.QuesterCurrentContext.CurrentStep = ProgressSettings.CurrentSettings.ungoroZwei - 1;&#xD;&#xA;&#xD;&#xA;Logging.Write(&quot;[FNV_Quester]: Loading current Quester step &quot; + (ProgressSettings.CurrentSettings.ungoroZwei));&#xD;&#xA;wManager.Wow.Helpers.Conditions.ForceIgnoreIsAttacked = false;&#xD;&#xA;wManager.wManagerSetting.CurrentSetting.Repair = true;&#xD;&#xA;&#xD;&#xA;Thread p = new Thread(() =&gt;&#xD;&#xA;{    &#xD;&#xA;ProgressSettings.inProgress = true;&#xD;&#xA;Logging.Write(&quot;[FNV_Quester]: Progress saver initialized&quot;);&#xD;&#xA; &#xD;&#xA; while(robotManager.Products.Products.IsStarted)&#xD;&#xA; {&#xD;&#xA;if(!ProgressSettings.inProgress)&#xD;&#xA;{&#xD;&#xA;ProgressSettings.Dispose();&#xD;&#xA;Logging.Write(&quot;[FNV_Quester]: Progress saver disposed&quot;);&#xD;&#xA;break;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;  if (Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause)&#xD;&#xA;  {&#xD;&#xA; if(ProgressSettings.CurrentSettings.ungoroZwei &lt; wManager.Wow.Helpers.Quest.QuesterCurrentContext.CurrentStep)&#xD;&#xA;{&#xD;&#xA;ProgressSettings.CurrentSettings.ungoroZwei = wManager.Wow.Helpers.Quest.QuesterCurrentContext.CurrentStep;&#xD;&#xA;ProgressSettings.CurrentSettings.Save();&#xD;&#xA;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;  Thread.Sleep(1000);&#xD;&#xA; }&#xD;&#xA;&#xD;&#xA;});&#xD;&#xA;&#xD;&#xA;p.Start();" />
    <QuestsSorted Action="Wait" NameClass="1" />
    <QuestsSorted Action="Wait" NameClass="1" />
    <QuestsSorted Action="Wait" NameClass="1" />
    <QuestsSorted Action="Wait" NameClass="1" />
    <QuestsSorted Action="Wait" NameClass="1" />
    <QuestsSorted Action="Wait" NameClass="1" />
    <QuestsSorted Action="RunCode" NameClass="FlightMaster.takeTaxi(&quot;Darkshore&quot;, &quot;Ungoro&quot;);" />
    <QuestsSorted Action="PickUp" NameClass="TheBaitforLarkorwi" />
    <QuestsSorted Action="Pulse" NameClass="ROUTEGoToLarkorwi" />
    <QuestsSorted Action="RunCode" NameClass="while(ItemsManager.GetItemCountById(11568) &gt; 0)&#xD;&#xA;{&#xD;&#xA;robotManager.Helpful.Keyboard.DownKey(wManager.Wow.Memory.WowMemory.Memory.WindowHandle, System.Windows.Forms.Keys.ShiftKey);&#xD;&#xA;      Thread.Sleep(robotManager.Helpful.Others.Random(50, 150));&#xD;&#xA;ItemsManager.UseItem(11568);&#xD;&#xA;&#xD;&#xA;}" />
    <QuestsSorted Action="RunCode" NameClass="Thread.Sleep(Usefuls.Latency * 3);&#xD;&#xA;&#xD;&#xA;while(ItemsManager.GetItemCountById(11569) &gt; 0)&#xD;&#xA;{&#xD;&#xA;&#xD;&#xA;ItemsManager.UseItem(11569);&#xD;&#xA;Thread.Sleep(5000 + Usefuls.Latency);&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;Thread.Sleep(Usefuls.Latency * 3);&#xD;&#xA;&#xD;&#xA;while(ItemsManager.GetItemCountById(11570) &gt; 0)&#xD;&#xA;{&#xD;&#xA;&#xD;&#xA;ItemsManager.UseItem(11570);&#xD;&#xA;Thread.Sleep(5000 + Usefuls.Latency);&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;Thread.Sleep(Usefuls.Latency * 3);" />
    <QuestsSorted Action="Pulse" NameClass="TheBaitforLarkorwi" />
    <QuestsSorted Action="Pulse" NameClass="ROUTELarkorwiToTorwa" />
    <QuestsSorted Action="PickUp" NameClass="AVisittoGregan" />
    <QuestsSorted Action="PickUp" NameClass="TheEasternPylon" />
    <QuestsSorted Action="PickUp" NameClass="TheNorthernPylon" />
    <QuestsSorted Action="PickUp" NameClass="TheWesternPylon" />
    <QuestsSorted Action="Pulse" NameClass="ROUTERefugeToNorthPylon" />
    <QuestsSorted Action="While" NameClass="!Quest.IsObjectiveComplete(1, 4285)" />
    <QuestsSorted Action="RunCode" NameClass="var position = new Vector3(-6273.93f, -1556.36f, -230.2135f);&#xD;&#xA;int npcEntryId = 164955;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;wManager.Wow.Bot.Tasks.GoToTask.ToPositionAndIntecractWithGameObject(position, npcEntryId);&#xD;&#xA;System.Threading.Thread.Sleep(1000 * 2);" />
    <QuestsSorted Action="RunCode" NameClass="Usefuls.SelectGossipOption(1);&#xD;&#xA;System.Threading.Thread.Sleep(1000 * 2);&#xD;&#xA;&#xD;&#xA;try&#xD;&#xA;{&#xD;&#xA;Usefuls.SelectGossipOption(0);&#xD;&#xA;System.Threading.Thread.Sleep(1000 * 2);&#xD;&#xA;}&#xD;&#xA;catch(Exception e)&#xD;&#xA;{&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;Thread.Sleep(Usefuls.Latency * 6);" />
    <QuestsSorted Action="EndWhile" NameClass="" />
    <QuestsSorted Action="Pulse" NameClass="ROUTENorthernPylonToEasternPylon" />
    <QuestsSorted Action="While" NameClass="!Quest.IsObjectiveComplete(1, 4287)" />
    <QuestsSorted Action="RunCode" NameClass="var position2 = new Vector3(-7198.93f, -2326.36f, -228.2135f);&#xD;&#xA;int npcEntryId2 = 164957;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;wManager.Wow.Bot.Tasks.GoToTask.ToPositionAndIntecractWithGameObject(position2, npcEntryId2);&#xD;&#xA;System.Threading.Thread.Sleep(1000 * 2);&#xD;&#xA;&#xD;&#xA;" />
    <QuestsSorted Action="RunCode" NameClass="Usefuls.SelectGossipOption(1);&#xD;&#xA;System.Threading.Thread.Sleep(1000 * 2);&#xD;&#xA;&#xD;&#xA;try&#xD;&#xA;{&#xD;&#xA;Usefuls.SelectGossipOption(0);&#xD;&#xA;System.Threading.Thread.Sleep(1000 * 2);&#xD;&#xA;}&#xD;&#xA;catch(Exception e)&#xD;&#xA;{&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;Thread.Sleep(Usefuls.Latency * 6);" />
    <QuestsSorted Action="EndWhile" NameClass="" />
    <QuestsSorted Action="Pulse" NameClass="ROUTEEasternPylonToTorwa" />
    <QuestsSorted Action="TurnIn" NameClass="TheApesofUnGoro" />
    <QuestsSorted Action="Pulse" NameClass="ROUTETorwaToHive" />
    <QuestsSorted Action="Pulse" NameClass="AlienEcology" />
    <QuestsSorted Action="Pulse" NameClass="ROUTEHiveToMarshalCamp" />
    <QuestsSorted Action="Pulse" NameClass="BewareofPterrordax" />
    <QuestsSorted Action="Pulse" NameClass="ExpeditionSalvation2" />
    <QuestsSorted Action="Pulse" NameClass="ROUTEMarshalCampToGoblin" />
    <QuestsSorted Action="PickUp" NameClass="FindingtheSource" />
    <QuestsSorted Action="Pulse" NameClass="ROUTEGoblinToWesternPylon" />
    <QuestsSorted Action="While" NameClass="!Quest.IsObjectiveComplete(1, 4288)" />
    <QuestsSorted Action="RunCode" NameClass="var position3 = new Vector3(-7426.93f, -340.36f, -229.2135f);&#xD;&#xA;int npcEntryId3 = 164661;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;wManager.Wow.Bot.Tasks.GoToTask.ToPositionAndIntecractWithGameObject(position3, npcEntryId3);&#xD;&#xA;System.Threading.Thread.Sleep(1000 * 2);&#xD;&#xA;" />
    <QuestsSorted Action="RunCode" NameClass="Usefuls.SelectGossipOption(1);&#xD;&#xA;System.Threading.Thread.Sleep(1000 * 2);&#xD;&#xA;&#xD;&#xA;try&#xD;&#xA;{&#xD;&#xA;Usefuls.SelectGossipOption(0);&#xD;&#xA;System.Threading.Thread.Sleep(1000 * 2);&#xD;&#xA;}&#xD;&#xA;catch(Exception e)&#xD;&#xA;{&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;Thread.Sleep(Usefuls.Latency * 6);" />
    <QuestsSorted Action="EndWhile" NameClass="" />
    <QuestsSorted Action="Pulse" NameClass="BewareofPterrordax2" />
    <QuestsSorted Action="Pulse" NameClass="ROUTEWestPylonToRingo" />
    <QuestsSorted Action="TurnIn" NameClass="Lost" />
    <QuestsSorted Action="Pulse" NameClass="ROUTERingoToTopVulcan" />
    <QuestsSorted Action="Pulse" NameClass="FindingtheSource" />
    <QuestsSorted Action="Pulse" NameClass="ROUTEVulcanoTopToGoblin" />
    <QuestsSorted Action="TurnIn" NameClass="FindingtheSource" />
    <QuestsSorted Action="PickUp" NameClass="TheNewSprings" />
    <QuestsSorted Action="Pulse" NameClass="ROUTEKrakleToMarshalRefuge" />
    <QuestsSorted Action="TurnIn" NameClass="BewareofPterrordax" />
    <QuestsSorted Action="TurnIn" NameClass="AlienEcology" />
    <QuestsSorted Action="TurnIn" NameClass="ExpeditionSalvation" />
    <QuestsSorted Action="TurnIn" NameClass="TheEasternPylon" />
    <QuestsSorted Action="TurnIn" NameClass="TheNorthernPylon" />
    <QuestsSorted Action="TurnIn" NameClass="TheWesternPylon" />
    <QuestsSorted Action="PickUp" NameClass="MakingSenseofIt" />
    <QuestsSorted Action="WriteLog" NameClass="[FNV_Quester]: Going to wait for 60 seconds, to make sure the Gnomes finishes" />
    <QuestsSorted Action="Wait" NameClass="60000" />
    <QuestsSorted Action="TurnIn" NameClass="MakingSenseofIt" />
    <QuestsSorted Action="RunCode" NameClass="FNVSettings.Initialize();&#xD;&#xA;FNVSettings.CurrentSettings.ungoroZwei = true;&#xD;&#xA;FNVSettings.Dispose();&#xD;&#xA;&#xD;&#xA;wManager.wManagerSetting.ClearBlacklist();&#xD;&#xA;&#xD;&#xA;ProgressSettings.Dispose();&#xD;&#xA;ProgressSettings.inProgress = false;&#xD;&#xA;" />
    <QuestsSorted Action="LoadProfile" NameClass="FNV_V2\#0 START_FNVLauncher_V2.xml" />
  </QuestsSorted>
  <NpcQuest>
    <NPCQuest Id="9619" Name="Torwa Pathfinder" GameObject="false">
      <PickUpQuests>
        <int>9053</int>
        <int>9052</int>
        <int>4289</int>
        <int>4292</int>
        <int>4290</int>
        <int>4301</int>
        <int>4291</int>
        <int>9051</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>9053</int>
        <int>9052</int>
        <int>4289</int>
        <int>4292</int>
        <int>4290</int>
        <int>4301</int>
        <int>4291</int>
        <int>9063</int>
        <int>9051</int>
      </TurnInQuests>
      <Position X="-7840.34" Y="-2117.32" Z="-254.3517" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="9998" Name="Shizzle" GameObject="false">
      <PickUpQuests>
        <int>4503</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>4503</int>
      </TurnInQuests>
      <Position X="-6252.45" Y="-1103.26" Z="-218.427" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="9119" Name="Muigin" GameObject="false">
      <PickUpQuests>
        <int>4142</int>
        <int>4144</int>
        <int>4141</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>4144</int>
        <int>4143</int>
        <int>4141</int>
      </TurnInQuests>
      <Position X="-6204.39" Y="-1055.46" Z="-197.7812" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="9997" Name="Spraggle Frock" GameObject="false">
      <PickUpQuests>
        <int>4492</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>4491</int>
        <int>4501</int>
      </TurnInQuests>
      <Position X="-6176.27" Y="-1080.49" Z="-203.891" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="174682" Name="Beware of Pterrordax" GameObject="true">
      <PickUpQuests>
        <int>4501</int>
      </PickUpQuests>
      <TurnInQuests />
      <Position X="-6174.8" Y="-1077.27" Z="-202.574" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="9272" Name="Spark Nilminer" GameObject="false">
      <PickUpQuests>
        <int>3882</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>3882</int>
      </TurnInQuests>
      <Position X="-6149.73" Y="-1076.11" Z="-198.9911" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="9271" Name="Hol'anyee Marshal" GameObject="false">
      <PickUpQuests>
        <int>3883</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>3883</int>
      </TurnInQuests>
      <Position X="-6145.24" Y="-1090.56" Z="-200.2877" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="9270" Name="Williden Marshal" GameObject="false">
      <PickUpQuests>
        <int>3881</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>3881</int>
        <int>3884</int>
      </TurnInQuests>
      <Position X="-6142.71" Y="-1092.69" Z="-200.2694" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="9117" Name="J.D. Collie" GameObject="false">
      <PickUpQuests>
        <int>4284</int>
        <int>3961</int>
        <int>3942</int>
        <int>4321</int>
        <int>4287</int>
        <int>4285</int>
        <int>4288</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>3941</int>
        <int>4005</int>
        <int>4284</int>
        <int>4321</int>
        <int>4287</int>
        <int>4285</int>
        <int>4288</int>
      </TurnInQuests>
      <Position X="-6033.25" Y="-1017.56" Z="-217.0732" />
    </NPCQuest>
    <NPCQuest Id="161505" Name="A Wrecked Raft" GameObject="true">
      <PickUpQuests>
        <int>3844</int>
      </PickUpQuests>
      <TurnInQuests />
      <Position X="-7658.82" Y="-1798.54" Z="-272.077" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="161504" Name="A Small Pack" GameObject="true">
      <PickUpQuests>
        <int>3845</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>3844</int>
      </TurnInQuests>
      <Position X="-7670.07" Y="-1801.72" Z="-278.489" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="8737" Name="Linken" GameObject="false">
      <PickUpQuests>
        <int>3941</int>
        <int>3962</int>
        <int>3908</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>3962</int>
        <int>3845</int>
        <int>3961</int>
        <int>3914</int>
      </TurnInQuests>
      <Position X="-6166.44" Y="-1118.99" Z="-213.4243" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="10302" Name="Krakle" GameObject="false">
      <PickUpQuests>
        <int>974</int>
        <int>980</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>974</int>
      </TurnInQuests>
      <Position X="-7210.81" Y="-610.991" Z="-269.1639" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="9999" Name="Ringo" GameObject="false">
      <PickUpQuests />
      <TurnInQuests>
        <int>4492</int>
      </TurnInQuests>
      <Position X="-7196.18" Y="-1387.11" Z="-231.5321" />
    </NPCQuest>
  </NpcQuest>
  <Npc>
    <Npc>
      <Position X="-6144.07" Y="-1098.52" Z="-202.9275" Type="Flying" />
      <Entry>3000</Entry>
      <Name>Gibbert</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>Repair</Type>
      <VendorItemClass>Food</VendorItemClass>
      <ContinentId>Kalimdor</ContinentId>
    </Npc>
    <Npc>
      <Position X="-6157.44" Y="-1067.73" Z="-194.9492" Type="Flying" />
      <Entry>12959</Entry>
      <Name>Nergal</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>Vendor</Type>
      <VendorItemClass>Food</VendorItemClass>
      <ContinentId>Kalimdor</ContinentId>
    </Npc>
    <Npc>
      <Position X="-7141.49" Y="-3719.69" Z="8.494997" />
      <Entry>8131</Entry>
      <Name>Blizrik Buckshot</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>Repair</Type>
      <VendorItemClass>Food</VendorItemClass>
      <ContinentId>Kalimdor</ContinentId>
    </Npc>
    <Npc>
      <Position X="-7159.057" Y="-3841.667" Z="8.697378" />
      <Entry>7733</Entry>
      <Name>Innkeeper Fizzgrimble</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>Vendor</Type>
      <VendorItemClass>Food</VendorItemClass>
      <ContinentId>Kalimdor</ContinentId>
    </Npc>
  </Npc>
  <EasyQuests>
    <EasyQuest>
      <Name>A Visit to Gregan</Name>
      <QuestId>
        <int>4142</int>
      </QuestId>
      <QuestType>None</QuestType>
      <QuestClass />
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Alien Ecology</Name>
      <QuestId>
        <int>3883</int>
      </QuestId>
      <QuestType>UseItemOn</QuestType>
      <QuestClass xsi:type="UseItemOnEasyQuestClass">
        <HotSpots>
          <Vector3 X="-8069.311" Y="-1269.257" Z="-330.1409" />
        </HotSpots>
        <EntryIdTarget>
          <int>174793</int>
        </EntryIdTarget>
        <ItemId>11132</ItemId>
        <Range>4.5</Range>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>true</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Beware of Pterrordax</Name>
      <QuestId>
        <int>4501</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="-7483.487" Y="-1355.47" Z="-268.28" />
          <Vector3 X="-7486.466" Y="-1477.911" Z="-271.2993" />
        </HotSpots>
        <EntryTarget>
          <int>9166</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>true</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Beware of Pterrordax2</Name>
      <QuestId>
        <int>4501</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="-7434.951" Y="-267.9397" Z="-215.9073" />
          <Vector3 X="-7008.643" Y="-534.3353" Z="-276.669" />
        </HotSpots>
        <EntryTarget>
          <int>9167</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>true</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>BOATShipMenethilToAuberdine</Name>
      <QuestId />
      <QuestType>OverridePulseCSharpCode</QuestType>
      <QuestClass xsi:type="OverridePulseCSharpCodeEasyQuestClass">
        <Code>/* Quest settings:
    * Can condition: "return Usefuls.ContinentId == (int) ContinentId.Kalimdor;"
    * Is complete condition: "return Usefuls.ContinentId == (int) ContinentId.Kalimdor &amp;&amp; !ObjectManager.Me.InTransport;"
    * Not required in quest log: "True"
    * Quest type: "OverridePulseCSharpCode"
*/

// You can get zeppelin/ship/player positions and entry ID in tab "Tools" &gt; "Development Tools" &gt; "Dump all informations" (or "Memory information").

// Settings:
var zeppelinEntryId = 176310; // Zeppelin/Ship EntryId
// From
var fromZeppelinWaitPosition = new Vector3(-3709.475, -575.0988, 0); // Position where Zeppelin/Ship waits players (from)
var fromPlayerWaitPosition = new Vector3(-3727.4, -581.3, 6.2); // Position where the player waits Zeppelin/Ship (from)
var fromPlayerInZeppelinPosition = new Vector3(-3713.333, -571.7416, 6.098111); // Position where the player waits in the Zeppelin/Ship (from)
// To
var toZeppelinWaitPosition = new Vector3(6406.216, 823.0809, 0); // Position where Zeppelin/Ship waits players (to)
var toPlayerLeavePosition = new Vector3(6461.408, 806.1595, 6.770809); // Position to go out the Zeppelin/Ship (to)
//Pos1
var enterPos1 = new Vector3(-3724.827, -581.0698, 6.191196);
//Pos2
var enterPos2 = new Vector3( -3723.727, -580.3727, 6.184784);

// Change WRobot settings:
wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;
wManager.wManagerSetting.CurrentSetting.Repair = false;
wManager.wManagerSetting.CurrentSetting.Selling = false;

// Code:
if (!Conditions.InGameAndConnectedAndProductStartedNotInPause)
    return true;

if (Usefuls.ContinentId != (int)ContinentId.Kalimdor)
{
    if (!ObjectManager.Me.InTransport)
    {
        if (GoToTask.ToPosition(fromPlayerWaitPosition))
        {
            var zeppelin = ObjectManager.GetWoWGameObjectByEntry(zeppelinEntryId).OrderBy(o =&gt; o.GetDistance).FirstOrDefault();
            if (zeppelin != null &amp;&amp; zeppelin.Position.DistanceTo(fromZeppelinWaitPosition) &lt; 1)
            {

 GoToTask.ToPosition(enterPos1);
if(GoToTask.ToPosition(enterPos1))
GoToTask.ToPosition(enterPos2);

Lua.LuaDoString("ClearTarget()");

wManager.Wow.Helpers.MovementManager.Face(new Vector3(-3713.333, -571.7416, 6.098111));

while(fromPlayerInZeppelinPosition.DistanceTo(ObjectManager.Me.Position) &gt; 3)
{
wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 250);
      Thread.Sleep(robotManager.Helpful.Others.Random(25, 50));
}
               GoToTask.ToPosition(fromPlayerInZeppelinPosition);
            }
        }
    }
}
else if (Usefuls.ContinentId == (int)ContinentId.Kalimdor)
{
    if (ObjectManager.Me.InTransport)
    {
        var zeppelin = ObjectManager.GetWoWGameObjectByEntry(zeppelinEntryId).OrderBy(o =&gt; o.GetDistance).FirstOrDefault();
        if (zeppelin != null &amp;&amp; zeppelin.Position.DistanceTo(toZeppelinWaitPosition) &lt; 1)
        {
            wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 1500);
            wManager.Wow.Helpers.Move.StrafeRight(Move.MoveAction.PressKey, 1000);
            wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 1200);

            GoToTask.ToPosition(toPlayerLeavePosition);

        }
    }
}
return true;</Code>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition>return (new Vector3(6461.408f, 806.1595f, 6.770809f).DistanceTo(ObjectManager.Me.Position) &lt; 10 &amp;&amp; Usefuls.ContinentId == (int) ContinentId.Kalimdor &amp;&amp; !ObjectManager.Me.InTransport);</IsCompleteCondition>
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Crystals of Power</Name>
      <QuestId>
        <int>4284</int>
      </QuestId>
      <QuestType>Gatherer</QuestType>
      <QuestClass xsi:type="GathererEasyQuestClass">
        <HotSpots>
          <Vector3 X="-6285.456" Y="-1218.169" Z="-266.4353" />
          <Vector3 X="-6301.875" Y="-1375.588" Z="-267.7502" />
          <Vector3 X="-6591.935" Y="-1993.541" Z="-270.6446" />
          <Vector3 X="-6591.787" Y="-1996.708" Z="-270.5195" />
          <Vector3 X="-7547.781" Y="-2067.886" Z="-271.0133" />
          <Vector3 X="-7591.718" Y="-1623.076" Z="-271.0602" />
        </HotSpots>
        <EntryIdObjects>
          <int>164660</int>
        </EntryIdObjects>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>true</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Crystals of Power2</Name>
      <QuestId>
        <int>4284</int>
      </QuestId>
      <QuestType>Gatherer</QuestType>
      <QuestClass xsi:type="GathererEasyQuestClass">
        <HotSpots>
          <Vector3 X="-6419.142" Y="-1542.226" Z="-268.4799" />
          <Vector3 X="-6487.144" Y="-1913.376" Z="-271.0935" />
          <Vector3 X="-6489.067" Y="-2139.626" Z="-241.4987" />
          <Vector3 X="-6533.599" Y="-2129.902" Z="-269.6915" />
          <Vector3 X="-6682.584" Y="-2024.409" Z="-271.0159" />
          <Vector3 X="-6784.615" Y="-2134.72" Z="-268.2034" />
          <Vector3 X="-6892.961" Y="-2244.166" Z="-268.3683" />
          <Vector3 X="-7046.741" Y="-2301.329" Z="-269.084" />
          <Vector3 X="-7120.164" Y="-2167.341" Z="-266.0027" />
          <Vector3 X="-7372.584" Y="-2220.925" Z="-269.6916" />
          <Vector3 X="-7485.02" Y="-2250.691" Z="-269.9117" />
          <Vector3 X="-7867.646" Y="-2057.886" Z="-272.2217" />
          <Vector3 X="-7938.364" Y="-2036.897" Z="-265.5833" />
          <Vector3 X="-7198.965" Y="-1617.919" Z="-266.5471" />
          <Vector3 X="-7182.456" Y="-1680.073" Z="-266.0762" />
        </HotSpots>
        <EntryIdObjects>
          <int>164661</int>
        </EntryIdObjects>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>true</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Crystals of Power3</Name>
      <QuestId>
        <int>4284</int>
      </QuestId>
      <QuestType>Gatherer</QuestType>
      <QuestClass xsi:type="GathererEasyQuestClass">
        <HotSpots>
          <Vector3 X="-6302.175" Y="-1373.064" Z="-267.4899" />
          <Vector3 X="-6377.037" Y="-1780.74" Z="-267.8407" />
          <Vector3 X="-6630.557" Y="-1783.427" Z="-272.222" />
          <Vector3 X="-6431.877" Y="-2051.453" Z="-241.83" />
          <Vector3 X="-7702.847" Y="-1775.153" Z="-273.5131" />
          <Vector3 X="-7658.62" Y="-1719.387" Z="-270.7213" />
        </HotSpots>
        <EntryIdObjects>
          <int>164779</int>
        </EntryIdObjects>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>true</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Crystals of Power4</Name>
      <QuestId>
        <int>4284</int>
      </QuestId>
      <QuestType>Gatherer</QuestType>
      <QuestClass xsi:type="GathererEasyQuestClass">
        <HotSpots>
          <Vector3 X="-6535.802" Y="-1809.575" Z="-271.1154" />
          <Vector3 X="-6956.439" Y="-2275.493" Z="-268.9769" />
          <Vector3 X="-7538.266" Y="-2220.763" Z="-272.22" />
          <Vector3 X="-7530.229" Y="-2121.561" Z="-270.6534" />
          <Vector3 X="-7681.064" Y="-2039.699" Z="-272.1026" />
          <Vector3 X="-7782.256" Y="-2116.978" Z="-267.6634" />
          <Vector3 X="-7453.622" Y="-1668.768" Z="-279.2593" />
          <Vector3 X="-7461.814" Y="-1546.276" Z="-270.8075" />
          <Vector3 X="-6966.619" Y="-1764.266" Z="-266.9604" />
        </HotSpots>
        <EntryIdObjects>
          <int>164778</int>
        </EntryIdObjects>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>true</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Expedition Salvation</Name>
      <QuestId>
        <int>3881</int>
      </QuestId>
      <QuestType>Gatherer</QuestType>
      <QuestClass xsi:type="GathererEasyQuestClass">
        <HotSpots>
          <Vector3 X="-6868.229" Y="-1999.365" Z="-272.2063" />
        </HotSpots>
        <EntryIdObjects>
          <int>161526</int>
        </EntryIdObjects>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>true</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Expedition Salvation2</Name>
      <QuestId>
        <int>3881</int>
      </QuestId>
      <QuestType>Gatherer</QuestType>
      <QuestClass xsi:type="GathererEasyQuestClass">
        <HotSpots>
          <Vector3 X="-7597.955" Y="-889.856" Z="-271.8259" />
        </HotSpots>
        <EntryIdObjects>
          <int>161521</int>
        </EntryIdObjects>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>true</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Finding the Source</Name>
      <QuestId>
        <int>974</int>
      </QuestId>
      <QuestType>UseItemOn</QuestType>
      <QuestClass xsi:type="UseItemOnEasyQuestClass">
        <HotSpots>
          <Vector3 X="-7096.208" Y="-1310.097" Z="-188.3216" />
        </HotSpots>
        <EntryIdTarget />
        <ItemId>12472</ItemId>
        <Range>3.5</Range>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>It's a Secret to Everybody</Name>
      <QuestId>
        <int>3844</int>
      </QuestId>
      <QuestType>None</QuestType>
      <QuestClass />
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>It's a Secret to Everybody2</Name>
      <QuestId>
        <int>3845</int>
      </QuestId>
      <QuestType>None</QuestType>
      <QuestClass />
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>It's a Secret to Everybody3</Name>
      <QuestId>
        <int>3908</int>
      </QuestId>
      <QuestType>None</QuestType>
      <QuestClass />
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Lost!</Name>
      <QuestId>
        <int>4492</int>
      </QuestId>
      <QuestType>None</QuestType>
      <QuestClass />
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Making Sense of It</Name>
      <QuestId>
        <int>4321</int>
      </QuestId>
      <QuestType>None</QuestType>
      <QuestClass />
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Muigin and Larion</Name>
      <QuestId>
        <int>4141</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="-6521.207" Y="-2048.028" Z="-272.2222" />
          <Vector3 X="-6887.946" Y="-2158.842" Z="-269.7215" />
          <Vector3 X="-7074.246" Y="-1710.914" Z="-269.9639" />
          <Vector3 X="-6780.104" Y="-1502.067" Z="-272.2195" />
        </HotSpots>
        <EntryTarget>
          <int>6511</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Roll the Bones</Name>
      <QuestId>
        <int>3882</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="-7536.063" Y="-1473.777" Z="-271.5016" />
          <Vector3 X="-7444.119" Y="-1685.193" Z="-277.0016" />
          <Vector3 X="-7256.813" Y="-1614.164" Z="-270.2434" />
          <Vector3 X="-7055.879" Y="-1604.982" Z="-271.1635" />
          <Vector3 X="-6879.686" Y="-1741.873" Z="-273.2417" />
        </HotSpots>
        <EntryTarget>
          <int>9163</int>
          <int>9166</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>true</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTECorpseBackToTorwa</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="-7368.768" Y="-2019.669" Z="-270.1898" />
          <Vector3 X="-7370.989" Y="-2038.602" Z="-271.5474" />
          <Vector3 X="-7376.602" Y="-2055.15" Z="-271.9308" />
          <Vector3 X="-7385.114" Y="-2070.432" Z="-272.1481" />
          <Vector3 X="-7394.834" Y="-2084.984" Z="-272.157" />
          <Vector3 X="-7404.865" Y="-2099.323" Z="-272.2223" />
          <Vector3 X="-7414.955" Y="-2113.623" Z="-272.2703" />
          <Vector3 X="-7425.26" Y="-2127.766" Z="-272.5409" />
          <Vector3 X="-7436.026" Y="-2141.555" Z="-273.3159" />
          <Vector3 X="-7448.353" Y="-2153.948" Z="-270.5465" />
          <Vector3 X="-7462.728" Y="-2163.766" Z="-272.2301" />
          <Vector3 X="-7479.026" Y="-2170.122" Z="-274.1371" />
          <Vector3 X="-7497.561" Y="-2179.726" Z="-273.9272" />
          <Vector3 X="-7514.424" Y="-2183.446" Z="-271.2616" />
          <Vector3 X="-7533.485" Y="-2178.59" Z="-270.4436" />
          <Vector3 X="-7549.852" Y="-2172.488" Z="-271.0036" />
          <Vector3 X="-7565.991" Y="-2165.725" Z="-272.3337" />
          <Vector3 X="-7581.472" Y="-2157.664" Z="-272.5276" />
          <Vector3 X="-7596.193" Y="-2148.218" Z="-270.5051" />
          <Vector3 X="-7612.208" Y="-2141.242" Z="-270.6706" />
          <Vector3 X="-7628.896" Y="-2136.016" Z="-271.16" />
          <Vector3 X="-7644.984" Y="-2129.18" Z="-271.5801" />
          <Vector3 X="-7660.343" Y="-2120.796" Z="-272.019" />
          <Vector3 X="-7675.37" Y="-2111.83" Z="-271.9753" />
          <Vector3 X="-7690.606" Y="-2103.253" Z="-271.5753" />
          <Vector3 X="-7706.418" Y="-2095.763" Z="-272.0337" />
          <Vector3 X="-7721.935" Y="-2087.671" Z="-272.1256" />
          <Vector3 X="-7738.132" Y="-2081.156" Z="-272.3817" />
          <Vector3 X="-7755.522" Y="-2080.576" Z="-271.045" />
          <Vector3 X="-7772.921" Y="-2082.455" Z="-271.3539" />
          <Vector3 X="-7790.371" Y="-2083.542" Z="-272.4174" />
          <Vector3 X="-7807.734" Y="-2081.583" Z="-271.5944" />
          <Vector3 X="-7826.099" Y="-2076.783" Z="-274.3139" />
          <Vector3 X="-7831.469" Y="-2075.783" Z="-272.8668" />
          <Vector3 X="-7841.397" Y="-2082.485" Z="-272.6528" />
          <Vector3 X="-7844.461" Y="-2085.75" Z="-272.6596" />
          <Vector3 X="-7849.107" Y="-2095.161" Z="-268.5458" />
          <Vector3 X="-7849.458" Y="-2105.554" Z="-262.6085" />
          <Vector3 X="-7844.368" Y="-2114.11" Z="-255.7083" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTEEasternPylonToTorwa</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="-7194.925" Y="-2339.59" Z="-232.0469" />
          <Vector3 X="-7192.344" Y="-2337.063" Z="-233.1327" />
          <Vector3 X="-7185.07" Y="-2329.538" Z="-238.7848" />
          <Vector3 X="-7180.186" Y="-2320.638" Z="-247.2893" />
          <Vector3 X="-7175.024" Y="-2310.746" Z="-255.2539" />
          <Vector3 X="-7168.055" Y="-2303.413" Z="-262.048" />
          <Vector3 X="-7160.076" Y="-2296.705" Z="-267.7023" />
          <Vector3 X="-7162.874" Y="-2287.196" Z="-268.7675" />
          <Vector3 X="-7171.831" Y="-2282.114" Z="-269.3459" />
          <Vector3 X="-7182.296" Y="-2281.873" Z="-269.5655" />
          <Vector3 X="-7198.382" Y="-2283.598" Z="-268.829" />
          <Vector3 X="-7216.26" Y="-2286.156" Z="-269.6355" />
          <Vector3 X="-7233.583" Y="-2288.635" Z="-268.8869" />
          <Vector3 X="-7251.427" Y="-2291.189" Z="-268.1518" />
          <Vector3 X="-7268.84" Y="-2292.833" Z="-268.5009" />
          <Vector3 X="-7285.805" Y="-2292.412" Z="-269.2715" />
          <Vector3 X="-7303.277" Y="-2291.422" Z="-269.5138" />
          <Vector3 X="-7320.743" Y="-2290.337" Z="-269.3381" />
          <Vector3 X="-7338.208" Y="-2289.233" Z="-269.599" />
          <Vector3 X="-7355.646" Y="-2287.76" Z="-269.6768" />
          <Vector3 X="-7373.079" Y="-2286.302" Z="-269.3192" />
          <Vector3 X="-7389.961" Y="-2284.901" Z="-269.1505" />
          <Vector3 X="-7407.942" Y="-2283.21" Z="-269.297" />
          <Vector3 X="-7424.938" Y="-2279.191" Z="-269.6464" />
          <Vector3 X="-7441.167" Y="-2272.668" Z="-269.5035" />
          <Vector3 X="-7455.786" Y="-2264.14" Z="-269.6367" />
          <Vector3 X="-7471.435" Y="-2254.114" Z="-270.5262" />
          <Vector3 X="-7485.654" Y="-2245.917" Z="-271.0328" />
          <Vector3 X="-7502.171" Y="-2238.669" Z="-270.367" />
          <Vector3 X="-7518.502" Y="-2234.21" Z="-271.0803" />
          <Vector3 X="-7536.343" Y="-2231.517" Z="-271.2634" />
          <Vector3 X="-7553.737" Y="-2229.882" Z="-271.1629" />
          <Vector3 X="-7567.867" Y="-2228.385" Z="-271.6352" />
          <Vector3 X="-7571.715" Y="-2228.259" Z="-271.9417" />
          <Vector3 X="-7589.16" Y="-2226.95" Z="-271.3937" />
          <Vector3 X="-7606.527" Y="-2224.8" Z="-271.2654" />
          <Vector3 X="-7623.88" Y="-2222.539" Z="-270.9731" />
          <Vector3 X="-7640.101" Y="-2214.984" Z="-269.6641" />
          <Vector3 X="-7654.487" Y="-2205.024" Z="-269.6338" />
          <Vector3 X="-7668.252" Y="-2195.09" Z="-269.6658" />
          <Vector3 X="-7681.91" Y="-2184.161" Z="-268.9403" />
          <Vector3 X="-7692.759" Y="-2171.241" Z="-268.0454" />
          <Vector3 X="-7700.787" Y="-2155.096" Z="-265.7306" />
          <Vector3 X="-7705.651" Y="-2138.297" Z="-268.782" />
          <Vector3 X="-7708.608" Y="-2121.623" Z="-270.7628" />
          <Vector3 X="-7711.619" Y="-2103.824" Z="-272.1069" />
          <Vector3 X="-7716.699" Y="-2087.696" Z="-272.1175" />
          <Vector3 X="-7730.776" Y="-2077.192" Z="-273.866" />
          <Vector3 X="-7747.966" Y="-2075.686" Z="-272.261" />
          <Vector3 X="-7764.866" Y="-2080.177" Z="-270.7994" />
          <Vector3 X="-7782.798" Y="-2081.092" Z="-272.8198" />
          <Vector3 X="-7800.287" Y="-2080.557" Z="-272.096" />
          <Vector3 X="-7816.981" Y="-2077.613" Z="-274.6945" />
          <Vector3 X="-7832.479" Y="-2076.259" Z="-272.8165" />
          <Vector3 X="-7848.558" Y="-2082.882" Z="-272.2043" />
          <Vector3 X="-7854.207" Y="-2094.682" Z="-267.9715" />
          <Vector3 X="-7854.352" Y="-2098.587" Z="-266.4454" />
          <Vector3 X="-7853.398" Y="-2101.953" Z="-265.176" />
          <Vector3 X="-7852.25" Y="-2105.135" Z="-263.5467" />
          <Vector3 X="-7850.645" Y="-2108.37" Z="-261.2488" />
          <Vector3 X="-7848.337" Y="-2110.984" Z="-258.8547" />
          <Vector3 X="-7845.783" Y="-2113.378" Z="-256.501" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTEFungalRockToRefuge</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="-6406.322" Y="-1772.497" Z="-271.6943" />
          <Vector3 X="-6405.02" Y="-1764.909" Z="-272.0967" />
          <Vector3 X="-6398.324" Y="-1729.486" Z="-273.4638" />
          <Vector3 X="-6389.027" Y="-1695.754" Z="-273.7758" />
          <Vector3 X="-6376.922" Y="-1662.941" Z="-272.1872" />
          <Vector3 X="-6367.057" Y="-1630.62" Z="-271.8208" />
          <Vector3 X="-6357.878" Y="-1595.763" Z="-272.2212" />
          <Vector3 X="-6345.434" Y="-1564.193" Z="-271.56" />
          <Vector3 X="-6331.579" Y="-1532.124" Z="-270.2324" />
          <Vector3 X="-6317.725" Y="-1500.058" Z="-269.6563" />
          <Vector3 X="-6309.063" Y="-1480.009" Z="-269.5975" />
          <Vector3 X="-6305.09" Y="-1468.645" Z="-269.4606" />
          <Vector3 X="-6301.562" Y="-1448.157" Z="-269.0585" />
          <Vector3 X="-6301.989" Y="-1431.713" Z="-269.0442" />
          <Vector3 X="-6303.208" Y="-1415.384" Z="-268.4754" />
          <Vector3 X="-6317.883" Y="-1404.059" Z="-266.4713" />
          <Vector3 X="-6349.915" Y="-1390.198" Z="-267.0092" />
          <Vector3 X="-6382.259" Y="-1377.361" Z="-271.9167" />
          <Vector3 X="-6385.663" Y="-1374.669" Z="-272.1365" />
          <Vector3 X="-6391.704" Y="-1360.58" Z="-271.9418" />
          <Vector3 X="-6404.099" Y="-1327.882" Z="-271.4217" />
          <Vector3 X="-6406.204" Y="-1310.602" Z="-271.9091" />
          <Vector3 X="-6400.228" Y="-1302.747" Z="-271.692" />
          <Vector3 X="-6381.804" Y="-1300.156" Z="-272.1533" />
          <Vector3 X="-6347.923" Y="-1291.617" Z="-269.9916" />
          <Vector3 X="-6314.261" Y="-1282.15" Z="-267.7124" />
          <Vector3 X="-6297.872" Y="-1271.617" Z="-268.7668" />
          <Vector3 X="-6292.354" Y="-1243.777" Z="-268.0005" />
          <Vector3 X="-6289.945" Y="-1223.128" Z="-267.9085" />
          <Vector3 X="-6291.251" Y="-1214.476" Z="-268.0178" />
          <Vector3 X="-6292.575" Y="-1205.826" Z="-268.0685" />
          <Vector3 X="-6295.769" Y="-1197.68" Z="-268.5505" />
          <Vector3 X="-6298.198" Y="-1190.46" Z="-269.0026" />
          <Vector3 X="-6299.509" Y="-1185.16" Z="-269.2856" />
          <Vector3 X="-6300.864" Y="-1176.745" Z="-268.9316" />
          <Vector3 X="-6298.64" Y="-1166.663" Z="-264.1809" />
          <Vector3 X="-6291.725" Y="-1158.882" Z="-258.3008" />
          <Vector3 X="-6282.637" Y="-1153.71" Z="-253.9244" />
          <Vector3 X="-6272.665" Y="-1150.439" Z="-249.0813" />
          <Vector3 X="-6263.979" Y="-1144.567" Z="-244.8286" />
          <Vector3 X="-6255.537" Y="-1138.324" Z="-240.5855" />
          <Vector3 X="-6247.743" Y="-1131.34" Z="-235.5902" />
          <Vector3 X="-6241.959" Y="-1125.076" Z="-230.3421" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTEGadgetzanToTorwa</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="-7200.193" Y="-3729.752" Z="8.370284" />
          <Vector3 X="-7205.835" Y="-3723.092" Z="8.575274" />
          <Vector3 X="-7215.875" Y="-3708.762" Z="10.80785" />
          <Vector3 X="-7225.334" Y="-3694.043" Z="10.79762" />
          <Vector3 X="-7234.417" Y="-3679.085" Z="9.050561" />
          <Vector3 X="-7247.622" Y="-3657.335" Z="10.05905" />
          <Vector3 X="-7262.546" Y="-3635.761" Z="11.88362" />
          <Vector3 X="-7278.606" Y="-3614.01" Z="14.41633" />
          <Vector3 X="-7293.981" Y="-3592.739" Z="14.10698" />
          <Vector3 X="-7304.755" Y="-3569.69" Z="11.45381" />
          <Vector3 X="-7315.741" Y="-3541.109" Z="8.336019" />
          <Vector3 X="-7327.112" Y="-3508.01" Z="10.17608" />
          <Vector3 X="-7337.184" Y="-3473.398" Z="10.40623" />
          <Vector3 X="-7346.265" Y="-3440.685" Z="14.61078" />
          <Vector3 X="-7356.436" Y="-3407.196" Z="13.76528" />
          <Vector3 X="-7366.721" Y="-3373.741" Z="9.792586" />
          <Vector3 X="-7377.892" Y="-3340.646" Z="10.26289" />
          <Vector3 X="-7396.041" Y="-3309.573" Z="10.2953" />
          <Vector3 X="-7411.626" Y="-3279.417" Z="9.802505" />
          <Vector3 X="-7426.874" Y="-3247.925" Z="12.89547" />
          <Vector3 X="-7441.634" Y="-3216.262" Z="11.90615" />
          <Vector3 X="-7456.305" Y="-3184.486" Z="13.55838" />
          <Vector3 X="-7471.774" Y="-3151.928" Z="13.25463" />
          <Vector3 X="-7488.832" Y="-3122.583" Z="13.20749" />
          <Vector3 X="-7510.84" Y="-3094.091" Z="13.34734" />
          <Vector3 X="-7533.847" Y="-3069.125" Z="12.57121" />
          <Vector3 X="-7557.553" Y="-3043.471" Z="11.64598" />
          <Vector3 X="-7582.375" Y="-3018.806" Z="14.19382" />
          <Vector3 X="-7608.049" Y="-2995.06" Z="16.23581" />
          <Vector3 X="-7633.909" Y="-2971.476" Z="15.41379" />
          <Vector3 X="-7662.735" Y="-2949.858" Z="17.04094" />
          <Vector3 X="-7690.53" Y="-2930.641" Z="20.98622" />
          <Vector3 X="-7720.367" Y="-2912.55" Z="27.707" />
          <Vector3 X="-7751.295" Y="-2896.167" Z="28.65545" />
          <Vector3 X="-7782.029" Y="-2879.429" Z="28.81151" />
          <Vector3 X="-7812.458" Y="-2862.142" Z="31.8278" />
          <Vector3 X="-7845.441" Y="-2850.599" Z="35.01976" />
          <Vector3 X="-7879.082" Y="-2841.007" Z="33.48399" />
          <Vector3 X="-7913.939" Y="-2840.019" Z="35.34995" />
          <Vector3 X="-7948.867" Y="-2842.249" Z="37.36444" />
          <Vector3 X="-7984.897" Y="-2842.938" Z="29.45212" />
          <Vector3 X="-8018.447" Y="-2837.947" Z="31.44667" />
          <Vector3 X="-8052.489" Y="-2829.82" Z="35.88719" />
          <Vector3 X="-8084.584" Y="-2816.158" Z="33.74417" />
          <Vector3 X="-8114.931" Y="-2798.726" Z="31.93415" />
          <Vector3 X="-8142.533" Y="-2777.26" Z="33.85804" />
          <Vector3 X="-8168.783" Y="-2754.167" Z="29.36561" />
          <Vector3 X="-8195.032" Y="-2731.016" Z="27.47162" />
          <Vector3 X="-8222.557" Y="-2709.555" Z="25.16988" />
          <Vector3 X="-8251.697" Y="-2690.409" Z="25.72725" />
          <Vector3 X="-8277.486" Y="-2666.749" Z="28.3294" />
          <Vector3 X="-8301.622" Y="-2640.053" Z="31.13983" />
          <Vector3 X="-8320.584" Y="-2611.895" Z="34.00716" />
          <Vector3 X="-8337.208" Y="-2581.275" Z="37.2655" />
          <Vector3 X="-8350.219" Y="-2548.783" Z="40.54109" />
          <Vector3 X="-8363.188" Y="-2516.321" Z="44.68171" />
          <Vector3 X="-8375.942" Y="-2483.73" Z="45.52262" />
          <Vector3 X="-8387.793" Y="-2450.797" Z="42.96876" />
          <Vector3 X="-8400.482" Y="-2418.202" Z="40.25393" />
          <Vector3 X="-8418.287" Y="-2388.092" Z="35.22858" />
          <Vector3 X="-8437.036" Y="-2358.538" Z="28.31228" />
          <Vector3 X="-8455.876" Y="-2329.041" Z="23.88121" />
          <Vector3 X="-8474.856" Y="-2299.634" Z="25.2214" />
          <Vector3 X="-8493.832" Y="-2270.235" Z="26.8856" />
          <Vector3 X="-8512.813" Y="-2240.828" Z="26.51003" />
          <Vector3 X="-8531.793" Y="-2211.422" Z="24.02573" />
          <Vector3 X="-8547.033" Y="-2179.99" Z="13.94864" />
          <Vector3 X="-8549.066" Y="-2168.368" Z="10.60335" />
          <Vector3 X="-8552.521" Y="-2147.867" Z="8.916904" />
          <Vector3 X="-8555.412" Y="-2130.891" Z="8.85448" />
          <Vector3 X="-8555.345" Y="-2114.132" Z="8.85448" />
          <Vector3 X="-8536.182" Y="-2096.089" Z="2.642636" />
          <Vector3 X="-8510.878" Y="-2089.279" Z="-1.231682" />
          <Vector3 X="-8484.976" Y="-2085.209" Z="-6.747285" />
          <Vector3 X="-8459.613" Y="-2082.978" Z="-16.04848" />
          <Vector3 X="-8433.381" Y="-2082.007" Z="-23.98719" />
          <Vector3 X="-8407.16" Y="-2080.781" Z="-32.16743" />
          <Vector3 X="-8380.939" Y="-2079.549" Z="-40.50662" />
          <Vector3 X="-8354.721" Y="-2078.282" Z="-49.91882" />
          <Vector3 X="-8328.509" Y="-2076.921" Z="-58.86677" />
          <Vector3 X="-8302.393" Y="-2074.275" Z="-68.86801" />
          <Vector3 X="-8276.247" Y="-2072.309" Z="-80.86082" />
          <Vector3 X="-8250.587" Y="-2077.721" Z="-92.39931" />
          <Vector3 X="-8224.491" Y="-2084.752" Z="-104.3124" />
          <Vector3 X="-8199.224" Y="-2086.97" Z="-111.9919" />
          <Vector3 X="-8173.474" Y="-2081.984" Z="-118.4352" />
          <Vector3 X="-8149.902" Y="-2079.949" Z="-125.2248" />
          <Vector3 X="-8139.096" Y="-2083.875" Z="-128.0865" />
          <Vector3 X="-8114.874" Y="-2093.874" Z="-142.0852" />
          <Vector3 X="-8093.236" Y="-2108.708" Z="-156.055" />
          <Vector3 X="-8069.98" Y="-2120.566" Z="-170.3786" />
          <Vector3 X="-8043.81" Y="-2120.362" Z="-184.7529" />
          <Vector3 X="-8017.856" Y="-2116.448" Z="-196.3618" />
          <Vector3 X="-7991.676" Y="-2114.888" Z="-207.9167" />
          <Vector3 X="-7966.862" Y="-2122.996" Z="-217.1666" />
          <Vector3 X="-7943.997" Y="-2135.853" Z="-226.3149" />
          <Vector3 X="-7918.277" Y="-2140.144" Z="-237.2531" />
          <Vector3 X="-7910.403" Y="-2138.194" Z="-242.2145" />
          <Vector3 X="-7902.872" Y="-2134.988" Z="-247.9809" />
          <Vector3 X="-7891.972" Y="-2128.282" Z="-257.8706" />
          <Vector3 X="-7884.204" Y="-2121.238" Z="-265.4746" />
          <Vector3 X="-7876.336" Y="-2114.289" Z="-269.6312" />
          <Vector3 X="-7867.972" Y="-2107.969" Z="-268.7505" />
          <Vector3 X="-7857.413" Y="-2107.941" Z="-265.0202" />
          <Vector3 X="-7848.25" Y="-2113.031" Z="-257.7085" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTEGnomeToFlightMaster</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="-6018.465" Y="-1006.37" Z="-215.3481" />
          <Vector3 X="-6018.916" Y="-1002.904" Z="-215.0049" />
          <Vector3 X="-6019.469" Y="-998.5572" Z="-215.1071" />
          <Vector3 X="-6021.223" Y="-988.212" Z="-214.7552" />
          <Vector3 X="-6028.707" Y="-984.1559" Z="-216.3662" />
          <Vector3 X="-6038.892" Y="-982.2937" Z="-214.4176" />
          <Vector3 X="-6049.298" Y="-983.5604" Z="-213.416" />
          <Vector3 X="-6059.652" Y="-985.308" Z="-212.7554" />
          <Vector3 X="-6069.598" Y="-988.5261" Z="-211.024" />
          <Vector3 X="-6078.337" Y="-994.2707" Z="-207.6622" />
          <Vector3 X="-6085.189" Y="-1001.776" Z="-205.6211" />
          <Vector3 X="-6088.711" Y="-1007.314" Z="-204.8186" />
          <Vector3 X="-6090.698" Y="-1017.464" Z="-203.9964" />
          <Vector3 X="-6086.048" Y="-1026.621" Z="-202.7498" />
          <Vector3 X="-6077.968" Y="-1033.327" Z="-200.1719" />
          <Vector3 X="-6073.893" Y="-1037.976" Z="-198.7569" />
          <Vector3 X="-6073.791" Y="-1043.217" Z="-197.7852" />
          <Vector3 X="-6075.411" Y="-1053.59" Z="-197.4131" />
          <Vector3 X="-6076.506" Y="-1063.376" Z="-198.885" />
          <Vector3 X="-6087.561" Y="-1070.935" Z="-199.1212" />
          <Vector3 X="-6097.858" Y="-1071.04" Z="-199.5538" />
          <Vector3 X="-6106.428" Y="-1065.135" Z="-198.2604" />
          <Vector3 X="-6115.423" Y="-1060.027" Z="-200.3714" />
          <Vector3 X="-6123.856" Y="-1066.142" Z="-199.667" />
          <Vector3 X="-6132.075" Y="-1072.151" Z="-199.3142" />
          <Vector3 X="-6140.904" Y="-1077.833" Z="-198.2023" />
          <Vector3 X="-6149.596" Y="-1083.719" Z="-199.7816" />
          <Vector3 X="-6152.838" Y="-1088.889" Z="-202.0949" />
          <Vector3 X="-6150.762" Y="-1099.014" Z="-204.7718" />
          <Vector3 X="-6144.562" Y="-1107.471" Z="-207.6688" />
          <Vector3 X="-6137.382" Y="-1115.126" Z="-209.042" />
          <Vector3 X="-6129.836" Y="-1122.427" Z="-203.7571" />
          <Vector3 X="-6122.59" Y="-1130.012" Z="-194.2284" />
          <Vector3 X="-6117.031" Y="-1137.313" Z="-188.6958" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTEGoblinToWesternPylon</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="-7213.073" Y="-605.0466" Z="-269.7696" />
          <Vector3 X="-7224.604" Y="-596.7859" Z="-271.377" />
          <Vector3 X="-7238.763" Y="-585.5756" Z="-270.8452" />
          <Vector3 X="-7252.515" Y="-574.7524" Z="-271.7936" />
          <Vector3 X="-7266.035" Y="-563.6443" Z="-272.2685" />
          <Vector3 X="-7278.154" Y="-551.0652" Z="-272.8241" />
          <Vector3 X="-7287.884" Y="-536.5236" Z="-272.1579" />
          <Vector3 X="-7297.266" Y="-521.7507" Z="-271.699" />
          <Vector3 X="-7307.973" Y="-507.9281" Z="-272.8479" />
          <Vector3 X="-7319.514" Y="-494.7735" Z="-274.2837" />
          <Vector3 X="-7331.372" Y="-481.9041" Z="-272.3336" />
          <Vector3 X="-7342.561" Y="-468.4487" Z="-273.3172" />
          <Vector3 X="-7353.241" Y="-454.5913" Z="-271.9733" />
          <Vector3 X="-7364.178" Y="-440.959" Z="-269.9926" />
          <Vector3 X="-7376.201" Y="-428.2511" Z="-270.5685" />
          <Vector3 X="-7389.298" Y="-417.7088" Z="-271.6575" />
          <Vector3 X="-7398.623" Y="-412.8916" Z="-271.8104" />
          <Vector3 X="-7408.362" Y="-409.0264" Z="-272.7789" />
          <Vector3 X="-7418.553" Y="-406.5023" Z="-273.5478" />
          <Vector3 X="-7428.745" Y="-404.0534" Z="-272.7036" />
          <Vector3 X="-7439.117" Y="-402.6966" Z="-270.6935" />
          <Vector3 X="-7449.508" Y="-404.1203" Z="-269.6308" />
          <Vector3 X="-7459.898" Y="-405.3901" Z="-269.636" />
          <Vector3 X="-7469.694" Y="-402.5327" Z="-266.9609" />
          <Vector3 X="-7471.414" Y="-398.1346" Z="-264.3687" />
          <Vector3 X="-7473.925" Y="-393.9116" Z="-262.9304" />
          <Vector3 X="-7476.457" Y="-383.9438" Z="-258.524" />
          <Vector3 X="-7475.31" Y="-373.5564" Z="-252.938" />
          <Vector3 X="-7476.706" Y="-366.4732" Z="-249.0169" />
          <Vector3 X="-7472.387" Y="-354.1922" Z="-241.2778" />
          <Vector3 X="-7469.92" Y="-351.1101" Z="-239.8136" />
          <Vector3 X="-7462.895" Y="-343.3109" Z="-235.764" />
          <Vector3 X="-7455.201" Y="-336.1665" Z="-231.0045" />
          <Vector3 X="-7451.285" Y="-333.2141" Z="-228.9745" />
          <Vector3 X="-7442.674" Y="-332.8295" Z="-226.2336" />
          <Vector3 X="-7439.719" Y="-335.4144" Z="-224.395" />
          <Vector3 X="-7435.169" Y="-339.6808" Z="-224.8925" />
          <Vector3 X="-7428.671" Y="-338.8709" Z="-227.9743" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTEGoToLarkorwi</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="-7245.241" Y="-2294.265" Z="-268.2196" />
          <Vector3 X="-7238.394" Y="-2299.377" Z="-266.9735" />
          <Vector3 X="-7229.754" Y="-2305.308" Z="-259.92" />
          <Vector3 X="-7222.287" Y="-2312.626" Z="-253.5514" />
          <Vector3 X="-7217.099" Y="-2321.729" Z="-245.7145" />
          <Vector3 X="-7212.096" Y="-2330.96" Z="-236.5984" />
          <Vector3 X="-7207.29" Y="-2340.295" Z="-231.1629" />
          <Vector3 X="-7202.796" Y="-2349.782" Z="-227.6758" />
          <Vector3 X="-7199.756" Y="-2359.816" Z="-223.2613" />
          <Vector3 X="-7198.35" Y="-2370.212" Z="-220.1289" />
          <Vector3 X="-7197.851" Y="-2380.7" Z="-218.457" />
          <Vector3 X="-7197.02" Y="-2391.166" Z="-217.6664" />
          <Vector3 X="-7195.723" Y="-2401.568" Z="-217.453" />
          <Vector3 X="-7193.896" Y="-2411.907" Z="-217.1702" />
          <Vector3 X="-7192.894" Y="-2422.334" Z="-217.5215" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTEHiveToMarshalCamp</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="-7873.594" Y="-1334.778" Z="-276.6603" />
          <Vector3 X="-7856.599" Y="-1300.48" Z="-272.2141" />
          <Vector3 X="-7840.533" Y="-1269.385" Z="-269.6913" />
          <Vector3 X="-7834.983" Y="-1258.705" Z="-267.962" />
          <Vector3 X="-7826.486" Y="-1245.945" Z="-266.4347" />
          <Vector3 X="-7810.254" Y="-1215.084" Z="-265.3646" />
          <Vector3 X="-7799.683" Y="-1181.733" Z="-262.248" />
          <Vector3 X="-7786.498" Y="-1149.4" Z="-263.1265" />
          <Vector3 X="-7768.571" Y="-1119.342" Z="-266.2292" />
          <Vector3 X="-7749.97" Y="-1089.697" Z="-270.3467" />
          <Vector3 X="-7736.167" Y="-1064.99" Z="-270.7955" />
          <Vector3 X="-7703.192" Y="-1053.679" Z="-268.2963" />
          <Vector3 X="-7691.546" Y="-1047.6" Z="-268.5213" />
          <Vector3 X="-7680.551" Y="-1042.695" Z="-269.572" />
          <Vector3 X="-7664.435" Y="-1033.606" Z="-268.5108" />
          <Vector3 X="-7657.318" Y="-1015.24" Z="-267.6925" />
          <Vector3 X="-7654.585" Y="-1003.514" Z="-267.8454" />
          <Vector3 X="-7645.572" Y="-993.9264" Z="-267.6746" />
          <Vector3 X="-7637.655" Y="-988.0325" Z="-267.4189" />
          <Vector3 X="-7623.286" Y="-978.0569" Z="-267.4253" />
          <Vector3 X="-7607.342" Y="-968.4553" Z="-268.0767" />
          <Vector3 X="-7603.637" Y="-966.0637" Z="-268.2242" />
          <Vector3 X="-7602.718" Y="-960.6816" Z="-267.9683" />
          <Vector3 X="-7597.983" Y="-940.4407" Z="-265.6497" />
          <Vector3 X="-7597.034" Y="-936.1343" Z="-267.4503" />
          <Vector3 X="-7595.797" Y="-918.6862" Z="-269.8459" />
          <Vector3 X="-7595.574" Y="-901.1916" Z="-271.1652" />
          <Vector3 X="-7595.641" Y="-892.4606" Z="-271.7969" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTEKrakleToMarshalRefuge</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="-7202.738" Y="-608.3777" Z="-269.9961" />
          <Vector3 X="-7183.085" Y="-608.1423" Z="-270.4494" />
          <Vector3 X="-7165.646" Y="-609.3552" Z="-271.2837" />
          <Vector3 X="-7148.181" Y="-610.4496" Z="-270.7358" />
          <Vector3 X="-7130.713" Y="-611.5225" Z="-270.6222" />
          <Vector3 X="-7113.243" Y="-611.1548" Z="-270.0069" />
          <Vector3 X="-7095.959" Y="-608.436" Z="-270.6857" />
          <Vector3 X="-7078.816" Y="-604.9554" Z="-269.5973" />
          <Vector3 X="-7061.932" Y="-600.3819" Z="-271.2086" />
          <Vector3 X="-7045.638" Y="-594.0222" Z="-274.9271" />
          <Vector3 X="-7029.68" Y="-586.8402" Z="-275.6409" />
          <Vector3 X="-7013.741" Y="-579.6151" Z="-272.1399" />
          <Vector3 X="-6997.324" Y="-572.1733" Z="-272.2254" />
          <Vector3 X="-6981.863" Y="-565.1649" Z="-272.1919" />
          <Vector3 X="-6965.677" Y="-558.5832" Z="-272.1783" />
          <Vector3 X="-6958.066" Y="-555.5569" Z="-271.9961" />
          <Vector3 X="-6942.455" Y="-550.6083" Z="-271.8248" />
          <Vector3 X="-6925.005" Y="-550.1794" Z="-272.121" />
          <Vector3 X="-6908.532" Y="-555.619" Z="-272.2082" />
          <Vector3 X="-6894.414" Y="-565.7335" Z="-272.8078" />
          <Vector3 X="-6882.431" Y="-578.4871" Z="-271.9491" />
          <Vector3 X="-6871.387" Y="-592.0413" Z="-271.3994" />
          <Vector3 X="-6861.428" Y="-606.4308" Z="-270.9406" />
          <Vector3 X="-6852.056" Y="-621.1956" Z="-271.1722" />
          <Vector3 X="-6843.723" Y="-636.5843" Z="-271.6703" />
          <Vector3 X="-6834.901" Y="-651.6648" Z="-271.0685" />
          <Vector3 X="-6821.557" Y="-662.8549" Z="-272.2214" />
          <Vector3 X="-6806.619" Y="-671.9601" Z="-271.5133" />
          <Vector3 X="-6791.641" Y="-681.0099" Z="-272.146" />
          <Vector3 X="-6777.369" Y="-691.0516" Z="-271.9952" />
          <Vector3 X="-6765.606" Y="-703.9925" Z="-271.5637" />
          <Vector3 X="-6754.221" Y="-717.2826" Z="-271.158" />
          <Vector3 X="-6742.835" Y="-730.5727" Z="-271.5381" />
          <Vector3 X="-6730.648" Y="-743.0671" Z="-272.0561" />
          <Vector3 X="-6716.706" Y="-753.6281" Z="-272.2212" />
          <Vector3 X="-6701.577" Y="-762.3945" Z="-272.2001" />
          <Vector3 X="-6693.351" Y="-766.6114" Z="-271.7554" />
          <Vector3 X="-6690.826" Y="-774.4392" Z="-271.2058" />
          <Vector3 X="-6683.016" Y="-789.8487" Z="-271.9435" />
          <Vector3 X="-6670.049" Y="-801.5883" Z="-272.1566" />
          <Vector3 X="-6656.429" Y="-812.5723" Z="-272.6592" />
          <Vector3 X="-6642.083" Y="-822.5778" Z="-272.9679" />
          <Vector3 X="-6626.81" Y="-831.1187" Z="-274.0101" />
          <Vector3 X="-6608.098" Y="-841.5508" Z="-274.8471" Type="Swimming" />
          <Vector3 X="-6590.913" Y="-851.2799" Z="-273.1582" />
          <Vector3 X="-6567.776" Y="-868.7405" Z="-271.4427" />
          <Vector3 X="-6553.807" Y="-879.282" Z="-272.1343" />
          <Vector3 X="-6545.244" Y="-886.108" Z="-272.5871" />
          <Vector3 X="-6532.417" Y="-898.0118" Z="-272.0398" />
          <Vector3 X="-6519.981" Y="-910.2964" Z="-274.1736" />
          <Vector3 X="-6506.662" Y="-921.6384" Z="-274.3979" />
          <Vector3 X="-6492.191" Y="-932.3516" Z="-270.929" />
          <Vector3 X="-6477.265" Y="-941.4863" Z="-271.3139" />
          <Vector3 X="-6462.773" Y="-950.3269" Z="-275.513" />
          <Vector3 X="-6447.803" Y="-959.3899" Z="-273.9207" />
          <Vector3 X="-6432.95" Y="-968.6448" Z="-272.1048" />
          <Vector3 X="-6418.204" Y="-978.0669" Z="-270.4653" />
          <Vector3 X="-6403.733" Y="-987.899" Z="-271.1171" />
          <Vector3 X="-6390.549" Y="-1000.126" Z="-271.7897" />
          <Vector3 X="-6381.077" Y="-1014.207" Z="-272.0602" />
          <Vector3 X="-6370.563" Y="-1028.176" Z="-272.0119" />
          <Vector3 X="-6358.951" Y="-1041.267" Z="-270.9171" />
          <Vector3 X="-6353.311" Y="-1047.956" Z="-270.8984" />
          <Vector3 X="-6346.927" Y="-1051.285" Z="-270.0406" />
          <Vector3 X="-6337.363" Y="-1054.715" Z="-266.4859" />
          <Vector3 X="-6327.082" Y="-1056.821" Z="-262.9801" />
          <Vector3 X="-6316.729" Y="-1058.57" Z="-258.6937" />
          <Vector3 X="-6306.329" Y="-1058.579" Z="-253.0492" />
          <Vector3 X="-6295.969" Y="-1056.938" Z="-246.918" />
          <Vector3 X="-6287.406" Y="-1060.881" Z="-241.1907" />
          <Vector3 X="-6279.711" Y="-1067.995" Z="-237.6938" />
          <Vector3 X="-6272.589" Y="-1075.71" Z="-233.2047" />
          <Vector3 X="-6266.309" Y="-1084.05" Z="-228.483" />
          <Vector3 X="-6261.475" Y="-1093.652" Z="-223.3278" />
          <Vector3 X="-6252.891" Y="-1099.573" Z="-218.3789" />
          <Vector3 X="-6246.985" Y="-1101.547" Z="-217.6342" />
          <Vector3 X="-6238.473" Y="-1101.119" Z="-218.5684" />
          <Vector3 X="-6232.923" Y="-1100.483" Z="-218.3869" />
          <Vector3 X="-6223.137" Y="-1099.373" Z="-217.8504" />
          <Vector3 X="-6212.727" Y="-1095.578" Z="-216.457" />
          <Vector3 X="-6202.723" Y="-1093.669" Z="-214.7667" />
          <Vector3 X="-6192.343" Y="-1090.651" Z="-211.8065" />
          <Vector3 X="-6182.591" Y="-1086.782" Z="-208.2815" />
          <Vector3 X="-6179.375" Y="-1085.139" Z="-206.9445" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTELarkorwiToTorwa</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="-7196.827" Y="-2398.595" Z="-217.5238" />
          <Vector3 X="-7198.206" Y="-2384.892" Z="-218.0025" />
          <Vector3 X="-7198.935" Y="-2374.418" Z="-219.3809" />
          <Vector3 X="-7200.758" Y="-2364.093" Z="-221.6646" />
          <Vector3 X="-7203.943" Y="-2354.095" Z="-225.2938" />
          <Vector3 X="-7208.143" Y="-2344.474" Z="-229.338" />
          <Vector3 X="-7211.583" Y="-2337.39" Z="-232.8042" />
          <Vector3 X="-7214.888" Y="-2330.614" Z="-237.9683" />
          <Vector3 X="-7219.46" Y="-2321.162" Z="-246.7983" />
          <Vector3 X="-7224.516" Y="-2311.991" Z="-254.4537" />
          <Vector3 X="-7231.656" Y="-2304.307" Z="-261.6353" />
          <Vector3 X="-7240.316" Y="-2298.475" Z="-267.4522" />
          <Vector3 X="-7250.648" Y="-2297.029" Z="-268.34" />
          <Vector3 X="-7263.599" Y="-2296.65" Z="-268.2834" />
          <Vector3 X="-7289.838" Y="-2295.885" Z="-269.0011" />
          <Vector3 X="-7315.976" Y="-2294.179" Z="-269.1761" />
          <Vector3 X="-7338.757" Y="-2291.186" Z="-269.6086" />
          <Vector3 X="-7356.143" Y="-2289.196" Z="-269.6322" />
          <Vector3 X="-7373.542" Y="-2287.384" Z="-269.2033" />
          <Vector3 X="-7390.912" Y="-2285.526" Z="-268.9017" />
          <Vector3 X="-7408.196" Y="-2282.827" Z="-269.503" />
          <Vector3 X="-7425.22" Y="-2278.811" Z="-269.729" />
          <Vector3 X="-7441.131" Y="-2271.575" Z="-269.6098" />
          <Vector3 X="-7456.073" Y="-2262.474" Z="-269.6335" />
          <Vector3 X="-7470.721" Y="-2252.898" Z="-270.7871" />
          <Vector3 X="-7485.665" Y="-2243.803" Z="-271.3282" />
          <Vector3 X="-7501.587" Y="-2236.698" Z="-270.8867" />
          <Vector3 X="-7518.832" Y="-2233.751" Z="-271.2024" />
          <Vector3 X="-7536.201" Y="-2231.631" Z="-271.2482" />
          <Vector3 X="-7553.606" Y="-2229.818" Z="-271.1795" />
          <Vector3 X="-7570.99" Y="-2227.808" Z="-271.9491" />
          <Vector3 X="-7588.373" Y="-2225.79" Z="-271.7986" />
          <Vector3 X="-7605.755" Y="-2223.763" Z="-271.4445" />
          <Vector3 X="-7622.967" Y="-2220.666" Z="-271.2481" />
          <Vector3 X="-7639.364" Y="-2214.793" Z="-269.6821" />
          <Vector3 X="-7654.806" Y="-2206.616" Z="-269.4883" />
          <Vector3 X="-7668.119" Y="-2195.286" Z="-269.6636" />
          <Vector3 X="-7680.608" Y="-2183.029" Z="-269.1065" />
          <Vector3 X="-7691.972" Y="-2169.752" Z="-268.2346" />
          <Vector3 X="-7700.49" Y="-2157.006" Z="-265.5763" />
          <Vector3 X="-7705.696" Y="-2141.522" Z="-268.0646" />
          <Vector3 X="-7710.02" Y="-2124.564" Z="-270.2501" />
          <Vector3 X="-7714.667" Y="-2109.439" Z="-271.6095" />
          <Vector3 X="-7718.232" Y="-2092.315" Z="-272.1177" />
          <Vector3 X="-7731.483" Y="-2083.328" Z="-272.2601" />
          <Vector3 X="-7748.879" Y="-2082.348" Z="-271.5471" />
          <Vector3 X="-7766.333" Y="-2083.538" Z="-270.4646" />
          <Vector3 X="-7783.828" Y="-2083.15" Z="-272.9452" />
          <Vector3 X="-7801.322" Y="-2082.708" Z="-271.2185" />
          <Vector3 X="-7810.068" Y="-2082.456" Z="-271.8342" />
          <Vector3 X="-7829.586" Y="-2081.325" Z="-274.5947" />
          <Vector3 X="-7838.789" Y="-2082.468" Z="-272.9873" />
          <Vector3 X="-7851.11" Y="-2094.615" Z="-268.2282" />
          <Vector3 X="-7852.646" Y="-2104.608" Z="-263.9127" />
          <Vector3 X="-7847.285" Y="-2111.518" Z="-258.0763" />
          <Vector3 X="-7844.82" Y="-2113.736" Z="-256.0159" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTEMarshalCampToGoblin</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="-7600.789" Y="-899.2112" Z="-270.8732" />
          <Vector3 X="-7603.37" Y="-903.5222" Z="-270.0049" />
          <Vector3 X="-7608.044" Y="-912.923" Z="-268.3835" />
          <Vector3 X="-7615.507" Y="-928.7502" Z="-267.6335" />
          <Vector3 X="-7618.287" Y="-945.5551" Z="-267.8925" />
          <Vector3 X="-7608.861" Y="-960.1401" Z="-267.8121" />
          <Vector3 X="-7595.997" Y="-971.9333" Z="-268.6234" />
          <Vector3 X="-7580.785" Y="-979.2163" Z="-264.2847" />
          <Vector3 X="-7569.389" Y="-975.4847" Z="-263.3217" />
          <Vector3 X="-7552.257" Y="-974.9008" Z="-267.39" />
          <Vector3 X="-7537.819" Y="-984.7094" Z="-270.118" />
          <Vector3 X="-7524.393" Y="-995.9341" Z="-270.6917" />
          <Vector3 X="-7510.882" Y="-1007.053" Z="-271.2137" />
          <Vector3 X="-7496.571" Y="-1017.117" Z="-271.625" />
          <Vector3 X="-7481.209" Y="-1025.408" Z="-271.4127" />
          <Vector3 X="-7464.681" Y="-1031.1" Z="-270.5499" />
          <Vector3 X="-7447.612" Y="-1034.722" Z="-271.2726" />
          <Vector3 X="-7435.015" Y="-1034.613" Z="-272.1832" />
          <Vector3 X="-7429.327" Y="-1030.299" Z="-271.9884" />
          <Vector3 X="-7416.35" Y="-1015.541" Z="-272.1376" />
          <Vector3 X="-7405.831" Y="-1001.555" Z="-272.2221" />
          <Vector3 X="-7398.285" Y="-991.5081" Z="-272.2196" />
          <Vector3 X="-7394.488" Y="-986.1356" Z="-272.2213" />
          <Vector3 X="-7384.483" Y="-971.7783" Z="-272.22" />
          <Vector3 X="-7373.49" Y="-958.1691" Z="-272.0147" />
          <Vector3 X="-7363.444" Y="-943.9298" Z="-271.8184" />
          <Vector3 X="-7360.787" Y="-926.8323" Z="-271.95" />
          <Vector3 X="-7362.178" Y="-909.4249" Z="-272.1283" />
          <Vector3 X="-7358.581" Y="-892.3436" Z="-270.9347" />
          <Vector3 X="-7353.568" Y="-875.6108" Z="-269.7773" />
          <Vector3 X="-7348.476" Y="-858.8683" Z="-271.0548" />
          <Vector3 X="-7340.356" Y="-843.4116" Z="-272.1716" />
          <Vector3 X="-7331.504" Y="-828.3154" Z="-271.7645" />
          <Vector3 X="-7322.667" Y="-813.2435" Z="-271.3739" />
          <Vector3 X="-7312.516" Y="-799.1638" Z="-271.9078" />
          <Vector3 X="-7295.388" Y="-796.345" Z="-268.921" />
          <Vector3 X="-7277.896" Y="-796.6342" Z="-271.2088" />
          <Vector3 X="-7260.438" Y="-797.8517" Z="-270.9243" />
          <Vector3 X="-7242.987" Y="-799.1595" Z="-270.7744" />
          <Vector3 X="-7225.532" Y="-800.4163" Z="-271.8953" />
          <Vector3 X="-7208.097" Y="-799.6014" Z="-271.0837" />
          <Vector3 X="-7191.725" Y="-793.6055" Z="-271.2503" />
          <Vector3 X="-7176.177" Y="-785.5767" Z="-272.1317" />
          <Vector3 X="-7164.195" Y="-773.3036" Z="-271.9101" />
          <Vector3 X="-7157.519" Y="-757.1616" Z="-271.4037" />
          <Vector3 X="-7155.862" Y="-739.7763" Z="-271.7166" />
          <Vector3 X="-7157.271" Y="-722.3573" Z="-271.0776" />
          <Vector3 X="-7158.487" Y="-717.0074" Z="-270.9072" />
          <Vector3 X="-7157.342" Y="-711.6691" Z="-270.5775" />
          <Vector3 X="-7150.891" Y="-695.4652" Z="-271.9272" />
          <Vector3 X="-7141.541" Y="-680.6752" Z="-271.9751" />
          <Vector3 X="-7132.431" Y="-665.0989" Z="-270.6106" />
          <Vector3 X="-7130.816" Y="-648.5396" Z="-269.0416" />
          <Vector3 X="-7136.655" Y="-637.1087" Z="-265.8361" />
          <Vector3 X="-7143.971" Y="-626.9623" Z="-266.485" />
          <Vector3 X="-7150.247" Y="-616.7289" Z="-270.8392" />
          <Vector3 X="-7164.422" Y="-608.2736" Z="-271.1243" />
          <Vector3 X="-7171.525" Y="-608.1235" Z="-271.7158" />
          <Vector3 X="-7189.011" Y="-607.4747" Z="-270.2297" />
          <Vector3 X="-7203.211" Y="-606.7465" Z="-270.1885" />
          <Vector3 X="-7207.564" Y="-607.1917" Z="-269.8752" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTENorthernPylonToEasternPylon</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="-6261.76" Y="-1543.489" Z="-230.2251" />
          <Vector3 X="-6259.469" Y="-1539.024" Z="-230.429" />
          <Vector3 X="-6256.952" Y="-1532.261" Z="-231.7699" />
          <Vector3 X="-6258.228" Y="-1528.302" Z="-233.3413" />
          <Vector3 X="-6262.26" Y="-1523.199" Z="-236.2412" />
          <Vector3 X="-6271.346" Y="-1517.966" Z="-241.1029" />
          <Vector3 X="-6275.959" Y="-1515.459" Z="-244.6514" />
          <Vector3 X="-6285.2" Y="-1510.473" Z="-253.1596" />
          <Vector3 X="-6292.179" Y="-1506.162" Z="-257.9118" />
          <Vector3 X="-6295.21" Y="-1503.632" Z="-260.0988" />
          <Vector3 X="-6297.922" Y="-1500.343" Z="-263.3143" />
          <Vector3 X="-6301.624" Y="-1494.913" Z="-268.2627" />
          <Vector3 X="-6308.781" Y="-1495.479" Z="-269.3986" />
          <Vector3 X="-6317.554" Y="-1501.181" Z="-269.6158" />
          <Vector3 X="-6331.243" Y="-1511.925" Z="-270.3562" />
          <Vector3 X="-6341.684" Y="-1520.759" Z="-271.1033" />
          <Vector3 X="-6345.332" Y="-1524.03" Z="-271.4106" />
          <Vector3 X="-6358.762" Y="-1536.105" Z="-271.3232" />
          <Vector3 X="-6371.16" Y="-1547.648" Z="-271.3235" />
          <Vector3 X="-6384.575" Y="-1560.13" Z="-270.6182" />
          <Vector3 X="-6403.225" Y="-1577.326" Z="-268.9729" />
          <Vector3 X="-6423.536" Y="-1593.944" Z="-271.3176" />
          <Vector3 X="-6444.316" Y="-1609.983" Z="-274.6873" />
          <Vector3 X="-6464.232" Y="-1627.081" Z="-272.6005" />
          <Vector3 X="-6480.802" Y="-1647.326" Z="-274.5648" />
          <Vector3 X="-6490.131" Y="-1671.794" Z="-272.7319" />
          <Vector3 X="-6497.834" Y="-1696.889" Z="-275.7739" />
          <Vector3 X="-6505.911" Y="-1721.864" Z="-271.7728" />
          <Vector3 X="-6515.391" Y="-1746.326" Z="-273.0957" />
          <Vector3 X="-6530.172" Y="-1767.902" Z="-272.2902" />
          <Vector3 X="-6541.914" Y="-1780.569" Z="-272.1413" />
          <Vector3 X="-6549.174" Y="-1788.371" Z="-272.2131" />
          <Vector3 X="-6567.647" Y="-1808.185" Z="-271.7964" />
          <Vector3 X="-6585.308" Y="-1826.455" Z="-271.492" />
          <Vector3 X="-6603.637" Y="-1845.245" Z="-272.2216" />
          <Vector3 X="-6621.944" Y="-1864.012" Z="-272.1195" />
          <Vector3 X="-6640.274" Y="-1882.802" Z="-272.1055" />
          <Vector3 X="-6658.636" Y="-1901.561" Z="-271.1373" />
          <Vector3 X="-6676.976" Y="-1920.342" Z="-271.7181" />
          <Vector3 X="-6694.026" Y="-1940.271" Z="-270.778" />
          <Vector3 X="-6708.801" Y="-1961.951" Z="-270.5977" />
          <Vector3 X="-6720.178" Y="-1985.559" Z="-272.1712" />
          <Vector3 X="-6727.524" Y="-2010.692" Z="-272.0928" />
          <Vector3 X="-6732.471" Y="-2037.312" Z="-272.2215" />
          <Vector3 X="-6735.296" Y="-2062.5" Z="-271.5949" />
          <Vector3 X="-6736.363" Y="-2088.728" Z="-272.1559" />
          <Vector3 X="-6737.652" Y="-2114.944" Z="-272.1408" />
          <Vector3 X="-6742.943" Y="-2140.573" Z="-271.734" />
          <Vector3 X="-6752.06" Y="-2159.834" Z="-271.2281" />
          <Vector3 X="-6756.768" Y="-2165.478" Z="-271.7373" />
          <Vector3 X="-6777.867" Y="-2180.676" Z="-271.4083" />
          <Vector3 X="-6803.125" Y="-2187.553" Z="-270.7928" />
          <Vector3 X="-6828.716" Y="-2193.396" Z="-270.9771" />
          <Vector3 X="-6854.304" Y="-2199.254" Z="-271.0056" />
          <Vector3 X="-6879.322" Y="-2207.178" Z="-271.6496" />
          <Vector3 X="-6904.25" Y="-2215.403" Z="-272.1953" />
          <Vector3 X="-6920.462" Y="-2221.207" Z="-272.1808" />
          <Vector3 X="-6945.138" Y="-2230.108" Z="-272.6783" />
          <Vector3 X="-6969.831" Y="-2239.014" Z="-274.9005" />
          <Vector3 X="-6994.523" Y="-2247.921" Z="-273.0066" />
          <Vector3 X="-7004.549" Y="-2251.538" Z="-271.7394" />
          <Vector3 X="-7029.242" Y="-2260.442" Z="-270.8673" />
          <Vector3 X="-7054.251" Y="-2268.271" Z="-270.5323" />
          <Vector3 X="-7064.648" Y="-2270.841" Z="-270.2585" />
          <Vector3 X="-7113.958" Y="-2283.327" Z="-266.8927" />
          <Vector3 X="-7121.04" Y="-2285.48" Z="-266.9526" />
          <Vector3 X="-7146.131" Y="-2293.189" Z="-267.9906" />
          <Vector3 X="-7151.502" Y="-2295.584" Z="-268.2226" />
          <Vector3 X="-7161.272" Y="-2300.26" Z="-266.8268" />
          <Vector3 X="-7170.847" Y="-2304.569" Z="-259.8936" />
          <Vector3 X="-7178.853" Y="-2311.14" Z="-253.9299" />
          <Vector3 X="-7182.257" Y="-2318.967" Z="-247.9964" />
          <Vector3 X="-7186.536" Y="-2328.551" Z="-238.6712" />
          <Vector3 X="-7188.612" Y="-2332.273" Z="-235.897" />
          <Vector3 X="-7193.901" Y="-2336.453" Z="-232.5825" />
          <Vector3 X="-7198.123" Y="-2331.185" Z="-229.6399" />
          <Vector3 X="-7198.938" Y="-2326.667" Z="-228.1422" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTERefugeToNorthPylon</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="-6211.245" Y="-1114.746" Z="-220.6703" />
          <Vector3 X="-6218.512" Y="-1121.344" Z="-224.1874" />
          <Vector3 X="-6232.118" Y="-1129.217" Z="-229.9569" />
          <Vector3 X="-6247.866" Y="-1136.844" Z="-236.9154" />
          <Vector3 X="-6262.907" Y="-1146.828" Z="-245.4401" />
          <Vector3 X="-6278.521" Y="-1153.166" Z="-251.875" />
          <Vector3 X="-6293.529" Y="-1161.878" Z="-259.9407" />
          <Vector3 X="-6301.626" Y="-1176.67" Z="-269.0257" />
          <Vector3 X="-6298.705" Y="-1194.366" Z="-269.0823" />
          <Vector3 X="-6295.11" Y="-1210.864" Z="-268.8412" />
          <Vector3 X="-6294.418" Y="-1228.906" Z="-268.2437" />
          <Vector3 X="-6296.104" Y="-1245.725" Z="-268.5482" />
          <Vector3 X="-6298.654" Y="-1263.598" Z="-268.5591" />
          <Vector3 X="-6305.133" Y="-1279.172" Z="-268.1292" />
          <Vector3 X="-6317.936" Y="-1290.449" Z="-268.3461" />
          <Vector3 X="-6335.099" Y="-1293.402" Z="-269.4802" />
          <Vector3 X="-6352.55" Y="-1294.259" Z="-270.6739" />
          <Vector3 X="-6369.696" Y="-1297.711" Z="-271.6849" />
          <Vector3 X="-6386.227" Y="-1303.429" Z="-272.1351" />
          <Vector3 X="-6402.455" Y="-1309.958" Z="-271.882" />
          <Vector3 X="-6414.598" Y="-1321.821" Z="-272.0384" />
          <Vector3 X="-6414.819" Y="-1339.043" Z="-271.9975" />
          <Vector3 X="-6403.623" Y="-1352.107" Z="-271.8568" />
          <Vector3 X="-6390.636" Y="-1363.79" Z="-272.0143" />
          <Vector3 X="-6378.571" Y="-1376.422" Z="-271.7081" />
          <Vector3 X="-6366.595" Y="-1389.138" Z="-269.1159" />
          <Vector3 X="-6355.752" Y="-1402.852" Z="-268.0627" />
          <Vector3 X="-6345.697" Y="-1417.174" Z="-268.0954" />
          <Vector3 X="-6335.795" Y="-1431.604" Z="-267.704" />
          <Vector3 X="-6326.46" Y="-1446.397" Z="-268.129" />
          <Vector3 X="-6317.602" Y="-1461.49" Z="-269.4454" />
          <Vector3 X="-6313.438" Y="-1468.583" Z="-269.5445" />
          <Vector3 X="-6303.952" Y="-1487.042" Z="-269.3628" />
          <Vector3 X="-6296.016" Y="-1502.627" Z="-261.1135" />
          <Vector3 X="-6293.121" Y="-1506.536" Z="-258.1532" />
          <Vector3 X="-6287.618" Y="-1510.956" Z="-254.082" />
          <Vector3 X="-6271.328" Y="-1517.34" Z="-241.7342" />
          <Vector3 X="-6263.81" Y="-1522.736" Z="-236.8593" />
          <Vector3 X="-6256.091" Y="-1526.768" Z="-233.5269" />
          <Vector3 X="-6259.282" Y="-1534.349" Z="-231.0054" />
          <Vector3 X="-6263.433" Y="-1544.487" Z="-229.9013" />
          <Vector3 X="-6266.74" Y="-1550.775" Z="-229.6126" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTERingoToTopVulcan</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="-7201.007" Y="-1390.474" Z="-232.2745" />
          <Vector3 X="-7210.864" Y="-1397.548" Z="-231.8981" />
          <Vector3 X="-7219.477" Y="-1403.553" Z="-231.3837" />
          <Vector3 X="-7228.477" Y="-1408.954" Z="-231.1628" />
          <Vector3 X="-7237.303" Y="-1411.209" Z="-232.4083" />
          <Vector3 X="-7240.863" Y="-1405.34" Z="-232.5398" />
          <Vector3 X="-7244.268" Y="-1395.416" Z="-231.9179" />
          <Vector3 X="-7245.786" Y="-1388.703" Z="-231.6863" />
          <Vector3 X="-7244.11" Y="-1376.343" Z="-231.5896" />
          <Vector3 X="-7243.292" Y="-1365.882" Z="-232.0253" />
          <Vector3 X="-7244.129" Y="-1355.443" Z="-234.6362" />
          <Vector3 X="-7247.987" Y="-1345.759" Z="-237.7153" />
          <Vector3 X="-7254.094" Y="-1341.028" Z="-239.6596" />
          <Vector3 X="-7259.773" Y="-1336.575" Z="-240.5665" />
          <Vector3 X="-7267.199" Y="-1329.16" Z="-240.6059" />
          <Vector3 X="-7274.359" Y="-1321.48" Z="-240.6215" />
          <Vector3 X="-7282.068" Y="-1314.386" Z="-240.6215" />
          <Vector3 X="-7285.892" Y="-1312.501" Z="-240.6215" />
          <Vector3 X="-7287.228" Y="-1306.419" Z="-240.6215" />
          <Vector3 X="-7287.693" Y="-1300.874" Z="-242.236" />
          <Vector3 X="-7288.713" Y="-1296.874" Z="-244.6147" />
          <Vector3 X="-7291.53" Y="-1292.081" Z="-248.7544" />
          <Vector3 X="-7293.547" Y="-1289.221" Z="-252.5754" />
          <Vector3 X="-7295.503" Y="-1286.446" Z="-254.9513" />
          <Vector3 X="-7298.681" Y="-1285.486" Z="-256.6522" />
          <Vector3 X="-7302.285" Y="-1285.454" Z="-257.6996" />
          <Vector3 X="-7313.846" Y="-1281.13" Z="-259.89" />
          <Vector3 X="-7319.928" Y="-1281.711" Z="-259.5528" />
          <Vector3 X="-7327.496" Y="-1287.929" Z="-258.6247" />
          <Vector3 X="-7333.736" Y="-1296.597" Z="-258.329" />
          <Vector3 X="-7341.705" Y="-1303.424" Z="-261.028" />
          <Vector3 X="-7348.252" Y="-1311.569" Z="-261.5603" />
          <Vector3 X="-7354.137" Y="-1319.86" Z="-261.898" />
          <Vector3 X="-7363.183" Y="-1325.707" Z="-263.1217" />
          <Vector3 X="-7372.347" Y="-1330.776" Z="-265.8511" />
          <Vector3 X="-7377.799" Y="-1339.436" Z="-268.7193" />
          <Vector3 X="-7376.229" Y="-1349.744" Z="-271.7942" />
          <Vector3 X="-7373.241" Y="-1359.798" Z="-272.1052" />
          <Vector3 X="-7370.838" Y="-1374.829" Z="-272.1052" />
          <Vector3 X="-7368.412" Y="-1392.69" Z="-272.1151" />
          <Vector3 X="-7369.601" Y="-1410.041" Z="-272.1165" />
          <Vector3 X="-7373.987" Y="-1426.438" Z="-272.1165" />
          <Vector3 X="-7379.785" Y="-1443.496" Z="-272.1165" />
          <Vector3 X="-7386.866" Y="-1459.499" Z="-272.1165" />
          <Vector3 X="-7393.121" Y="-1475.803" Z="-272.1151" />
          <Vector3 X="-7395.73" Y="-1493.078" Z="-272.0053" />
          <Vector3 X="-7394.644" Y="-1509.988" Z="-271.5693" />
          <Vector3 X="-7388.03" Y="-1526.631" Z="-271.0298" />
          <Vector3 X="-7375.73" Y="-1538.82" Z="-270.7652" />
          <Vector3 X="-7359.069" Y="-1543.525" Z="-271.7847" />
          <Vector3 X="-7341.737" Y="-1541.259" Z="-272.3803" />
          <Vector3 X="-7324.28" Y="-1540.124" Z="-272.8948" />
          <Vector3 X="-7306.781" Y="-1539.939" Z="-273.6113" />
          <Vector3 X="-7289.282" Y="-1539.776" Z="-274.0434" />
          <Vector3 X="-7271.783" Y="-1539.612" Z="-273.7425" />
          <Vector3 X="-7254.283" Y="-1539.466" Z="-273.2876" />
          <Vector3 X="-7243.352" Y="-1540.115" Z="-273.4745" />
          <Vector3 X="-7233.081" Y="-1541.711" Z="-273.659" />
          <Vector3 X="-7215.194" Y="-1543.885" Z="-273.1947" />
          <Vector3 X="-7198.315" Y="-1545.694" Z="-272.8874" />
          <Vector3 X="-7180.399" Y="-1547.645" Z="-270.0085" />
          <Vector3 X="-7162.984" Y="-1549.329" Z="-270.329" />
          <Vector3 X="-7146.015" Y="-1549.751" Z="-271.9732" />
          <Vector3 X="-7128.521" Y="-1550.206" Z="-272.1147" />
          <Vector3 X="-7119.266" Y="-1550.644" Z="-272.1105" />
          <Vector3 X="-7101.733" Y="-1554.786" Z="-272.0692" />
          <Vector3 X="-7085.4" Y="-1559.408" Z="-271.7213" />
          <Vector3 X="-7068.167" Y="-1562.12" Z="-271.7845" />
          <Vector3 X="-7057.374" Y="-1560.745" Z="-271.757" />
          <Vector3 X="-7050.309" Y="-1561.287" Z="-271.7406" />
          <Vector3 X="-7033.06" Y="-1558.422" Z="-270.971" />
          <Vector3 X="-7016.774" Y="-1552.287" Z="-269.7906" />
          <Vector3 X="-7005.069" Y="-1538.96" Z="-268.7763" />
          <Vector3 X="-7002.508" Y="-1533.512" Z="-268.8947" />
          <Vector3 X="-6989.227" Y="-1517.569" Z="-272.0479" />
          <Vector3 X="-6978.872" Y="-1502.923" Z="-270.7958" />
          <Vector3 X="-6973.333" Y="-1487.034" Z="-273.1512" />
          <Vector3 X="-6976.652" Y="-1470.006" Z="-271.5627" />
          <Vector3 X="-6978.67" Y="-1466.129" Z="-271.1843" />
          <Vector3 X="-6980.162" Y="-1462.016" Z="-270.8474" />
          <Vector3 X="-6986.187" Y="-1445.586" Z="-269.614" />
          <Vector3 X="-6992.496" Y="-1429.269" Z="-265.6836" />
          <Vector3 X="-7003.831" Y="-1418.498" Z="-256.864" />
          <Vector3 X="-7016.437" Y="-1422.104" Z="-248.9683" />
          <Vector3 X="-7021.68" Y="-1423.616" Z="-246.7568" />
          <Vector3 X="-7026.9" Y="-1424.179" Z="-245.7771" />
          <Vector3 X="-7037.37" Y="-1424.87" Z="-244.9264" />
          <Vector3 X="-7047.869" Y="-1424.855" Z="-243.0389" />
          <Vector3 X="-7058.319" Y="-1423.871" Z="-239.5279" />
          <Vector3 X="-7068.632" Y="-1421.966" Z="-236.0828" />
          <Vector3 X="-7078.979" Y="-1418.818" Z="-234.4796" />
          <Vector3 X="-7088.493" Y="-1414.552" Z="-233.7769" />
          <Vector3 X="-7090.955" Y="-1409.718" Z="-232.1779" />
          <Vector3 X="-7089.126" Y="-1399.724" Z="-228.158" />
          <Vector3 X="-7089.73" Y="-1389.094" Z="-222.8038" />
          <Vector3 X="-7094.701" Y="-1379.846" Z="-217.3228" />
          <Vector3 X="-7102.774" Y="-1374.351" Z="-212.581" />
          <Vector3 X="-7113.223" Y="-1375.013" Z="-207.5923" />
          <Vector3 X="-7123.658" Y="-1374.061" Z="-204.4828" />
          <Vector3 X="-7133.741" Y="-1371.278" Z="-200.2772" />
          <Vector3 X="-7137.342" Y="-1362.307" Z="-196.3294" />
          <Vector3 X="-7136.569" Y="-1355.463" Z="-195.1908" />
          <Vector3 X="-7133.557" Y="-1352.458" Z="-195.0579" />
          <Vector3 X="-7125.507" Y="-1345.716" Z="-194.0085" />
          <Vector3 X="-7118.001" Y="-1337.934" Z="-193.9369" />
          <Vector3 X="-7111.048" Y="-1330.495" Z="-193.5954" />
          <Vector3 X="-7104.422" Y="-1322.35" Z="-191.5513" />
          <Vector3 X="-7098.557" Y="-1313.654" Z="-189.6745" />
          <Vector3 X="-7096.208" Y="-1310.097" Z="-188.3216" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTETorwaToCorpse</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="-7847.295" Y="-2112.641" Z="-257.4541" />
          <Vector3 X="-7853.995" Y="-2103.339" Z="-264.7447" />
          <Vector3 X="-7853.857" Y="-2097.92" Z="-266.6654" />
          <Vector3 X="-7847.097" Y="-2088.009" Z="-272.2257" />
          <Vector3 X="-7842.025" Y="-2082.268" Z="-272.572" />
          <Vector3 X="-7833.096" Y="-2080.222" Z="-273.5989" />
          <Vector3 X="-7814.06" Y="-2083.439" Z="-272.7365" />
          <Vector3 X="-7796.62" Y="-2084.255" Z="-271.168" />
          <Vector3 X="-7779.131" Y="-2084.827" Z="-272.4593" />
          <Vector3 X="-7761.634" Y="-2085.124" Z="-270.2746" />
          <Vector3 X="-7744.142" Y="-2084.605" Z="-271.8525" />
          <Vector3 X="-7726.697" Y="-2085.038" Z="-272.1596" />
          <Vector3 X="-7709.259" Y="-2089.708" Z="-272.11" />
          <Vector3 X="-7693.057" Y="-2094.652" Z="-271.8896" />
          <Vector3 X="-7676.38" Y="-2099.958" Z="-272.0739" />
          <Vector3 X="-7668.042" Y="-2102.611" Z="-272.2177" />
          <Vector3 X="-7657.73" Y="-2106.199" Z="-272.2195" />
          <Vector3 X="-7642.33" Y="-2114.45" Z="-272.151" />
          <Vector3 X="-7628.178" Y="-2124.727" Z="-272.0177" />
          <Vector3 X="-7614.331" Y="-2136.32" Z="-271.2029" />
          <Vector3 X="-7601.426" Y="-2147.294" Z="-270.2371" />
          <Vector3 X="-7587.627" Y="-2158.031" Z="-271.4095" />
          <Vector3 X="-7572.045" Y="-2165.931" Z="-273.1842" />
          <Vector3 X="-7555.272" Y="-2170.891" Z="-271.1269" />
          <Vector3 X="-7538.141" Y="-2174.461" Z="-270.7829" />
          <Vector3 X="-7532.244" Y="-2175.669" Z="-270.3394" />
          <Vector3 X="-7522.534" Y="-2181.794" Z="-270.5539" />
          <Vector3 X="-7506.876" Y="-2189.48" Z="-271.7135" />
          <Vector3 X="-7492.022" Y="-2195.123" Z="-271.9452" />
          <Vector3 X="-7483.525" Y="-2197.211" Z="-271.9696" />
          <Vector3 X="-7464.388" Y="-2184.375" Z="-274.874" Type="Swimming" />
          <Vector3 X="-7449.431" Y="-2169.806" Z="-272.3854" />
          <Vector3 X="-7441.059" Y="-2162.74" Z="-273.225" />
          <Vector3 X="-7428.141" Y="-2142.787" Z="-274.3969" />
          <Vector3 X="-7417.245" Y="-2129.167" Z="-273.2905" />
          <Vector3 X="-7411.88" Y="-2123.694" Z="-273.3235" />
          <Vector3 X="-7411.298" Y="-2118.265" Z="-272.7312" />
          <Vector3 X="-7408.931" Y="-2100.93" Z="-272.2204" />
          <Vector3 X="-7402.995" Y="-2084.495" Z="-272.2219" />
          <Vector3 X="-7400.51" Y="-2079.012" Z="-272.2219" />
          <Vector3 X="-7386.091" Y="-2070.057" Z="-271.9946" />
          <Vector3 X="-7376.827" Y="-2069.598" Z="-273.6187" />
          <Vector3 X="-7368.347" Y="-2067.444" Z="-274.5114" />
          <Vector3 X="-7356.274" Y="-2064.083" Z="-273.5374" />
          <Vector3 X="-7352.884" Y="-2057.025" Z="-272.4459" />
          <Vector3 X="-7359.156" Y="-2040.547" Z="-271.4942" />
          <Vector3 X="-7366.255" Y="-2031.526" Z="-270.8329" />
          <Vector3 X="-7368.662" Y="-2027.259" Z="-270.6909" />
          <Vector3 X="-7369.119" Y="-2022.346" Z="-270.3957" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTETorwaToHive</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="-7846.446" Y="-2112.027" Z="-257.4079" />
          <Vector3 X="-7852.462" Y="-2105.069" Z="-263.6275" />
          <Vector3 X="-7859.549" Y="-2097.803" Z="-267.2653" />
          <Vector3 X="-7869.431" Y="-2092.599" Z="-269.4895" />
          <Vector3 X="-7885.904" Y="-2083.377" Z="-269.3196" />
          <Vector3 X="-7908.284" Y="-2069.727" Z="-270.8932" />
          <Vector3 X="-7922.958" Y="-2048.148" Z="-271.0145" />
          <Vector3 X="-7928.201" Y="-2022.762" Z="-270.9275" />
          <Vector3 X="-7924.539" Y="-1996.84" Z="-271.9714" />
          <Vector3 X="-7919.442" Y="-1971.13" Z="-270.4639" />
          <Vector3 X="-7913.311" Y="-1945.607" Z="-272.2069" />
          <Vector3 X="-7911.618" Y="-1918.682" Z="-271.473" />
          <Vector3 X="-7912.771" Y="-1907.256" Z="-270.8727" />
          <Vector3 X="-7919.409" Y="-1881.885" Z="-272.1367" />
          <Vector3 X="-7926.167" Y="-1856.521" Z="-269.4373" />
          <Vector3 X="-7932.438" Y="-1831.034" Z="-272.4219" />
          <Vector3 X="-7937.122" Y="-1805.206" Z="-272.8946" />
          <Vector3 X="-7941.588" Y="-1778.541" Z="-274.2394" />
          <Vector3 X="-7945.791" Y="-1752.63" Z="-274.8102" />
          <Vector3 X="-7947.843" Y="-1730.588" Z="-275.8053" />
          <Vector3 X="-7948.366" Y="-1722.415" Z="-276.0257" />
          <Vector3 X="-7949.119" Y="-1710.1" Z="-274.5921" />
          <Vector3 X="-7950.722" Y="-1683.899" Z="-272.6711" />
          <Vector3 X="-7952.32" Y="-1657.738" Z="-272.4867" />
          <Vector3 X="-7952.779" Y="-1631.499" Z="-272.834" />
          <Vector3 X="-7950.838" Y="-1614.406" Z="-274.3336" />
          <Vector3 X="-7944.871" Y="-1591.338" Z="-275.5072" />
          <Vector3 X="-7933.396" Y="-1567.738" Z="-273.3998" />
          <Vector3 X="-7922.19" Y="-1544.934" Z="-275.7204" />
          <Vector3 X="-7914.969" Y="-1528.381" Z="-272.5143" />
          <Vector3 X="-7911.712" Y="-1520.81" Z="-271.0559" />
          <Vector3 X="-7909.768" Y="-1516.331" Z="-270.5913" />
          <Vector3 X="-7906.514" Y="-1508.847" Z="-270.0636" />
          <Vector3 X="-7895.621" Y="-1484.044" Z="-270.2304" />
          <Vector3 X="-7885.06" Y="-1460.012" Z="-270.0812" />
          <Vector3 X="-7881.765" Y="-1452.514" Z="-269.0811" />
          <Vector3 X="-7874.585" Y="-1427.445" Z="-267.6702" />
          <Vector3 X="-7873.479" Y="-1403.847" Z="-269.9492" />
          <Vector3 X="-7876.511" Y="-1381.901" Z="-271.8777" />
          <Vector3 X="-7878.135" Y="-1368.084" Z="-272.1916" />
          <Vector3 X="-7879.905" Y="-1360.415" Z="-272.722" />
          <Vector3 X="-7883.996" Y="-1350.763" Z="-276.3971" />
          <Vector3 X="-7890.912" Y="-1342.974" Z="-280.319" />
          <Vector3 X="-7900.261" Y="-1338.214" Z="-283.9615" />
          <Vector3 X="-7910.15" Y="-1334.707" Z="-289.4917" />
          <Vector3 X="-7920.209" Y="-1331.696" Z="-295.08" />
          <Vector3 X="-7930.274" Y="-1328.705" Z="-301.4816" />
          <Vector3 X="-7940.007" Y="-1325.776" Z="-306.9565" />
          <Vector3 X="-7950.387" Y="-1322.665" Z="-308.8563" />
          <Vector3 X="-7960.596" Y="-1320.219" Z="-310.8032" />
          <Vector3 X="-7970.849" Y="-1317.951" Z="-312.1929" />
          <Vector3 X="-7979.138" Y="-1315.962" Z="-313.1674" />
          <Vector3 X="-7982.671" Y="-1315.209" Z="-313.4227" />
          <Vector3 X="-7989.981" Y="-1313.839" Z="-314.9806" />
          <Vector3 X="-7993.125" Y="-1311.463" Z="-315.6661" />
          <Vector3 X="-7999.088" Y="-1306.319" Z="-318.8106" />
          <Vector3 X="-8003.205" Y="-1303.062" Z="-320.2097" />
          <Vector3 X="-8011.58" Y="-1298.574" Z="-321.1976" />
          <Vector3 X="-8025.237" Y="-1298.276" Z="-324.1624" />
          <Vector3 X="-8031.641" Y="-1297.322" Z="-326.5558" />
          <Vector3 X="-8041.042" Y="-1292.653" Z="-329.0707" />
          <Vector3 X="-8048.118" Y="-1287.899" Z="-329.9353" />
          <Vector3 X="-8054.497" Y="-1284.524" Z="-330.7808" />
          <Vector3 X="-8059.462" Y="-1279.77" Z="-333.0597" />
          <Vector3 X="-8063.709" Y="-1275.232" Z="-332.9795" />
          <Vector3 X="-8067.971" Y="-1270.678" Z="-330.8935" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTETorwaToMarshallRefuge</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="-7844.795" Y="-2114.214" Z="-255.8216" />
          <Vector3 X="-7848.172" Y="-2108.851" Z="-260.0511" />
          <Vector3 X="-7849.739" Y="-2105.723" Z="-262.5573" />
          <Vector3 X="-7850.821" Y="-2102.398" Z="-264.7492" />
          <Vector3 X="-7850.794" Y="-2097.728" Z="-266.9459" />
          <Vector3 X="-7844.823" Y="-2081.622" Z="-272.2946" />
          <Vector3 X="-7830.375" Y="-2071.953" Z="-271.9996" />
          <Vector3 X="-7812.09" Y="-2066.596" Z="-274.8953" Type="Swimming" />
          <Vector3 X="-7792.495" Y="-2066.272" Z="-271.8276" />
          <Vector3 X="-7781.624" Y="-2067.51" Z="-271.0417" />
          <Vector3 X="-7769.586" Y="-2071.11" Z="-271.9908" />
          <Vector3 X="-7752.271" Y="-2076.229" Z="-271.8988" />
          <Vector3 X="-7735.335" Y="-2080.632" Z="-272.5813" />
          <Vector3 X="-7720.543" Y="-2084.517" Z="-272.3131" />
          <Vector3 X="-7703.992" Y="-2090.152" Z="-272.0333" />
          <Vector3 X="-7688.314" Y="-2097.902" Z="-271.8351" />
          <Vector3 X="-7673.502" Y="-2107.219" Z="-272.0616" />
          <Vector3 X="-7658.788" Y="-2116.674" Z="-272.1259" />
          <Vector3 X="-7644.536" Y="-2125.831" Z="-271.5049" />
          <Vector3 X="-7629.342" Y="-2135.593" Z="-271.1539" />
          <Vector3 X="-7614.336" Y="-2144.544" Z="-270.7878" />
          <Vector3 X="-7598.257" Y="-2151.446" Z="-270.3774" />
          <Vector3 X="-7583.606" Y="-2159.932" Z="-272.5079" />
          <Vector3 X="-7567.539" Y="-2168.163" Z="-272.5446" />
          <Vector3 X="-7551.5" Y="-2175.155" Z="-271.1504" />
          <Vector3 X="-7546.459" Y="-2177.253" Z="-271.0981" />
          <Vector3 X="-7530.429" Y="-2184.273" Z="-270.2647" />
          <Vector3 X="-7513.953" Y="-2191.668" Z="-271.3752" />
          <Vector3 X="-7500.126" Y="-2201.978" Z="-272.0119" />
          <Vector3 X="-7490.711" Y="-2216.043" Z="-272.1965" />
          <Vector3 X="-7481.345" Y="-2231.484" Z="-272.2173" />
          <Vector3 X="-7472.314" Y="-2245.814" Z="-271.9339" />
          <Vector3 X="-7461.618" Y="-2260.351" Z="-269.6657" />
          <Vector3 X="-7446.951" Y="-2269.542" Z="-269.6502" />
          <Vector3 X="-7430.079" Y="-2274.184" Z="-270.3188" />
          <Vector3 X="-7413.683" Y="-2278.438" Z="-271.3777" />
          <Vector3 X="-7395.963" Y="-2281.922" Z="-269.9192" />
          <Vector3 X="-7379.271" Y="-2284.793" Z="-269.4368" />
          <Vector3 X="-7367.875" Y="-2286.17" Z="-269.5975" />
          <Vector3 X="-7354.794" Y="-2287.24" Z="-269.6927" />
          <Vector3 X="-7350.425" Y="-2287.454" Z="-269.6852" />
          <Vector3 X="-7330.809" Y="-2288.91" Z="-269.4944" />
          <Vector3 X="-7312.873" Y="-2290.908" Z="-269.3645" />
          <Vector3 X="-7296.009" Y="-2292.446" Z="-269.4944" />
          <Vector3 X="-7278.608" Y="-2290.735" Z="-269.1197" />
          <Vector3 X="-7274.269" Y="-2290.177" Z="-269.0538" />
          <Vector3 X="-7269.411" Y="-2289.542" Z="-269.0383" />
          <Vector3 X="-7252.109" Y="-2286.915" Z="-268.6955" />
          <Vector3 X="-7234.81" Y="-2284.275" Z="-269.1258" />
          <Vector3 X="-7217.494" Y="-2281.743" Z="-269.7563" />
          <Vector3 X="-7200.155" Y="-2279.379" Z="-269.5108" />
          <Vector3 X="-7182.792" Y="-2277.375" Z="-269.5984" />
          <Vector3 X="-7165.403" Y="-2275.412" Z="-269.0769" />
          <Vector3 X="-7148.083" Y="-2272.919" Z="-267.6051" />
          <Vector3 X="-7130.948" Y="-2269.574" Z="-266.3876" />
          <Vector3 X="-7126.975" Y="-2267.741" Z="-266.4015" />
          <Vector3 X="-7118.01" Y="-2263.704" Z="-266.9126" />
          <Vector3 X="-7101.786" Y="-2257.146" Z="-268.53" />
          <Vector3 X="-7085.561" Y="-2250.588" Z="-270.5437" />
          <Vector3 X="-7068.837" Y="-2243.771" Z="-271.7548" />
          <Vector3 X="-7053.813" Y="-2237.177" Z="-270.88" />
          <Vector3 X="-7038.19" Y="-2229.294" Z="-269.0086" />
          <Vector3 X="-7021.683" Y="-2220.755" Z="-267.3517" />
          <Vector3 X="-7006.14" Y="-2212.714" Z="-270.0168" />
          <Vector3 X="-6991.347" Y="-2203.487" Z="-268.8432" />
          <Vector3 X="-6987.285" Y="-2199.838" Z="-268.3834" />
          <Vector3 X="-6982.911" Y="-2192.914" Z="-268.3854" />
          <Vector3 X="-6980.358" Y="-2184.555" Z="-269.7297" />
          <Vector3 X="-6977.729" Y="-2167.27" Z="-270.2888" />
          <Vector3 X="-6977.162" Y="-2149.23" Z="-272.6599" />
          <Vector3 X="-6975.115" Y="-2131.892" Z="-271.3806" />
          <Vector3 X="-6970.052" Y="-2115.14" Z="-272.0804" />
          <Vector3 X="-6964.488" Y="-2097.439" Z="-271.9634" />
          <Vector3 X="-6955.898" Y="-2083.478" Z="-271.9492" />
          <Vector3 X="-6946.44" Y="-2068.767" Z="-271.2943" />
          <Vector3 X="-6937.669" Y="-2053.623" Z="-271.8545" />
          <Vector3 X="-6928.927" Y="-2038.464" Z="-271.4345" />
          <Vector3 X="-6922.536" Y="-2025.774" Z="-270.5979" />
          <Vector3 X="-6917.546" Y="-2014.253" Z="-269.959" />
          <Vector3 X="-6913.653" Y="-1996.648" Z="-269.792" />
          <Vector3 X="-6912.06" Y="-1979.783" Z="-270.1152" />
          <Vector3 X="-6910.398" Y="-1961.8" Z="-270.9212" />
          <Vector3 X="-6907.981" Y="-1944.472" Z="-271.4455" />
          <Vector3 X="-6903.69" Y="-1927.515" Z="-271.586" />
          <Vector3 X="-6898.779" Y="-1910.718" Z="-272.0513" />
          <Vector3 X="-6894.075" Y="-1894.444" Z="-271.8058" />
          <Vector3 X="-6890.46" Y="-1876.752" Z="-270.6792" />
          <Vector3 X="-6888.354" Y="-1866.037" Z="-270.1697" />
          <Vector3 X="-6887.3" Y="-1860.68" Z="-270.1095" />
          <Vector3 X="-6883.831" Y="-1843.531" Z="-271.262" />
          <Vector3 X="-6879.742" Y="-1826.521" Z="-272.7281" />
          <Vector3 X="-6877.349" Y="-1809.186" Z="-272.3297" />
          <Vector3 X="-6874.857" Y="-1791.865" Z="-271.9155" />
          <Vector3 X="-6870.565" Y="-1774.928" Z="-273.0599" />
          <Vector3 X="-6863.855" Y="-1759.952" Z="-272.985" />
          <Vector3 X="-6857.919" Y="-1747.041" Z="-272.7383" />
          <Vector3 X="-6850.584" Y="-1731.153" Z="-271.7265" />
          <Vector3 X="-6842.241" Y="-1715.786" Z="-271.6501" />
          <Vector3 X="-6829.777" Y="-1703.635" Z="-270.0867" />
          <Vector3 X="-6816.747" Y="-1691.971" Z="-269.8611" />
          <Vector3 X="-6805.799" Y="-1678.344" Z="-269.575" />
          <Vector3 X="-6797.556" Y="-1662.917" Z="-269.6396" />
          <Vector3 X="-6789.646" Y="-1647.307" Z="-271.5415" />
          <Vector3 X="-6786.181" Y="-1640.469" Z="-271.4727" />
          <Vector3 X="-6780.196" Y="-1623.468" Z="-272.2161" />
          <Vector3 X="-6774.291" Y="-1606.994" Z="-272.2103" />
          <Vector3 X="-6768.763" Y="-1590.39" Z="-272.2214" />
          <Vector3 X="-6763.262" Y="-1573.778" Z="-272.2214" />
          <Vector3 X="-6757.76" Y="-1557.165" Z="-272.2214" />
          <Vector3 X="-6752.206" Y="-1540.57" Z="-272.2209" />
          <Vector3 X="-6745.572" Y="-1524.395" Z="-271.69" />
          <Vector3 X="-6738.469" Y="-1508.401" Z="-270.8612" />
          <Vector3 X="-6731.365" Y="-1492.407" Z="-270.6675" />
          <Vector3 X="-6723.419" Y="-1476.826" Z="-270.8859" />
          <Vector3 X="-6714.024" Y="-1462.065" Z="-270.8987" />
          <Vector3 X="-6708.754" Y="-1453.72" Z="-269.4659" />
          <Vector3 X="-6703.98" Y="-1442.12" Z="-268.7103" />
          <Vector3 X="-6702.536" Y="-1424.749" Z="-269.3477" />
          <Vector3 X="-6702.713" Y="-1414.881" Z="-270.374" />
          <Vector3 X="-6699.109" Y="-1405.783" Z="-270.6228" />
          <Vector3 X="-6699.66" Y="-1389.519" Z="-270.4006" />
          <Vector3 X="-6703.532" Y="-1371.387" Z="-269.6357" />
          <Vector3 X="-6706.73" Y="-1355.288" Z="-270.1154" />
          <Vector3 X="-6709.033" Y="-1337.417" Z="-271.7412" />
          <Vector3 X="-6708.504" Y="-1319.443" Z="-270.9632" />
          <Vector3 X="-6703.284" Y="-1302.782" Z="-269.4907" />
          <Vector3 X="-6694.92" Y="-1288.085" Z="-269.7098" />
          <Vector3 X="-6683.638" Y="-1274.732" Z="-269.3753" />
          <Vector3 X="-6670.985" Y="-1262.655" Z="-269.7906" />
          <Vector3 X="-6657.389" Y="-1251.638" Z="-271.7418" />
          <Vector3 X="-6642.339" Y="-1241.752" Z="-272.222" />
          <Vector3 X="-6626.827" Y="-1233.65" Z="-272.0453" />
          <Vector3 X="-6611.857" Y="-1225.723" Z="-270.5473" />
          <Vector3 X="-6597.067" Y="-1216.409" Z="-269.037" />
          <Vector3 X="-6583.417" Y="-1204.591" Z="-266.4806" />
          <Vector3 X="-6570.705" Y="-1192.566" Z="-264.6274" />
          <Vector3 X="-6560.031" Y="-1180.117" Z="-262.7705" />
          <Vector3 X="-6548.645" Y="-1166.147" Z="-262.8641" />
          <Vector3 X="-6536.578" Y="-1154.219" Z="-263.9074" />
          <Vector3 X="-6523.786" Y="-1141.532" Z="-265.8528" />
          <Vector3 X="-6511.878" Y="-1128.709" Z="-268.2925" />
          <Vector3 X="-6498.586" Y="-1117.411" Z="-272.4452" />
          <Vector3 X="-6481.577" Y="-1112.503" Z="-276.1881" />
          <Vector3 X="-6464.709" Y="-1112.417" Z="-274.205" />
          <Vector3 X="-6448.432" Y="-1106.23" Z="-274.4232" />
          <Vector3 X="-6433.607" Y="-1096.971" Z="-272.5983" />
          <Vector3 X="-6419.845" Y="-1088.043" Z="-269.1891" />
          <Vector3 X="-6400.221" Y="-1086.703" Z="-271.0299" />
          <Vector3 X="-6383.829" Y="-1082.63" Z="-273.7648" />
          <Vector3 X="-6368.505" Y="-1074.24" Z="-272.3247" />
          <Vector3 X="-6359.575" Y="-1068.921" Z="-272.222" />
          <Vector3 X="-6355.226" Y="-1067.443" Z="-272.1815" />
          <Vector3 X="-6351.86" Y="-1066.132" Z="-271.8309" />
          <Vector3 X="-6342.043" Y="-1062.408" Z="-269.3895" />
          <Vector3 X="-6331.981" Y="-1059.409" Z="-264.2061" />
          <Vector3 X="-6321.658" Y="-1057.6" Z="-261.0003" />
          <Vector3 X="-6311.192" Y="-1058.257" Z="-255.1757" />
          <Vector3 X="-6300.836" Y="-1056.754" Z="-249.709" />
          <Vector3 X="-6294.662" Y="-1056.236" Z="-246.0276" />
          <Vector3 X="-6288.459" Y="-1060.996" Z="-242.2526" />
          <Vector3 X="-6281.891" Y="-1066.464" Z="-238.662" />
          <Vector3 X="-6275.421" Y="-1072.017" Z="-235.0927" />
          <Vector3 X="-6268.303" Y="-1079.691" Z="-230.3056" />
          <Vector3 X="-6263.707" Y="-1089.124" Z="-225.937" />
          <Vector3 X="-6260.382" Y="-1094.391" Z="-222.3431" />
          <Vector3 X="-6253.199" Y="-1098.815" Z="-218.4946" />
          <Vector3 X="-6245.83" Y="-1100.393" Z="-217.6174" />
          <Vector3 X="-6235.569" Y="-1102.619" Z="-218.9486" />
          <Vector3 X="-6225.316" Y="-1104.874" Z="-219.3545" />
          <Vector3 X="-6214.83" Y="-1105.111" Z="-218.6618" />
          <Vector3 X="-6204.385" Y="-1104.127" Z="-217.5841" />
          <Vector3 X="-6194.312" Y="-1101.202" Z="-216.0332" />
          <Vector3 X="-6184.333" Y="-1097.936" Z="-214.0386" />
          <Vector3 X="-6174.354" Y="-1094.669" Z="-211.547" />
          <Vector3 X="-6152.889" Y="-1104.161" Z="-208.8932" />
          <Vector3 X="-6143.445" Y="-1112.273" Z="-210.6108" />
          <Vector3 X="-6135.498" Y="-1119.639" Z="-208.3304" />
          <Vector3 X="-6127.703" Y="-1126.159" Z="-200.5112" />
          <Vector3 X="-6119.517" Y="-1132.734" Z="-191.1311" />
          <Vector3 X="-6113.144" Y="-1137.887" Z="-187.6502" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTEVulcanoTopToGoblin</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="-7097.646" Y="-1312.293" Z="-189.1173" />
          <Vector3 X="-7102.189" Y="-1318.308" Z="-190.9764" />
          <Vector3 X="-7108.532" Y="-1326.676" Z="-192.6996" />
          <Vector3 X="-7114.993" Y="-1334.951" Z="-193.9348" />
          <Vector3 X="-7121.473" Y="-1342.808" Z="-193.9749" />
          <Vector3 X="-7128.187" Y="-1350.881" Z="-194.3838" />
          <Vector3 X="-7134.195" Y="-1359.829" Z="-195.9368" />
          <Vector3 X="-7134.584" Y="-1369.976" Z="-199.6911" />
          <Vector3 X="-7126.723" Y="-1375.234" Z="-203.6045" />
          <Vector3 X="-7115.925" Y="-1374.628" Z="-206.8839" />
          <Vector3 X="-7105.756" Y="-1374.054" Z="-211.0599" />
          <Vector3 X="-7099.258" Y="-1374.36" Z="-214.0436" />
          <Vector3 X="-7096.233" Y="-1376.319" Z="-215.4854" />
          <Vector3 X="-7091.874" Y="-1384.034" Z="-219.9599" />
          <Vector3 X="-7089.106" Y="-1394.387" Z="-225.4392" />
          <Vector3 X="-7088.392" Y="-1404.542" Z="-230.4902" />
          <Vector3 X="-7084.398" Y="-1414.366" Z="-234.1326" />
          <Vector3 X="-7075.635" Y="-1419.417" Z="-234.3569" />
          <Vector3 X="-7065.616" Y="-1422.536" Z="-237.2876" />
          <Vector3 X="-7055.253" Y="-1424.179" Z="-240.4332" />
          <Vector3 X="-7044.829" Y="-1425.432" Z="-243.5509" />
          <Vector3 X="-7034.429" Y="-1426.879" Z="-245.6741" />
          <Vector3 X="-7024.184" Y="-1425.565" Z="-246.0743" />
          <Vector3 X="-7014.426" Y="-1420.907" Z="-250.2124" />
          <Vector3 X="-7004.79" Y="-1417.639" Z="-256.1478" />
          <Vector3 X="-6996.512" Y="-1411.347" Z="-262.9716" />
          <Vector3 X="-6990.475" Y="-1402.385" Z="-268.0828" />
          <Vector3 X="-6986.272" Y="-1392.814" Z="-270.4201" />
          <Vector3 X="-6984.834" Y="-1382.767" Z="-271.6053" />
          <Vector3 X="-6984.729" Y="-1378.841" Z="-271.8555" />
          <Vector3 X="-6985.045" Y="-1368.066" Z="-272.2796" />
          <Vector3 X="-6988.613" Y="-1358.53" Z="-272.0309" />
          <Vector3 X="-6992.148" Y="-1348.643" Z="-271.7576" />
          <Vector3 X="-6996.412" Y="-1334.978" Z="-271.4939" />
          <Vector3 X="-7001.143" Y="-1318.683" Z="-271.6212" />
          <Vector3 X="-7004.313" Y="-1301.477" Z="-270.7763" />
          <Vector3 X="-7007.68" Y="-1284.332" Z="-268.7236" />
          <Vector3 X="-7011.709" Y="-1267.307" Z="-270.2252" />
          <Vector3 X="-7014.712" Y="-1250.071" Z="-271.6006" />
          <Vector3 X="-7017.135" Y="-1232.74" Z="-270.0426" />
          <Vector3 X="-7020.884" Y="-1215.667" Z="-270.3416" />
          <Vector3 X="-7025.527" Y="-1198.794" Z="-270.6906" />
          <Vector3 X="-7030.17" Y="-1181.921" Z="-270.748" />
          <Vector3 X="-7034.582" Y="-1164.992" Z="-272.1444" />
          <Vector3 X="-7036.181" Y="-1147.651" Z="-272.1212" />
          <Vector3 X="-7033.971" Y="-1130.296" Z="-271.5905" />
          <Vector3 X="-7033.356" Y="-1112.876" Z="-267.7401" />
          <Vector3 X="-7039.728" Y="-1096.632" Z="-264.6194" />
          <Vector3 X="-7045.181" Y="-1088.476" Z="-263.5472" />
          <Vector3 X="-7057.868" Y="-1076.427" Z="-264.8657" />
          <Vector3 X="-7072.148" Y="-1065.438" Z="-268.7193" />
          <Vector3 X="-7086.823" Y="-1056.969" Z="-270.9207" />
          <Vector3 X="-7102.391" Y="-1049.039" Z="-271.9754" />
          <Vector3 X="-7115.277" Y="-1037.227" Z="-272.2496" />
          <Vector3 X="-7126.595" Y="-1023.899" Z="-272.2235" />
          <Vector3 X="-7130.469" Y="-1018.623" Z="-272.2235" />
          <Vector3 X="-7131.936" Y="-1015.102" Z="-272.2235" />
          <Vector3 X="-7132.038" Y="-1006.352" Z="-272.2009" />
          <Vector3 X="-7134.186" Y="-989.0186" Z="-271.898" />
          <Vector3 X="-7139.426" Y="-972.3372" Z="-270.6383" />
          <Vector3 X="-7145.565" Y="-955.9496" Z="-271.3901" />
          <Vector3 X="-7151.394" Y="-939.4491" Z="-271.1328" />
          <Vector3 X="-7157.067" Y="-922.894" Z="-272.3898" />
          <Vector3 X="-7162.521" Y="-906.2666" Z="-271.9355" />
          <Vector3 X="-7165.965" Y="-889.1212" Z="-271.431" />
          <Vector3 X="-7166.856" Y="-871.6773" Z="-272.2146" />
          <Vector3 X="-7164.244" Y="-854.4221" Z="-271.4902" />
          <Vector3 X="-7158.792" Y="-837.7942" Z="-269.9126" />
          <Vector3 X="-7153.54" Y="-821.101" Z="-271.2132" />
          <Vector3 X="-7148.39" Y="-804.376" Z="-270.4836" />
          <Vector3 X="-7144.309" Y="-787.3645" Z="-270.5225" />
          <Vector3 X="-7140.583" Y="-770.2655" Z="-271.8791" />
          <Vector3 X="-7136.858" Y="-753.1666" Z="-271.4498" />
          <Vector3 X="-7133.133" Y="-736.0676" Z="-270.6031" />
          <Vector3 X="-7129.408" Y="-718.9688" Z="-271.9102" />
          <Vector3 X="-7126.587" Y="-701.7205" Z="-271.3028" />
          <Vector3 X="-7125.733" Y="-684.2423" Z="-271.161" />
          <Vector3 X="-7125.42" Y="-666.7468" Z="-271.1245" />
          <Vector3 X="-7125.454" Y="-649.2495" Z="-271.273" />
          <Vector3 X="-7129.307" Y="-632.3214" Z="-269.8456" />
          <Vector3 X="-7135" Y="-625.0832" Z="-269.0607" />
          <Vector3 X="-7146.684" Y="-616.0479" Z="-270.7607" />
          <Vector3 X="-7162.201" Y="-608.2433" Z="-270.9348" />
          <Vector3 X="-7180.08" Y="-606.673" Z="-270.7626" />
          <Vector3 X="-7196.983" Y="-608.1225" Z="-270.0939" />
          <Vector3 X="-7204.507" Y="-609.5829" Z="-269.8089" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTEWestPylonToRingo</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="-7420.286" Y="-333.3906" Z="-229.069" />
          <Vector3 X="-7414.227" Y="-328.6964" Z="-229.8412" />
          <Vector3 X="-7403.608" Y="-323.2281" Z="-230.6593" />
          <Vector3 X="-7395.161" Y="-327.1384" Z="-233.053" />
          <Vector3 X="-7385.455" Y="-333.19" Z="-239.3731" />
          <Vector3 X="-7381.724" Y="-340.4377" Z="-243.7779" />
          <Vector3 X="-7379.821" Y="-350.6567" Z="-251.313" />
          <Vector3 X="-7375.089" Y="-358.003" Z="-256.5522" />
          <Vector3 X="-7368.142" Y="-363.312" Z="-262.002" />
          <Vector3 X="-7356.852" Y="-369.7779" Z="-269.1992" />
          <Vector3 X="-7342.602" Y="-365.9154" Z="-269.1417" />
          <Vector3 X="-7325.251" Y="-364.0218" Z="-268.8307" />
          <Vector3 X="-7308.04" Y="-367.0477" Z="-268.9341" />
          <Vector3 X="-7291.294" Y="-372.1105" Z="-268.6882" />
          <Vector3 X="-7274.817" Y="-378.0063" Z="-267.197" />
          <Vector3 X="-7257.816" Y="-384.0991" Z="-267.1028" />
          <Vector3 X="-7233.105" Y="-392.9548" Z="-269.2334" />
          <Vector3 X="-7208.41" Y="-401.8561" Z="-270.0463" />
          <Vector3 X="-7184.374" Y="-412.3757" Z="-272.2221" />
          <Vector3 X="-7161.72" Y="-425.5228" Z="-271.0244" />
          <Vector3 X="-7149.33" Y="-448.3869" Z="-271.6713" />
          <Vector3 X="-7144.015" Y="-474.0236" Z="-267.6033" />
          <Vector3 X="-7141.291" Y="-500.1319" Z="-266.4965" />
          <Vector3 X="-7137.415" Y="-526.088" Z="-271.5611" />
          <Vector3 X="-7136.308" Y="-552.3132" Z="-272.2218" />
          <Vector3 X="-7132.664" Y="-578.2883" Z="-271.6906" />
          <Vector3 X="-7128.144" Y="-604.0959" Z="-270.8576" />
          <Vector3 X="-7125.057" Y="-630.157" Z="-270.1428" />
          <Vector3 X="-7127.775" Y="-644.4993" Z="-270.5496" />
          <Vector3 X="-7137.042" Y="-669.059" Z="-270.2745" />
          <Vector3 X="-7145.576" Y="-693.8209" Z="-271.8491" />
          <Vector3 X="-7148.798" Y="-719.8696" Z="-270.2581" />
          <Vector3 X="-7152.731" Y="-745.811" Z="-271.6568" />
          <Vector3 X="-7156.624" Y="-766.7673" Z="-271.0143" />
          <Vector3 X="-7162.23" Y="-794.9316" Z="-270.9759" />
          <Vector3 X="-7168.671" Y="-820.373" Z="-270.6862" />
          <Vector3 X="-7178.443" Y="-844.692" Z="-271.8086" />
          <Vector3 X="-7191.998" Y="-867.1672" Z="-266.6632" />
          <Vector3 X="-7206.076" Y="-889.321" Z="-272.0121" />
          <Vector3 X="-7221.487" Y="-910.5693" Z="-271.0288" />
          <Vector3 X="-7237.348" Y="-931.4845" Z="-272.6983" />
          <Vector3 X="-7252.457" Y="-952.9293" Z="-271.5739" />
          <Vector3 X="-7265.009" Y="-975.9789" Z="-270.2233" />
          <Vector3 X="-7276.939" Y="-999.353" Z="-272.0831" />
          <Vector3 X="-7284.021" Y="-1020.337" Z="-272.3" />
          <Vector3 X="-7292.035" Y="-1036.513" Z="-272.3751" />
          <Vector3 X="-7304.63" Y="-1059.544" Z="-271.6743" />
          <Vector3 X="-7317.307" Y="-1082.53" Z="-270.3401" />
          <Vector3 X="-7330.619" Y="-1105.1" Z="-269.3444" />
          <Vector3 X="-7334.7" Y="-1111.213" Z="-268.6888" />
          <Vector3 X="-7349.709" Y="-1127.509" Z="-269.3736" />
          <Vector3 X="-7365.95" Y="-1148.099" Z="-271.2132" />
          <Vector3 X="-7372.753" Y="-1164.654" Z="-271.3807" />
          <Vector3 X="-7375.142" Y="-1184.17" Z="-271.7097" />
          <Vector3 X="-7376.462" Y="-1210.383" Z="-271.1731" />
          <Vector3 X="-7376.344" Y="-1236.614" Z="-270.8128" />
          <Vector3 X="-7376.678" Y="-1262.84" Z="-272.0345" />
          <Vector3 X="-7377.851" Y="-1289.01" Z="-270.8909" />
          <Vector3 X="-7377.806" Y="-1293.892" Z="-270.5715" />
          <Vector3 X="-7350.914" Y="-1303.079" Z="-263.9902" />
          <Vector3 X="-7345.631" Y="-1301.649" Z="-262.5955" />
          <Vector3 X="-7342.261" Y="-1300.703" Z="-261.4366" />
          <Vector3 X="-7338.903" Y="-1299.713" Z="-260.1123" />
          <Vector3 X="-7335.555" Y="-1298.692" Z="-258.6884" />
          <Vector3 X="-7332.373" Y="-1297.263" Z="-257.6316" />
          <Vector3 X="-7324.692" Y="-1291.863" Z="-256.3793" />
          <Vector3 X="-7319.831" Y="-1289.202" Z="-256.0708" />
          <Vector3 X="-7316.28" Y="-1289.864" Z="-254.4517" />
          <Vector3 X="-7309.087" Y="-1292.109" Z="-251.2132" />
          <Vector3 X="-7304.805" Y="-1294.563" Z="-249.8482" />
          <Vector3 X="-7300.655" Y="-1295.535" Z="-247.5772" />
          <Vector3 X="-7296.547" Y="-1296.664" Z="-244.4513" />
          <Vector3 X="-7294.483" Y="-1298.702" Z="-242.3792" />
          <Vector3 X="-7290.465" Y="-1303.053" Z="-241.0089" />
          <Vector3 X="-7286.667" Y="-1307.149" Z="-240.6218" />
          <Vector3 X="-7279.499" Y="-1314.821" Z="-240.6218" />
          <Vector3 X="-7272.329" Y="-1322.492" Z="-240.5544" />
          <Vector3 X="-7265.16" Y="-1330.164" Z="-240.6088" />
          <Vector3 X="-7258.037" Y="-1337.877" Z="-240.4388" />
          <Vector3 X="-7251.359" Y="-1345.977" Z="-237.9032" />
          <Vector3 X="-7246.434" Y="-1355.226" Z="-234.9613" />
          <Vector3 X="-7244.863" Y="-1358.477" Z="-234.6671" />
          <Vector3 X="-7241.208" Y="-1368.196" Z="-231.4337" />
          <Vector3 X="-7242.761" Y="-1374.188" Z="-231.3818" />
          <Vector3 X="-7244.938" Y="-1384.423" Z="-231.6328" />
          <Vector3 X="-7244.915" Y="-1392.599" Z="-231.7743" />
          <Vector3 X="-7242.952" Y="-1398.185" Z="-232.1321" />
          <Vector3 X="-7237.685" Y="-1407.193" Z="-232.547" />
          <Vector3 X="-7228.125" Y="-1409.882" Z="-230.9877" />
          <Vector3 X="-7219.99" Y="-1403.361" Z="-231.3464" />
          <Vector3 X="-7211.268" Y="-1397.521" Z="-231.9563" />
          <Vector3 X="-7202.574" Y="-1391.64" Z="-232.416" />
          <Vector3 X="-7198.343" Y="-1388.531" Z="-232.0871" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Shizzle's Flyer</Name>
      <QuestId>
        <int>4503</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="-6842.369" Y="-1821.175" Z="-271.3524" />
          <Vector3 X="-6947.128" Y="-1666.92" Z="-271.0287" />
          <Vector3 X="-7131.182" Y="-1589.16" Z="-271.7848" />
          <Vector3 X="-7348.698" Y="-1630.536" Z="-272.7322" />
          <Vector3 X="-7518.458" Y="-1673.236" Z="-281.3985" />
          <Vector3 X="-7520.555" Y="-1532.452" Z="-271.9885" />
        </HotSpots>
        <EntryTarget>
          <int>9162</int>
          <int>9163</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>true</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Shizzle's Flyer2</Name>
      <QuestId>
        <int>4503</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="-6521.79" Y="-2042.843" Z="-272.2218" />
          <Vector3 X="-6961.98" Y="-2340.369" Z="-221.7402" />
          <Vector3 X="-6964.416" Y="-2432.557" Z="-210.6869" />
        </HotSpots>
        <EntryTarget>
          <int>9165</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>true</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>The Apes of Un'Goro</Name>
      <QuestId>
        <int>4289</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="-6379.629" Y="-1811.212" Z="-265.7233" />
          <Vector3 X="-6320.976" Y="-1905.802" Z="-266.9933" />
        </HotSpots>
        <EntryTarget>
          <int>6514</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>true</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>The Apes of Un'Goro2</Name>
      <QuestId>
        <int>4289</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="-6415.745" Y="-1807.244" Z="-271.126" />
          <Vector3 X="-6320.976" Y="-1905.802" Z="-266.9933" />
        </HotSpots>
        <EntryTarget>
          <int>6513</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>true</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>The Apes of Un'Goro3</Name>
      <QuestId>
        <int>4289</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="-6371.518" Y="-1853.264" Z="-259.3475" />
          <Vector3 X="-6320.976" Y="-1905.802" Z="-266.9933" />
        </HotSpots>
        <EntryTarget>
          <int>6516</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>true</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>The Bait for Lar'korwi</Name>
      <QuestId>
        <int>4292</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="-7196.45" Y="-2405.63" Z="-217.2884" />
        </HotSpots>
        <EntryTarget>
          <int>9684</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>true</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>The Eastern Pylon</Name>
      <QuestId>
        <int>4287</int>
      </QuestId>
      <QuestType>Gatherer</QuestType>
      <QuestClass xsi:type="GathererEasyQuestClass">
        <HotSpots />
        <EntryIdObjects />
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>true</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>The Fare of Lar'korwi</Name>
      <QuestId>
        <int>4290</int>
      </QuestId>
      <QuestType>Gatherer</QuestType>
      <QuestClass xsi:type="GathererEasyQuestClass">
        <HotSpots>
          <Vector3 X="-7367.906" Y="-2015.916" Z="-269.8919" />
        </HotSpots>
        <EntryIdObjects>
          <int>1668863</int>
        </EntryIdObjects>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>The New Springs</Name>
      <QuestId>
        <int>980</int>
      </QuestId>
      <QuestType>None</QuestType>
      <QuestClass />
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>The Northern Pylon</Name>
      <QuestId>
        <int>4285</int>
      </QuestId>
      <QuestType>None</QuestType>
      <QuestClass />
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>true</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>The Scent of Lar'korwi</Name>
      <QuestId>
        <int>4291</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="-7767.291" Y="-1957.7" Z="-271.9535" />
          <Vector3 X="-7952.458" Y="-1793.205" Z="-272.9804" />
          <Vector3 X="-7895.607" Y="-1623.383" Z="-269.878" />
          <Vector3 X="-7749.667" Y="-1720.991" Z="-272.222" />
          <Vector3 X="-7517.679" Y="-1829.118" Z="-272.7592" />
        </HotSpots>
        <EntryTarget>
          <int>9683</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>true</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>The Western Pylon</Name>
      <QuestId>
        <int>4288</int>
      </QuestId>
      <QuestType>Gatherer</QuestType>
      <QuestClass xsi:type="GathererEasyQuestClass">
        <HotSpots />
        <EntryIdObjects />
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>true</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
  </EasyQuests>
  <Script>using robotManager.Helpful;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Threading;
using wManager.Events;
using wManager.Wow.Bot.Tasks;
using wManager.Wow.Enums;
using wManager.Wow.Helpers;
using wManager.Wow.ObjectManager;
using System.ComponentModel;
using System.Configuration;
using System.Net;
using System.Windows.Forms;
using robotManager.Products;
using System.Threading.Tasks;



//FlightMaster
public class FlightMaster
{

    private int priority;

    public FlightMaster(int priority)
    {
        this.priority = priority;
    }

    public static void main(String[] args)
    {
        FlightMaster temp = new FlightMaster(1);
        Logging.Write("Stuff");
    }


    public static int timer = 0;
    public static Vector3 myPositionAtStart = new Vector3(0, 0, 0);
    public static bool _deleteOldPath = false;
    public static bool _isLaunched ;
    static bool longMoveState = false;
    static Vector3 checkDistanceToDestination;
    private static int travelDistance = 1250;
    private static float saveDistance;
    public static Vector3 destinationVector = new Vector3(0, 0, 0);

    //public static MovementEvents.MovementCancelableHandler MovementEventsOnOnMovementPulse { get; private set; }

    // public static List&lt;FlightMasterDB&gt; FML = fillDB();

    public void startFlightMaster()
    {
        Logging.Write("[FNV_Quester]: Flight Master initialized");
        _isLaunched = true;
        FNVQuesterFlightMaster.Load();
        //flightMasterLoop();
    }

    public void start()
    {
        //Logging.Write("Subscribing to event");
       // SubscribeToEvent();
       // watchForEvents();
    }

    public void stop()
    {
        //Logging.Write("Unsubscribing to event");
        //UnSubscribeEvents();
    }

    public static void disposeFlightMaster()
    {
        _isLaunched = false;
        FNVQuesterFlightMaster.CurrentSettings.Save();
        //clearOldPath();
        //_deleteOldPath = true;
        //UnSubscribeEvents();
        //MovementEvents.OnMovementPulse -= new MovementEvents.MovementCancelableHandler(FlightMaster.MovementEventsOnOnMovementPulse);
        //Logging.Write("[FNV_Quester]: Flight Master disposed");
    }

    public static void disposeFlightMaster(int wert)
    {
        _isLaunched = false;
        if(wert == 1)
        {
            Logging.Write("Flight Master stopped, dead");
        }
        else
        {
            Logging.Write("Flight Master stopped, combat");
        }
    }


    private void SubscribeToEvent()
    {
         MovementEvents.OnMovementPulse += MovementEventsOnOnMovementPulse;
    }

    public void UnSubscribeEvents()
    {
        MovementEvents.OnMovementPulse -= MovementEventsOnOnMovementPulse;
    }

    private void watchForEvents()
    {

        EventsLuaWithArgs.OnEventsLuaWithArgs += (LuaEventsId id, List&lt;string&gt; args) =&gt;
        {


            if (id == wManager.Wow.Enums.LuaEventsId.PLAYER_DEAD)
            {
                Logging.Write("[FNV_Quester]: Player died, stop Flight Master");
                disposeFlightMaster(1);
            }
            if (id == wManager.Wow.Enums.LuaEventsId.PLAYER_ENTER_COMBAT)
            {
                disposeFlightMaster(2);
          		  Logging.Write("[FNV_Quester]: Player entered combat, stop Flight Master");
            }

        };

    }


    private void MovementEventsOnOnMovementPulse(List&lt;Vector3&gt; path, CancelEventArgs cancelEventArgs)
    {
        if(timer &lt; 1)
        {
            checkDistanceToDestination = path.Last&lt;Vector3&gt;();
            longMove(path.Last&lt;Vector3&gt;());
            destinationVector = path.Last&lt;Vector3&gt;();
            if(ObjectManager.Me.Position.DistanceTo(destinationVector) &gt; 1000 &amp;&amp; !_isLaunched)
                startFlightMaster();
        }
        else
        {
            Logging.Write("[FNV_Quester]: Taxi in Pause");
        }
    }

    public bool longMove(Vector3 destination)
    {
        saveDistance = new Vector3(destination).DistanceTo(ObjectManager.Me.Position);
        if(new Vector3(destination).DistanceTo(ObjectManager.Me.Position) &lt; travelDistance)
        {
            longMoveState = false;
            return false;
        }
        else
        {
            longMoveState = true;
            return true;
        }
    }


    public static FlightMasterDB getClosestFlightMasterFrom()
    {
        List&lt;FlightMasterDB&gt; FMLnfmd = fillDB();
        float tempDistance = 99999;
        FlightMasterDB returnObject = new FlightMasterDB("null", 0, new Vector3(0, 0, 0), false);

        foreach(var a in FMLnfmd)
        {
            if(a.alreadyDiscovered &amp;&amp; a.position.DistanceTo(ObjectManager.Me.Position) &lt; tempDistance &amp;&amp; (a.continent == checkContinent()))
            {
                tempDistance = a.position.DistanceTo(ObjectManager.Me.Position);
                returnObject = a;
            }
        }
        return returnObject;
    }

    public static FlightMasterDB getClosestFlightMasterTo()
    {
        List&lt;FlightMasterDB&gt; FMLgcfmt = fillDB();
        float tempDistance = 99999;
        FlightMasterDB returnObject = new FlightMasterDB("null", 0, new Vector3(0, 0, 0), false);

        foreach(var a in FMLgcfmt)
        {
            if(a.alreadyDiscovered &amp;&amp; a.position.DistanceTo(destinationVector) &lt; tempDistance &amp;&amp; (a.continent == checkContinent()))
            {
                tempDistance = a.position.DistanceTo(destinationVector);
                returnObject = a;
            }
        }
        return returnObject;
    }

    public static bool checkContinent()
    {
        if(Usefuls.ContinentId == (int)ContinentId.Kalimdor)
        {
            return true;
        }
        else
        {
            return false;
        }
        
    }

    public static void waitFlying()
    {

        while(ObjectManager.Me.IsOnTaxi)
        {
            Logging.Write("[FNV_Quester]: On taxi, waiting");
            Thread.Sleep(30000);
        }

        Logging.Write("[FNV_Quester]: Arrived at destination Flight Master, finished waiting");
    }

    public static List&lt;FlightMasterDB&gt; fillDB()
    {
        //True = Kalimdor ; False = Eastern Kingdoms
        List&lt;FlightMasterDB&gt; FMListe = new List&lt;FlightMasterDB&gt;();
        FlightMasterDB Stormwind = new FlightMasterDB("Stormwind", 352, new Vector3(-8835.76f, 490.084f, 109.6157f), false);
        FMListe.Add(Stormwind);
        FlightMasterDB ArathiHighlands = new FlightMasterDB("Arathi", 2835, new Vector3(-1240.03f, -2513.96f, 21.92969f), false);
        FMListe.Add(ArathiHighlands);
        FlightMasterDB Ashenvale = new FlightMasterDB("Ashenvale", 4267, new Vector3(2828.4f, -284.3f, 106.7f), true);
        FMListe.Add(Ashenvale);
        FlightMasterDB Darkshore = new FlightMasterDB("Darkshore", 3841, new Vector3(6343.2f, 561.651f, 15.79876f), true);
        FMListe.Add(Darkshore);
        FlightMasterDB Stranglethorn = new FlightMasterDB("Stranglethorn", 2859, new Vector3(-14477.9f, 464.101f, 36.38163f), false);
        FMListe.Add(Stranglethorn);
        FlightMasterDB Duskwood = new FlightMasterDB("Duskwood", 2409, new Vector3(-10513.8f, -1258.79f, 41.43174f), false);
        FMListe.Add(Duskwood);
        FlightMasterDB FeralasFeathermoon = new FlightMasterDB("Feralas, Feathermoon", 8019, new Vector3(-4370.5f, 3340f, 12f), true);
        FMListe.Add(FeralasFeathermoon);
        FlightMasterDB FeralasThalanaar = new FlightMasterDB("Feralas, Thalanaar", 4319, new Vector3(-4491f, -781f, -40f), true);
        FMListe.Add(FeralasThalanaar);
        FlightMasterDB Tanaris = new FlightMasterDB("Tanaris", 7823, new Vector3(-7224.9f, -3738.2f, 8.4f), true);
        FMListe.Add(Tanaris);
        FlightMasterDB Hinterlands = new FlightMasterDB("The Hinterlands", 8018, new Vector3(282.1f, -2001.3f, 194.1f), false);
        FMListe.Add(Hinterlands);
        FlightMasterDB Ironforge = new FlightMasterDB("Ironforge", 1573, new Vector3(-4821.13f, -1152.4f, 502.2116f), false);
        FMListe.Add(Ironforge);
        FlightMasterDB Menethil = new FlightMasterDB("Wetlands", 1571, new Vector3(-3793.2f, -782.052f, 9.014864f), false);
        FMListe.Add(Menethil);
        FlightMasterDB TheBarrens = new FlightMasterDB("The Barrens", 16227, new Vector3(-898.246f, -3769.65f, 11.71021f), true);
        FMListe.Add(TheBarrens);
        FlightMasterDB Redridge = new FlightMasterDB("Redridge Mountains", 931, new Vector3(-9435.8f, -2234.79f, 69.43174f), false);
        FMListe.Add(Redridge);
        FlightMasterDB Teldrassil = new FlightMasterDB("Teldrassil", 3838, new Vector3(8640.58f, 841.118f, 23.26363f), true);
        FMListe.Add(Teldrassil);
        FlightMasterDB Southshore = new FlightMasterDB("Hillsbrad Foothiils", 2432, new Vector3(-715.146f, -512.134f, 26.54455f), false);
        FMListe.Add(Southshore);
        FlightMasterDB Stonetalon = new FlightMasterDB("Stonetalon Mountains", 4407, new Vector3(2682.83f, 1466.45f, 233.6483f), true);
        FMListe.Add(Stonetalon);
        FlightMasterDB Thelsamar = new FlightMasterDB("Loch Modan", 1572, new Vector3(-5424.85f, -2929.87f, 347.5623f), false);
        FMListe.Add(Thelsamar);
        FlightMasterDB Theramore = new FlightMasterDB("Dustwallow Marsh", 4321, new Vector3(-3828.88f, -4517.51f, 10.66067f), true);
        FMListe.Add(Theramore);
        FlightMasterDB WesternP = new FlightMasterDB("Western Pleaguelands", 12596, new Vector3(928.3f, -1429.1f, 64.8f), false);
        FMListe.Add(WesternP);
        FlightMasterDB Westfall = new FlightMasterDB("Westfall", 523, new Vector3(-10628.8f, 1037.79f, 34.43174f), false);
        FMListe.Add(Westfall);
        FlightMasterDB EasternP = new FlightMasterDB("Eastern Pleaguelands", 12617, new Vector3(2269.9f, -5345.4f, 86.9f), false);
        FMListe.Add(EasternP);
        FlightMasterDB SearingGorge = new FlightMasterDB("Searing Gorge", 2941, new Vector3(-6559.1f, -1169.4f, 309.8f), false);
        FMListe.Add(SearingGorge);
        FlightMasterDB BurningSteppes = new FlightMasterDB("Burning Steppes", 2299, new Vector3(-8365.1f, -2758.5f, 185.6f), false);
        FMListe.Add(BurningSteppes);
        FlightMasterDB BlastedLands = new FlightMasterDB("Blasted Lands", 8609, new Vector3(-11110.2f, -3437.1f, 79.2f), false);
        FMListe.Add(BlastedLands);
        FlightMasterDB Azshara = new FlightMasterDB("Azshara", 12577, new Vector3(2718.2f, -3880.8f, 101.4f), true);
        FMListe.Add(Azshara);
        FlightMasterDB Felwood = new FlightMasterDB("Felwood", 12578, new Vector3(6204.2f, -1951.4f, 571.3f), true);
        FMListe.Add(Felwood);
        FlightMasterDB Winterspring = new FlightMasterDB("Winterspring", 11138, new Vector3(6800.5f, -4742.4f, 701.5f), true);
        FMListe.Add(Winterspring);
        FlightMasterDB UngoroCreater = new FlightMasterDB("Ungoro Crater", 10583, new Vector3(-6110.5f, -1140.4f, -186.9f), true);
        FMListe.Add(UngoroCreater);
        FlightMasterDB Silithus = new FlightMasterDB("Silithus", 15177, new Vector3(-6758.6f, 775.6f, 89f), true);
        FMListe.Add(Silithus);
        FlightMasterDB Desolace = new FlightMasterDB("Desolace", 6706, new Vector3(136f, 1326f, 193f), true);
        FMListe.Add(Desolace);
        return FMListe;
    }

    public static bool validFlight(String from, String to)
    {
        bool von = false;
        bool zu = false;
        List&lt;FlightMasterDB&gt; FMLvf = fillDB();

        for(int i = 0; i &lt; FMLvf.Count; i++)
        {
            if(FMLvf[i].name.Contains(from))
            {
                von = FMLvf[i].continent;
            }
            if(FMLvf[i].name.Contains(to))
            {
                zu = FMLvf[i].continent;
            }
        }
        return von != zu;
    }

    public static bool discoveredTaxiNodes(String from, String to)
    {

        List&lt;FlightMasterDB&gt; FMLDTN = fillDB();

        foreach(var ele in FMLDTN)
        {
            if(ele.name.Contains(from))
            {
                if(!ele.alreadyDiscovered)
                {
                    Logging.Write("[FNV_Quester]: Taxi node from " + ele.name + " has not been discovered so far. Abort taking taxi.");
                    return false;
                }
            }
        }

        foreach(var ele in FMLDTN)
        {
            if(ele.name.Contains(to))
            {
                if(!ele.alreadyDiscovered)
                {
                    Logging.Write("[FNV_Quester]: Taxi node to " + ele.name + " has not been discovered so far. Abort taking taxi.");
                    return false;
                }
            }
        }
        return true;
    }

    public static void takeTaxi(String from, String to)
    {

        List&lt;FlightMasterDB&gt; FMLtt = fillDB();
        bool canProceed = true;
        try
        {
            FMLtt = fillDB();
        }
        catch(Exception e)
        {
            Logging.Write("Error: " + e);
        }


        Vector3 myPos = ObjectManager.Me.Position;

        if(Usefuls.MapZoneName.Contains(to))
        {
            canProceed = false;
            Logging.Write("[FNV_Quester]: Already in the zone we are going to travel to. Skip flying");
        }

        if(canProceed)
        {

            if(validFlight(from, to))
            {
                Logging.Write("[FNV_Quester]: Unable to fly between Kalimdor and Eastern Kingdoms");
            }

            var position = new Vector3();
            int npcEntryId = 0;

            for(int i = 0; i &lt; FMLtt.Count; i++)
            {
                if(FMLtt[i].name.Contains(from))
                {
                    position = FMLtt[i].position;
                    npcEntryId = FMLtt[i].NPCId;
                    FMLtt[i].name.Contains(from);
                }
            }


            if(!ObjectManager.Me.IsOnTaxi)
            {
                wManager.wManagerSetting.ClearBlacklistOfCurrentProductSession();

                while(!wManager.Wow.Bot.Tasks.GoToTask.ToPositionAndIntecractWithNpc(position, npcEntryId, -1, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore) &amp;&amp; !Fight.InFight)
                {
                    wManager.wManagerSetting.ClearBlacklistOfCurrentProductSession();
                    wManager.Wow.Bot.Tasks.GoToTask.ToPositionAndIntecractWithNpc(position, npcEntryId, -1, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore);
                }
                if(wManager.Wow.Bot.Tasks.GoToTask.ToPositionAndIntecractWithNpc(position, npcEntryId, -1, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore))
                {
                    while(!ObjectManager.Me.IsOnTaxi)
                    {
                        Usefuls.SelectGossipOption(GossipOptionsType.taxi);

                        int node = Lua.LuaDoString&lt;int&gt;("for i=0,30 do if string.find(TaxiNodeName(i),'" + to + "') then return i end end");
                        Lua.LuaDoString("TakeTaxiNode(" + node + ")");
                        Logging.Write("[FNV_Quester]: Taking Taxi from " + from + " to " + to);
                        Thread.Sleep(Usefuls.Latency + 2500);
                    }
                }
            }
            waitFlying();
            return;
        }
    }

    public static void discoverTaxi(String discoverName)
    {
        FNVQuesterFlightMaster.Load();
        List&lt;FlightMasterDB&gt; FMLdt = fillDB();

        var position = new Vector3();
        int npcEntryId = 0;
        int j = 0;
        bool alreadyDiscoveredFlightMaster = false;

        for(int i = 0; i &lt; FMLdt.Count; i++)
        {
            if(FMLdt[i].name.Contains(discoverName))
            {
                if(FMLdt[i].alreadyDiscovered)
                {
                    Logging.Write("[FNV_Quester]: Flight Master of " + FMLdt[i].name + " already discovered. Skip it.");
                    alreadyDiscoveredFlightMaster = true;
                    break;
                }

                position = FMLdt[i].position;
                npcEntryId = FMLdt[i].NPCId;
                j = i;
            }
        }

        if(!alreadyDiscoveredFlightMaster)
        {

            if(!ObjectManager.Me.IsOnTaxi)
            {
                wManager.wManagerSetting.ClearBlacklistOfCurrentProductSession();

                while(!wManager.Wow.Bot.Tasks.GoToTask.ToPositionAndIntecractWithNpc(position, npcEntryId, -1, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore))
                {
                   // wManager.Wow.Helpers.Conditions.ForceIgnoreIsAttacked = true;
                    wManager.wManagerSetting.ClearBlacklistOfCurrentProductSession();
                    wManager.Wow.Bot.Tasks.GoToTask.ToPositionAndIntecractWithNpc(position, npcEntryId, -1, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore);
                }
                if(wManager.Wow.Bot.Tasks.GoToTask.ToPositionAndIntecractWithNpc(position, npcEntryId, -1, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore))
                {
                    Usefuls.SelectGossipOption(GossipOptionsType.taxi);
                    Thread.Sleep(Usefuls.Latency + 250);
                    //wManager.Wow.Helpers.Conditions.ForceIgnoreIsAttacked = true;
                }
            }
            Logging.Write("[FNV_Quester]: Flight Master " + FMLdt[j].name + " discovered");
            FMLdt[j].alreadyDiscovered = true;
            FNVQuesterFlightMaster.flightMasterSaveChanges(FMLdt[j]);
            //wManager.Wow.Helpers.Conditions.ForceIgnoreIsAttacked = false;
            
        }
        timer = 0;
        return;
    }

    }

    public class FlightMasterDB
    {
        public FlightMasterDB(String name, int NPCId, Vector3 position, bool continent, bool alreadyDiscovered)
        {
            this.name = name;
            this.NPCId = NPCId;
            this.position = position;
            this.continent = continent;
            this.alreadyDiscovered = alreadyDiscovered;
        }

        public FlightMasterDB(String name, int NPCId, Vector3 position, bool continent)
        {
            this.name = name;
            this.NPCId = NPCId;
            this.position = position;
            this.continent = continent;
            
        }

        public int NPCId { get; set; }
        public Vector3 position { get; set; }
        public String name { get; set; }
        public bool continent { get; set; }
        public bool alreadyDiscovered { get; set; }

    }

//Tram
public class Tram
{

    //Stormwind to Ironforge
    static Vector3 positionTramInIronforge = new Vector3(4.58065, 28.2097, 6.90526);
    static Vector3 positionTramInStormwind = new Vector3(4.581913, 2511.531, 7.091796);

    static Vector3 positionWaitTramIronforge = new Vector3(19.1, 28, -4.3);
    static Vector3 positionOnTramIronforge = new Vector3(4.8, 28.1, -4.3);

    static Vector3 positionWaitTramStormwind = new Vector3(15.3, 2510.4, -4.3);
    static Vector3 positionOnTramStormwind = new Vector3(4.3, 2510.6, -4.3);

    static Vector3 enterStormwindInside = new Vector3(67, 2490.7, -4.3);
    static Vector3 enterIronforgeInside = new Vector3(64.5, 10.2, -4.3);

    static Vector3 enterStormwindOutside = new Vector3(-8365, 536.9, 91.8);
    static Vector3 enterIronforgeOutside = new Vector3(-4836.7, -1304.6, 501.9);

    static Vector3 leavePosIronforge = new Vector3(-10.6, 30.2, -4.3);
    static Vector3 leavePosStormwind = new Vector3(-10.6, 2510.9, -4.3);

    static Vector3 playerFellDownIronforge = new Vector3(4.5, 28, -13.9);

    static int[] tramEntryArray = new int[6] { 176080, 176082, 176083, 176084, 176085, 176081 };

    //Ironforge to Stormwind
    static Vector3 waitPosPlayerInStormwindToIronforge = new Vector3(-32.8, 2512.1, -4.3);

    //Pos where upper Tram arrives and waits in Stormwind
    static Vector3 waitPosTramSwTramStormwind = new Vector3(-45.4007, 2512.15, 6.90526);
    //Pos where player waits on upper tram in Stormwind
    static Vector3 waitPosPlayerSwTramStormwind = new Vector3(-45.20206, 2512.266, -3.562748);

    static Vector3 waitPosSwTramIronforge = new Vector3(-45.399, 30.38013, 5.877773);

    static Vector3 leavePosSwTramIronforge = new Vector3(-61.8, 30.3, -4.3);
    static Vector3 waitPlayerOnTramPosSwTramIronforge = new Vector3(-34.49804, 2511.917, -4.3);
    static Vector3 posPlayerOnTramSwToIfInIronforge = new Vector3(-20.9837, 2459.93, -4.297);

    static Vector3 playerFellDownStormwind = new Vector3(-45, 2512.6, -13.9);

    static bool isRestarted = false;
    static Process[] pname = Process.GetProcessesByName(AppDomain.CurrentDomain.FriendlyName.Remove(AppDomain.CurrentDomain.FriendlyName.Length - 4));
    static Vector3 nullVector = new Vector3(0, 0, 0);


    public static void restartTram(String from)
    {
        switch(from)
        {
            case ("Stormwind"):
                takeTramStormwind();
                break;
            case ("Ironforge"):
                takeTramIronforge();
                break;
            default:
                Logging.Write("Something failed");
                break;
        }
    }

    public static void end()
    {
        Logging.Write("[FNV_Quester]: Ending Tream");
    }



    public static void takeTramStormwind()
    {
        Logging.Write("[FNV_Quester]: Taking Tram from Stormwind to Ironforge");

        if(!Usefuls.MapZoneName.Contains("Deep"))
        {
            while(!GoToTask.ToPosition(enterStormwindOutside))
            {
                GoToTask.ToPosition(enterStormwindOutside);
                Thread.Sleep(250);
            }

            wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;
            Logging.Write("[FNV_Quester]: Disable teleport during Tram");
            wManager.Wow.Helpers.MovementManager.Face(new Vector3(-8353.4, 521.4, 91.8));

            while(!Usefuls.MapZoneName.Contains("Deep"))
            {
                wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 250);
                Thread.Sleep(robotManager.Helpful.Others.Random(25, 50));
            }

        }

        if(Usefuls.MapZoneName.Contains("Deep"))
        {
            if(!GoToTask.ToPosition(enterStormwindInside))
            {
                GoToTask.ToPosition(enterStormwindInside);
                Thread.Sleep(250);
            }
            while(!GoToTask.ToPosition(waitPosPlayerInStormwindToIronforge))
            {
                GoToTask.ToPosition(waitPosPlayerInStormwindToIronforge);
                Thread.Sleep(250);
            }

            wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;
            var tram = (WoWGameObject)null;

            try
            {
                tram = chooseTramStormwind();
            }
            catch
            {

            }


            if(tram != null &amp;&amp; ObjectManager.Me.Position.DistanceTo(tram.Position) &lt; 200 &amp;&amp; !tram.Position.Equals(nullVector))
            {
                Logging.Write("[FNV_Quester]: Bad circle, restart... .");
                isRestarted = true;
                takeTramStormwind();
                end();
            }

            if(!isRestarted)
            {

                if(tram != null &amp;&amp; tram.Position.DistanceTo(nullVector) &gt; 1)
                {
                    while(tram.Position.DistanceTo(waitPosTramSwTramStormwind) &gt;= 5 || ObjectManager.Me.Position.DistanceTo(waitPosPlayerInStormwindToIronforge) &gt;= 5)
                    {
                        Thread.Sleep(500);
                    }

                    if(tram.Position.DistanceTo(waitPosTramSwTramStormwind) &lt; 5)
                    {
                        Lua.LuaDoString("ClearTarget()");
                        wManager.Wow.Helpers.MovementManager.Face(waitPosPlayerSwTramStormwind);

                        while(ObjectManager.Me.Position.DistanceTo(waitPosPlayerSwTramStormwind) &gt; 1)
                        {
                            MovementManager.MoveTo(waitPosPlayerSwTramStormwind);
                            Thread.Sleep(1000);

                            if(ObjectManager.Me.Position.DistanceTo(playerFellDownStormwind) &lt; 4)
                            {
                                Logging.Write("[FNV_Quester]: Fell down, while trying to take tram. Restart...");
                                restartTram("Stormwind");
                            }
                        }

                        GoToTask.ToPosition(waitPosPlayerSwTramStormwind);
                    }

                    while(tram.Position.DistanceTo(waitPosSwTramIronforge) &gt; 5)
                    {
                        Thread.Sleep(3000);
                    }

                    if(ObjectManager.Me.HaveBuff("Stealth"))
                    {
                        Lua.LuaDoString("CastSpellByName('Stealth')");
                    }

                    wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 1500);

                    if(ObjectManager.Me.Position.DistanceTo(posPlayerOnTramSwToIfInIronforge) &lt; 5)
                    {
                        MovementManager.MoveTo(leavePosSwTramIronforge);
                        Thread.Sleep(1000);

                        while(ObjectManager.Me.Position.DistanceTo(leavePosSwTramIronforge) &gt; 4)
                        {
                            MovementManager.MoveTo(leavePosSwTramIronforge);
                            Thread.Sleep(1000);
                        }
                    }

                    if(Usefuls.MapZoneName.Contains("Deep"))
                    {
                        if(!GoToTask.ToPosition(enterIronforgeInside))
                        {
                            GoToTask.ToPosition(enterIronforgeInside);
                            Thread.Sleep(250);
                        }
                    }

                    while(Usefuls.MapZoneName.Contains("Deep"))
                    {
                        wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 250);
                        Thread.Sleep(robotManager.Helpful.Others.Random(25, 50));
                    }

                    Logging.Write("[FNV_Quester]: Re enable teleport ");
                    wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = true;


                    while(!GoToTask.ToPosition(enterIronforgeOutside))
                    {
                        wManager.Wow.Helpers.MovementManager.Face(enterIronforgeOutside);
                        GoToTask.ToPosition(enterIronforgeOutside);
                        Thread.Sleep(250);
                    }

                }
                else if(Usefuls.MapZoneName.Contains("Tram") || Usefuls.MapZoneName.Contains("Stormwind"))
                {
                    Logging.Write("[FNV_Quester]: Unable to find tram, restart... .");
                    isRestarted = true;
                    restartTram("Stormwind");
                }

            }
        }

        isRestarted = false;
    }

    public static WoWGameObject chooseTramIronforge()
    {
        List&lt;WoWGameObject&gt; tramList = new List&lt;WoWGameObject&gt;();
        var tramTemp = (WoWGameObject)null;

        foreach(int ele in tramEntryArray)
        {
            tramTemp = null;
            try
            {
                tramTemp = ObjectManager.GetWoWGameObjectByEntry(ele).OrderBy(o =&gt; o.GetDistance).FirstOrDefault();
            }
            catch
            {
            }

            if(tramTemp != null &amp;&amp; tramTemp.IsValid &amp;&amp; !tramTemp.Equals((WoWGameObject)null) &amp;&amp; tramTemp.ToString().Contains("Subway"))
            {
                tramList.Add(tramTemp);
            }
            else
            {

            }
        }

        float distance = 0;
        float entryDistance = 0;
        foreach(var ele in tramList)
        {
            if(ObjectManager.Me.Position.DistanceTo(ele.Position) &gt;= distance)
            {
                distance = ObjectManager.Me.Position.DistanceTo(ele.Position);
                entryDistance = ele.Entry;
            }
        }

        foreach(var ele in tramList)
        {
            if(ele.Entry == entryDistance &amp;&amp; ele != null &amp;&amp; !ele.Position.Equals(nullVector))
            {
                if(ObjectManager.Me.Position.DistanceTo(ele.Position) &lt; 200)
                {
                    Logging.Write("[FNV_Quester]: Bad circle, restart... .");
                    restartTram("Ironforge");
                }

                Logging.Write("[FNV_Quester]: Choosing tram id: " + ele.Entry + " with a current position of " + ele.Position);
                return ele;
            }
        }
        return null;
    }

    public static WoWGameObject chooseTramStormwind()
    {
        List&lt;WoWGameObject&gt; tramList = new List&lt;WoWGameObject&gt;();
        var tramTemp = (WoWGameObject)null;

        foreach(int ele in tramEntryArray)
        {
            tramTemp = null;
            try
            {
                tramTemp = ObjectManager.GetWoWGameObjectByEntry(ele).OrderBy(o =&gt; o.GetDistance).FirstOrDefault();
            }
            catch
            {
            }

            if(tramTemp != null &amp;&amp; tramTemp.IsValid &amp;&amp; !tramTemp.Equals((WoWGameObject)null) &amp;&amp; tramTemp.ToString().Contains("Subway"))
            {
                tramList.Add(tramTemp);
            }
            else
            {

            }
        }

        float distance = 99999;
        float entryDistance = 0;
        foreach(var ele in tramList)
        {
            if(ObjectManager.Me.Position.DistanceTo(ele.Position) &lt;= distance)
            {
                distance = ObjectManager.Me.Position.DistanceTo(ele.Position);
                entryDistance = ele.Entry;
            }
        }

        foreach(var ele in tramList)
        {
            if(ele.Entry == entryDistance &amp;&amp; ele != null &amp;&amp; !ele.Position.Equals(nullVector))
            {
                if(ObjectManager.Me.Position.DistanceTo(ele.Position) &lt; 200)
                {
                    Logging.Write("[FNV_Quester]: Bad circle, restart... .");
                    restartTram("Stormwind");
                }

                Logging.Write("[FNV_Quester]: Choosing tram id: " + ele.Entry + " with a current position of " + ele.Position);
                return ele;
            }
        }

        return null;
    }

    public static void takeTramIronforge()
    {
        Logging.Write("[FNV_Quester]: Taking Tram from Ironforge to Stormwind");

        if(!Usefuls.MapZoneName.Contains("Deep"))
        {
            while(!GoToTask.ToPosition(enterIronforgeOutside))
            {
                GoToTask.ToPosition(enterIronforgeOutside);
                Thread.Sleep(250);
            }

            wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;
            Logging.Write("[FNV_Quester]: Disable teleport during Tram");
            wManager.Wow.Helpers.MovementManager.Face(new Vector3(-4839.4, -1320.9, 501.9));

            while(!Usefuls.MapZoneName.Contains("Deep"))
            {
                wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 250);
                Thread.Sleep(robotManager.Helpful.Others.Random(25, 50));
            }
        }

        if(Usefuls.MapZoneName.Contains("Deep"))
        {
            if(!GoToTask.ToPosition(enterIronforgeInside))
            {
                GoToTask.ToPosition(enterIronforgeInside);
                Thread.Sleep(250);
            }

            var pathEins = new List&lt;Vector3&gt;() {
new Vector3(42.56478f, 10.32987f, -4.29664f, "None"),
new Vector3(36.11083f, 10.30502f, -4.29664f, "None"),
new Vector3(29.11088f, 10.27806f, -4.29664f, "None"),
new Vector3(25.49891f, 10.26415f, -4.29664f, "None"),
new Vector3(20.57794f, 10.2452f, -4.29664f, "None"),
new Vector3(16.61328f, 11.97739f, -4.29664f, "None"),
new Vector3(17.03823f, 18.79025f, -4.29664f, "None"),
new Vector3(19.41723f, 25.35655f, -4.29664f, "None"),
};


                        while(ObjectManager.Me.Position.DistanceTo2D(pathEins.Last&lt;Vector3&gt;()) &gt; 5)
                        {
                            MovementManager.Go(pathEins); // or MovementManager.GoLoop(path);
                        }

            while(!GoToTask.ToPosition(positionWaitTramIronforge))
            {
                GoToTask.ToPosition(positionWaitTramIronforge);
                Thread.Sleep(250);
            }

            wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;

            var tram = (WoWGameObject)null;

            try
            {
                tram = chooseTramIronforge();
            }
            catch
            {

            }

            if(ObjectManager.Me.Position.DistanceTo(tram.Position) &lt; 200 &amp;&amp; tram != null &amp;&amp; !tram.Position.Equals(nullVector))
            {
                Logging.Write("[FNV_Quester]: Bad circle, restart... .");
                isRestarted = true;
                restartTram("Ironforge");
                end();
            }

            if(!isRestarted)
            {

                if(tram != null &amp;&amp; tram.Position.DistanceTo(nullVector) &gt; 1)
                {


                    while(tram.Position.DistanceTo(positionTramInIronforge) &gt;= 5 &amp;&amp; Usefuls.MapZoneName.Contains("Deep") &amp;&amp; !tram.Position.Equals(nullVector))
                    {
                        Thread.Sleep(1000);
                    }


                    if(tram.Position.DistanceTo(positionTramInIronforge) &lt; 5 &amp;&amp; Usefuls.MapZoneName.Contains("Deep"))
                    {
                        Lua.LuaDoString("ClearTarget()");
                        wManager.Wow.Helpers.MovementManager.Face(positionOnTramIronforge);

                        while(ObjectManager.Me.Position.DistanceTo(positionOnTramIronforge) &gt; 2)
                        {
                            MovementManager.MoveTo(positionOnTramIronforge);
                            Thread.Sleep(1000);

                            if(ObjectManager.Me.Position.DistanceTo(playerFellDownIronforge) &lt; 4)
                            {
                                Logging.Write("[FNV_Quester]: Fell down, while trying to take tram. Restart");
                                restartTram("Ironforge");
                            }
                        }

                        GoToTask.ToPosition(positionOnTramIronforge);
                    }


                    while(tram.Position.DistanceTo(positionTramInStormwind) &gt; 5 &amp;&amp; Usefuls.MapZoneName.Contains("Deep"))
                    {
                        Thread.Sleep(3000);
                    }

                    if(ObjectManager.Me.Position.DistanceTo(positionOnTramStormwind) &lt; 5 &amp;&amp; Usefuls.MapZoneName.Contains("Deep"))
                    {

                        Vector3 leavingTramPos = new Vector3(-4.500117, 2510.398, -4.18221, "None");
                        Vector3 leavingTramPosZwei = new Vector3(-8.363175, 2510.536, -4.291304, "None");

                        MovementManager.MoveTo(leavingTramPos);
                        Thread.Sleep(1000);
                        MovementManager.MoveTo(leavingTramPosZwei);
                        Thread.Sleep(1000);

                        var pathZwei = new List&lt;Vector3&gt;() {
new Vector3(-8.722651f, 2521.781f, -4.296569f, "None"),
new Vector3(-8.406331f, 2528.227f, -4.296569f, "None"),
new Vector3(-5.509378f, 2534.194f, -4.296569f, "None"),
new Vector3(1.102043f, 2536.338f, -4.296569f, "None"),
new Vector3(8.024714f, 2535.66f, -4.296569f, "None"),
new Vector3(13.7771f, 2531.926f, -4.296569f, "None"),
new Vector3(15.53208f, 2525.218f, -4.296569f, "None"),
new Vector3(19.39666f, 2520.334f, -4.296569f, "None"),
new Vector3(26.3053f, 2519.244f, -4.296569f, "None"),
new Vector3(31.07252f, 2514.534f, -4.296569f, "None"),
new Vector3(32.08603f, 2507.629f, -4.296569f, "None"),
new Vector3(32.20792f, 2500.735f, -4.296569f, "None"),
new Vector3(32.69915f, 2493.784f, -4.296569f, "None"),
new Vector3(38.39471f, 2490.469f, -4.296569f, "None"),
new Vector3(45.39016f, 2490.699f, -4.296569f, "None"),
new Vector3(52.39009f, 2490.728f, -4.296569f, "None"),
new Vector3(55.99506f, 2490.741f, -4.296569f, "None"),
new Vector3(62.99502f, 2490.766f, -4.296569f, "None"),
};


                        while(ObjectManager.Me.Position.DistanceTo2D(pathZwei.Last&lt;Vector3&gt;()) &gt; 5)
                        {
                            MovementManager.Go(pathZwei); // or MovementManager.GoLoop(path);

                            if(ObjectManager.Me.Position.DistanceTo2D(pathZwei.Last&lt;Vector3&gt;()) &lt;= 5)
                                break;
                        }


                        //MovementManager.MoveTo(leavePosStormwind);
                        /*
                        while(ObjectManager.Me.Position.DistanceTo(leavePosStormwind) &gt; 4)
                        {
                            MovementManager.MoveTo(leavePosStormwind);
                            Thread.Sleep(1000);

                        } */

                    }

                    if(Usefuls.MapZoneName.Contains("Deep"))
                    {
                        if(!GoToTask.ToPosition(enterStormwindInside))
                        {
                            GoToTask.ToPosition(enterStormwindInside);
                            Thread.Sleep(250);
                        }
                    }

                    while(Usefuls.MapZoneName.Contains("Deep"))
                    {
                        wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 250);
                        Thread.Sleep(robotManager.Helpful.Others.Random(25, 50));
                    }

                    Logging.Write("Re enable teleport ");
                    wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = true;


                    while(!GoToTask.ToPosition(enterStormwindOutside))
                    {
                        wManager.Wow.Helpers.MovementManager.Face(enterStormwindOutside);
                        GoToTask.ToPosition(enterStormwindOutside);
                        Thread.Sleep(250);
                    }

                }
                else if(Usefuls.MapZoneName.Contains("Tram") || Usefuls.MapZoneName.Contains("Ironforge"))
                {
                    Logging.Write("[FNV_Quester]: Unable to find tram, restart... .");
                    isRestarted = true;
                    restartTram("Ironforge");
                }

            }
        }
        isRestarted = false;
    }

    /*
    public static void takeTramIronforge()
    {
        Logging.Write("[FNV_Quester]: Taking Tram from Ironforge to Stormwind");

        if(!Usefuls.MapZoneName.Contains("Deep"))
        {
            while(!GoToTask.ToPosition(enterIronforgeOutside))
            {
                GoToTask.ToPosition(enterIronforgeOutside);
                Thread.Sleep(250);
            }

            wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;
            Logging.Write("[FNV_Quester]: Disable teleport during Tram");
            wManager.Wow.Helpers.MovementManager.Face(new Vector3(-4839.4, -1320.9, 501.9));

            while(!Usefuls.MapZoneName.Contains("Deep"))
            {
                wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 250);
                Thread.Sleep(robotManager.Helpful.Others.Random(25, 50));
            }
        }

        if(Usefuls.MapZoneName.Contains("Deep"))
        {
            if(!GoToTask.ToPosition(enterIronforgeInside))
            {
                GoToTask.ToPosition(enterIronforgeInside);
                Thread.Sleep(250);
            }

            GoToTask.ToPosition(new Vector3(26.31003, 9.936551, -4.29664));
            Thread.Sleep(250);
            GoToTask.ToPosition(new Vector3(17.09965, 12.71437, -4.29664));
            Thread.Sleep(250);
            GoToTask.ToPosition(new Vector3(18.14983, 22.89955, -4.29664));
            Thread.Sleep(250);

            while(!GoToTask.ToPosition(positionWaitTramIronforge))
            {
                GoToTask.ToPosition(positionWaitTramIronforge);
                Thread.Sleep(250);
            }

            wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;

            var tram = (WoWGameObject)null;

            try
            {
                tram = chooseTramIronforge();
            }
            catch
            {

            }

            if(ObjectManager.Me.Position.DistanceTo(tram.Position) &lt; 200 &amp;&amp; tram != null &amp;&amp; !tram.Position.Equals(nullVector))
            {
                Logging.Write("[FNV_Quester]: Bad circle, restart... .");
                isRestarted = true;
                restartTram("Ironforge");
                end();
            }

            if(!isRestarted)
            {

                if(tram != null &amp;&amp; tram.Position.DistanceTo(nullVector) &gt; 1)
                {


                    while(tram.Position.DistanceTo(positionTramInIronforge) &gt;= 5 &amp;&amp; Usefuls.MapZoneName.Contains("Deep") &amp;&amp; !tram.Position.Equals(nullVector))
                    {
                        Thread.Sleep(1000);
                    }


                    if(tram.Position.DistanceTo(positionTramInIronforge) &lt; 5 &amp;&amp; Usefuls.MapZoneName.Contains("Deep"))
                    {
                        Lua.LuaDoString("ClearTarget()");
                        wManager.Wow.Helpers.MovementManager.Face(positionOnTramIronforge);

                        while(ObjectManager.Me.Position.DistanceTo(positionOnTramIronforge) &gt; 2)
                        {
                            wManager.Wow.Helpers.MovementManager.Face(positionOnTramIronforge);
                            wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 125);
                            Thread.Sleep(robotManager.Helpful.Others.Random(10, 25));

                            if(ObjectManager.Me.Position.DistanceTo(playerFellDownIronforge) &lt; 4)
                            {
                                Logging.Write("[FNV_Quester]: Fell down, while trying to take tram. Restart");
                                restartTram("Ironforge");
                            }
                        }

                        GoToTask.ToPosition(positionOnTramIronforge);
                    }


                    while(tram.Position.DistanceTo(positionTramInStormwind) &gt; 5 &amp;&amp; Usefuls.MapZoneName.Contains("Deep"))
                    {
                        Thread.Sleep(3000);
                    }

                    if(ObjectManager.Me.Position.DistanceTo(positionOnTramStormwind) &lt; 5 &amp;&amp; Usefuls.MapZoneName.Contains("Deep"))
                    {

                        wManager.Wow.Helpers.Move.StrafeLeft(Move.MoveAction.PressKey, 350);

                        while(ObjectManager.Me.Position.DistanceTo(leavePosStormwind) &gt; 4)
                        {
                            wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 125);
                            Thread.Sleep(robotManager.Helpful.Others.Random(10, 25));

                        }

                    }

                    if(Usefuls.MapZoneName.Contains("Deep"))
                    {
                        if(!GoToTask.ToPosition(enterStormwindInside))
                        {
                            GoToTask.ToPosition(enterStormwindInside);
                            Thread.Sleep(250);
                        }
                    }

                    while(Usefuls.MapZoneName.Contains("Deep"))
                    {
                        wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 250);
                        Thread.Sleep(robotManager.Helpful.Others.Random(25, 50));
                    }

                    Logging.Write("Re enable teleport ");
                    wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = true;


                    while(!GoToTask.ToPosition(enterStormwindOutside))
                    {
                        wManager.Wow.Helpers.MovementManager.Face(enterStormwindOutside);
                        GoToTask.ToPosition(enterStormwindOutside);
                        Thread.Sleep(250);
                    }

                }
                else if(Usefuls.MapZoneName.Contains("Tram") || Usefuls.MapZoneName.Contains("Ironforge"))
                {
                    Logging.Write("[FNV_Quester]: Unable to find tram, restart... .");
                    isRestarted = true;
                    restartTram("Ironforge");
                }

            }
        }
        isRestarted = false;
    }
    */
}

//Additional functions for quests
public class Quests
{
    public static void abandon(string questName)
    {
        wManager.Wow.Helpers.Lua.LuaDoString("local name = '" + questName + "' for i=1,GetNumQuestLogEntries() do local questTitle, level, questTag, suggestedGroup, isHeader, isCollapsed, isComplete = GetQuestLogTitle(i) if string.find(questTitle, name) then SelectQuestLogEntry(i) SetAbandonQuest() AbandonQuest() end end");

    }

    public static bool hasFailed(string questName)
    {
        int temp = 0;
        temp = wManager.Wow.Helpers.Lua.LuaDoString&lt;int&gt;("local name = '" + questName + "'  for i=1,GetNumQuestLogEntries() do local questTitle, level, questTag, suggestedGroup, isHeader, isCollapsed, isComplete = GetQuestLogTitle(i) if string.find(questTitle, name) then SelectQuestLogEntry(i) local questTimer = GetQuestLogTimeLeft() return questTimer end end");

        if(temp &gt; 8)
        {
            return false;
        }
        else
        {
            return true;
        }
    }

    public static bool isComplete(string questName)
    {
        int temp;
        temp = wManager.Wow.Helpers.Lua.LuaDoString&lt;int&gt;("local name = '" + questName + "'  for i=1,GetNumQuestLogEntries() do local questTitle, level, questTag, isHeader, isCollapsed, isComplete = GetQuestLogTitle(i) if string.find(questTitle, name) then local questTitleZ, levelZ, questTagZ, isHeaderZ, isCollapsedZ, isCompleteZ = GetQuestLogTitle(i) return isCompleteZ end end");

        if(temp == 1)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    public static bool isFailed(string questName)
    {
        int temp;
        temp = wManager.Wow.Helpers.Lua.LuaDoString&lt;int&gt;("local name = '" + questName + "'  for i=1,GetNumQuestLogEntries() do local questTitle, level, questTag, isHeader, isCollapsed, isComplete = GetQuestLogTitle(i) if string.find(questTitle, name) then local questTitleZ, levelZ, questTagZ, isHeaderZ, isCollapsedZ, isCompleteZ = GetQuestLogTitle(i) return isCompleteZ end end");

        if(temp == -1)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
}


public class ProgressSettings : Settings
{
    public static bool inProgress = false;
        public static void Initialize()
        {
            ProgressSettings.Load();
        }

        public static void Dispose()
        {
            ProgressSettings.CurrentSettings.Save();
            //isLaunched = false;
        }

        public void Settings()
        {
            ProgressSettings.Load();
            ProgressSettings.CurrentSettings.ToForm();
            ProgressSettings.CurrentSettings.Save();
        }

    public ProgressSettings()
    {
        this.launcher = 2;
        this.dwarfStart = 1 + 1;
        this.humanStart = 1 + 1;
        this.nightelfStart = 1 + 1;
        this.dwarfHunter = 1 + 1;
        this.nightelfHunter = 1 + 1;
        this.nightelfDruid = 1 + 1;
        this.warlock = 1 + 1;
        this.kharanos = 1 + 1;
        this.elwynn = 1 + 1;
        this.westfallEins = 1 + 1;
        this.lochModanEins = 1 + 1;
        this.darkshoreEins = 10 + 1;
        this.westfallZwei = 1 + 1;
        this.lochModanZwei = 1 + 1;
        this.darkshoreZwei = 6 + 1;
        this.westfallDrei = 1 + 1;
        this.redridge = 1 + 1;
        this.duskwoodEins = 1 + 1;
        this.stonetalon = 14 + 1;
        this.darkshoreDrei = 1 + 1;
        this.duskwoodZwei = 1 + 1;
        this.wetlandsEins = 1 + 1;
        this.ashenvaleEins = 7 + 1;
        this.wetlandsZwei = 1 + 1;
        this.duskwoodDrei = 2 + 1;
        this.ashenvaleZwei = 7 + 1;
        this.duskwoodVier = 2 + 1;
        this.ashenvaleDrei = 6 + 1;
        this.thousandNeedles = 7 + 1;
        this.desolaceEins = 7 + 1;
        this.hillsbradEins = 2 + 1;
        this.stranglethornEins = 2 + 1;
        this.stranglethornZwei = 2 + 1;
        this.hillsbradZwei = 2 + 1;
        this.arathiEins = 2 + 1;
        this.stranglethornDrei = 2 + 1;
        this.dustwallowEins = 10 + 1;
        this.desolaceZwei = 9 + 1;
        this.swampOfSorrowsEins = 2 + 1;
        this.stranglethornVier = 2 + 1;
        this.badlandsEins = 2 + 1;
        this.alteracMountain = 2 + 1;
        this.badlandsZwei = 2 + 1;
        this.tanarisEins = 7 + 1;
        this.stranglethornFünf  = 2 + 1;
        this.hinterlandsEins = 2 + 1;
        this.feralasEins = 7 + 1;
        this.hinterlandsZwei = 2 + 1;

                //48+

        this.hinterlandsDrei = 2 + 1;
        this.blastedLandsEins = 2 + 1;
        this.blastedLandsZwei = 2 + 1;
        this.blastedLandsDrei = 2 + 1;
        this.burningSteppesEins = 2 + 1;
        this.burningSteppesZwei = 2 + 1;
        this.burningSteppesDrei = 2 + 1;
        this.easternPleaguelandsEins = 2 + 1;
        this.easternPleaguelandsZwei = 2 + 1;
        this.easternPleaguelandsDrei = 2 + 1;
        this.searingGorgeEins = 2 + 1;
        this.searingGorgeZwei = 2 + 1;
        this.searingGorgeDrei = 2 + 1;
        this.swampOfSorrowsZwei = 2 + 1;
        this.westernPleaguelandsEins = 2 + 1;
        this.westernPleaguelandsZwei = 2 + 1;
        this.westernPleaguelandsDrei = 2 + 1;

        //48+ Kalimdor

        this.azsharaEins = 7 + 1;
        this.azsharaZwei = 7 + 1;
        this.azsharaDrei = 7 + 1;
        this.felwoodEins = 7 + 1;
        this.felwoodZwei = 7 + 1;
        this.felwoodDrei = 7 + 1;
        this.silithusEins = 7 + 1;
        this.silithusZwei = 7 + 1;
        this.silithusDrei = 7 + 1;
        this.feralasZwei = 7 + 1;
        this.feralasDrei = 7 + 1;
        this.feralasVier = 7 + 1;
        this.tanarisZwei = 7 + 1;
        this.tanarisDrei = 7 + 1;
        this.ungoroEins = 7 + 1;
        this.ungoroZwei = 7 + 1;
        this.ungoroDrei = 7 + 1;
        this.winterspringEins = 7 + 1; 
        this.winterspringZwei = 7 + 1;
        this.winterspringDrei = 7 + 1;
        this.winterspringVier = 7 + 1;
    }
    

      public static ProgressSettings CurrentSettings { get; set; }

        public bool Save()
        {
            try
            {
                return Save(AdviserFilePathAndName("FNV_Progress", ObjectManager.Me.Name + "." + Usefuls.RealmName));
            }
            catch(Exception e)
            {
                Logging.WriteDebug("FNV_Progress =&gt; Save(): " + e);
                return false;
            }
        }

        public static bool Load()
        {
            try
            {
                if(File.Exists(AdviserFilePathAndName("FNV_Progress", ObjectManager.Me.Name + "." + Usefuls.RealmName)))
                {
                    CurrentSettings = Load&lt;ProgressSettings&gt;(AdviserFilePathAndName("FNV_Progress", ObjectManager.Me.Name + "." + Usefuls.RealmName));
                    return true;
                }

                ProgressSettings.CurrentSettings = new ProgressSettings();
            }
            catch(Exception e)
            {
                Logging.WriteDebug("FNV_Progress =&gt; Load(): " + e);
            }
            return false;
        }

    public static bool ResetCurrentCharactersProgressSaver()
    {
        try
        {
            if(File.Exists(AdviserFilePathAndName("FNV_Progress", ObjectManager.Me.Name + "." + Usefuls.RealmName)))
            {
                File.Delete(AdviserFilePathAndName("FNV_Progress", ObjectManager.Me.Name + "." + Usefuls.RealmName));
                ProgressSettings.CurrentSettings = new ProgressSettings();
                Logging.Write("[FNV_Quester]: FNV_Progress file of " + ObjectManager.Me.Name + " on server " + Usefuls.RealmName + " successfully deleted");
                return true;
            }
            else
            {
                Logging.Write("[FNV_Quester]: No FNV_Progress file found for " + ObjectManager.Me.Name + " on server " + Usefuls.RealmName);
                return false;
            }
        }
        catch(Exception e)
        {
            Logging.WriteDebug("FNV_Progress =&gt; Load(): " + e);
        }
         return false;
    }

        public int launcher { get; set; }
        public int dwarfStart { get; set; }
        public int dwarfHunter { get; set; }
        public int nightelfHunter { get; set; }
        public int nightelfDruid { get; set; }
        public int warlock { get; set; }
        public int nightelfStart { get; set; }
        public int humanStart { get; set; }
        public int kharanos { get; set; }
        public int elwynn { get; set; }
        public int westfallEins { get; set; }
        public int lochModanEins { get; set; }
        public int darkshoreEins { get; set; }
        public int westfallZwei { get; set; }
        public int lochModanZwei { get; set; }
        public int darkshoreZwei { get; set; }
        public int westfallDrei { get; set; }
        public int redridge { get; set; }
        public int duskwoodEins { get; set; }
        public int darkshoreDrei { get; set; }
        public int stonetalon { get; set; }
        public int duskwoodZwei { get; set; }
        public int wetlandsEins { get; set; }
        public int ashenvaleEins { get; set; }
        public int wetlandsZwei { get; set; }
        public int duskwoodDrei { get; set; }
        public int ashenvaleZwei { get; set; }
        public int duskwoodVier { get; set; }
        public int ashenvaleDrei { get; set; }
        public int thousandNeedles { get; set; }
        public int desolaceEins { get; set; }
        public int hillsbradEins { get; set; }
        public int stranglethornEins { get; set; }
        public int stranglethornZwei{ get; set; }
        public int hillsbradZwei { get; set; }
        public int arathiEins { get; set; }
        public int stranglethornDrei { get; set; }
        public int dustwallowEins { get; set; }
        public int desolaceZwei { get; set; }
        public int badlandsEins { get; set; }
        public int swampOfSorrowsEins { get; set; }
        public int stranglethornVier { get; set; }
        public int alteracMountain { get; set; }
        public int badlandsZwei { get; set; }
        public int tanarisEins { get; set; }
        public int stranglethornFünf { get; set; }
        public int hinterlandsEins { get; set; }
        public int feralasEins { get; set; }
        public int hinterlandsZwei { get; set; }

        //48+ Eastern Kingdoms
        public int hinterlandsDrei { get; set; }
        public int blastedLandsEins { get; set; }
        public int blastedLandsZwei { get; set; }
        public int blastedLandsDrei { get; set; }
        public int burningSteppesEins { get; set; }
        public int burningSteppesZwei { get; set; }
        public int burningSteppesDrei { get; set; }
        public int easternPleaguelandsEins { get; set; }
        public int easternPleaguelandsZwei { get; set; }
        public int easternPleaguelandsDrei { get; set; }
        public int searingGorgeEins { get; set; }
        public int searingGorgeZwei { get; set; }
        public int searingGorgeDrei { get; set; }
        public int swampOfSorrowsZwei { get; set; }
        public int westernPleaguelandsEins { get; set; }
        public int westernPleaguelandsZwei { get; set; }
        public int westernPleaguelandsDrei { get; set; }

        //48+ Kalimdor

        public int azsharaEins { get; set; }
        public int azsharaZwei { get; set; }
        public int azsharaDrei { get; set; }
        public int felwoodEins { get; set; }
        public int felwoodZwei { get; set; }
        public int felwoodDrei { get; set; }
        public int silithusEins { get; set; }
        public int silithusZwei { get; set; }
        public int silithusDrei { get; set; }
        public int feralasZwei { get; set; }
        public int feralasDrei { get; set; }
        public int feralasVier { get; set; }
        public int tanarisZwei { get; set; }
        public int tanarisDrei { get; set; }
        public int ungoroEins { get; set; }
        public int ungoroZwei { get; set; }
        public int ungoroDrei { get; set; }
        public int winterspringEins { get; set; }
        public int winterspringZwei { get; set; }
        public int winterspringDrei { get; set; }
        public int winterspringVier { get; set; }





}


/*
    //Settings   
    public class QuesterSettings
    {
        private static bool isLaunched;

        public static void Initialize()
        {
            isLaunched = true;
            FNVSettings.Load();

            while(isLaunched &amp; Products.IsStarted)
            {
                Thread.Sleep(500);
                Dispose();
            }
        }

        public static void Dispose()
        {
            FNVSettings.CurrentSettings.Save();
            //isLaunched = false;
        }

        public void Settings()
        {
            FNVSettings.Load();
            FNVSettings.CurrentSettings.ToForm();
            FNVSettings.CurrentSettings.Save();
        }
    }

    */

    [Serializable]
    public class FNVSettings : Settings
    {

        public static bool inProgress = false;
        public static void Initialize()
        {
            FNVSettings.Load();
        }

        public static void Dispose()
        {
            FNVSettings.CurrentSettings.Save();
            //isLaunched = false;
        }

        public void Settings()
        {
            FNVSettings.Load();
            FNVSettings.CurrentSettings.ToForm();
            FNVSettings.CurrentSettings.Save();
        }

        public FNVSettings()
        {
        //Completed profiles -&gt; True == completed
        this.launcher = false;
        this.dwarfStart = false;
        this.humanStart = false;
        this.nightelfStart = false;
        this.dwarfHunter = false;
        this.nightelfHunter = false;
        this.nightelfDruid = false;
        this.warlock = false;
        this.kharanos = false;
        this.elwynn = false;
        this.westfallEins = false;
        this.lochModanEins = false;
        this.darkshoreEins = false;
        this.westfallZwei = false;
        this.lochModanZwei = false;
        this.darkshoreZwei = false;
        this.westfallDrei = false;
        this.redridge = false;
        this.duskwoodEins = false;
        this.darkshoreDrei = false;
        this.stonetalon = false;
        this.duskwoodZwei = false;
        this.wetlandsEins = false;
        this.ashenvaleEins = false;
        this.wetlandsZwei = false;
        this.duskwoodDrei = false;
        this.ashenvaleZwei = false;
        this.duskwoodVier = false;
        this.ashenvaleDrei = false;
        this.thousandNeedles = false;
        this.desolaceEins = false; 
        this.hillsbradEins = false; 
        this.stranglethornEins = false;
        this.stranglethornZwei = false;
        this.hillsbradZwei = false;
        this.arathiEins = false;
        this.stranglethornDrei = false;
        this.dustwallowEins = false; 
        this.desolaceZwei = false; 
        this.swampOfSorrowsEins = false; 
        this.stranglethornVier = false; 
        this.badlandsEins = false; 
        this.alteracMountain = false;
        this.badlandsZwei = false;
        this.tanarisEins = false;
        this.stranglethornFünf  = false;
        this.hinterlandsEins = false;
        this.feralasEins = false; 
        this.hinterlandsZwei = false; 

        //48+

        this.hinterlandsDrei = false; 
        this.blastedLandsEins = false; 
        this.blastedLandsZwei = false; 
        this.blastedLandsDrei = false; 
        this.burningSteppesEins = false; 
        this.burningSteppesZwei = false; 
        this.burningSteppesDrei = false; 
        this.easternPleaguelandsEins = false; 
        this.easternPleaguelandsZwei = false; 
        this.easternPleaguelandsDrei = false; 
        this.searingGorgeEins = false; 
        this.searingGorgeZwei = false; 
        this.searingGorgeDrei = false; 
        this.swampOfSorrowsZwei = false; 
        this.westernPleaguelandsEins = false; 
        this.westernPleaguelandsZwei = false; 
        this.westernPleaguelandsDrei = false; 

        //48+ Kalimdor

        this.azsharaEins = false; 
        this.azsharaZwei = false; 
        this.azsharaDrei = false; 
        this.felwoodEins = false; 
        this.felwoodZwei = false; 
        this.felwoodDrei = false; 
        this.silithusEins = false; 
        this.silithusZwei = false; 
        this.silithusDrei = false; 
        this.feralasZwei = false; 
        this.feralasDrei = false; 
        this.feralasVier = false; 
        this.tanarisZwei = false; 
        this.tanarisDrei = false; 
        this.ungoroEins = false; 
        this.ungoroZwei = false; 
        this.ungoroDrei = false; 
        this.winterspringEins = false; 
        this.winterspringZwei = false; 
        this.winterspringDrei = false; 
        this.winterspringVier = false; 

            //FlightMaster discovered
            //Eastern Kingdoms
            this.ArathiHighlands = false;
            this.Wetlands = false;
            this.WesternPlaguelands = false;
            this.EasternPlaguelands = false;
            this.HillsbradFoothills = false;
            this.TheHinterlands = false;
            this.LochModan = false;
            this.Ironforge = false;
            this.SearingGorge = false;
            this.BurningSteppes = false;
            this.RedridgeMountains = false;
            this.Stormwind = false;
            this.Westfall = false;
            this.Duskwood = false;
            this.StranglethornValley = false;
            this.BlastedLands = false;

            //Kalimdor
            this.Teldrassil = false;
            this.Darkshore = false;
            this.Winterspring = false;
            this.Azshara = false;
            this.Ashenvale = false;
            this.StonetalonMountains = false;
            this.Desolace = false;
            this.TheBarrens = false;
            this.Tanaris = false;
            this.FeralasFeathermoon = false;
            this.FeralasThalanaar = false;
            this.UngoroCrater = false;
            this.DustwallowMarsh = false;
            this.Silithus = false;
            this.Moonglade = false;
            this.Felwood = false;

        }

    public static void flightMasterSaveChanges(FlightMasterDB needToChange)
    {

        if(needToChange.name.Contains("Arathi"))
            CurrentSettings.ArathiHighlands = true;

        if(needToChange.name.Contains("Wetlands"))
            CurrentSettings.Wetlands = true;

        if(needToChange.name.Contains("Western"))
            CurrentSettings.WesternPlaguelands = true;

        if(needToChange.name.Contains("Eastern"))
            CurrentSettings.EasternPlaguelands = true;

        if(needToChange.name.Contains("Hillsbrad"))
            CurrentSettings.HillsbradFoothills = true;

        if(needToChange.name.Contains("Hinterlands"))
            CurrentSettings.TheHinterlands = true;

        if(needToChange.name.Contains("Modan"))
            CurrentSettings.LochModan = true;

        if(needToChange.name.Contains("Ironforge"))
            CurrentSettings.Ironforge = true;

        if(needToChange.name.Contains("Searing"))
            CurrentSettings.SearingGorge = true;

        if(needToChange.name.Contains("Burning"))
            CurrentSettings.BurningSteppes = true;

        if(needToChange.name.Contains("Redridge"))
            CurrentSettings.RedridgeMountains = true;

        if(needToChange.name.Contains("Stormwind"))
            CurrentSettings.Stormwind = true;

        if(needToChange.name.Contains("Westfall"))
            CurrentSettings.Westfall = true;

        if(needToChange.name.Contains("Duskwood"))
            CurrentSettings.Duskwood = true;

        if(needToChange.name.Contains("Stranglethorn"))
            CurrentSettings.StranglethornValley = true;

        if(needToChange.name.Contains("Blasted"))
            CurrentSettings.BlastedLands = true;

        if(needToChange.name.Contains("Teldrassil"))
            CurrentSettings.Teldrassil = true;

        if(needToChange.name.Contains("Darkshore"))
            CurrentSettings.Darkshore = true;

        if(needToChange.name.Contains("Winterspring"))
            CurrentSettings.Winterspring = true;

        if(needToChange.name.Contains("Azshara"))
            CurrentSettings.Azshara = true;

        if(needToChange.name.Contains("Ashenvale"))
            CurrentSettings.Ashenvale = true;

        if(needToChange.name.Contains("Stonetalon"))
            CurrentSettings.StonetalonMountains = true;

        if(needToChange.name.Contains("Desolace"))
            CurrentSettings.Desolace = true;

        if(needToChange.name.Contains("TheBarrens"))
            CurrentSettings.TheBarrens = true;

        if(needToChange.name.Contains("Tanaris"))
            CurrentSettings.Tanaris = true;

        if(needToChange.name.Contains("TheBarrens"))
            CurrentSettings.TheBarrens = true;

        if(needToChange.name.Contains("Feathermoon"))
            CurrentSettings.FeralasFeathermoon = true;

        if(needToChange.name.Contains("Thalanaar"))
            CurrentSettings.FeralasThalanaar = true;

        if(needToChange.name.Contains("ro Crater"))
            CurrentSettings.UngoroCrater = true;

        if(needToChange.name.Contains("Dustwallow"))
            CurrentSettings.DustwallowMarsh = true;

        if(needToChange.name.Contains("Silithus"))
            CurrentSettings.Silithus = true;

        if(needToChange.name.Contains("Felwood"))
            CurrentSettings.Felwood = true;
            
            FNVSettings.CurrentSettings.Save();
            Logging.Write("[FNV_Quester]: Settings saved of Flight Master " + needToChange.name);
            return;
    }

        public static void flightMasterSaveChanges(String needToChange)
    {

        if(needToChange.Contains("Arathi"))
            CurrentSettings.ArathiHighlands = true;

        if(needToChange.Contains("Wetlands"))
            CurrentSettings.Wetlands = true;

        if(needToChange.Contains("Western"))
            CurrentSettings.WesternPlaguelands = true;

        if(needToChange.Contains("Eastern"))
            CurrentSettings.EasternPlaguelands = true;

        if(needToChange.Contains("Hillsbrad"))
            CurrentSettings.HillsbradFoothills = true;

        if(needToChange.Contains("Hinterlands"))
            CurrentSettings.TheHinterlands = true;

        if(needToChange.Contains("Modan"))
            CurrentSettings.LochModan = true;

        if(needToChange.Contains("Ironforge"))
            CurrentSettings.Ironforge = true;

        if(needToChange.Contains("Searing"))
            CurrentSettings.SearingGorge = true;

        if(needToChange.Contains("Burning"))
            CurrentSettings.BurningSteppes = true;

        if(needToChange.Contains("Redridge"))
            CurrentSettings.RedridgeMountains = true;

        if(needToChange.Contains("Stormwind"))
            CurrentSettings.Stormwind = true;

        if(needToChange.Contains("Westfall"))
            CurrentSettings.Westfall = true;

        if(needToChange.Contains("Duskwood"))
            CurrentSettings.Duskwood = true;

        if(needToChange.Contains("Stranglethorn"))
            CurrentSettings.StranglethornValley = true;

        if(needToChange.Contains("Blasted"))
            CurrentSettings.BlastedLands = true;

        if(needToChange.Contains("Teldrassil"))
            CurrentSettings.Teldrassil = true;

        if(needToChange.Contains("Darkshore"))
            CurrentSettings.Darkshore = true;

        if(needToChange.Contains("Winterspring"))
            CurrentSettings.Winterspring = true;

        if(needToChange.Contains("Azshara"))
            CurrentSettings.Azshara = true;

        if(needToChange.Contains("Ashenvale"))
            CurrentSettings.Ashenvale = true;

        if(needToChange.Contains("Stonetalon"))
            CurrentSettings.StonetalonMountains = true;

        if(needToChange.Contains("Desolace"))
            CurrentSettings.Desolace = true;

        if(needToChange.Contains("TheBarrens"))
            CurrentSettings.TheBarrens = true;

        if(needToChange.Contains("Tanaris"))
            CurrentSettings.Tanaris = true;

        if(needToChange.Contains("TheBarrens"))
            CurrentSettings.TheBarrens = true;

        if(needToChange.Contains("Feathermoon"))
            CurrentSettings.FeralasFeathermoon = true;

        if(needToChange.Contains("Thalanaar"))
            CurrentSettings.FeralasThalanaar = true;

        if(needToChange.Contains("ro Crater"))
            CurrentSettings.UngoroCrater = true;

        if(needToChange.Contains("Dustwallow"))
            CurrentSettings.DustwallowMarsh = true;

        if(needToChange.Contains("Silithus"))
            CurrentSettings.Silithus = true;

        if(needToChange.Contains("Felwood"))
            CurrentSettings.Felwood = true;
            
            FNVSettings.CurrentSettings.Save();
            Logging.Write("[FNV_Quester]: Settings saved of Flight Master " + needToChange);
            return;
    }

        public static FNVSettings CurrentSettings { get; set; }

        public bool Save()
        {
            try
            {
                return Save(AdviserFilePathAndName("FNV_Quester", ObjectManager.Me.Name + "." + Usefuls.RealmName));
            }
            catch(Exception e)
            {
                Logging.WriteDebug("FNV_Quester =&gt; Save(): " + e);
                return false;
            }
        }

        public static bool Load()
        {
            try
            {
                if(File.Exists(AdviserFilePathAndName("FNV_Quester", ObjectManager.Me.Name + "." + Usefuls.RealmName)))
                {
                    CurrentSettings = Load&lt;FNVSettings&gt;(AdviserFilePathAndName("FNV_Quester", ObjectManager.Me.Name + "." + Usefuls.RealmName));
                    return true;
                }

                FNVSettings.CurrentSettings = new FNVSettings();
            }
            catch(Exception e)
            {
                Logging.WriteDebug("FNV_Quester =&gt; Load(): " + e);
            }
            return false;
        }

        //Finished profiles -&gt; True == completed
        public bool launcher { get; set; }
        public bool dwarfStart { get; set; }
        public bool dwarfHunter { get; set; }
        public bool nightelfHunter { get; set; }
        public bool nightelfDruid { get; set; }
        public bool warlock { get; set; }
        public bool nightelfStart { get; set; }
        public bool humanStart { get; set; }
        public bool kharanos { get; set; }
        public bool elwynn { get; set; }
        public bool westfallEins { get; set; }
        public bool lochModanEins { get; set; }
        public bool darkshoreEins { get; set; }
        public bool westfallZwei { get; set; }
        public bool lochModanZwei { get; set; }
        public bool darkshoreZwei { get; set; }
        public bool westfallDrei { get; set; }
        public bool redridge { get; set; }
        public bool duskwoodEins { get; set; }
        public bool darkshoreDrei { get; set; }
        public bool stonetalon { get; set; }
        public bool duskwoodZwei { get; set; }
        public bool wetlandsEins { get; set; }
        public bool ashenvaleEins { get; set; }
        public bool wetlandsZwei { get; set; }
        public bool duskwoodDrei { get; set; }
        public bool ashenvaleZwei { get; set; }
        public bool duskwoodVier { get; set; }
        public bool ashenvaleDrei { get; set; }
        public bool thousandNeedles { get; set; }
        public bool desolaceEins { get; set; }
        public bool hillsbradEins { get; set; }
        public bool stranglethornEins { get; set; }
        public bool stranglethornZwei{ get; set; }
        public bool hillsbradZwei { get; set; }
        public bool arathiEins { get; set; }
        public bool stranglethornDrei { get; set; }
        public bool dustwallowEins { get; set; }
        public bool desolaceZwei { get; set; }
        public bool swampOfSorrowsEins { get; set; }
        public bool stranglethornVier { get; set; }
        public bool badlandsEins { get; set; }
        public bool alteracMountain { get; set; }
        public bool badlandsZwei { get; set; }
        public bool tanarisEins { get; set; }
        public bool stranglethornFünf { get; set; }
        public bool hinterlandsEins { get; set; }
        public bool feralasEins { get; set; }
        public bool hinterlandsZwei { get; set; }

                //48+ Eastern Kingdoms
        public bool hinterlandsDrei { get; set; }
        public bool blastedLandsEins { get; set; }
        public bool blastedLandsZwei { get; set; }
        public bool blastedLandsDrei { get; set; }
        public bool burningSteppesEins { get; set; }
        public bool burningSteppesZwei { get; set; }
        public bool burningSteppesDrei { get; set; }
        public bool easternPleaguelandsEins { get; set; }
        public bool easternPleaguelandsZwei { get; set; }
        public bool easternPleaguelandsDrei { get; set; }
        public bool searingGorgeEins { get; set; }
        public bool searingGorgeZwei { get; set; }
        public bool searingGorgeDrei { get; set; }
        public bool swampOfSorrowsZwei { get; set; }
        public bool westernPleaguelandsEins { get; set; }
        public bool westernPleaguelandsZwei { get; set; }
        public bool westernPleaguelandsDrei { get; set; }

        //48+ Kalimdor

        public bool azsharaEins { get; set; }
        public bool azsharaZwei { get; set; }
        public bool azsharaDrei { get; set; }
        public bool felwoodEins { get; set; }
        public bool felwoodZwei { get; set; }
        public bool felwoodDrei { get; set; }
        public bool silithusEins { get; set; }
        public bool silithusZwei { get; set; }
        public bool silithusDrei { get; set; }
        public bool feralasZwei { get; set; }
        public bool feralasDrei { get; set; }
        public bool feralasVier { get; set; }
        public bool tanarisZwei { get; set; }
        public bool tanarisDrei { get; set; }
        public bool ungoroEins { get; set; }
        public bool ungoroZwei { get; set; }
        public bool ungoroDrei { get; set; }
        public bool winterspringEins { get; set; }
        public bool winterspringZwei { get; set; }
        public bool winterspringDrei { get; set; }
        public bool winterspringVier { get; set; }



       // public bool hinterlandsZwei { get; set; }

        public bool defaultSettings { get; set; }
       // public bool dwarfStart { get; set; }
       // public bool nightelfStart { get; set; }
        //public bool humanStart { get; set; }
      //  public bool westfallEins { get; set; }
        public bool lochModan { get; set; }
        public bool auberdine { get; set; }
       // public bool westfallZwei { get; set; }
        public bool lakeshire { get; set; }
        public bool wetlands { get; set; }
        public bool ashenvale { get; set; }
       // public bool thousandNeedles { get; set; }
        public bool dustwallow { get; set; }
        public bool badlands { get; set; }
        public bool alterac { get; set; }
        public bool swampOfSorrows { get; set; }
        public bool tanaris { get; set; }
        public bool stranglethorn { get; set; }
        //public bool hinterlandsEins { get; set; }
        public bool feralas { get; set; }
       // public bool hinterlandsZwei { get; set; }

        //FlightMaster
        //Eastern Kingdoms
        public bool Stormwind { get; set; }
        public bool Westfall { get; set; }
        public bool RedridgeMountains { get; set; }
        public bool Duskwood { get; set; }
        public bool StranglethornValley { get; set; }
        public bool Ironforge { get; set; }
        public bool BurningSteppes { get; set; }
        public bool BlastedLands { get; set; }
        public bool SearingGorge { get; set; }
        public bool LochModan { get; set; }
        public bool Wetlands { get; set; }
        public bool ArathiHighlands { get; set; }
        public bool HillsbradFoothills { get; set; }
        public bool WesternPlaguelands { get; set; }
        public bool EasternPlaguelands { get; set; }
        public bool TheHinterlands { get; set; }

        //Kalimdor
        public bool Ashenvale { get; set; }
        public bool Azshara { get; set; }
        public bool Darkshore { get; set; }
        public bool Teldrassil { get; set; }
        public bool Desolace { get; set; }
        public bool DustwallowMarsh { get; set; }
        public bool Felwood { get; set; }
        public bool FeralasFeathermoon { get; set; }
        public bool FeralasThalanaar { get; set; }
        public bool Moonglade { get; set; }
        public bool Silithus { get; set; }
        public bool StonetalonMountains { get; set; }
        public bool Tanaris { get; set; }
        public bool TheBarrens { get; set; }
        public bool UngoroCrater { get; set; }
        public bool Winterspring { get; set; }

    }

    //Buy and check bags
    public class bags
    {
        public static bool bagsStarted = false;

        public static int bagsEquipped()
        {
            int returnValue = 0;
            string empty = "";

            for(int i = 20; i &lt;= 23; i++)
            {
                empty = wManager.Wow.Helpers.Lua.LuaDoString&lt;string&gt;("return GetInventoryItemLink('player', " + i + ")");

                if(empty.Contains("o"))
                    returnValue++;
            }

            return returnValue;
        }

        public static string checkMoney()
        {
            string returnVariableNameZ = "";

            returnVariableNameZ = wManager.Wow.Helpers.Lua.LuaDoString("returnVariableNameZ = GetMoney() return returnVariableNameZ", returnVariableNameZ);

            return returnVariableNameZ;
        }

        public static bool canEquip()
        {
            string returnVariableName = "";

            returnVariableName = wManager.Wow.Helpers.Lua.LuaDoString("returnVariableName = GetInventoryItemLink('player', 23 ) return returnVariableName", returnVariableName);


            if(returnVariableName.Equals(""))
            {
                return true;
            }
            else
            {
                return false;
            }

        }

    }


    //Abandon Quests
    public class abandonQuest
    {

        public static void abandon(string questName)
        {

            string name = questName;

            wManager.Wow.Helpers.Lua.LuaDoString("local name = '" + name + "' for i=1,GetNumQuestLogEntries() do local questTitle, level, questTag, suggestedGroup, isHeader, isCollapsed, isComplete = GetQuestLogTitle(i) if string.find(questTitle, name) then SelectQuestLogEntry(i) SetAbandonQuest() AbandonQuest() end end");


        }

    }



    //Throw away items - by Reapler
    public class throwAway
    {
        public static int GetItemQuantity(string itemName)
        {
            var execute =
                "local itemCount = 0; " +
                "for b=0,4 do " +
                    "if GetBagName(b) then " +
                        "for s=1, GetContainerNumSlots(b) do " +
                            "local itemLink = GetContainerItemLink(b, s) " +
                            "if itemLink then " +
                                "local _, stackCount = GetContainerItemInfo(b, s)\t " +
                                "if string.find(itemLink, \"" + itemName + "\") then " +
                                    "itemCount = itemCount + stackCount; " +
                                "end " +
                            "end " +
                        "end " +
                    "end " +
                "end; " +
                "return itemCount; ";
            return Lua.LuaDoString&lt;int&gt;(execute);
        }

        /// &lt;summary&gt;
        /// Used to delete all items by name.
        /// &lt;/summary&gt;
        /// &lt;param name="itemName"&gt;The item to delete.&lt;/param&gt;
        /// &lt;param name="leaveAmount"&gt;The amount of items which remain in the bag.&lt;/param&gt;
        /// &lt;remarks&gt;Bug at links with "-"&lt;/remarks&gt;
        public static void DeleteItems(string itemName, int leaveAmount)
        {
            var itemQuantity = GetItemQuantity(itemName) - leaveAmount;
            if(string.IsNullOrWhiteSpace(itemName) || itemQuantity &lt;= 0)
                return;
            var execute =
                "local itemCount = " + itemQuantity + "; " +
                "local deleted = 0; " +
                "for b=0,4 do " +
                    "if GetBagName(b) then " +
                        "for s=1, GetContainerNumSlots(b) do " +
                            "local itemLink = GetContainerItemLink(b, s) " +
                            "if itemLink then " +
                                "local _, stackCount = GetContainerItemInfo(b, s)\t " +
                                "local leftItems = itemCount - deleted; " +
                                "if string.find(itemLink, \"" + itemName + "\") and leftItems &gt; 0 then " +
                                    "if stackCount &lt;= 1 then " +
                                        "PickupContainerItem(b, s); " +
                                        "DeleteCursorItem(); " +
                                        "deleted = deleted + 1; " +
                                    "else " +
                                        "if (leftItems &gt; stackCount) then " +
                                            "SplitContainerItem(b, s, stackCount); " +
                                            "DeleteCursorItem(); " +
                                            "deleted = deleted + stackCount; " +
                                        "else " +
                                            "SplitContainerItem(b, s, leftItems); " +
                                            "DeleteCursorItem(); " +
                                            "deleted = deleted + leftItems; " +
                                        "end " +
                                    "end " +
                                "end " +
                            "end " +
                        "end " +
                    "end " +
                "end; ";
            Lua.LuaDoString(execute);
        }
    }


public class Darnassus
{
    private static Vector3 darnassusEnterPos = new Vector3(8775.104, 962.8825, 30.33067);
    private static Vector3 darnassusLeavePos = new Vector3(9945.827, 2598.705, 1316.187);

    public static void enter()
    {
        Logging.Write("[FNV_Quester]: Moving to position to enter Darnassus portal...");

        GoToTask.ToPosition(darnassusEnterPos);

        Logging.Write("[FNV_Quester]: Enter Darnassus, disable teleport...");

        wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;

        Vector3 pos = new Vector3(8812.807f, 972.6884f, 32.50122f);

        while(ObjectManager.Me.Position.DistanceTo(pos) &gt; 1 &amp;&amp; Usefuls.SubMapZoneName.Contains("theran Village"))
        {
            wManager.Wow.Helpers.MovementManager.Face(pos);
            wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 125);
            Thread.Sleep(robotManager.Helpful.Others.Random(10, 25));
        }

        Logging.Write("[FNV_Quester]: Reenable teleport");

        wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = true;
    }

    public static void leave()
    {
        Logging.Write("[FNV_Quester]: Moving to position to leave Darnassus portal...");

        GoToTask.ToPosition(darnassusLeavePos);

        Logging.Write("[FNV_Quester]: Leave Darnassus, disable teleport...");

        wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;

        Vector3 pos = new Vector3(9946.378f, 2642.551f, 1316.749f);

        while(ObjectManager.Me.Position.DistanceTo(pos) &gt; 1 &amp;&amp; Usefuls.MapZoneName.Contains("Darnassus"))
        {
            wManager.Wow.Helpers.MovementManager.Face(pos);
            wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 125);
            Thread.Sleep(robotManager.Helpful.Others.Random(10, 25));
        }

        Logging.Write("[FNV_Quester]: Reenable teleport");
        wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = true;
    }
}

    [Serializable]
    public class FNVQuesterFlightMaster : Settings
    {
        public FNVQuesterFlightMaster()
        {
            //FlightMaster discovered
            //Eastern Kingdoms
            this.ArathiHighlands = false;
            this.Wetlands = false;
            this.WesternPlaguelands = false;
            this.EasternPlaguelands = false;
            this.HillsbradFoothills = false;
            this.TheHinterlands = false;
            this.LochModan = false;
            this.Ironforge = false;
            this.SearingGorge = false;
            this.BurningSteppes = false;
            this.RedridgeMountains = false;
            this.Stormwind = false;
            this.Westfall = false;
            this.Duskwood = false;
            this.StranglethornValley = false;
            this.BlastedLands = false;

            //Kalimdor
            this.Teldrassil = false;
            this.Darkshore = false;
            this.Winterspring = false;
            this.Azshara = false;
            this.Ashenvale = false;
            this.StonetalonMountains = false;
            this.Desolace = false;
            this.TheBarrens = false;
            this.Tanaris = false;
            this.FeralasFeathermoon = false;
            this.FeralasThalanaar = false;
            this.UngoroCrater = false;
            this.DustwallowMarsh = false;
            this.Silithus = false;
            this.Moonglade = false;
            this.Felwood = false;

        }

    public static void flightMasterSaveChanges(FlightMasterDB needToChange)
    {

        if(needToChange.name.Contains("Arathi"))
            CurrentSettings.ArathiHighlands = true;

        if(needToChange.name.Contains("Wetlands"))
            CurrentSettings.Wetlands = true;

        if(needToChange.name.Contains("Western"))
            CurrentSettings.WesternPlaguelands = true;

        if(needToChange.name.Contains("Eastern"))
            CurrentSettings.EasternPlaguelands = true;

        if(needToChange.name.Contains("Hillsbrad"))
            CurrentSettings.HillsbradFoothills = true;

        if(needToChange.name.Contains("Hinterlands"))
            CurrentSettings.TheHinterlands = true;

        if(needToChange.name.Contains("Modan"))
            CurrentSettings.LochModan = true;

        if(needToChange.name.Contains("Ironforge"))
            CurrentSettings.Ironforge = true;

        if(needToChange.name.Contains("Searing"))
            CurrentSettings.SearingGorge = true;

        if(needToChange.name.Contains("Burning"))
            CurrentSettings.BurningSteppes = true;

        if(needToChange.name.Contains("Redridge"))
            CurrentSettings.RedridgeMountains = true;

        if(needToChange.name.Contains("Stormwind"))
            CurrentSettings.Stormwind = true;

        if(needToChange.name.Contains("Westfall"))
            CurrentSettings.Westfall = true;

        if(needToChange.name.Contains("Duskwood"))
            CurrentSettings.Duskwood = true;

        if(needToChange.name.Contains("Stranglethorn"))
            CurrentSettings.StranglethornValley = true;

        if(needToChange.name.Contains("Blasted"))
            CurrentSettings.BlastedLands = true;

        if(needToChange.name.Contains("Teldrassil"))
            CurrentSettings.Teldrassil = true;

        if(needToChange.name.Contains("Darkshore"))
            CurrentSettings.Darkshore = true;

        if(needToChange.name.Contains("Winterspring"))
            CurrentSettings.Winterspring = true;

        if(needToChange.name.Contains("Azshara"))
            CurrentSettings.Azshara = true;

        if(needToChange.name.Contains("Ashenvale"))
            CurrentSettings.Ashenvale = true;

        if(needToChange.name.Contains("Stonetalon"))
            CurrentSettings.StonetalonMountains = true;

        if(needToChange.name.Contains("Desolace"))
            CurrentSettings.Desolace = true;

        if(needToChange.name.Contains("Tanaris"))
            CurrentSettings.Tanaris = true;

        if(needToChange.name.Contains("The Barrens"))
            CurrentSettings.TheBarrens = true;

        if(needToChange.name.Contains("Feathermoon"))
            CurrentSettings.FeralasFeathermoon = true;

        if(needToChange.name.Contains("Thalanaar"))
            CurrentSettings.FeralasThalanaar = true;

        if(needToChange.name.Contains("ro Crater"))
            CurrentSettings.UngoroCrater = true;

        if(needToChange.name.Contains("Dustwallow"))
            CurrentSettings.DustwallowMarsh = true;

        if(needToChange.name.Contains("Silithus"))
            CurrentSettings.Silithus = true;

        if(needToChange.name.Contains("Felwood"))
            CurrentSettings.Felwood = true;

        FNVQuesterFlightMaster.CurrentSettings.Save();
        Logging.Write("[FNV_FlightMaster]: Settings saved of Flight Master " + needToChange.name);
        return;
    }

        public static FNVQuesterFlightMaster CurrentSettings { get; set; }

        public bool Save()
        {
            try
            {
                return Save(AdviserFilePathAndName("FNVQuesterFlightMaster", ObjectManager.Me.Name + "." + Usefuls.RealmName));
            }
            catch(Exception e)
            {
                Logging.WriteDebug("FNVQuesterFlightMaster =&gt; Save(): " + e);
                return false;
            }
        }

        public static bool Load()
        {
            try
            {
                if(File.Exists(AdviserFilePathAndName("FNVQuesterFlightMaster", ObjectManager.Me.Name + "." + Usefuls.RealmName)))
                {
                    CurrentSettings = Load&lt;FNVQuesterFlightMaster&gt;(AdviserFilePathAndName("FNVQuesterFlightMaster", ObjectManager.Me.Name + "." + Usefuls.RealmName));
                    return true;
                }

                FNVQuesterFlightMaster.CurrentSettings = new FNVQuesterFlightMaster();
            }
            catch(Exception e)
            {
                Logging.WriteDebug("FNVQuesterFlightMaster =&gt; Load(): " + e);
            }
            return false;
        }


        //FlightMaster
        //Eastern Kingdoms
        public bool Stormwind { get; set; }
        public bool Westfall { get; set; }
        public bool RedridgeMountains { get; set; }
        public bool Duskwood { get; set; }
        public bool StranglethornValley { get; set; }
        public bool Ironforge { get; set; }
        public bool BurningSteppes { get; set; }
        public bool BlastedLands { get; set; }
        public bool SearingGorge { get; set; }
        public bool LochModan { get; set; }
        public bool Wetlands { get; set; }
        public bool ArathiHighlands { get; set; }
        public bool HillsbradFoothills { get; set; }
        public bool WesternPlaguelands { get; set; }
        public bool EasternPlaguelands { get; set; }
        public bool TheHinterlands { get; set; }

        //Kalimdor

        public bool Ashenvale { get; set; }
        public bool Azshara { get; set; }
        public bool Darkshore { get; set; }
        public bool Teldrassil { get; set; }
        public bool Desolace { get; set; }
        public bool DustwallowMarsh { get; set; }
        public bool Felwood { get; set; }
        public bool FeralasFeathermoon { get; set; }
        public bool FeralasThalanaar { get; set; }
        public bool Moonglade { get; set; }
        public bool Silithus { get; set; }
        public bool StonetalonMountains { get; set; }
        public bool Tanaris { get; set; }
        public bool TheBarrens { get; set; }
        public bool UngoroCrater { get; set; }
        public bool Winterspring { get; set; }

    }

public class Boat
{
    private static bool _boatTaken = false;

    public static void menethilToAuberdine()
    {

        // Settings
        var zeppelinEntryId = 176310; // Zeppelin/Ship EntryId
                                      // From
        var fromZeppelinWaitPosition = new Vector3(-3709.475, -575.0988, 0); // Position where Zeppelin/Ship waits players (from)
        var fromPlayerWaitPosition = new Vector3(-3727.4, -581.3, 6.2); // Position where the player waits Zeppelin/Ship (from)
        var fromPlayerInZeppelinPosition = new Vector3(-3713.333, -571.7416, 6.098111); // Position where the player waits in the Zeppelin/Ship (from)
                                                                                        // To
        var toZeppelinWaitPosition = new Vector3(6406.216, 823.0809, 0); // Position where Zeppelin/Ship waits players (to)
        var toPlayerLeavePosition = new Vector3(6461.408, 806.1595, 6.770809); // Position to go out the Zeppelin/Ship (to)
                                                                               //Pos1
        var enterPos1 = new Vector3(-3724.827, -581.0698, 6.191196);
        //Pos2
        var enterPos2 = new Vector3(-3723.727, -580.3727, 6.184784);
        _boatTaken = false;

        if(!_boatTaken)
        {
            // Change WRobot settings:
            Logging.Write("[FNV_Quester]: Taking boat from Menethil to Auberdine");
            wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;
            wManager.wManagerSetting.CurrentSetting.Repair = false;
            wManager.wManagerSetting.CurrentSetting.Selling = false;
            wManager.wManagerSetting.CurrentSetting.UsePathsFinder = false;

            // Code:
            if(!Conditions.InGameAndConnectedAndProductStartedNotInPause)
                return;

            while(Products.IsStarted &amp;&amp; !_boatTaken)
            {
                while(Usefuls.ContinentId != (int)ContinentId.Kalimdor)
                {
                    if(!ObjectManager.Me.InTransport)
                    {
                        if(GoToTask.ToPosition(fromPlayerWaitPosition))
                        {
                            var zeppelin = ObjectManager.GetWoWGameObjectByEntry(zeppelinEntryId).OrderBy(o =&gt; o.GetDistance).FirstOrDefault();
                            if(zeppelin != null &amp;&amp; zeppelin.Position.DistanceTo(fromZeppelinWaitPosition) &lt; 1)
                            {

                                MovementManager.MoveTo(enterPos1);
                                if(GoToTask.ToPosition(enterPos1))
                                    MovementManager.MoveTo(enterPos2);

                                Lua.LuaDoString("ClearTarget()");

                                //wManager.Wow.Helpers.MovementManager.Face(new Vector3(-3713.333, -571.7416, 6.098111));

                                MovementManager.MoveTo(fromPlayerInZeppelinPosition);
                            }
                        }
                    }
                }
                while(Usefuls.ContinentId == (int)ContinentId.Kalimdor)
                {
                    if(ObjectManager.Me.InTransport)
                    {
                        var zeppelin = ObjectManager.GetWoWGameObjectByEntry(zeppelinEntryId).OrderBy(o =&gt; o.GetDistance).FirstOrDefault();
                        if(zeppelin != null &amp;&amp; zeppelin.Position.DistanceTo(toZeppelinWaitPosition) &lt; 1)
                        {
                            MovementManager.MoveTo(toPlayerLeavePosition);
                            break;
                        }
                    }
                }

                Logging.Write("[FNV_Quester]: Boat taken from Menethil to Auberdine");

                wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = true;
                wManager.wManagerSetting.CurrentSetting.Repair = true;
                wManager.wManagerSetting.CurrentSetting.Selling = true;
                wManager.wManagerSetting.CurrentSetting.UsePathsFinder = true;
                _boatTaken = true;
            }
            return;
        }
        return;
    }
}

public class Key
{
    public static bool haveKey(int keyId)
    {
        bool haveKey = Lua.LuaDoString&lt;bool&gt;("local itemIdSearch = " + keyId + "; local bag = KEYRING_CONTAINER; for slot = 1,MAX_CONTAINER_ITEMS do local itemLink = GetContainerItemLink(bag,slot); local _, itemCount = GetContainerItemInfo(bag,slot); if itemLink and itemCount then local _,_,itemId = string.find(itemLink, '.*|Hitem:(%d+):.*'); if itemId and tonumber(itemId) == itemIdSearch then return true end end end return false");
        return haveKey;
    }
}




public class Authentication
{
    
    private readonly string orderId;
    private readonly string productId;
    private readonly string wRobotAuthKey;

    private readonly BackgroundWorker _validationThread = new BackgroundWorker();
    private bool _isRunning = false;
    private string authUrl;

    public Authentication(string orderId, string productId)
    {
    
        return;  if (orderId == null)
        {
            MessageBox.Show("You need to enter your transaction id (from your Rocketr email) into the plugin settings to use this!");
        }

        this.orderId = orderId;
        this.productId = productId;

        this.wRobotAuthKey = robotManager.Helpful.Others.StringBetween(authManager.LoginServer.GetSubcriptionInfoThread(), robotManager.Translate.Get("License Key") + ": ", "...  - " + robotManager.Translate.Get("Subscription time expire"));
            authUrl = "http://51.38.127.249:8080/authenticate?orderId=" + orderId.Trim() + "&amp;productId=" + productId + "&amp;wRobotAuthKey=" + wRobotAuthKey;
        


        _isRunning = true;
        _validationThread.DoWork += CheckValidiation;
        _validationThread.RunWorkerAsync();
    }
    
    ~Authentication()
    {
        _isRunning = false;
        _validationThread.DoWork -= CheckValidiation;
        _validationThread.Dispose();
    }

    private void CheckValidiation(object sender, DoWorkEventArgs e)
    {
        while (Products.IsStarted &amp;&amp; _isRunning)
        {
            try
            {
                bool timedOut = false;
                HttpWebResponse content = null;
                try
                {
                    var request = (HttpWebRequest)WebRequest.Create(authUrl);
                    request.Timeout = 30000;
                    request.ReadWriteTimeout = 30000;
                    content = (HttpWebResponse)request.GetResponse();
                }
                catch (Exception ex)
                {
                    timedOut = true;
                }
                
                //give it another try
                if ((content != null &amp;&amp; content.StatusCode != HttpStatusCode.OK) || timedOut)
                {
                    Thread.Sleep(60 * 1000);
                    try
                    {
                        var request = (HttpWebRequest)WebRequest.Create(authUrl);
                        request.Timeout = 30000;
                        request.ReadWriteTimeout = 30000;
                        content = (HttpWebResponse)request.GetResponse();
                        timedOut = false;
                    }
                    catch (Exception ex)
                    {
                        timedOut = true;
                    }
                }

                string result = content != null ? new StreamReader(content.GetResponseStream()).ReadToEnd() : "false";

                if (!bool.Parse(result) || (content != null &amp;&amp; content.StatusCode != HttpStatusCode.OK) || timedOut)
                {
                    Products.ProductStop();
                    _isRunning = false;
                    _validationThread.DoWork -= CheckValidiation;
                    _validationThread.Dispose();
                    MessageBox.Show("You are trying to use a different wRobot key with the same order Id or your wRobot key is used by more than 10 IPs. \n\nBot name: " + ObjectManager.Me.Name + "\n\nIf your wRobot key has changed recently (f.e. after purchasing a new one), please contact FNV316");
                    return;
                }

                Thread.Sleep(60 * 1000);
            }
            catch (Exception exp)
            {
                Logging.WriteError("" + exp);
            }
        }
    }
}

    /*
    static ControlAuthentication()
    {
        new Thread(() =&gt;
        {
            while (!Conditions.InGameAndConnectedAndAliveAndProductStarted)
            {
                Thread.Sleep(500);
            }
            Thread.Sleep(30000);
            string status = Logging.Status;
            if (_controlVariable != 5 &amp;&amp; !status.Contains("To Town") &amp;&amp; !status.Contains("Regeneration") &amp;&amp; !status.Contains("Attacked") &amp;&amp; !status.Contains("Trainers") &amp;&amp; !status.Contains("Ressurect") &amp;&amp; !status.Contains("Started"))
            {
                Products.ProductStop();
                MessageBox.Show("Please enter your ID faster, restart the Bot now.");
            }
            Logging.Write("[FNV_Quester]: Launcher authentication sucessful");
        }).Start();
    }
    */

public class ControlAuthentication
{
    private static volatile int _controlVariable = 0;
    private static int _timeout = 0;
    private static bool _isRunning = true;
    private static bool disposeAuthThread = false;
    private static string profileName = "";

    public static void SetControl(int control)
    {
        _controlVariable = control;
    }

    static ControlAuthentication()
    {
        new Thread(() =&gt;
        {
            profileName = wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName;

            while(_isRunning &amp;&amp; !disposeAuthThread &amp;&amp; (wManager.Wow.Helpers.Conditions.ProductIsStarted || wManager.Wow.Helpers.Conditions.ProductInPause))
            {
                if(!wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName.Equals(profileName))
                {
                    disposeAuthThread = true;
                    break;
                }

                if(!wManager.Wow.Helpers.Conditions.ProductIsStarted)
                {
                    disposeAuthThread = true;
                    break;
                }

                while(wManager.Wow.Helpers.Quest.QuesterCurrentContext.CurrentStep &lt; 2)
                {
                    Thread.Sleep(500);

                    if(_controlVariable == 5 || !wManager.Wow.Helpers.Conditions.ProductIsStarted)
                        break;

                    _timeout += 500;

                    if(_timeout &gt;= 910000)
                    {
                        Products.ProductStop();
                        MessageBox.Show("[FNV_Quester]: Timeout error. Unable to authenticate for more than 15 minutes. \n\nBot name: " + ObjectManager.Me.Name);
                        break;
                    }
                }

                _isRunning = false;

                if(wManager.Wow.Helpers.Conditions.ProductIsStarted || wManager.Wow.Helpers.Conditions.ProductInPause)
                {
                    Thread.Sleep(60000);

                    if(_controlVariable != 5)
                    {
                        Products.ProductStop();
                        MessageBox.Show("[FNV_Quester]: Please enter your ID faster or make sure the authentication step is enabled (#0 START_FNVLauncher_V2 -&gt; Step [1], any other profile -&gt; Step [0]). \nRestart the Bot now. \n\nBot name: " + ObjectManager.Me.Name);
                    }
                    /*
                    else
                    {
                        if(!disposeAuthThread &amp;&amp; wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName.Equals(profileName) &amp;&amp; Conditions.ProductIsStarted)
                            Logging.Write("[FNV_Quester]: Authentication sucessful");
                    }
                    */
                    _timeout = 0;
                    _isRunning = true;
                }
            }

        }).Start();
    }
    
}

[Serializable]
public class FNVQuesterAuthSettings : robotManager.Helpful.Settings
{
    [Setting]
    [Category("__IMPORTANT__")]
    [DisplayName("Rocketr Order id")]
    [Description("This is your tracking number for when you purchased this product, it is required to use this consistently. You can find it within your product delivery e-mail")]
    public string TransactionId { get { return "free"; } set { } }

    public FNVQuesterAuthSettings()
    {
        TransactionId = null;
    }
    
    public static FNVQuesterAuthSettings CurrentSetting { get; set; }

    public bool Save()
    {
        try
        {
            return Save(AdviserFilePathAndName("FNVQuester_AuthSettings", "Vanilla_Alliance"));
        }
        catch (Exception e)
        {
            robotManager.Helpful.Logging.Write("FNVQuester_AuthSettings &gt; Save(): " + e);
            return false;
        }
    }

    public static bool Load()
    {
        try
        {
            if (File.Exists(AdviserFilePathAndName("FNVQuester_AuthSettings", "Vanilla_Alliance")))
            {
                CurrentSetting =
                    Load&lt;FNVQuesterAuthSettings&gt;(AdviserFilePathAndName("FNVQuester_AuthSettings", "Vanilla_Alliance"));
                return true;
            }
            CurrentSetting = new FNVQuesterAuthSettings();
        }
        catch (Exception e)
        {
            robotManager.Helpful.Logging.Write("FNVQuester_AuthSettings &gt; Load(): " + e);
        }
        return false;
    }
}

public class SearingGorge
{
     private static bool _isStarted = false;
     private static bool _inPause = false;
     private static int gateId = 161536;
     private static Vector3 gatePosition = new Vector3(-6756, -1166, 187);

    public static void initializeGateDetection()
    {
        if(!_isStarted)
        {
            Logging.Write("[FNV_Quester]: Searing Gorge gate detection initialized");
            _isStarted = true;
            MovementEvents.OnSeemStuck += MovementEventsOnOnSeemStuck;
        }
    }

    private static void pause()
    {
        for(int i = 0; i &lt; 15000; i += 1000)
        {
            Thread.Sleep(1000);
        }
        _inPause = false;
        return;
    }

    public static void disposeGateDetection()
    {
        if(_isStarted)
        {
            Logging.Write("[FNV_Quester]: Searing Gorge gate detection disposed");
            _isStarted = false;
            MovementEvents.OnSeemStuck -= MovementEventsOnOnSeemStuck;
        }
    }

    private static void MovementEventsOnOnSeemStuck()
    {
        Logging.Write("SeemStuck detected");

        if(ObjectManager.Me.Position.DistanceTo(gatePosition) &lt;= 10 &amp;&amp; !_inPause)
        {
            Logging.Write("[FNV_Quester]: Stuck at Quarry Gate, trying to open it...");

            GoToTask.ToPositionAndIntecractWithGameObject(gatePosition, gateId, -1, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore);
            
            if(GoToTask.ToPositionAndIntecractWithGameObject(gatePosition, gateId, -1, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore))
            {
               // _inPause = true;
               // pause();
            }
        }
    }
}

public class SearingGorgeFixedPathfinding
{
    private static List&lt;Vector3&gt; brokenLocationNodes = new List&lt;Vector3&gt;();
    private static bool _inProcessing;
    private static Vector3 currentDestination = new Vector3(0, 0, 0);
    private static string status = "";

    private static void ApplyNodes()
    {
        Vector3 thoriumPoint = new Vector3(-6514, -1162, 308);
        brokenLocationNodes.Add(thoriumPoint);
    }

    public static void Initialize()
    {
        Logging.Write("[FNV_Quester]: Thorium Point pathfinder workaround started");
        MovementEvents.OnMovementPulse += MovementEventsOnOnMovementPulse;
        MovementEvents.OnSeemStuck += MovementEventsOnOnSeemStuck;
        Logging.OnChanged += LoggingEvents_OnChangedStatus;
        ApplyNodes();
        _inProcessing = false;
    }

    public static void Dispose()
    {
        MovementEvents.OnMovementPulse -= MovementEventsOnOnMovementPulse;
        MovementEvents.OnSeemStuck -= MovementEventsOnOnSeemStuck;
        Logging.OnChanged -= LoggingEvents_OnChangedStatus;
    }

    private static void MovementEventsOnOnSeemStuck()
    {
        _inProcessing = false;
    }

    private static void MovementEventsOnOnMovementPulse(List&lt;Vector3&gt; points, CancelEventArgs cancelable)
    {  
        //status = Logging.Status;
        if(CheckDestination(points.LastOrDefault&lt;Vector3&gt;()) &amp;&amp; !_inProcessing &amp;&amp; ObjectManager.Me.Position.DistanceTo(points.Last&lt;Vector3&gt;()) &gt; 50 &amp;&amp; !status.Contains("Follow Path"))
        {
            _inProcessing = true;
            Logging.Write("[FNV_Quester]: Destination vector within broken path finder range. Using custom path for movement to enter instead");
            cancelable.Cancel = true;
            UseCustomPathIn(points.LastOrDefault&lt;Vector3&gt;());
            cancelable.Cancel = false;
            _inProcessing = false;
        }

        if(CheckDestination(ObjectManager.Me.Position) &amp;&amp; !_inProcessing &amp;&amp; ObjectManager.Me.Position.DistanceTo(points.Last&lt;Vector3&gt;()) &gt; 50 &amp;&amp; !status.Contains("Follow Path"))
        {
            _inProcessing = true;
            Logging.Write("[FNV_Quester]: Starting vector within broken path finder range. Using custom path for movement to leave instead");
            cancelable.Cancel = true;
            UseCustomPathOut(points.LastOrDefault&lt;Vector3&gt;());
            cancelable.Cancel = false;
            _inProcessing = false;
        }

        if(CheckDestination(ObjectManager.Me.Position) &amp;&amp; !_inProcessing &amp;&amp; CheckDestination(points.Last&lt;Vector3&gt;()) &amp;&amp; ObjectManager.Me.Position.DistanceTo(points.Last&lt;Vector3&gt;()) &gt; 10 &amp;&amp; !status.Contains("Follow Path"))
        {
            _inProcessing = true;
            currentDestination = points.Last&lt;Vector3&gt;();
            Logging.Write("[FNV_Quester]: Starting and destination vector within broken path finder range. Using custom path for movement instead");
            cancelable.Cancel = true;
            UseCustomPathLoop(points.LastOrDefault&lt;Vector3&gt;());
            cancelable.Cancel = false;
            _inProcessing = false;
        }
    }

    
    private static void LoggingEvents_OnChangedStatus(object sender, Logging.LoggingChangeEventArgs e)
    {
        status = Logging.Status;
    }
    

    private static bool CheckDestination(Vector3 destination)
    {
        foreach(var ele in brokenLocationNodes)
        {
            //Logging.Write("Distance is: " + destination.DistanceTo(ele)); 
            if(destination.DistanceTo(ele) &lt;= 60)
                return true;
        }
        return false;
    }

    private static void UseCustomPathIn(Vector3 destination)
    {

        Vector3 currentDestination = new Vector3(0, 0, 0);

        var path = new List&lt;Vector3&gt;() {
new Vector3(-6605.966f, -1023.291f, 244.5074f, "None"),
new Vector3(-6601.826f, -1023.744f, 244.9385f, "None"),
new Vector3(-6597.218f, -1026.855f, 248.186f, "None"),
new Vector3(-6593.908f, -1031.353f, 252.414f, "None"),
new Vector3(-6591.3f, -1036.307f, 255.8175f, "None"),
new Vector3(-6588.852f, -1041.541f, 258.5742f, "None"),
new Vector3(-6586.07f, -1046.571f, 260.5392f, "None"),
new Vector3(-6582.013f, -1050.151f, 262.3918f, "None"),
new Vector3(-6577.125f, -1052.881f, 264.4617f, "None"),
new Vector3(-6572.03f, -1055.201f, 266.5196f, "None"),
new Vector3(-6566.89f, -1057.423f, 268.521f, "None"),
new Vector3(-6561.761f, -1059.671f, 270.6708f, "None"),
new Vector3(-6556.499f, -1062.034f, 272.971f, "None"),
new Vector3(-6551.548f, -1064.268f, 275.2576f, "None"),
new Vector3(-6546.625f, -1066.932f, 277.3527f, "None"),
new Vector3(-6541.8f, -1069.774f, 279.032f, "None"),
new Vector3(-6536.636f, -1071.892f, 280.7285f, "None"),
new Vector3(-6531.107f, -1072.746f, 282.576f, "None"),
new Vector3(-6525.543f, -1073.38f, 284.4381f, "None"),
new Vector3(-6519.98f, -1074.023f, 286.3544f, "None"),
new Vector3(-6514.447f, -1074.884f, 288.3375f, "None"),
new Vector3(-6508.975f, -1076.073f, 290.369f, "None"),
new Vector3(-6503.632f, -1077.715f, 292.0928f, "None"),
new Vector3(-6498.638f, -1080.577f, 293.695f, "None"),
new Vector3(-6494.001f, -1083.713f, 295.3442f, "None"),
new Vector3(-6490.028f, -1087.634f, 296.9394f, "None"),
new Vector3(-6486.872f, -1092.256f, 298.4525f, "None"),
new Vector3(-6484.295f, -1097.215f, 300.1746f, "None"),
new Vector3(-6483.278f, -1102.701f, 301.5711f, "None"),
new Vector3(-6483.816f, -1108.252f, 302.851f, "None"),
new Vector3(-6485.005f, -1113.707f, 304.0922f, "None"),
new Vector3(-6487.139f, -1118.884f, 305.0337f, "None"),
new Vector3(-6489.344f, -1124.032f, 305.7626f, "None"),
new Vector3(-6491.585f, -1129.163f, 306.1504f, "None"),
new Vector3(-6494.281f, -1134.475f, 306.4971f, "None"),
new Vector3(-6497.214f, -1139.442f, 306.8915f, "None"),
new Vector3(-6500.032f, -1144.085f, 307.3696f, "None"),
new Vector3(-6503.025f, -1149.016f, 307.632f, "None"),
new Vector3(-6505.93f, -1153.804f, 307.8793f, "None"),
new Vector3(-6508.76f, -1158.441f, 307.9853f, "None"),
new Vector3(-6512.148f, -1162.893f, 308.3222f, "None"),
new Vector3(-6517.508f, -1163.161f, 308.5844f, "None"),
            };

        foreach(var ele in path)
        {
            if(ele.DistanceTo(destination) &lt; ele.DistanceTo(currentDestination))
                currentDestination = ele;
        }

        if(wManager.Wow.Bot.Tasks.GoToTask.ToPosition(path.First&lt;Vector3&gt;(), 3.5f, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore))
        {
            wManager.Wow.Bot.Tasks.GoToTask.ToPosition(path.First&lt;Vector3&gt;(), 3.5f, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore);
        }

        while(ObjectManager.Me.Position.DistanceTo(currentDestination) &gt; 5 &amp;&amp; !currentDestination.Equals((Vector3)null) &amp;&amp; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore)
        {
            MovementManager.Go(path);
            Thread.Sleep(100);
        }

        //Logging.Write("Finished takeCustomPath");
        //Reenable();
        _inProcessing = false;
        return;
    }

    private static void UseCustomPathOut(Vector3 destination)
    {

        Vector3 currentDestination = new Vector3(0, 0, 0);

        var path = new List&lt;Vector3&gt;() {
new Vector3(-6520.889f, -1186.334f, 309.2557f, "None"),
new Vector3(-6511.543f, -1163.732f, 308.3743f, "None"),
new Vector3(-6508.988f, -1161.179f, 308.1429f, "None"),
new Vector3(-6504.05f, -1156.218f, 308.0315f, "None"),
new Vector3(-6501.398f, -1153.294f, 308.1518f, "None"),
new Vector3(-6495.091f, -1144.908f, 307.875f, "None"),
new Vector3(-6489.66f, -1136.319f, 307.1272f, "None"),
new Vector3(-6484.931f, -1126.579f, 306.6054f, "None"),
new Vector3(-6481.782f, -1116.925f, 305.3705f, "None"),
new Vector3(-6480.768f, -1106.506f, 302.6744f, "None"),
new Vector3(-6483.211f, -1096.021f, 299.9566f, "None"),
new Vector3(-6488.722f, -1087.545f, 297.2002f, "None"),
new Vector3(-6496.905f, -1080.999f, 294.2147f, "None"),
new Vector3(-6506.868f, -1076.894f, 291.0374f, "None"),
new Vector3(-6516.972f, -1075.943f, 287.6053f, "None"),
new Vector3(-6527.435f, -1075.096f, 283.8497f, "None"),
new Vector3(-6537.802f, -1073.449f, 280.6175f, "None"),
new Vector3(-6548.082f, -1070.127f, 276.9659f, "None"),
new Vector3(-6556.992f, -1065.242f, 273.4804f, "None"),
new Vector3(-6566.444f, -1059.943f, 269.1368f, "None"),
new Vector3(-6575.575f, -1055.484f, 265.3927f, "None"),
new Vector3(-6585.064f, -1050.99f, 261.5944f, "None"),
new Vector3(-6592.596f, -1046.345f, 258.3036f, "None"),
new Vector3(-6594.945f, -1035.768f, 253.8222f, "None"),
new Vector3(-6598.657f, -1026.457f, 247.278f, "None"),
new Vector3(-6605.125f, -1027.011f, 244.9202f, "None"),
new Vector3(-6614.792f, -1030.953f, 244.2407f, "None"),
};

        foreach(var ele in path)
        {
            if(ele.DistanceTo(destination) &lt; ele.DistanceTo(currentDestination))
                currentDestination = ele;
        }

        if(wManager.Wow.Bot.Tasks.GoToTask.ToPosition(path.First&lt;Vector3&gt;(), 3.5f, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore))
        {
            wManager.Wow.Bot.Tasks.GoToTask.ToPosition(path.First&lt;Vector3&gt;(), 3.5f, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore);
        }

        while(ObjectManager.Me.Position.DistanceTo(currentDestination) &gt; 5 &amp;&amp; !currentDestination.Equals((Vector3)null) &amp;&amp; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore)
        {
            MovementManager.Go(path);
            Thread.Sleep(100);
        }

       // Logging.Write("Finished takeCustomPathOut");
        //Reenable();
        _inProcessing = false;
        return;
    }

    private static void UseCustomPathLoop(Vector3 destination)
    {

var path = new List&lt;Vector3&gt;() {
new Vector3(-6511.968f, -1178.022f, 309.2499f, "None"),
new Vector3(-6514.226f, -1180.391f, 309.2652f, "None"),
new Vector3(-6514.92f, -1183.646f, 309.2562f, "None"),
new Vector3(-6512.791f, -1186.548f, 309.2562f, "None"),
new Vector3(-6510.783f, -1189.414f, 309.2562f, "None"),
new Vector3(-6509.006f, -1192.427f, 309.2562f, "None"),
new Vector3(-6512.155f, -1191.501f, 309.2562f, "None"),
new Vector3(-6515.301f, -1190.243f, 309.2562f, "None"),
new Vector3(-6518.614f, -1189.136f, 309.2562f, "None"),
new Vector3(-6522.209f, -1188.875f, 309.2562f, "None"),
new Vector3(-6524.712f, -1188.661f, 309.2562f, "None"),
new Vector3(-6522.414f, -1187.187f, 309.2562f, "None"),
new Vector3(-6521.051f, -1184.315f, 309.2562f, "None"),
new Vector3(-6522.533f, -1181.164f, 309.5719f, "None"),
new Vector3(-6525.171f, -1178.908f, 310.5407f, "None"),
new Vector3(-6528.434f, -1177.668f, 311.458f, "None"),
new Vector3(-6531.906f, -1176.674f, 311.5628f, "None"),
new Vector3(-6535.271f, -1175.711f, 311.0577f, "None"),
new Vector3(-6538.62f, -1174.692f, 310.2652f, "None"),
new Vector3(-6541.887f, -1173.795f, 309.7975f, "None"),
new Vector3(-6545.396f, -1172.942f, 309.3479f, "None"),
new Vector3(-6548.806f, -1172.151f, 309.2578f, "None"),
new Vector3(-6552.216f, -1171.361f, 309.2927f, "None"),
new Vector3(-6555.617f, -1170.538f, 309.4913f, "None"),
new Vector3(-6558.993f, -1169.615f, 309.787f, "None"),
new Vector3(-6559.922f, -1167.805f, 309.8352f, "None"),
new Vector3(-6556.908f, -1165.864f, 310.0252f, "None"),
new Vector3(-6553.557f, -1164.877f, 310.0215f, "None"),
new Vector3(-6550.08f, -1164.484f, 309.926f, "None"),
new Vector3(-6544.97f, -1163.94f, 309.7741f, "None"),
new Vector3(-6534.195f, -1162.793f, 309.3187f, "None"),
new Vector3(-6523.741f, -1161.811f, 309.0215f, "None"),
new Vector3(-6513.615f, -1160.933f, 308.2635f, "None"),
new Vector3(-6506.418f, -1160.309f, 308.1041f, "None"),
new Vector3(-6502.819f, -1159.997f, 308.3569f, "None"),
new Vector3(-6499.444f, -1159.705f, 308.7631f, "None"),
new Vector3(-6496.717f, -1159.744f, 309.0773f, "None"),
new Vector3(-6495.118f, -1161.894f, 309.1303f, "None"),
new Vector3(-6493f, -1162.4f, 309.2f, "None"),
new Vector3(-6495.47f, -1165.365f, 309.19f, "None"),
new Vector3(-6496.578f, -1168.801f, 309.2209f, "None"),
new Vector3(-6497.424f, -1172.189f, 309.2521f, "None"),
new Vector3(-6496.599f, -1175.496f, 311.4286f, "None"),
new Vector3(-6494.471f, -1178.274f, 314.4402f, "None"),
new Vector3(-6492.365f, -1181.069f, 316.9778f, "None"),
new Vector3(-6490.402f, -1183.967f, 319.4284f, "None"),
new Vector3(-6488.469f, -1186.885f, 322.0103f, "None"),
new Vector3(-6486.568f, -1189.69f, 324.5566f, "None"),
new Vector3(-6484.392f, -1192.128f, 325.7157f, "None"),
new Vector3(-6479.565f, -1189.753f, 325.8502f, "None"),
new Vector3(-6477.512f, -1187.101f, 325.9147f, "None"),
new Vector3(-6478.307f, -1183.857f, 325.7819f, "None"),
new Vector3(-6480.627f, -1181.089f, 325.6377f, "None"),
new Vector3(-6482.864f, -1178.397f, 325.7611f, "None"),
new Vector3(-6485f, -1175.625f, 325.7878f, "None"),
new Vector3(-6487.067f, -1172.94f, 325.5157f, "None"),
new Vector3(-6489.333f, -1170.127f, 325.4131f, "None"),
new Vector3(-6492.227f, -1171.737f, 325.9383f, "None"),
new Vector3(-6495.255f, -1173.477f, 326.5012f, "None"),
new Vector3(-6498.819f, -1173.806f, 326.2171f, "None"),
new Vector3(-6501.867f, -1173.776f, 325.811f, "None"),
new Vector3(-6504.835f, -1175.808f, 325.9436f, "None"),
new Vector3(-6507.222f, -1178.351f, 326.3931f, "None"),
new Vector3(-6507.92f, -1181.704f, 326.9203f, "None"),
new Vector3(-6506.445f, -1184.833f, 327.1803f, "None"),
new Vector3(-6504.251f, -1187.702f, 326.8068f, "None"),
new Vector3(-6502.15f, -1190.501f, 326.4582f, "None"),
new Vector3(-6500.116f, -1193.21f, 326.1217f, "None"),
new Vector3(-6498.121f, -1196.085f, 325.64f, "None"),
new Vector3(-6496.097f, -1199.072f, 325.2523f, "None"),
new Vector3(-6493.148f, -1199.734f, 325.4391f, "None"),
new Vector3(-6490.279f, -1197.56f, 325.5786f, "None"),
new Vector3(-6488.075f, -1194.888f, 325.6983f, "None"),
new Vector3(-6489.056f, -1191.798f, 324.8035f, "None"),
new Vector3(-6491.162f, -1189.002f, 322.1753f, "None"),
new Vector3(-6493.301f, -1186.232f, 319.5414f, "None"),
new Vector3(-6495.447f, -1183.467f, 316.7057f, "None"),
new Vector3(-6497.518f, -1180.777f, 313.957f, "None"),
new Vector3(-6499.785f, -1177.831f, 311.3158f, "None"),
new Vector3(-6501.965f, -1175.094f, 309.255f, "None"),
new Vector3(-6504.853f, -1173.284f, 309.1891f, "None"),
new Vector3(-6507.97f, -1174.138f, 309.1942f, "None"),
new Vector3(-6511.066f, -1175.981f, 309.2368f, "None"),
new Vector3(-6513.179f, -1177.529f, 309.2469f, "None"),
};


        foreach(var ele in path)
        {
            if(ele.DistanceTo(destination) &lt; ele.DistanceTo(currentDestination))
                currentDestination = ele;
        }

        if(wManager.Wow.Bot.Tasks.GoToTask.ToPosition(path.First&lt;Vector3&gt;(), 3.5f, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore))
        {
            wManager.Wow.Bot.Tasks.GoToTask.ToPosition(path.First&lt;Vector3&gt;(), 3.5f, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore);
        }
        

        while(ObjectManager.Me.Position.DistanceTo(currentDestination) &gt; 2 &amp;&amp; !currentDestination.Equals((Vector3)null) &amp;&amp; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore)
        {
            if(ObjectManager.Me.Position.DistanceTo(currentDestination) &lt;= 2)
            {
                break;
            }
            
            MovementManager.Go(path);
            Thread.Sleep(100);
        }

        MovementManager.MoveTo(currentDestination);

        //Logging.Write("Finished takeCustomPathLoop");
        currentDestination = new Vector3(0, 0, 0);
        //Reenable();
        _inProcessing = false;
        return;
    }

    //By Matenia
    private static async void Reenable()
    {
        //Logging.Write("Enter reenable");
        await Task.Run(() =&gt;
        {
            Products.InPause = true;
            if(ObjectManager.Me.WowClass == WoWClass.Hunter)
                Lua.LuaDoString("RotaOn = false");
            MovementManager.StopMove();
            MovementManager.CurrentPath.Clear();
            MovementManager.CurrentPathOrigine.Clear();
            Thread.Sleep(5000);
            Products.InPause = false;
            if(ObjectManager.Me.WowClass == WoWClass.Hunter)
                Lua.LuaDoString("RotaOn = true");
            Logging.Write("[VanillaFlightMaster]: Resetting pathing");
        });
    }

}

public class QuesterSettings
{

    public static void ClassSettings()
    {
        if(ObjectManager.Me.WowClass == WoWClass.Warlock)
        {
            switch(ObjectManager.Me.Level / 10)
            {
                case (1):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (2):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (3):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (4):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 45;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 45;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (5):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 50;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 50;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (6):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 50;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 50;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                default:
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;
            }

            if(wManager.wManagerSetting.CurrentSetting.DrinkName.Length &lt; 2)
            {
                wManager.wManagerSetting.CurrentSetting.DrinkIsSpell = false;
                wManager.wManagerSetting.CurrentSetting.DrinkName = "Refreshing Spring Water";
            }


            if(wManager.wManagerSetting.CurrentSetting.FoodName.Length &lt; 2)
            {
                wManager.wManagerSetting.CurrentSetting.FoodIsSpell = false;
                wManager.wManagerSetting.CurrentSetting.FoodName = "Tough Hunk of Bread";
            }

            Logging.Write("[FNV_Quester]: Using default food / drink settings for Warlock");
        }

        if(ObjectManager.Me.WowClass == WoWClass.Warrior)
        {
            switch(ObjectManager.Me.Level / 10)
            {

                case (1):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;

                case (2):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;

                case (3):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 60;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 70;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;

                case (4):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 80;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;

                case (5):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 100;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 80;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;

                case (6):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 120;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 80;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;

                default:
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;
            }

            if(wManager.wManagerSetting.CurrentSetting.FoodName.Length &lt; 2)
            {
                wManager.wManagerSetting.CurrentSetting.FoodIsSpell = false;
                wManager.wManagerSetting.CurrentSetting.FoodName = "Tough Hunk of Bread";
            }

            Logging.Write("[FNV_Quester]: Using default food / drink settings for Warrior");
        }

        if(ObjectManager.Me.WowClass == WoWClass.Rogue)
        {
            switch(ObjectManager.Me.Level / 10)
            {
                case (1):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;

                case (2):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;

                case (3):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;

                case (4):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 75;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;

                case (5):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 100;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 80;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;

                case (6):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 120;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 80;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;

                default:
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;
            }


            if(wManager.wManagerSetting.CurrentSetting.FoodName.Length &lt; 2)
            {
                wManager.wManagerSetting.CurrentSetting.FoodIsSpell = false;
                wManager.wManagerSetting.CurrentSetting.FoodName = "Tough Hunk of Bread";
            }

            Logging.Write("[FNV_Quester]: Using default food / drink settings for Rogue");
        }

        if(ObjectManager.Me.WowClass == WoWClass.Mage)
        {
            switch(ObjectManager.Me.Level / 10)
            {
                case (1):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 50;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (2):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 50;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (3):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 50;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (4):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 60;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 70;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (5):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 60;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 75;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (6):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 60;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 75;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                default:
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 50;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;
            }

            if(wManager.wManagerSetting.CurrentSetting.DrinkName.Length &lt; 2)
            {
                wManager.wManagerSetting.CurrentSetting.DrinkIsSpell = false;
                wManager.wManagerSetting.CurrentSetting.DrinkName = "Refreshing Spring Water";
            }


            if(wManager.wManagerSetting.CurrentSetting.FoodName.Length &lt; 2)
            {
                wManager.wManagerSetting.CurrentSetting.FoodIsSpell = false;
                wManager.wManagerSetting.CurrentSetting.FoodName = "Tough Hunk of Bread";
            }

            Logging.Write("[FNV_Quester]: Using default food / drink settings for Mage");
        }

        if(ObjectManager.Me.WowClass == WoWClass.Druid)
        {
            switch(ObjectManager.Me.Level / 10)
            {
                case (1):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (2):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (3):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (4):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 45;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (5):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 50;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (6):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                default:
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;
            }

            if(wManager.wManagerSetting.CurrentSetting.DrinkName.Length &lt; 2)
            {
                wManager.wManagerSetting.CurrentSetting.DrinkIsSpell = false;
                wManager.wManagerSetting.CurrentSetting.DrinkName = "Refreshing Spring Water";
            }

            if(wManager.wManagerSetting.CurrentSetting.FoodName.Length &lt; 2)
            {
                wManager.wManagerSetting.CurrentSetting.FoodName = "Healing Touch";
                wManager.wManagerSetting.CurrentSetting.FoodIsSpell = true;
            }

            Logging.Write("[FNV_Quester]: Using default food / drink settings for Druid");
        }

        if(ObjectManager.Me.WowClass == WoWClass.Paladin)
        {

            switch(ObjectManager.Me.Level / 10)
            {
                case (1):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (2):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (3):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 60;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (4):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 45;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (5):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 50;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (6):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 100;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 55;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                default:
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;
            }

            if(wManager.wManagerSetting.CurrentSetting.DrinkName.Length &lt; 2)
            {
                wManager.wManagerSetting.CurrentSetting.DrinkIsSpell = false;
                wManager.wManagerSetting.CurrentSetting.DrinkName = "Refreshing Spring Water";
            }

            if(wManager.wManagerSetting.CurrentSetting.FoodName.Length &lt; 2)
            {
                wManager.wManagerSetting.CurrentSetting.FoodName = "Holy Light";
                wManager.wManagerSetting.CurrentSetting.FoodIsSpell = true;
            }


            Logging.Write("[FNV_Quester]: Using default food / drink settings for Paladin");
        }

        if(ObjectManager.Me.WowClass == WoWClass.Hunter)
        {
            switch(ObjectManager.Me.Level / 10)
            {
                case (1):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    Lua.LuaDoString("DEFAULT_CHAT_FRAME:AddMessage('[FNV_Quester]: Do not forget that wRobot counts empty bag slots of ammo bags as free bag space!')");
                    break;

                case (2):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (3):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (4):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 60;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 60;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (5):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (6):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                default:
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    Lua.LuaDoString("DEFAULT_CHAT_FRAME:AddMessage('[FNV_Quester]: Do not forget that wRobot counts empty bag slots of ammo bags as free bag space!')");
                    break;
            }

            if(wManager.wManagerSetting.CurrentSetting.DrinkName.Length &lt; 2)
            {
                wManager.wManagerSetting.CurrentSetting.DrinkIsSpell = false;
                wManager.wManagerSetting.CurrentSetting.DrinkName = "Refreshing Spring Water";
            }

            if(wManager.wManagerSetting.CurrentSetting.FoodName.Length &lt; 2)
            {
                wManager.wManagerSetting.CurrentSetting.FoodIsSpell = false;
                wManager.wManagerSetting.CurrentSetting.FoodName = "Tough Hunk of Bread";
            }

            Logging.Write("[FNV_Quester]: Using default food / drink settings for Hunter");

        }
    }

    public static void SettingsEasternKingdoms()
    {
        //Eastern Kingdoms only
        wManager.wManagerSetting.CurrentSetting.TrainNewSkills = true;

        wManager.wManagerSetting.CurrentSetting.DontStartFighting = false;
        wManager.wManagerSetting.CurrentSetting.DetectNodesStuck = true;
        wManager.wManagerSetting.CurrentSetting.CanAttackUnitsAlreadyInFight = false;
        wManager.wManagerSetting.CurrentSetting.AvoidBlacklistedZonesPathFinder = true;
        wManager.wManagerSetting.CurrentSetting.AttackElite = false;
        wManager.wManagerSetting.CurrentSetting.AttackBeforeBeingAttacked = true;
        wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = true;
        wManager.wManagerSetting.CurrentSetting.FlightMasterTaxiUse = false;
        wManager.wManagerSetting.CurrentSetting.IgnoreFightWhenInMove = false;

        wManager.wManagerSetting.CurrentSetting.Repair = true;
        wManager.wManagerSetting.CurrentSetting.SellGray = true;
        wManager.wManagerSetting.CurrentSetting.SellGreen = true;
        wManager.wManagerSetting.CurrentSetting.Selling = true;
        wManager.wManagerSetting.CurrentSetting.SellWhite = true;
        wManager.wManagerSetting.CurrentSetting.MinFreeBagSlotsToGoToTown = 4;

        wManager.wManagerSetting.CurrentSetting.SearchRadius = 100;
        wManager.wManagerSetting.CurrentSetting.MaxUnitsNear = 100;

        wManager.wManagerSetting.CurrentSetting.WallDistancePathFinder = 2;
        wManager.wManagerSetting.CurrentSetting.AddToNpcDb = false;
        wManager.wManagerSetting.CurrentSetting.BlackListIfNotCompletePath = false;
        wManager.wManagerSetting.CurrentSetting.UseCTM = true;
        wManager.wManagerSetting.CurrentSetting.UseLuaToMove = true;

        wManager.wManagerSetting.CurrentSetting.NpcScanAuctioneer = false;
        wManager.wManagerSetting.CurrentSetting.NpcScanMailboxes = false;
        wManager.wManagerSetting.CurrentSetting.NpcScanRepair = false;
        wManager.wManagerSetting.CurrentSetting.NpcScanVendor = false;

        wManager.wManagerSetting.CurrentSetting.HarvestHerbs = false;
        wManager.wManagerSetting.CurrentSetting.HarvestMinerals = false;

        wManager.wManagerSetting.CurrentSetting.AvoidBlacklistedZonesPathFinder = true;
        wManager.wManagerSetting.CurrentSetting.AvoidWallWithRays = true;
        wManager.wManagerSetting.CurrentSetting.BlackListTrainingDummy = true;
        wManager.wManagerSetting.CurrentSetting.BlackListZoneWhereDead = false;
        wManager.wManagerSetting.CurrentSetting.CalcuCombatRange = false;
        wManager.wManagerSetting.CurrentSetting.CanAttackUnitsAlreadyInFight = false;
        wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;
        wManager.wManagerSetting.CurrentSetting.DetectNodesStuck = true;
        wManager.wManagerSetting.CurrentSetting.DontStartFighting = false;
        wManager.wManagerSetting.CurrentSetting.FlightMasterDiscoverRange = 50;
        wManager.wManagerSetting.CurrentSetting.FlightMasterTaxiUse = false;
        wManager.wManagerSetting.CurrentSetting.HarvestAvoidPlayersRadius = 1;
        wManager.wManagerSetting.CurrentSetting.HarvestDuringLongMove = false;
        wManager.wManagerSetting.CurrentSetting.HarvestTimber = false;
        wManager.wManagerSetting.CurrentSetting.HelpingGroupMembers = true;
        wManager.wManagerSetting.CurrentSetting.IgnoreCombatWithPet = false;
        wManager.wManagerSetting.CurrentSetting.IgnoreFightDuringFarmIfDruidForm = false;
        wManager.wManagerSetting.CurrentSetting.IgnoreFightGoundMount = true;
        wManager.wManagerSetting.CurrentSetting.LootChests = false;
        wManager.wManagerSetting.CurrentSetting.LootMobs = true;
        wManager.wManagerSetting.CurrentSetting.MountDistance = 100;
        wManager.wManagerSetting.CurrentSetting.Relogger = true;
        wManager.wManagerSetting.CurrentSetting.SecurityPauseBotIfNerbyPlayer = false;
        wManager.wManagerSetting.CurrentSetting.RecordChatInLog = true;
        wManager.wManagerSetting.CurrentSetting.SecurityShutdownComputer = false;
        wManager.wManagerSetting.CurrentSetting.UsePathsFinder = true;
        wManager.wManagerSetting.CurrentSetting.UseSpiritHealer = false;
        wManager.wManagerSetting.CurrentSetting.WaitResurrectionSickness = true;
        wManager.wManagerSetting.CurrentSetting.WallDistancePathFinder = 2;

        ClassSettings();

        if(Conditions.ForceIgnoreIsAttacked)
        {
            Logging.Write("[FNV_Quester]: Force ignore attack is enabled, going to disable it...");
            Conditions.ForceIgnoreIsAttacked = false;
        }

         wManager.wManagerSetting.CurrentSetting.Save();
         Thread.Sleep(500);
         wManager.wManagerSetting.CurrentSetting.Save();

        wManager.Wow.Forms.UserControlTabGeneralSettings.ReloadGeneralSettings();

        Logging.Write("[FNV_Quester]: Applied default settings for Eastern Kingdoms");

        return;
    }

    public static void SettingsKalimdor()
    {
        //Kalimdor only
        wManager.wManagerSetting.CurrentSetting.TrainNewSkills = false;

        wManager.wManagerSetting.CurrentSetting.DontStartFighting = false;
        wManager.wManagerSetting.CurrentSetting.DetectNodesStuck = true;
        wManager.wManagerSetting.CurrentSetting.CanAttackUnitsAlreadyInFight = false;
        wManager.wManagerSetting.CurrentSetting.AvoidBlacklistedZonesPathFinder = true;
        wManager.wManagerSetting.CurrentSetting.AttackElite = false;
        wManager.wManagerSetting.CurrentSetting.AttackBeforeBeingAttacked = true;
        wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = true;
        wManager.wManagerSetting.CurrentSetting.FlightMasterTaxiUse = false;
        wManager.wManagerSetting.CurrentSetting.IgnoreFightWhenInMove = false;

        wManager.wManagerSetting.CurrentSetting.Repair = true;
        wManager.wManagerSetting.CurrentSetting.SellGray = true;
        wManager.wManagerSetting.CurrentSetting.SellGreen = true;
        wManager.wManagerSetting.CurrentSetting.Selling = true;
        wManager.wManagerSetting.CurrentSetting.SellWhite = true;
        wManager.wManagerSetting.CurrentSetting.MinFreeBagSlotsToGoToTown = 4;

        wManager.wManagerSetting.CurrentSetting.SearchRadius = 100;
        wManager.wManagerSetting.CurrentSetting.MaxUnitsNear = 100;

        wManager.wManagerSetting.CurrentSetting.WallDistancePathFinder = 2;
        wManager.wManagerSetting.CurrentSetting.AddToNpcDb = false;
        wManager.wManagerSetting.CurrentSetting.BlackListIfNotCompletePath = false;
        wManager.wManagerSetting.CurrentSetting.UseCTM = true;
        wManager.wManagerSetting.CurrentSetting.UseLuaToMove = true;

        wManager.wManagerSetting.CurrentSetting.NpcScanAuctioneer = false;
        wManager.wManagerSetting.CurrentSetting.NpcScanMailboxes = false;
        wManager.wManagerSetting.CurrentSetting.NpcScanRepair = false;
        wManager.wManagerSetting.CurrentSetting.NpcScanVendor = false;

        wManager.wManagerSetting.CurrentSetting.HarvestHerbs = false;
        wManager.wManagerSetting.CurrentSetting.HarvestMinerals = false;

        wManager.wManagerSetting.CurrentSetting.AvoidBlacklistedZonesPathFinder = true;
        wManager.wManagerSetting.CurrentSetting.AvoidWallWithRays = true;
        wManager.wManagerSetting.CurrentSetting.BlackListTrainingDummy = true;
        wManager.wManagerSetting.CurrentSetting.BlackListZoneWhereDead = false;
        wManager.wManagerSetting.CurrentSetting.CalcuCombatRange = false;
        wManager.wManagerSetting.CurrentSetting.CanAttackUnitsAlreadyInFight = false;
        wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;
        wManager.wManagerSetting.CurrentSetting.DetectNodesStuck = true;
        wManager.wManagerSetting.CurrentSetting.DontStartFighting = false;
        wManager.wManagerSetting.CurrentSetting.FlightMasterDiscoverRange = 50;
        wManager.wManagerSetting.CurrentSetting.FlightMasterTaxiUse = false;
        wManager.wManagerSetting.CurrentSetting.HarvestAvoidPlayersRadius = 1;
        wManager.wManagerSetting.CurrentSetting.HarvestDuringLongMove = false;
        wManager.wManagerSetting.CurrentSetting.HarvestTimber = false;
        wManager.wManagerSetting.CurrentSetting.HelpingGroupMembers = true;
        wManager.wManagerSetting.CurrentSetting.IgnoreCombatWithPet = false;
        wManager.wManagerSetting.CurrentSetting.IgnoreFightDuringFarmIfDruidForm = false;
        wManager.wManagerSetting.CurrentSetting.IgnoreFightGoundMount = true;
        wManager.wManagerSetting.CurrentSetting.LootChests = false;
        wManager.wManagerSetting.CurrentSetting.LootMobs = true;
        wManager.wManagerSetting.CurrentSetting.MountDistance = 100;
        wManager.wManagerSetting.CurrentSetting.Relogger = true;
        wManager.wManagerSetting.CurrentSetting.SecurityPauseBotIfNerbyPlayer = false;
        wManager.wManagerSetting.CurrentSetting.RecordChatInLog = true;
        wManager.wManagerSetting.CurrentSetting.SecurityShutdownComputer = false;
        wManager.wManagerSetting.CurrentSetting.UsePathsFinder = true;
        wManager.wManagerSetting.CurrentSetting.UseSpiritHealer = false;
        wManager.wManagerSetting.CurrentSetting.WaitResurrectionSickness = true;
        wManager.wManagerSetting.CurrentSetting.WallDistancePathFinder = 2;

        ClassSettings();

        if(Conditions.ForceIgnoreIsAttacked)
        {
            Logging.Write("[FNV_Quester]: Force ignore attack is enabled, going to disable it...");
            Conditions.ForceIgnoreIsAttacked = false;
        }

         wManager.wManagerSetting.CurrentSetting.Save();
         Thread.Sleep(500);
         wManager.wManagerSetting.CurrentSetting.Save();

        wManager.Wow.Forms.UserControlTabGeneralSettings.ReloadGeneralSettings();

        Logging.Write("[FNV_Quester]: Applied default settings for Kalimdor");

        return;
    }

}


public class Blackspots
{
   

    public static void StartThread()
    {

    Thread BlackspotValidation = new Thread(() =&gt;
    {
        Logging.Write("[FNV_Quester]: Blackspot validation started");
        Dictionary&lt;Vector3, float&gt; blackspots = new Dictionary&lt;Vector3, float&gt;();
        bool _isStarted = false;

        string profileName = "FNV_V2\\#0 START_FNVLauncher_V2.xml";
        string currentProfileName = wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName;
        int counter = 0;

        if(!_isStarted)
        {
            _isStarted = true;

            while(wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName.Equals(profileName) &amp;&amp; Conditions.ProductIsStarted)
            {
                Thread.Sleep(1000);
            }

            while(Conditions.ProductIsStarted || Conditions.ProductInPause)
            {

                if(wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName.Equals(profileName))
                    break;

                if(counter &gt; 300)
                {
                    Logging.Write("[FNV_Quester]: Clear blacklist of current product session");
                    wManager.wManagerSetting.ClearBlacklistOfCurrentProductSession();
                    counter = 0;
                }

                if(wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported)
                    wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;

                if(!wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName.Equals(currentProfileName))
                {
                    Logging.Write("[FNV_Quester]: Profile has been changed. Reset current blackspots and save blackspots of loaded profile...");
                    currentProfileName = wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName;

                    blackspots.Clear();

                    foreach(var temp in wManager.wManagerSetting.GetListZoneBlackListed())
                    {
                        blackspots.Add(temp.GetPosition(), temp.Radius);
                    }
                }

                if(blackspots.Count &gt; wManager.wManagerSetting.GetListZoneBlackListed().Count)
                {
                    Logging.Write("[FNV_Quester]: Reaply default blackspots");
                    try
                    {
                        foreach(var temp in blackspots)
                        {
                            if (!wManager.wManagerSetting.GetListZoneBlackListed().Any(b =&gt; b.GetPosition().DistanceTo(temp.Key) &lt; 0.1 &amp;&amp; System.Math.Abs(b.Radius - temp.Value) &lt; 0.1))
                                wManager.wManagerSetting.AddBlackListZone(temp.Key, temp.Value, true);
                        }
                    }
                    catch(Exception e)
                    {
                    }
                }

                if(wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName.Equals(profileName))
                    break;

                counter++;
                Thread.Sleep(1000);
            }
        }
        _isStarted = false;
        Logging.Write("[FNV_Quester]: Blackspot validation disposed");

    });

        BlackspotValidation.Start();
    }
}

public class ProfileRestarter
{
    private static bool _IsAfk = false;
    private static Vector3 afkPosition = (Vector3)null;
    private static int timer = 0;
    private static bool _isSubscribed = false;
    private static void WatchForEvents()
    {
        if(!_isSubscribed)
        {
            _isSubscribed = true;

            EventsLuaWithArgs.OnEventsLuaWithArgs += (LuaEventsId id, List&lt;string&gt; args) =&gt;
            {
                if(id == wManager.Wow.Enums.LuaEventsId.CHAT_MSG_SYSTEM &amp;&amp; Conditions.ProductIsStartedNotInPause)
                {

                    if(args.FirstOrDefault().Contains("You are now AFK"))
                    {
                        _IsAfk = true;
                        timer = 0;
                        afkPosition = ObjectManager.Me.Position;
                    }
                }
            };
        }
    }

    public static void StartProfileRestarter()
    {

        Thread ProfileRestarterThread = new Thread(() =&gt;
        {
            Logging.Write("[FNV_Quester]: Profile Restarter initialized");

            string profileName = "FNV_V2\\#0 START_FNVLauncher_V2.xml";
            string currentProfileName = wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName;


            while((wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName.Equals(profileName) || !ObjectManager.Me.GetMove) &amp;&amp; Conditions.ProductIsStarted)
            {
                Thread.Sleep(1000);
            }

            if(!_isSubscribed)
            {
                Thread.Sleep(Usefuls.Latency + 500);
                WatchForEvents();
            }

            while(Conditions.ProductIsStarted || Conditions.ProductInPause)
            {

                if(wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName.Equals(profileName))
                    break;

                while(_IsAfk &amp;&amp; timer &lt; 600 &amp;&amp; !wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName.Equals(profileName))
                {
                    Thread.Sleep(1000);
                    timer++;
                }

                if(_IsAfk &amp;&amp; timer &gt;= 600 &amp;&amp; ObjectManager.Me.Position.DistanceTo(afkPosition) &lt; 25)
                {
                    Logging.Write("[FNV_Quester]: Bot seems to stopped / went AFK for too long. Restart of profile in process...");
                    wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName = profileName;
                    robotManager.Products.Products.ProductRestart();
                    break;
                }

                timer = 0;
                _IsAfk = false;
                Thread.Sleep(10000);
            }

            Logging.Write("[FNV_Quester]: Profile Restarter disposed");

        });

        ProfileRestarterThread.Start();
    }
}


class test
{


    public static void testen()
    {

    }
}
    </Script>
  <OffMeshConnections />
  <BlacklistNpc />
  <BlacklistNpcType />
  <Blackspots>
    <Blackspot X="-7660.93457" Y="-525.852661" Z="-271.4869" Radius="250" Continent="None" Comment="" />
    <Blackspot X="-7410.25244" Y="-529.2637" Z="-276.292572" Radius="50" Continent="None" Comment="" />
    <Blackspot X="-7476.99951" Y="-859.941162" Z="-269.789276" Radius="50" Continent="None" Comment="" />
    <Blackspot X="-7645.213" Y="-842.1053" Z="-270.318939" Radius="50" Continent="None" Comment="" />
    <Blackspot X="-7474.76074" Y="-862.199341" Z="-268.922455" Radius="50" Continent="None" Comment="" />
    <Blackspot X="-7418.76953" Y="-919.222839" Z="-269.0327" Radius="50" Continent="None" Comment="" />
    <Blackspot X="-7691.993" Y="-920.507" Z="-269.182648" Radius="50" Continent="None" Comment="" />
    <Blackspot X="-7771.15967" Y="-972.586365" Z="-271.478729" Radius="50" Continent="None" Comment="" />
    <Blackspot X="-7930.98145" Y="-895.173645" Z="-275.0523" Radius="250" Continent="None" Comment="" />
    <Blackspot X="-7181.10742" Y="-1293.32422" Z="-183.232147" Radius="50" Continent="None" Comment="" />
    <Blackspot X="-7774.55029" Y="-2650.45361" Z="9.090216" Radius="200" Continent="None" Comment="" />
    <Blackspot X="-8050.44336" Y="-2557.506" Z="8.346402" Radius="200" Continent="None" Comment="" />
    <Blackspot X="-8146.08" Y="-2431.48364" Z="8.795653" Radius="200" Continent="None" Comment="" />
    <Blackspot X="-6356.23047" Y="-1209.77051" Z="-271.79306" Radius="50" Continent="None" Comment="" />
    <Blackspot X="-6371.999" Y="-1151.26013" Z="-275.381927" Radius="50" Continent="None" Comment="" />
    <Blackspot X="-6413.366" Y="-1082.02075" Z="-271.2742" Radius="50" Continent="None" Comment="" />
    <Blackspot X="-6509.55957" Y="-1049.52112" Z="-272.356049" Radius="50" Continent="None" Comment="" />
    <Blackspot X="-6474.23" Y="-1129.42114" Z="-275.797272" Radius="50" Continent="None" Comment="" />
    <Blackspot X="-6459.34229" Y="-1194.3606" Z="-274.282654" Radius="50" Continent="None" Comment="" />
    <Blackspot X="-6468.938" Y="-1295.61707" Z="-272.532166" Radius="50" Continent="None" Comment="" />
    <Blackspot X="-6630.82" Y="-1314.41174" Z="-272.221954" Radius="100" Continent="None" Comment="" />
    <Blackspot X="-6768.723" Y="-1232.23328" Z="-270.62973" Radius="100" Continent="None" Comment="" />
    <Blackspot X="-6547.0415" Y="-1226.67029" Z="-271.94455" Radius="50" Continent="None" Comment="" />
    <Blackspot X="-6580.80127" Y="-1464.56372" Z="-277.421021" Radius="50" Continent="None" Comment="" />
    <Blackspot X="-6548.903" Y="-1682.53809" Z="-277.367218" Radius="50" Continent="None" Comment="" />
    <Blackspot X="-6457.23926" Y="-1449.70081" Z="-277.3554" Radius="50" Continent="None" Comment="" />
    <Blackspot X="-6732.02734" Y="-1672.364" Z="-277.275421" Radius="75" Continent="None" Comment="" />
    <Blackspot X="-6532.27637" Y="-1846.90381" Z="-276.653046" Radius="50" Continent="None" Comment="" />
  </Blackspots>
</EasyQuestProfile>