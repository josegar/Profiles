<?xml version="1.0" encoding="utf-8"?>
<EasyQuestProfile xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <QuestsSorted>
    <QuestsSorted Action="RunCode" NameClass="FNVQuesterAuthSettings.Load();&#xD;&#xA;        if (false)&#xD;&#xA;        {&#xD;&#xA;            FNVQuesterAuthSettings.CurrentSetting.ToForm();&#xD;&#xA;        }&#xD;&#xA;        FNVQuesterAuthSettings.CurrentSetting.Save();&#xD;&#xA;        new Authentication(FNVQuesterAuthSettings.CurrentSetting.TransactionId, &quot;e8b609dcf76e&quot;); &#xD;&#xA;        ControlAuthentication.SetControl(5);&#xD;&#xA;&#xD;&#xA;ProgressSettings.Initialize();&#xD;&#xA;wManager.Wow.Helpers.Quest.QuesterCurrentContext.CurrentStep = ProgressSettings.CurrentSettings.kharanos - 1;&#xD;&#xA;&#xD;&#xA;Logging.Write(&quot;[FNV_Quester]: Loading current Quester step &quot; + (ProgressSettings.CurrentSettings.kharanos));&#xD;&#xA;&#xD;&#xA;Thread p = new Thread(() =&gt;&#xD;&#xA;{    &#xD;&#xA;ProgressSettings.inProgress = true;&#xD;&#xA;Logging.Write(&quot;[FNV_Quester]: Progress saver initialized&quot;);&#xD;&#xA; &#xD;&#xA; while(robotManager.Products.Products.IsStarted)&#xD;&#xA; {&#xD;&#xA;if(!ProgressSettings.inProgress)&#xD;&#xA;{&#xD;&#xA;ProgressSettings.Dispose();&#xD;&#xA;Logging.Write(&quot;[FNV_Quester]: Progress saver disposed&quot;);&#xD;&#xA;break;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;  if (Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause)&#xD;&#xA;  {&#xD;&#xA; if(ProgressSettings.CurrentSettings.kharanos &lt; wManager.Wow.Helpers.Quest.QuesterCurrentContext.CurrentStep)&#xD;&#xA;{&#xD;&#xA;ProgressSettings.CurrentSettings.kharanos = wManager.Wow.Helpers.Quest.QuesterCurrentContext.CurrentStep;&#xD;&#xA;ProgressSettings.CurrentSettings.Save();&#xD;&#xA;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;  Thread.Sleep(1000);&#xD;&#xA; }&#xD;&#xA;&#xD;&#xA;});&#xD;&#xA;&#xD;&#xA;p.Start();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Thread t = new Thread(() =&gt;&#xD;&#xA;{&#xD;&#xA;Logging.Write(&quot;[FNV_Quester]: Starting auto equip of bags&quot;);&#xD;&#xA;bags.bagsStarted = true;&#xD;&#xA; while (robotManager.Products.Products.IsStarted)&#xD;&#xA; {&#xD;&#xA;&#xD;&#xA;  if (Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; bags.bagsStarted)&#xD;&#xA;  {&#xD;&#xA;     if(bags.canEquip())&#xD;&#xA;{&#xD;&#xA;&#xD;&#xA;if(ItemsManager.GetItemCountById(5571) &gt; 0)&#xD;&#xA;ItemsManager.UseItem(5571);&#xD;&#xA;//Small Black Pouch&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;if(ItemsManager.GetItemCountById(828) &gt; 0)&#xD;&#xA;ItemsManager.UseItem(828);&#xD;&#xA;//Small Blue Pouch&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;if(ItemsManager.GetItemCountById(4496) &gt; 0)&#xD;&#xA;ItemsManager.UseItem(4496);&#xD;&#xA;//Small Brown Pouch&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;if(ItemsManager.GetItemCountById(5572) &gt; 0)&#xD;&#xA;ItemsManager.UseItem(5572);&#xD;&#xA;//Small Green Pouch&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;if(ItemsManager.GetItemCountById(805) &gt; 0)&#xD;&#xA;ItemsManager.UseItem(805);&#xD;&#xA;//Small Red Pouch&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;else&#xD;&#xA;{&#xD;&#xA;Logging.Write(&quot;[FNV_Quester]: Stopping auto equip of bags&quot;);&#xD;&#xA;break;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;  }&#xD;&#xA;  Thread.Sleep(5000);&#xD;&#xA; }&#xD;&#xA;});&#xD;&#xA;if(bags.canEquip())&#xD;&#xA;t.Start();&#xD;&#xA;&#xD;&#xA;NpcDB.AcceptOnlyProfileNpc = true;&#xD;&#xA;wManager.wManagerSetting.CurrentSetting.AttackBeforeBeingAttacked = true;&#xD;&#xA;QuesterSettings.SettingsEasternKingdoms();&#xD;&#xA;wManager.Wow.Forms.UserControlTabGeneralSettings.ReloadGeneralSettings();&#xD;&#xA;wManager.wManagerSetting.CurrentSetting.DoNotSellList.Add(&quot;Crag Boar Rib&quot;);&#xD;&#xA;wManager.wManagerSetting.CurrentSetting.DoNotSellList.Add(&quot;Rhapsody Malt&quot;);&#xD;&#xA;" />
    <QuestsSorted Action="RunCode" NameClass="wManager.Wow.Forms.UserControlTabGeneralSettings.ReloadGeneralSettings();" />
    <QuestsSorted Action="RunCode" NameClass="Logging.Write(&quot;[FNV_Quester]: Going to abandon all quests...&quot;);&#xD;&#xA;&#xD;&#xA;Lua.LuaDoString(&quot;for i=1,GetNumQuestLogEntries() do SelectQuestLogEntry(i); SetAbandonQuest(); AbandonQuest(); end&quot;);" />
    <QuestsSorted Action="PickUp" NameClass="SuppliestoTannok" />
    <QuestsSorted Action="If" NameClass="Quest.HasQuest(2160)" />
    <QuestsSorted Action="Pulse" NameClass="ROUTEDwarfStartToKharanos" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="TurnIn" NameClass="SuppliestoTannok" />
    <QuestsSorted Action="TurnIn" NameClass="SenirsObservations" />
    <QuestsSorted Action="If" NameClass="!wManager.Wow.Helpers.Skill.Has(wManager.Wow.Enums﻿.SkillLine.Cooking)  &amp;&amp; Lua.LuaDoString&lt;int&gt;(&quot;return GetMoney()&quot;) &gt;= 100" />
    <QuestsSorted Action="RunCode" NameClass="int npcEntryId = 1699;&#xD;&#xA;var pos = new Vector3(-5594.5f, -545.8f, 398.8f);&#xD;&#xA;&#xD;&#xA;if(!wManager.Wow.Helpers.Skill.Has(wManager.Wow.Enums﻿.SkillLine.Cooking))&#xD;&#xA;{&#xD;&#xA;&#xD;&#xA;while(!wManager.Wow.Bot.Tasks.GoToTask.ToPositionAndIntecractWithNpc(pos, npcEntryId))&#xD;&#xA;{&#xD;&#xA;wManager.Wow.Bot.Tasks.GoToTask.ToPositionAndIntecractWithNpc(pos, npcEntryId);&#xD;&#xA;Thread.Sleep(Usefuls.Latency + 500);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;Usefuls.SelectGossipOption(GossipOptionsType.trainer);&#xD;&#xA;Thread.Sleep(Usefuls.Latency + 500);&#xD;&#xA;&#xD;&#xA;Lua.LuaDoString(&quot;BuyTrainerService(0)&quot;);&#xD;&#xA;Thread.Sleep(Usefuls.Latency + 500);&#xD;&#xA;Lua.LuaDoString(&quot;CloseTrainer()&quot;);&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="PickUp" NameClass="BeerBastedBoarRibs1" />
    <QuestsSorted Action="Pulse" NameClass="BeerBastedBoarRibs1" />
    <QuestsSorted Action="Pulse" NameClass="ROUTEKharanosToInnkeeper" />
    <QuestsSorted Action="If" NameClass="Quest.HasQuest(384)" />
    <QuestsSorted Action="RunCode" NameClass="int npcEntryId = 1247;&#xD;&#xA;var position = new Vector3(-5601.93f, -531.901f, 399.0906f);&#xD;&#xA;&#xD;&#xA;while(!Quest.IsObjectiveComplete﻿(2, 384))&#xD;&#xA;{&#xD;&#xA;&#xD;&#xA;while(!wManager.Wow.Bot.Tasks.GoToTask.ToPositionAndIntecractWithNpc(position, npcEntryId))&#xD;&#xA;{&#xD;&#xA;wManager.Wow.Bot.Tasks.GoToTask.ToPositionAndIntecractWithNpc(position, npcEntryId);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;if(wManager.Wow.Bot.Tasks.GoToTask.ToPositionAndIntecractWithNpc(position, npcEntryId))&#xD;&#xA;{&#xD;&#xA;Usefuls.SelectGossipOption(GossipOptionsType.vendor);&#xD;&#xA;Thread.Sleep(Usefuls.Latency + 500);&#xD;&#xA;if(ItemsManager.GetItemCountById(2894) &lt;= 0)&#xD;&#xA;{&#xD;&#xA;Lua.LuaDoString(&quot;BuyMerchantItem(7,1)&quot;);&#xD;&#xA;Thread.Sleep(Usefuls.Latency + 500);&#xD;&#xA;return;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;}" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="TurnIn" NameClass="BeerBastedBoarRibs1" />
    <QuestsSorted Action="PickUp" NameClass="ToolsforSteelgrill" />
    <QuestsSorted Action="TurnIn" NameClass="ToolsforSteelgrill" />
    <QuestsSorted Action="PickUp" NameClass="AmmoforRumbleshot" />
    <QuestsSorted Action="PickUp" NameClass="TheGrizzledDen" />
    <QuestsSorted Action="PickUp" NameClass="StockingJetsteam1" />
    <QuestsSorted Action="If" NameClass="Quest.HasQuest(317)" />
    <QuestsSorted Action="RunCode" NameClass="wManager.wManagerSetting.CurrentSetting.DoNotSellList.Add(&quot;Chunk of Boar Meat&quot;);" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="Pulse" NameClass="StockingJetsteam1" />
    <QuestsSorted Action="Pulse" NameClass="StockingJetsteam2" />
    <QuestsSorted Action="TurnIn" NameClass="StockingJetsteam1" />
    <QuestsSorted Action="PickUp" NameClass="Evershine" />
    <QuestsSorted Action="If" NameClass="Quest.HasQuest(5541)" />
    <QuestsSorted Action="Pulse" NameClass="ROUTEKharanosGoToAmmoBox" />
    <QuestsSorted Action="Pulse" NameClass="AmmoforRumbleshot" />
    <QuestsSorted Action="Pulse" NameClass="ROUTEAmmoBoxToRumbleshot" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="TurnIn" NameClass="AmmoforRumbleshot" />
    <QuestsSorted Action="IfHasQuest" NameClass="313" />
    <QuestsSorted Action="Pulse" NameClass="ROUTERumbleshotGoToWendigos" />
    <QuestsSorted Action="Pulse" NameClass="TheGrizzledDen" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="TurnIn" NameClass="TheGrizzledDen" />
    <QuestsSorted Action="IfHasQuest" NameClass="318" />
    <QuestsSorted Action="Pulse" NameClass="ROUTEKharanosToGnomeregan" />
    <QuestsSorted Action="TurnIn" NameClass="Evershine" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="PickUp" NameClass="AFavorforEvershine1" />
    <QuestsSorted Action="If" NameClass="!Quest.GetQuestCompleted(319)" />
    <QuestsSorted Action="PickUp" NameClass="BitterRivals" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="Pulse" NameClass="AFavorforEvershine1" />
    <QuestsSorted Action="Pulse" NameClass="AFavorforEvershine2" />
    <QuestsSorted Action="Pulse" NameClass="AFavorforEvershine3" />
    <QuestsSorted Action="If" NameClass="Quest.HasQuest(310)" />
    <QuestsSorted Action="RunCode" NameClass="int npcEntryId = 269;&#xD;&#xA;var position = new Vector3(-5606.93f, -546.901f, 392.0906f);&#xD;&#xA;&#xD;&#xA;wManager.Wow.Helpers.Conditions.ForceIgnoreIsAttacked = true;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;while(!wManager.Wow.Bot.Tasks.GoToTask.ToPositionAndIntecractWithGameObject(position, npcEntryId))&#xD;&#xA;{&#xD;&#xA;wManager.Wow.Bot.Tasks.GoToTask.ToPositionAndIntecractWithGameObject(position, npcEntryId);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;if(wManager.Wow.Bot.Tasks.GoToTask.ToPositionAndIntecractWithGameObject(position, npcEntryId))&#xD;&#xA;{&#xD;&#xA;Thread.Sleep(Usefuls.Latency + 250);&#xD;&#xA;Lua.LuaDoString(&quot;SelectGossipActiveQuest(1);&quot;);&#xD;&#xA;Thread.Sleep(Usefuls.Latency + 250);&#xD;&#xA;wManager.Wow.Helpers.Quest.CompleteQuest(1);&#xD;&#xA;Thread.Sleep(Usefuls.Latency + 500);&#xD;&#xA;return;&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;" />
    <QuestsSorted Action="RunCode" NameClass="wManager.wManagerSetting.CurrentSetting.DoNotSellList.Add(&quot;Thunder Ale&quot;);&#xD;&#xA;wManager.Wow.Helpers.Conditions.ForceIgnoreIsAttacked = false;&#xD;&#xA;&#xD;&#xA;int npcEntryId = 1247;&#xD;&#xA;var position = new Vector3(-5601.93f, -531.901f, 399.0906f);&#xD;&#xA;int npcEntryIdB = 1373;&#xD;&#xA;var positionB = new Vector3(-5606.93f, -544.901f, 392.0906f);&#xD;&#xA;&#xD;&#xA;while(ItemsManager.GetItemCountById(2686) &lt;= 0)&#xD;&#xA;{&#xD;&#xA;&#xD;&#xA;while(!wManager.Wow.Bot.Tasks.GoToTask.ToPositionAndIntecractWithNpc(position, npcEntryId))&#xD;&#xA;{&#xD;&#xA;wManager.Wow.Bot.Tasks.GoToTask.ToPositionAndIntecractWithNpc(position, npcEntryId);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;if(wManager.Wow.Bot.Tasks.GoToTask.ToPositionAndIntecractWithNpc(position, npcEntryId))&#xD;&#xA;{&#xD;&#xA;Usefuls.SelectGossipOption(GossipOptionsType.vendor);&#xD;&#xA;Thread.Sleep(Usefuls.Latency + 500);&#xD;&#xA;if(ItemsManager.GetItemCountById(2686) &lt;= 0)&#xD;&#xA;{&#xD;&#xA;Lua.LuaDoString(&quot;BuyMerchantItem(6,1)&quot;);&#xD;&#xA;Thread.Sleep(Usefuls.Latency + 500);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;while(ItemsManager.GetItemCountById(2686) &gt; 0)&#xD;&#xA;{&#xD;&#xA;while(!wManager.Wow.Bot.Tasks.GoToTask.ToPositionAndIntecractWithNpc(positionB, npcEntryIdB))&#xD;&#xA;{&#xD;&#xA;wManager.Wow.Bot.Tasks.GoToTask.ToPositionAndIntecractWithNpc(positionB, npcEntryIdB);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;while(wManager.Wow.Bot.Tasks.GoToTask.ToPositionAndIntecractWithNpc(positionB, npcEntryIdB))&#xD;&#xA;{&#xD;&#xA;wManager.Wow.Helpers.Quest.CompleteQuest(1);&#xD;&#xA;Thread.Sleep(Usefuls.Latency + 250);&#xD;&#xA;return;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;}" />
    <QuestsSorted Action="TurnIn" NameClass="BitterRivals" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="PickUp" NameClass="ReturntoMarleth" />
    <QuestsSorted Action="TurnIn" NameClass="ReturntoMarleth" />
    <QuestsSorted Action="TurnIn" NameClass="AFavorforEvershine1" />
    <QuestsSorted Action="PickUp" NameClass="ReturntoBellowfiz" />
    <QuestsSorted Action="PickUp" NameClass="TundraMacGrannsStolenStash" />
    <QuestsSorted Action="IfHasQuest" NameClass="312" />
    <QuestsSorted Action="RunCode" NameClass="int npcEntryId = 1271;&#xD;&#xA;var posFinishWait = new Vector3(-5545.353f, -67.45731f, 420.6684f);&#xD;&#xA;var positionWait = new Vector3(-5607.386f, 13.41774f, 433.7365f);&#xD;&#xA;var positionChest = new Vector3(-5648.641f, -92.45979f, 417.88f); &#xD;&#xA;&#xD;&#xA;wManager.Wow.Helpers.Conditions.ForceIgnoreIsAttacked = true;&#xD;&#xA;&#xD;&#xA;if(Quest.HasQuest(312) &amp;&amp; !Quest.IsObjectiveComplete(1, 312))&#xD;&#xA;{&#xD;&#xA;&#xD;&#xA;while(!wManager.Wow.Bot.Tasks.GoToTask.ToPosition(positionWait))&#xD;&#xA;{&#xD;&#xA;wManager.Wow.Bot.Tasks.GoToTask.ToPosition(positionWait);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;var target = ObjectManager.GetObjectWoWUnit().FirstOrDefault(o =&gt; o.Entry == 1271);&#xD;&#xA;ObjectManager.Me.Target = target.Guid;&#xD;&#xA;&#xD;&#xA;while((posFinishWait).DistanceTo(ObjectManager.Target.Position) &gt; 10 )&#xD;&#xA;{&#xD;&#xA;target = ObjectManager.GetObjectWoWUnit().FirstOrDefault(o =&gt; o.Entry == 1271);&#xD;&#xA;ObjectManager.Me.Target = target.Guid;&#xD;&#xA;Logging.Write(&quot;Waiting for Old Icebeard to leave cave and walk into position&quot;);&#xD;&#xA;Thread.Sleep(3000);&#xD;&#xA;}&#xD;&#xA;Logging.Write(&quot;Finished waiting&quot;);&#xD;&#xA;wManager.Wow.Helpers.Conditions.ForceIgnoreIsAttacked = false;&#xD;&#xA;Lua.LuaDoString(&quot;ClearTarget()&quot;);&#xD;&#xA;return;&#xD;&#xA;}" />
    <QuestsSorted Action="Pulse" NameClass="TundraMacGrannsStolenStash" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="TurnIn" NameClass="TundraMacGrannsStolenStash" />
    <QuestsSorted Action="TurnIn" NameClass="ReturntoBellowfiz" />
    <QuestsSorted Action="If" NameClass="ObjectManager.Me.WowClass == WoWClass.Hunter &amp;&amp; ObjectManager.Me.PlayerRace == PlayerFactions.Dwarf &amp;&amp; !Quest.GetQuestCompleted(6086)" />
    <QuestsSorted Action="Pulse" NameClass="HUNTERGrindTo10" />
    <QuestsSorted Action="LoadProfile" NameClass="FNV_V2\DwarfHunterQuest.xml" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="If" NameClass="ObjectManager.Me.WowClass == WoWClass.Hunter &amp;&amp; ObjectManager.Me.PlayerRace == PlayerFactions.NightElf &amp;&amp; !Quest.GetQuestCompleted(6086)" />
    <QuestsSorted Action="Pulse" NameClass="HUNTERGrindTo10" />
    <QuestsSorted Action="LoadProfile" NameClass="FNV_V2\NightElfHunterQuest.xml" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="If" NameClass="ObjectManager.Me.WowClass == WoWClass.Hunter &amp;&amp; (ObjectManager.Me.PlayerRace == PlayerFactions.Dwarf || ObjectManager.Me.PlayerRace == PlayerFactions.NightElf) &amp;&amp; !ObjectManager.Pet.IsValid &amp;&amp; !Quest.GetQuestCompleted(419)" />
    <QuestsSorted Action="Pulse" NameClass="ROUTEHunterTrainerToTamePet" />
    <QuestsSorted Action="Pulse" NameClass="HUNTERTamePet" />
    <QuestsSorted Action="RunCode" NameClass="if(ObjectManager.Pet.IsValid)&#xD;&#xA;{&#xD;&#xA;Lua.LuaDoString(&quot;CastSpellByName('Beast Training')&quot;);&#xD;&#xA;Thread.Sleep(Usefuls.Latency + 500);&#xD;&#xA;Lua.LuaDoString(&quot;BuyTrainerService(0)&quot;);&#xD;&#xA;Thread.Sleep(Usefuls.Latency + 500);&#xD;&#xA;Lua.LuaDoString(&quot;TogglePetAutocast(4)&quot;);&#xD;&#xA;Thread.Sleep(Usefuls.Latency + 500);&#xD;&#xA;Lua.LuaDoString(&quot;TogglePetAutocast(5)&quot;);&#xD;&#xA;Thread.Sleep(Usefuls.Latency + 500);&#xD;&#xA;}" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="If" NameClass="!Quest.GetQuestCompleted(419)" />
    <QuestsSorted Action="RunCode" NameClass="wManager.wManagerSetting.CurrentSetting.AttackBeforeBeingAttacked = true;" />
    <QuestsSorted Action="Pulse" NameClass="ROUTEKharanosToNextQuestHub" />
    <QuestsSorted Action="Pulse" NameClass="GRINDGrindTo9" />
    <QuestsSorted Action="Pulse" NameClass="ROUTEGoToLostPilot" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="PickUp" NameClass="TheLostPilot" />
    <QuestsSorted Action="TurnIn" NameClass="TheLostPilot" />
    <QuestsSorted Action="PickUp" NameClass="APilotsRevenge" />
    <QuestsSorted Action="Pulse" NameClass="APilotsRevenge" />
    <QuestsSorted Action="TurnIn" NameClass="APilotsRevenge" />
    <QuestsSorted Action="Pulse" NameClass="ROUTEGoToIronforge" />
    <QuestsSorted Action="RunCode" NameClass="FlightMaster.discoverTaxi(&quot;Ironforge&quot;);" />
    <QuestsSorted Action="RunCode" NameClass="wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;" />
    <QuestsSorted Action="RunCode" NameClass="Tram.takeTramIronforge();" />
    <QuestsSorted Action="RunCode" NameClass="wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = true;" />
    <QuestsSorted Action="RunCode" NameClass="FlightMaster.discoverTaxi(&quot;Stormwind&quot;);" />
    <QuestsSorted Action="Pulse" NameClass="ROUTEStormwindToHumanStart" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="RunCode" NameClass="bags.bagsStarted = false;&#xD;&#xA;&#xD;&#xA;ProgressSettings.Dispose();&#xD;&#xA;ProgressSettings.inProgress = false;&#xD;&#xA;&#xD;&#xA;FNVSettings.Initialize();&#xD;&#xA;FNVSettings.CurrentSettings.kharanos = true;&#xD;&#xA;FNVSettings.Dispose();&#xD;&#xA;&#xD;&#xA;while(wManager.wManagerSetting.CurrentSetting.DoNotSellList.Contains(&quot;Crag Boar Rib&quot;) || wManager.wManagerSetting.CurrentSetting.DoNotSellList.Contains(&quot;Rhapsody Malt&quot;))&#xD;&#xA;{&#xD;&#xA;wManager.wManagerSetting.CurrentSetting.DoNotSellList.Remove(&quot;Crag Boar Rib&quot;);&#xD;&#xA;wManager.wManagerSetting.CurrentSetting.DoNotSellList.Remove(&quot;Rhapsody Malt&quot;);&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;" />
    <QuestsSorted Action="LoadProfile" NameClass="FNV_V2\#0 START_FNVLauncher_V2.xml" />
  </QuestsSorted>
  <NpcQuest>
    <NPCQuest Id="6782" Name="Hands Springsprocket" GameObject="false">
      <PickUpQuests>
        <int>2160</int>
      </PickUpQuests>
      <TurnInQuests />
      <Position X="-6248.84" Y="135.042" Z="431.59" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="6806" Name="Tannok Frosthammer" GameObject="false">
      <PickUpQuests />
      <TurnInQuests>
        <int>2160</int>
      </TurnInQuests>
      <Position X="-5590.81" Y="-523.344" Z="399.6519" />
    </NPCQuest>
    <NPCQuest Id="1267" Name="Ragnar Thunderbrew" GameObject="false">
      <PickUpQuests>
        <int>384</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>384</int>
      </TurnInQuests>
      <Position X="-5596.21" Y="-504.132" Z="400.6311" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="1872" Name="Tharek Blackstone" GameObject="false">
      <PickUpQuests>
        <int>415</int>
        <int>400</int>
      </PickUpQuests>
      <TurnInQuests />
      <Position X="-5573.78" Y="-464.455" Z="401.9627" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="1376" Name="Beldin Steelgrill" GameObject="false">
      <PickUpQuests />
      <TurnInQuests>
        <int>400</int>
      </TurnInQuests>
      <Position X="-5488.99" Y="-682.33" Z="394.3528" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="1694" Name="Loslor Rudge" GameObject="false">
      <PickUpQuests>
        <int>5541</int>
      </PickUpQuests>
      <TurnInQuests />
      <Position X="-5499.7" Y="-664.575" Z="395.3121" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="1377" Name="Pilot Stonegear" GameObject="false">
      <PickUpQuests>
        <int>313</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>313</int>
      </TurnInQuests>
      <Position X="-5473.19" Y="-641.798" Z="393.1167" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="1378" Name="Pilot Bellowfiz" GameObject="false">
      <PickUpQuests>
        <int>318</int>
        <int>317</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>317</int>
        <int>320</int>
      </TurnInQuests>
      <Position X="-5466.53" Y="-632.141" Z="393.7552" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="1269" Name="Razzle Sprysprocket" GameObject="false">
      <PickUpQuests>
        <int>412</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>412</int>
      </TurnInQuests>
      <Position X="-5497.94" Y="-455.835" Z="395.438" />
    </NPCQuest>
    <NPCQuest Id="1374" Name="Rejold Barleybrew" GameObject="false">
      <PickUpQuests>
        <int>319</int>
        <int>320</int>
        <int>413</int>
        <int>315</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>319</int>
        <int>318</int>
        <int>415</int>
        <int>315</int>
      </TurnInQuests>
      <Position X="-5378.4" Y="315.291" Z="394.1061" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="1375" Name="Marleth Barleybrew" GameObject="false">
      <PickUpQuests>
        <int>310</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>311</int>
      </TurnInQuests>
      <Position X="-5372.03" Y="315.428" Z="394.2612" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="269" Name="Guarded Thunder Ale Barrel" GameObject="true">
      <PickUpQuests>
        <int>403</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>403</int>
      </TurnInQuests>
      <Position X="-5607.24" Y="-547.934" Z="392.985" />
    </NPCQuest>
    <NPCQuest Id="270" Name="Unguarded Thunder Ale Barrel" GameObject="true">
      <PickUpQuests>
        <int>311</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>310</int>
      </TurnInQuests>
      <Position X="-5607.24" Y="-547.934" Z="392.985" />
    </NPCQuest>
    <NPCQuest Id="1977" Name="Senator Mehr Stonehallow" GameObject="false">
      <PickUpQuests>
        <int>433</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>433</int>
      </TurnInQuests>
      <Position X="-5714.72" Y="-1580" Z="383.2046" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="1254" Name="Foreman Stonebrow" GameObject="false">
      <PickUpQuests>
        <int>432</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>432</int>
      </TurnInQuests>
      <Position X="-5726.58" Y="-1600.29" Z="385.9017" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="1960" Name="Pilot Hammerfoot" GameObject="false">
      <PickUpQuests>
        <int>419</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>417</int>
      </TurnInQuests>
      <Position X="-5163.74" Y="-2329.58" Z="400.492" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="2059" Name="A Dwarven Corpse" GameObject="true">
      <PickUpQuests>
        <int>417</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>419</int>
      </TurnInQuests>
      <Position X="-5064.78" Y="-2121.73" Z="404.416" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="1959" Name="Mountaineer Barleybrew" GameObject="false">
      <PickUpQuests />
      <TurnInQuests>
        <int>413</int>
      </TurnInQuests>
      <Position X="-5479.75" Y="-2447.09" Z="400.4921" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="1243" Name="Hegnar Rumbleshot" GameObject="false">
      <PickUpQuests />
      <TurnInQuests>
        <int>5541</int>
      </TurnInQuests>
      <Position X="-6015.51" Y="-201.511" Z="407.3553" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="1266" Name="Tundra MacGrann" GameObject="false">
      <PickUpQuests>
        <int>312</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>312</int>
      </TurnInQuests>
      <Position X="-5573.01" Y="99.3317" Z="483.7273" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="786" Name="Grelin Whitebeard" GameObject="false">
      <PickUpQuests>
        <int>282</int>
      </PickUpQuests>
      <TurnInQuests />
      <Position X="-6363" Y="567.085" Z="385.7677" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="1965" Name="Mountaineer Thalos" GameObject="false">
      <PickUpQuests />
      <TurnInQuests>
        <int>282</int>
      </TurnInQuests>
      <Position X="-6235.87" Y="152.989" Z="428.3168" Type="Flying" />
    </NPCQuest>
  </NpcQuest>
  <Npc>
    <Npc>
      <Position X="-5640" Y="-528.801" Z="404.2963" Type="Flying" />
      <Entry>5612</Entry>
      <Name>Gimrizz Shadowcog</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>WarlockTrainer</Type>
      <ContinentId>Azeroth</ContinentId>
    </Npc>
    <Npc>
      <Position X="-5618.54" Y="-454.071" Z="407.6593" Type="Flying" />
      <Entry>1231</Entry>
      <Name>Grif Wildheart</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>HunterTrainer</Type>
      <ContinentId>Azeroth</ContinentId>
    </Npc>
    <Npc>
      <Position X="-5586.76" Y="-542.163" Z="403.541" />
      <Entry>1232</Entry>
      <Name>Azar Stronghammer</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>PaladinTrainer</Type>
      <ContinentId>Azeroth</ContinentId>
    </Npc>
    <Npc>
      <Position X="-5586.94" Y="-537.173" Z="403.5407" />
      <Entry>1228</Entry>
      <Name>Magis Sparkmantle</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>MageTrainer</Type>
      <ContinentId>Azeroth</ContinentId>
    </Npc>
    <Npc>
      <Position X="-5590.56" Y="-529.657" Z="399.6519" />
      <Entry>1226</Entry>
      <Name>Maxan Anvol</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>PriestTrainer</Type>
      <ContinentId>Azeroth</ContinentId>
    </Npc>
    <Npc>
      <Position X="-5605.73" Y="-530.385" Z="399.6549" />
      <Entry>1229</Entry>
      <Name>Granis Swiftaxe</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>WarriorTrainer</Type>
      <ContinentId>Azeroth</ContinentId>
    </Npc>
    <Npc>
      <Position X="-5601.6" Y="-531.203" Z="399.6536" />
      <Entry>1247</Entry>
      <Name>Innkeeper Belm</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>Vendor</Type>
      <ContinentId>Azeroth</ContinentId>
    </Npc>
    <Npc>
      <Position X="-5604.44" Y="-540.323" Z="399.0966" />
      <Entry>1234</Entry>
      <Name>Hogral Bakkan</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>RogueTrainer</Type>
      <ContinentId>Azeroth</ContinentId>
    </Npc>
    <Npc>
      <Position X="-5590.67" Y="-428.416" Z="397.3257" />
      <Entry>1273</Entry>
      <Name>Grawn Thromwyn</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>Repair</Type>
      <ContinentId>Azeroth</ContinentId>
    </Npc>
    <Npc>
      <Position X="-5363.67" Y="319.114" Z="394.1142" Type="Flying" />
      <Entry>3162</Entry>
      <Name>Burdrak Harglhelm</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>Repair</Type>
      <ContinentId>Azeroth</ContinentId>
    </Npc>
    <Npc>
      <Position X="-5387.62" Y="302.251" Z="393.9711" Type="Flying" />
      <Entry>1697</Entry>
      <Name>Keeg Gibn</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>Vendor</Type>
      <ContinentId>Azeroth</ContinentId>
    </Npc>
    <Npc>
      <Position X="-4840.67" Y="-857.094" Z="501.9142" />
      <Entry>5111</Entry>
      <Name>Innkeeper Firebrew</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>Vendor</Type>
      <ContinentId>Azeroth</ContinentId>
    </Npc>
    <Npc>
      <Position X="-4612.25" Y="-909.152" Z="501.062" />
      <Entry>11406</Entry>
      <Name>High Priest Rohan</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>PriestTrainer</Type>
      <ContinentId>Azeroth</ContinentId>
    </Npc>
    <Npc>
      <Position X="-4604.94" Y="-921.489" Z="501.0736" />
      <Entry>5145</Entry>
      <Name>Juli Stormkettle</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>MageTrainer</Type>
      <ContinentId>Azeroth</ContinentId>
    </Npc>
    <Npc>
      <Position X="-4592.85" Y="-907.687" Z="502.7669" />
      <Entry>5148</Entry>
      <Name>Beldruk Doombrow</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>PaladinTrainer</Type>
      <ContinentId>Azeroth</ContinentId>
    </Npc>
    <Npc>
      <Position X="-4603.6" Y="-1115.38" Z="504.939" />
      <Entry>5172</Entry>
      <Name>Briarthorn</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>WarlockTrainer</Type>
      <ContinentId>Azeroth</ContinentId>
    </Npc>
    <Npc>
      <Position X="-4650.12" Y="-1120.8" Z="508.5507" />
      <Entry>5167</Entry>
      <Name>Fenthwick</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>RogueTrainer</Type>
      <ContinentId>Azeroth</ContinentId>
    </Npc>
    <Npc>
      <Position X="-4794.96" Y="-1122.64" Z="498.8069" Type="Flying" />
      <Entry>4259</Entry>
      <Name>Thurgrum Deepforge</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>Repair</Type>
      <ContinentId>Azeroth</ContinentId>
    </Npc>
    <Npc>
      <Position X="-5006.6" Y="-1266.04" Z="507.7537" />
      <Entry>5117</Entry>
      <Name>Regnus Thundergranite</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>HunterTrainer</Type>
      <ContinentId>Azeroth</ContinentId>
    </Npc>
    <Npc>
      <Position X="-5035.67" Y="-1234.64" Z="507.752" />
      <Entry>5114</Entry>
      <Name>Bilban Tosslespanner</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>WarriorTrainer</Type>
      <ContinentId>Azeroth</ContinentId>
    </Npc>
    <Npc>
      <Position X="-5671.19" Y="-1577.15" Z="383.2047" Type="Flying" />
      <Entry>1237</Entry>
      <Name>Kazan Mogosh</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>Vendor</Type>
      <ContinentId>Azeroth</ContinentId>
    </Npc>
    <Npc>
      <Position X="-5714.37" Y="-1589.52" Z="383.2047" Type="Flying" />
      <Entry>1698</Entry>
      <Name>Frast Dokner</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>Repair</Type>
      <ContinentId>Azeroth</ContinentId>
    </Npc>
  </Npc>
  <EasyQuests>
    <EasyQuest>
      <Name>A Favor for Evershine1</Name>
      <QuestId>
        <int>319</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="-5294.242" Y="417.484" Z="389.2695" />
          <Vector3 X="-5408.12" Y="551.1686" Z="388.4114" />
          <Vector3 X="-5437.535" Y="442.0466" Z="385.3263" />
          <Vector3 X="-5575.772" Y="336.8735" Z="391.5201" />
          <Vector3 X="-5671" Y="418.2276" Z="386.0117" />
        </HotSpots>
        <EntryTarget>
          <int>1196</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>true</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>A Favor for Evershine2</Name>
      <QuestId>
        <int>319</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="-5628.55" Y="407.606" Z="382.4171" />
          <Vector3 X="-5685.56" Y="490.94" Z="387.6241" />
          <Vector3 X="-5502.211" Y="350.1781" Z="393.6751" />
          <Vector3 X="-5408.583" Y="512.499" Z="386.0243" />
          <Vector3 X="-5265.165" Y="405.5356" Z="391.2521" />
        </HotSpots>
        <EntryTarget>
          <int>1127</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>true</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>A Favor for Evershine3</Name>
      <QuestId>
        <int>319</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="-5351.015" Y="415.2826" Z="388.766" />
          <Vector3 X="-5510.593" Y="375.4371" Z="388.4008" />
          <Vector3 X="-5641.018" Y="453.7893" Z="384.1082" />
          <Vector3 X="-5399.974" Y="522.3301" Z="387.0241" />
        </HotSpots>
        <EntryTarget>
          <int>1201</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>true</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>A Pilot's Revenge</Name>
      <QuestId>
        <int>417</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="-5116.94" Y="-2054.59" Z="426.8842" />
        </HotSpots>
        <EntryTarget>
          <int>1961</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>true</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition>return ObjectManager.Me.WowClass != WoWClass.Warrior;</CanCondition>
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Ammo for Rumbleshot</Name>
      <QuestId>
        <int>5541</int>
      </QuestId>
      <QuestType>Gatherer</QuestType>
      <QuestClass xsi:type="GathererEasyQuestClass">
        <HotSpots>
          <Vector3 X="-5744.919" Y="-371.9135" Z="365.8049" />
        </HotSpots>
        <EntryIdObjects>
          <int>176785</int>
        </EntryIdObjects>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>true</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Beer Basted Boar Ribs1</Name>
      <QuestId>
        <int>384</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="-5738.806" Y="-572.8336" Z="398.8127" />
          <Vector3 X="-5918.444" Y="-588.363" Z="402.9184" />
          <Vector3 X="-5821.589" Y="-732.4848" Z="397.6316" />
          <Vector3 X="-5767.546" Y="-405.4182" Z="365.3202" />
          <Vector3 X="-5866.949" Y="-190.2006" Z="358.2649" />
        </HotSpots>
        <EntryTarget>
          <int>1126</int>
          <int>1125</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>true</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Bitter Rivals</Name>
      <QuestId>
        <int>310</int>
      </QuestId>
      <QuestType>None</QuestType>
      <QuestClass />
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Evershine</Name>
      <QuestId>
        <int>318</int>
      </QuestId>
      <QuestType>None</QuestType>
      <QuestClass />
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Guarded Thunderbrew Barrel</Name>
      <QuestId>
        <int>403</int>
      </QuestId>
      <QuestType>None</QuestType>
      <QuestClass />
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Operation Recombobulation1</Name>
      <QuestId>
        <int>412</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="-5316.971" Y="576.0856" Z="387.7056" />
          <Vector3 X="-5245.869" Y="539.6372" Z="387.3803" />
        </HotSpots>
        <EntryTarget>
          <int>1211</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>true</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>true</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Return to Bellowfiz</Name>
      <QuestId>
        <int>320</int>
      </QuestId>
      <QuestType>None</QuestType>
      <QuestClass />
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Return to Marleth</Name>
      <QuestId>
        <int>311</int>
      </QuestId>
      <QuestType>None</QuestType>
      <QuestClass />
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>310</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTEAmmoBoxToRumbleshot</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="-5749.354" Y="-365.2915" Z="365.6584" />
          <Vector3 X="-5757.962" Y="-362.5658" Z="366.661" />
          <Vector3 X="-5784.67" Y="-362.7856" Z="365.7384" />
          <Vector3 X="-5810.043" Y="-369.0835" Z="370.0203" />
          <Vector3 X="-5831.02" Y="-383.2249" Z="381.5761" />
          <Vector3 X="-5848.755" Y="-402.5666" Z="398.018" />
          <Vector3 X="-5868.88" Y="-420.5323" Z="412.2264" />
          <Vector3 X="-5885.559" Y="-439.4589" Z="415.6096" />
          <Vector3 X="-5895.131" Y="-454.6995" Z="414.0589" />
          <Vector3 X="-5904.846" Y="-463.5107" Z="413.1929" />
          <Vector3 X="-5916.488" Y="-457.5807" Z="413.0511" />
          <Vector3 X="-5928.844" Y="-445.6217" Z="413.4005" />
          <Vector3 X="-5948.661" Y="-427.3104" Z="412.9916" />
          <Vector3 X="-5963.777" Y="-406.8762" Z="413.0027" />
          <Vector3 X="-5978.093" Y="-384.8736" Z="413.8666" />
          <Vector3 X="-5988.372" Y="-369.0757" Z="416.3304" />
          <Vector3 X="-5994.443" Y="-356.6157" Z="417.619" />
          <Vector3 X="-5998.2" Y="-330.6527" Z="419.3246" />
          <Vector3 X="-6003.146" Y="-305.7161" Z="419.1257" />
          <Vector3 X="-6007.959" Y="-279.112" Z="417.5572" />
          <Vector3 X="-6009.925" Y="-262.0174" Z="415.6489" />
          <Vector3 X="-6010.103" Y="-255.4573" Z="414.9497" />
          <Vector3 X="-6012.568" Y="-228.5326" Z="412.669" />
          <Vector3 X="-6013.88" Y="-213.7859" Z="409.6112" />
          <Vector3 X="-6014.421" Y="-208.0363" Z="408.2885" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTEDwarfStartToKharanos</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="-6241.849" Y="134.1703" Z="431.0626" />
          <Vector3 X="-6232.938" Y="128.0055" Z="430.7138" />
          <Vector3 X="-6224.226" Y="122.1521" Z="431.6615" />
          <Vector3 X="-6218.134" Y="118.3086" Z="431.6615" />
          <Vector3 X="-6209.243" Y="112.7227" Z="431.8438" />
          <Vector3 X="-6204.405" Y="111.1274" Z="431.5708" />
          <Vector3 X="-6195.823" Y="116.4245" Z="430.404" />
          <Vector3 X="-6189.945" Y="125.0983" Z="429.2202" />
          <Vector3 X="-6181.46" Y="131.0882" Z="426.1931" />
          <Vector3 X="-6170.847" Y="132.0245" Z="422.8918" />
          <Vector3 X="-6162.071" Y="127.0497" Z="422.335" />
          <Vector3 X="-6153.793" Y="120.5915" Z="421.4505" />
          <Vector3 X="-6153.77" Y="115.4739" Z="420.895" />
          <Vector3 X="-6155.614" Y="105.1379" Z="419.6406" />
          <Vector3 X="-6157.196" Y="94.75787" Z="418.4969" />
          <Vector3 X="-6158.24" Y="87.27112" Z="416.4833" />
          <Vector3 X="-6157.653" Y="76.82542" Z="414.0349" />
          <Vector3 X="-6153.888" Y="66.89444" Z="413.4309" />
          <Vector3 X="-6144.096" Y="65.64571" Z="415.4229" />
          <Vector3 X="-6135.552" Y="72.27406" Z="416.8989" />
          <Vector3 X="-6127.35" Y="78.22057" Z="417.2823" />
          <Vector3 X="-6116.807" Y="79.36281" Z="416.2224" />
          <Vector3 X="-6110.49" Y="71.42503" Z="415.91" />
          <Vector3 X="-6107.953" Y="61.24279" Z="414.99" />
          <Vector3 X="-6104.345" Y="51.53296" Z="413.261" />
          <Vector3 X="-6094.83" Y="48.04628" Z="413.495" />
          <Vector3 X="-6084.473" Y="49.42014" Z="411.6451" />
          <Vector3 X="-6074.756" Y="45.59883" Z="410.0012" />
          <Vector3 X="-6065.095" Y="41.53963" Z="408.1411" />
          <Vector3 X="-6054.749" Y="41.92215" Z="407.844" />
          <Vector3 X="-6044.631" Y="44.72769" Z="407.844" />
          <Vector3 X="-6031.145" Y="48.48621" Z="405.9984" />
          <Vector3 X="-6022.766" Y="51.00425" Z="405.7392" />
          <Vector3 X="-6006.342" Y="57.03798" Z="403.1269" />
          <Vector3 X="-5989.51" Y="61.80722" Z="400.2039" />
          <Vector3 X="-5972.184" Y="64.08127" Z="396.0159" />
          <Vector3 X="-5954.69" Y="63.82552" Z="388.7929" />
          <Vector3 X="-5937.223" Y="62.76331" Z="381.6933" />
          <Vector3 X="-5920.384" Y="58.86679" Z="375.1549" />
          <Vector3 X="-5910.16" Y="45.25756" Z="370.2118" />
          <Vector3 X="-5908.586" Y="27.94862" Z="367.4336" />
          <Vector3 X="-5911.858" Y="10.78004" Z="367.5346" />
          <Vector3 X="-5916.557" Y="-8.612209" Z="369.3087" />
          <Vector3 X="-5924.239" Y="-37.40763" Z="375.261" />
          <Vector3 X="-5933.425" Y="-70.31582" Z="382.9842" />
          <Vector3 X="-5945.749" Y="-95.19633" Z="391.5344" />
          <Vector3 X="-5957.864" Y="-118.3526" Z="395.5023" />
          <Vector3 X="-5967.492" Y="-142.7704" Z="397.7654" />
          <Vector3 X="-5976.727" Y="-167.2835" Z="400.8791" />
          <Vector3 X="-5985.289" Y="-191.2074" Z="404.2827" />
          <Vector3 X="-5994.393" Y="-216.6722" Z="407.4673" />
          <Vector3 X="-6001.23" Y="-241.0702" Z="411.6382" />
          <Vector3 X="-6006.291" Y="-266.8182" Z="416.1158" />
          <Vector3 X="-6005.995" Y="-292.7375" Z="418.6771" />
          <Vector3 X="-6001.411" Y="-318.5512" Z="419.3451" />
          <Vector3 X="-5995.705" Y="-345.0308" Z="418.5772" />
          <Vector3 X="-5987.037" Y="-369.7451" Z="416.2325" />
          <Vector3 X="-5974.133" Y="-392.5809" Z="413.0973" />
          <Vector3 X="-5958.749" Y="-413.8477" Z="412.912" />
          <Vector3 X="-5942.245" Y="-434.2271" Z="412.915" />
          <Vector3 X="-5923.473" Y="-452.5706" Z="413.4968" />
          <Vector3 X="-5904.965" Y="-471.1836" Z="412.0212" />
          <Vector3 X="-5882.299" Y="-481.8952" Z="410.0795" />
          <Vector3 X="-5858.522" Y="-492.6147" Z="408.4317" />
          <Vector3 X="-5835.37" Y="-506.5319" Z="406.06" />
          <Vector3 X="-5809.091" Y="-512.4581" Z="403.9738" />
          <Vector3 X="-5783.692" Y="-512.4913" Z="401.5439" />
          <Vector3 X="-5756.62" Y="-511.6985" Z="397.4285" />
          <Vector3 X="-5730.956" Y="-506.2635" Z="396.0888" />
          <Vector3 X="-5707.846" Y="-494.3291" Z="395.8687" />
          <Vector3 X="-5683.979" Y="-482.9378" Z="395.9168" />
          <Vector3 X="-5657.733" Y="-483.2689" Z="396.1444" />
          <Vector3 X="-5631.488" Y="-482.815" Z="396.9805" />
          <Vector3 X="-5611.809" Y="-483.2577" Z="396.9805" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTEGoToDwarvenCorpse</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="-5165.012" Y="-2325.264" Z="400.4918" />
          <Vector3 X="-5150.064" Y="-2303.693" Z="400.4901" />
          <Vector3 X="-5135.979" Y="-2281.549" Z="400.9868" />
          <Vector3 X="-5121.446" Y="-2259.698" Z="400.2832" />
          <Vector3 X="-5105.14" Y="-2239.137" Z="400.2342" />
          <Vector3 X="-5090.784" Y="-2223.334" Z="400.5867" />
          <Vector3 X="-5084.957" Y="-2219.545" Z="401.721" />
          <Vector3 X="-5076.09" Y="-2214.819" Z="401.9106" />
          <Vector3 X="-5067.414" Y="-2209.505" Z="400.8207" />
          <Vector3 X="-5060.114" Y="-2201.983" Z="400.6546" />
          <Vector3 X="-5055.419" Y="-2192.307" Z="400.6865" />
          <Vector3 X="-5054.324" Y="-2181.9" Z="401.4639" />
          <Vector3 X="-5054.071" Y="-2171.718" Z="400.6954" />
          <Vector3 X="-5054.683" Y="-2160.937" Z="400.6546" />
          <Vector3 X="-5058.705" Y="-2151.749" Z="400.7565" />
          <Vector3 X="-5065.704" Y="-2143.504" Z="400.6547" />
          <Vector3 X="-5070.977" Y="-2134.461" Z="401.1031" />
          <Vector3 X="-5073.012" Y="-2124.299" Z="403.6711" />
          <Vector3 X="-5070.154" Y="-2117.469" Z="407.4328" />
          <Vector3 X="-5066.22" Y="-2117.219" Z="407.6119" />
          <Vector3 X="-5063.476" Y="-2119.315" Z="406.152" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTEGoToIronforge</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="-5489.526" Y="-2448.345" Z="400.4004" />
          <Vector3 X="-5493.262" Y="-2446.667" Z="400.3145" />
          <Vector3 X="-5514.637" Y="-2431.952" Z="400.3203" />
          <Vector3 X="-5530.758" Y="-2411.287" Z="400.5611" />
          <Vector3 X="-5541.351" Y="-2387.325" Z="400.4922" />
          <Vector3 X="-5551.261" Y="-2363.029" Z="400.4917" />
          <Vector3 X="-5564.68" Y="-2340.694" Z="401.5143" />
          <Vector3 X="-5580.257" Y="-2319.566" Z="403.7433" />
          <Vector3 X="-5596.021" Y="-2298.58" Z="412.4805" />
          <Vector3 X="-5611.24" Y="-2277.193" Z="422.7735" />
          <Vector3 X="-5626.671" Y="-2255.958" Z="425.784" />
          <Vector3 X="-5633.814" Y="-2244.983" Z="424.7533" />
          <Vector3 X="-5634.937" Y="-2236.272" Z="424.7531" />
          <Vector3 X="-5623.96" Y="-2212.473" Z="423.3801" />
          <Vector3 X="-5614.566" Y="-2187.273" Z="417.0266" />
          <Vector3 X="-5608.378" Y="-2162.574" Z="410.5825" />
          <Vector3 X="-5601.329" Y="-2136.491" Z="403.4224" />
          <Vector3 X="-5589.461" Y="-2114.136" Z="399.6459" />
          <Vector3 X="-5573.449" Y="-2093.366" Z="399.8487" />
          <Vector3 X="-5550.441" Y="-2079.669" Z="399.4728" />
          <Vector3 X="-5527.6" Y="-2068.805" Z="399.4737" />
          <Vector3 X="-5513.853" Y="-2046.551" Z="399.4164" />
          <Vector3 X="-5509.813" Y="-2020.159" Z="399.3752" />
          <Vector3 X="-5510.06" Y="-1993.921" Z="399.3752" />
          <Vector3 X="-5506.039" Y="-1968.022" Z="399.3752" />
          <Vector3 X="-5497.04" Y="-1944.214" Z="399.3346" />
          <Vector3 X="-5491.621" Y="-1918.568" Z="397.1071" />
          <Vector3 X="-5497.393" Y="-1893.364" Z="397.1031" />
          <Vector3 X="-5508.708" Y="-1868.864" Z="397.1172" />
          <Vector3 X="-5513.785" Y="-1843.156" Z="397.1025" />
          <Vector3 X="-5513.738" Y="-1817.733" Z="397.1025" />
          <Vector3 X="-5511.941" Y="-1791.544" Z="397.2256" />
          <Vector3 X="-5510.935" Y="-1765.348" Z="397.1416" />
          <Vector3 X="-5513.052" Y="-1739.225" Z="397.11" />
          <Vector3 X="-5516.545" Y="-1713.26" Z="396.9403" />
          <Vector3 X="-5530.557" Y="-1691.777" Z="394.7956" />
          <Vector3 X="-5544.59" Y="-1671.055" Z="391.7773" />
          <Vector3 X="-5549.873" Y="-1645.495" Z="391.7758" />
          <Vector3 X="-5557.753" Y="-1620.47" Z="391.7758" />
          <Vector3 X="-5557.084" Y="-1593.601" Z="394.7281" />
          <Vector3 X="-5561.192" Y="-1568.681" Z="397.7139" />
          <Vector3 X="-5578.37" Y="-1548.817" Z="399.1368" />
          <Vector3 X="-5592.965" Y="-1546.581" Z="399.1386" />
          <Vector3 X="-5605.595" Y="-1537.583" Z="399.1455" />
          <Vector3 X="-5611.644" Y="-1515.439" Z="399.067" />
          <Vector3 X="-5611.859" Y="-1489.307" Z="399.0481" />
          <Vector3 X="-5611.275" Y="-1462.35" Z="399.0675" />
          <Vector3 X="-5618.6" Y="-1438.072" Z="398.8232" />
          <Vector3 X="-5638.59" Y="-1420.624" Z="398.2738" />
          <Vector3 X="-5649.012" Y="-1399.151" Z="397.5802" />
          <Vector3 X="-5651.044" Y="-1373.003" Z="396.8143" />
          <Vector3 X="-5662.577" Y="-1350.003" Z="395.7298" />
          <Vector3 X="-5677.229" Y="-1328.51" Z="393.7273" />
          <Vector3 X="-5679.657" Y="-1301.684" Z="391.6088" />
          <Vector3 X="-5679.906" Y="-1276.222" Z="390.339" />
          <Vector3 X="-5681.182" Y="-1249.24" Z="389.2606" />
          <Vector3 X="-5684.121" Y="-1223.948" Z="388.2305" />
          <Vector3 X="-5686.156" Y="-1197.781" Z="386.3119" />
          <Vector3 X="-5684.743" Y="-1170.895" Z="384.8863" />
          <Vector3 X="-5666.493" Y="-1153.257" Z="385.03" />
          <Vector3 X="-5648.9" Y="-1135.563" Z="387.7629" />
          <Vector3 X="-5632.209" Y="-1114.466" Z="390.2682" />
          <Vector3 X="-5618.691" Y="-1093.234" Z="392.6714" />
          <Vector3 X="-5618.414" Y="-1067.232" Z="393.1583" />
          <Vector3 X="-5613.154" Y="-1041.105" Z="393.0816" />
          <Vector3 X="-5597.647" Y="-1021.378" Z="393.2877" />
          <Vector3 X="-5571.846" Y="-1015.734" Z="393.2267" />
          <Vector3 X="-5546.478" Y="-1017.827" Z="392.5725" />
          <Vector3 X="-5520.521" Y="-1015.733" Z="393.0797" />
          <Vector3 X="-5495.145" Y="-1009.019" Z="393.1557" />
          <Vector3 X="-5470.809" Y="-999.6057" Z="392.2247" />
          <Vector3 X="-5450.996" Y="-982.4519" Z="392.213" />
          <Vector3 X="-5428.629" Y="-967.5502" Z="392.213" />
          <Vector3 X="-5417.654" Y="-944.9046" Z="392.2296" />
          <Vector3 X="-5406.754" Y="-920.2919" Z="392.2026" />
          <Vector3 X="-5391.02" Y="-899.2906" Z="392.2144" />
          <Vector3 X="-5383.745" Y="-874.5982" Z="392.1461" />
          <Vector3 X="-5391.087" Y="-849.5084" Z="392.0126" />
          <Vector3 X="-5403.119" Y="-826.2205" Z="392.29" />
          <Vector3 X="-5419.556" Y="-805.8344" Z="392.1548" />
          <Vector3 X="-5435.104" Y="-785.7628" Z="393.809" />
          <Vector3 X="-5442.422" Y="-760.3063" Z="394.0805" />
          <Vector3 X="-5437.03" Y="-735.496" Z="393.707" />
          <Vector3 X="-5427.274" Y="-710.2962" Z="393.6674" />
          <Vector3 X="-5416.874" Y="-687.055" Z="393.4933" />
          <Vector3 X="-5406.118" Y="-663.1099" Z="392.7243" />
          <Vector3 X="-5395.209" Y="-638.3716" Z="391.6683" />
          <Vector3 X="-5385.038" Y="-614.2205" Z="391.7416" />
          <Vector3 X="-5373.529" Y="-590.6897" Z="391.4509" />
          <Vector3 X="-5361.464" Y="-567.8857" Z="391.5319" />
          <Vector3 X="-5355.217" Y="-542.4363" Z="391.7627" />
          <Vector3 X="-5342.171" Y="-520.9206" Z="391.4934" />
          <Vector3 X="-5335.085" Y="-518.9706" Z="391.4934" />
          <Vector3 X="-5310.945" Y="-512.1933" Z="392.453" />
          <Vector3 X="-5285.328" Y="-506.4752" Z="390.2485" />
          <Vector3 X="-5259.342" Y="-506.3775" Z="386.1134" />
          <Vector3 X="-5244.646" Y="-526.5352" Z="388.7719" />
          <Vector3 X="-5242.803" Y="-553.4185" Z="398.5435" />
          <Vector3 X="-5241.821" Y="-578.8436" Z="407.7333" />
          <Vector3 X="-5236.938" Y="-604.6152" Z="415.0266" />
          <Vector3 X="-5229.335" Y="-630.5467" Z="421.1318" />
          <Vector3 X="-5221.083" Y="-655.4661" Z="427.2764" />
          <Vector3 X="-5212.786" Y="-680.3702" Z="433.5753" />
          <Vector3 X="-5202.357" Y="-704.3442" Z="439.3112" />
          <Vector3 X="-5189.26" Y="-727.0608" Z="445.9153" />
          <Vector3 X="-5166.229" Y="-737.7741" Z="450.8845" />
          <Vector3 X="-5140.097" Y="-740.2012" Z="457.6118" />
          <Vector3 X="-5113.922" Y="-742.1754" Z="464.3088" />
          <Vector3 X="-5088.569" Y="-744.0899" Z="471.0993" />
          <Vector3 X="-5063.834" Y="-754.0887" Z="481.4876" />
          <Vector3 X="-5048.881" Y="-774.2563" Z="492.8084" />
          <Vector3 X="-5040.589" Y="-799.9348" Z="495.1288" />
          <Vector3 X="-5028.053" Y="-822.9657" Z="495.1696" />
          <Vector3 X="-5011.694" Y="-843.2932" Z="497.0674" />
          <Vector3 X="-4995.795" Y="-863.1793" Z="497.0262" />
          <Vector3 X="-4980.166" Y="-884.256" Z="501.6494" />
          <Vector3 X="-4983.341" Y="-890.8732" Z="501.6343" />
          <Vector3 X="-5000.576" Y="-909.5394" Z="501.6597" />
          <Vector3 X="-5014.02" Y="-932.3047" Z="501.6597" />
          <Vector3 X="-5008.659" Y="-947.8542" Z="501.6597" />
          <Vector3 X="-4994.038" Y="-956.9494" Z="501.6597" />
          <Vector3 X="-4972.475" Y="-970.3925" Z="503.0265" />
          <Vector3 X="-4952.243" Y="-988.2709" Z="501.5355" />
          <Vector3 X="-4945.418" Y="-995.3983" Z="501.4501" />
          <Vector3 X="-4943.494" Y="-999.9426" Z="501.4407" />
          <Vector3 X="-4942.85" Y="-1004.813" Z="501.4407" />
          <Vector3 X="-4942.799" Y="-1008.415" Z="501.4407" />
          <Vector3 X="-4944.691" Y="-1015.107" Z="501.4407" />
          <Vector3 X="-4947.801" Y="-1021.376" Z="501.4562" />
          <Vector3 X="-4946.264" Y="-1027.227" Z="501.5041" />
          <Vector3 X="-4940.191" Y="-1030.233" Z="501.5662" />
          <Vector3 X="-4927.211" Y="-1037.043" Z="501.7118" />
          <Vector3 X="-4911.634" Y="-1045.017" Z="501.8759" />
          <Vector3 X="-4897.124" Y="-1052.185" Z="502.0327" />
          <Vector3 X="-4893.983" Y="-1053.73" Z="502.0656" />
          <Vector3 X="-4890.822" Y="-1055.233" Z="502.0981" />
          <Vector3 X="-4887.675" Y="-1056.766" Z="502.1312" />
          <Vector3 X="-4878.498" Y="-1061.646" Z="502.204" />
          <Vector3 X="-4872.472" Y="-1067.207" Z="502.1908" />
          <Vector3 X="-4867.244" Y="-1073.517" Z="502.1903" />
          <Vector3 X="-4867.267" Y="-1084.973" Z="502.2103" />
          <Vector3 X="-4871.389" Y="-1094.261" Z="502.2126" />
          <Vector3 X="-4872.404" Y="-1104.998" Z="502.2126" />
          <Vector3 X="-4870.829" Y="-1115.294" Z="502.2126" />
          <Vector3 X="-4865.39" Y="-1124.662" Z="502.2126" />
          <Vector3 X="-4859.724" Y="-1133.097" Z="502.1885" />
          <Vector3 X="-4853.016" Y="-1141.602" Z="502.2047" />
          <Vector3 X="-4846.313" Y="-1148.349" Z="502.2073" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTEGoToLostPilot</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="-5702.449" Y="-1567.212" Z="383.2566" />
          <Vector3 X="-5702.737" Y="-1562.738" Z="383.6733" />
          <Vector3 X="-5700.642" Y="-1553.279" Z="386.4156" />
          <Vector3 X="-5691.002" Y="-1541.611" Z="389.609" />
          <Vector3 X="-5676.844" Y="-1530.472" Z="393.1815" />
          <Vector3 X="-5661.646" Y="-1521.82" Z="396.7662" />
          <Vector3 X="-5645.398" Y="-1515.383" Z="398.2971" />
          <Vector3 X="-5628.197" Y="-1512.579" Z="398.9432" />
          <Vector3 X="-5613.405" Y="-1519.953" Z="399.0652" />
          <Vector3 X="-5605.773" Y="-1536.253" Z="399.1377" />
          <Vector3 X="-5586.14" Y="-1550.433" Z="399.1366" />
          <Vector3 X="-5563.57" Y="-1562.292" Z="398.3949" />
          <Vector3 X="-5556.187" Y="-1580.919" Z="396.4278" />
          <Vector3 X="-5557.643" Y="-1603.026" Z="392.8383" />
          <Vector3 X="-5553.259" Y="-1629.411" Z="391.7756" />
          <Vector3 X="-5547.845" Y="-1655.021" Z="391.7756" />
          <Vector3 X="-5539.661" Y="-1678.835" Z="392.5523" />
          <Vector3 X="-5523.121" Y="-1699.178" Z="395.9485" />
          <Vector3 X="-5514.982" Y="-1724.733" Z="397.1647" />
          <Vector3 X="-5511.151" Y="-1750.685" Z="397.1055" />
          <Vector3 X="-5510.999" Y="-1776.144" Z="397.3288" />
          <Vector3 X="-5511.759" Y="-1802.382" Z="397.2079" />
          <Vector3 X="-5512.616" Y="-1828.618" Z="397.1024" />
          <Vector3 X="-5512.133" Y="-1854.795" Z="397.1024" />
          <Vector3 X="-5503.238" Y="-1879.459" Z="397.1201" />
          <Vector3 X="-5495.208" Y="-1905.116" Z="397.1026" />
          <Vector3 X="-5494.77" Y="-1930.556" Z="398.3065" />
          <Vector3 X="-5502.134" Y="-1956.35" Z="399.3981" />
          <Vector3 X="-5509.362" Y="-1981.332" Z="399.3755" />
          <Vector3 X="-5508.455" Y="-2006.761" Z="399.3755" />
          <Vector3 X="-5504.058" Y="-2032.618" Z="399.3755" />
          <Vector3 X="-5492.73" Y="-2056.062" Z="399.3755" />
          <Vector3 X="-5471.477" Y="-2072.506" Z="399.3755" />
          <Vector3 X="-5448.37" Y="-2083.164" Z="399.3755" />
          <Vector3 X="-5425.999" Y="-2096.625" Z="399.3755" />
          <Vector3 X="-5407.443" Y="-2115.166" Z="399.8634" />
          <Vector3 X="-5385.593" Y="-2131.028" Z="403.4022" />
          <Vector3 X="-5364.572" Y="-2148.11" Z="412.6052" />
          <Vector3 X="-5339.936" Y="-2155.592" Z="418.0406" />
          <Vector3 X="-5312.929" Y="-2154.389" Z="420.2716" />
          <Vector3 X="-5290.487" Y="-2164.439" Z="421.3477" />
          <Vector3 X="-5281.38" Y="-2189.521" Z="425.2246" />
          <Vector3 X="-5267.827" Y="-2210.223" Z="425.4276" />
          <Vector3 X="-5249.753" Y="-2230.326" Z="419.8817" />
          <Vector3 X="-5233.495" Y="-2249.922" Z="408.2308" />
          <Vector3 X="-5216.068" Y="-2269.542" Z="402.5817" />
          <Vector3 X="-5197.725" Y="-2289.401" Z="400.7112" />
          <Vector3 X="-5180.933" Y="-2308.542" Z="399.8666" />
          <Vector3 X="-5167.512" Y="-2325.1" Z="400.4926" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTEKharanosGoToAmmoBox</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="-5469.616" Y="-465.4532" Z="397.6199" />
          <Vector3 X="-5463.821" Y="-472.1203" Z="397.4755" />
          <Vector3 X="-5455.075" Y="-478.5049" Z="396.4304" />
          <Vector3 X="-5447.163" Y="-485.3617" Z="396.3832" />
          <Vector3 X="-5441.925" Y="-494.7804" Z="396.3928" />
          <Vector3 X="-5440.508" Y="-503.145" Z="396.3863" />
          <Vector3 X="-5441.159" Y="-513.5175" Z="396.5381" />
          <Vector3 X="-5449.779" Y="-519.2805" Z="397.2678" />
          <Vector3 X="-5463.528" Y="-519.8133" Z="397.4611" />
          <Vector3 X="-5481.017" Y="-519.1981" Z="397.4611" />
          <Vector3 X="-5485.389" Y="-519.0416" Z="397.4611" />
          <Vector3 X="-5501.786" Y="-515.1909" Z="397.461" />
          <Vector3 X="-5514.992" Y="-504.0821" Z="397.461" />
          <Vector3 X="-5526.242" Y="-489.9994" Z="397.461" />
          <Vector3 X="-5541.889" Y="-484.9861" Z="397.462" />
          <Vector3 X="-5559.835" Y="-483.2947" Z="397.4725" />
          <Vector3 X="-5576.765" Y="-482.4726" Z="397.4562" />
          <Vector3 X="-5594.694" Y="-484.33" Z="396.9881" />
          <Vector3 X="-5611.618" Y="-485.5869" Z="396.9813" />
          <Vector3 X="-5629.114" Y="-485.2439" Z="396.9813" />
          <Vector3 X="-5642.759" Y="-484.8907" Z="396.3124" />
          <Vector3 X="-5659.137" Y="-483.7951" Z="396.1553" />
          <Vector3 X="-5677.149" Y="-483.232" Z="396.0168" />
          <Vector3 X="-5693.562" Y="-482.9025" Z="395.9784" />
          <Vector3 X="-5734.263" Y="-507.2572" Z="396.132" />
          <Vector3 X="-5751.25" Y="-508.9812" Z="396.893" />
          <Vector3 X="-5765.426" Y="-508.1066" Z="398.9734" />
          <Vector3 X="-5778.825" Y="-505.805" Z="401.3572" />
          <Vector3 X="-5793.374" Y="-498.308" Z="403.6064" />
          <Vector3 X="-5802.576" Y="-494.7447" Z="405.3033" />
          <Vector3 X="-5817.943" Y="-486.471" Z="405.3885" />
          <Vector3 X="-5829.393" Y="-473.4387" Z="406.365" />
          <Vector3 X="-5838.045" Y="-458.2714" Z="408.3135" />
          <Vector3 X="-5844.701" Y="-442.0956" Z="408.4442" />
          <Vector3 X="-5850.138" Y="-425.5285" Z="405.8157" />
          <Vector3 X="-5847.46" Y="-408.4015" Z="399.8288" />
          <Vector3 X="-5838.048" Y="-393.6809" Z="390.5695" />
          <Vector3 X="-5832.537" Y="-387.6457" Z="385.4033" />
          <Vector3 X="-5818.06" Y="-378.0745" Z="373.8018" />
          <Vector3 X="-5812.205" Y="-376.8558" Z="371.5788" />
          <Vector3 X="-5797.262" Y="-373.463" Z="366.7319" />
          <Vector3 X="-5780.333" Y="-369.0293" Z="365.4096" />
          <Vector3 X="-5763.402" Y="-364.6022" Z="366.8771" />
          <Vector3 X="-5754.767" Y="-363.2799" Z="366.0781" />
          <Vector3 X="-5749.279" Y="-365.7169" Z="365.6833" />
          <Vector3 X="-5744.435" Y="-369.5539" Z="365.8395" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTEKharanosToGnomeregan</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="-5513.486" Y="-512.3902" Z="397.4607" />
          <Vector3 X="-5476.844" Y="-519.0162" Z="397.4611" />
          <Vector3 X="-5461.613" Y="-519.3701" Z="397.4611" />
          <Vector3 X="-5444.497" Y="-515.7845" Z="396.9821" />
          <Vector3 X="-5415.103" Y="-496.8112" Z="396.6694" />
          <Vector3 X="-5398.127" Y="-489.235" Z="395.4487" />
          <Vector3 X="-5365.387" Y="-476.8694" Z="388.3331" />
          <Vector3 X="-5337.125" Y="-458.5022" Z="388.3328" />
          <Vector3 X="-5334.012" Y="-423.9272" Z="388.3351" />
          <Vector3 X="-5334.262" Y="-403.1391" Z="387.5842" />
          <Vector3 X="-5335.109" Y="-396.6147" Z="386.7631" />
          <Vector3 X="-5328.675" Y="-362.5695" Z="386.2069" />
          <Vector3 X="-5313.022" Y="-330.0595" Z="386.111" />
          <Vector3 X="-5292.984" Y="-301.4531" Z="386.1127" />
          <Vector3 X="-5267.172" Y="-277.8643" Z="386.2117" />
          <Vector3 X="-5251.064" Y="-264.8327" Z="386.0811" />
          <Vector3 X="-5247.018" Y="-263.0788" Z="386.0678" />
          <Vector3 X="-5214.984" Y="-248.9828" Z="386.1049" />
          <Vector3 X="-5184.295" Y="-232.2871" Z="386.089" />
          <Vector3 X="-5163.481" Y="-204.5393" Z="386.1357" />
          <Vector3 X="-5156.448" Y="-170.384" Z="386.1409" />
          <Vector3 X="-5153.125" Y="-134.5205" Z="386.482" />
          <Vector3 X="-5151.555" Y="-100.6124" Z="386.2855" />
          <Vector3 X="-5157.162" Y="-66.35888" Z="386.1308" />
          <Vector3 X="-5178.833" Y="-39.45892" Z="386.1113" />
          <Vector3 X="-5209.938" Y="-21.29652" Z="386.1113" />
          <Vector3 X="-5239.737" Y="-5.051171" Z="386.1146" />
          <Vector3 X="-5270.331" Y="11.94223" Z="386.1114" />
          <Vector3 X="-5295.237" Y="36.16813" Z="386.1114" />
          <Vector3 X="-5315.834" Y="65.75392" Z="386.1114" />
          <Vector3 X="-5334.838" Y="93.88593" Z="386.1114" />
          <Vector3 X="-5348.271" Y="127.1202" Z="386.1114" />
          <Vector3 X="-5356.83" Y="159.9736" Z="386.1114" />
          <Vector3 X="-5365.654" Y="193.843" Z="386.1114" />
          <Vector3 X="-5373.186" Y="227.9932" Z="386.6132" />
          <Vector3 X="-5373.644" Y="251.9564" Z="391.984" />
          <Vector3 X="-5373.23" Y="267.2799" Z="395.0172" />
          <Vector3 X="-5373.548" Y="284.6945" Z="394.1588" />
          <Vector3 X="-5373.425" Y="292.3235" Z="393.8788" />
          <Vector3 X="-5373.628" Y="302.1913" Z="393.7323" />
          <Vector3 X="-5374.137" Y="306.5014" Z="393.9547" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTEKharanosToNextQuestHub</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="-5434.999" Y="-650.5431" Z="392.6741" />
          <Vector3 X="-5426.521" Y="-649.7432" Z="392.6751" />
          <Vector3 X="-5415.728" Y="-649.0639" Z="392.6739" />
          <Vector3 X="-5405.574" Y="-650.9575" Z="392.2712" />
          <Vector3 X="-5405.339" Y="-660.4698" Z="392.5518" />
          <Vector3 X="-5411.532" Y="-672.1784" Z="393.2203" />
          <Vector3 X="-5419.434" Y="-687.7914" Z="393.4418" />
          <Vector3 X="-5430.704" Y="-710.8573" Z="393.6844" />
          <Vector3 X="-5438.924" Y="-734.8729" Z="393.7269" />
          <Vector3 X="-5440.828" Y="-761.6631" Z="394.0177" />
          <Vector3 X="-5434.687" Y="-786.1036" Z="393.7681" />
          <Vector3 X="-5416.862" Y="-806.412" Z="392.0311" />
          <Vector3 X="-5401.433" Y="-826.5995" Z="392.2907" />
          <Vector3 X="-5389.499" Y="-849.9541" Z="391.984" />
          <Vector3 X="-5384.964" Y="-875.6606" Z="392.1626" />
          <Vector3 X="-5390.747" Y="-900.3826" Z="392.2432" />
          <Vector3 X="-5406.859" Y="-921.1056" Z="392.1988" />
          <Vector3 X="-5415.729" Y="-945.5613" Z="392.2441" />
          <Vector3 X="-5427.105" Y="-969.028" Z="392.2126" />
          <Vector3 X="-5449.096" Y="-983.164" Z="392.2126" />
          <Vector3 X="-5467.922" Y="-1002.051" Z="392.2128" />
          <Vector3 X="-5492.05" Y="-1009.899" Z="393.0581" />
          <Vector3 X="-5517.669" Y="-1015.615" Z="393.0804" />
          <Vector3 X="-5543.713" Y="-1018.155" Z="392.6762" />
          <Vector3 X="-5569.648" Y="-1014.277" Z="392.9599" />
          <Vector3 X="-5594.743" Y="-1020.864" Z="393.3571" />
          <Vector3 X="-5614.58" Y="-1037.712" Z="393.1235" />
          <Vector3 X="-5617.354" Y="-1043.643" Z="393.1432" />
          <Vector3 X="-5618.181" Y="-1059.21" Z="393.1583" />
          <Vector3 X="-5618.222" Y="-1086.215" Z="393.1482" />
          <Vector3 X="-5626.654" Y="-1109.478" Z="391.0479" />
          <Vector3 X="-5643.747" Y="-1129.171" Z="388.4954" />
          <Vector3 X="-5661.326" Y="-1148.447" Z="385.3216" />
          <Vector3 X="-5680.798" Y="-1165.88" Z="384.9531" />
          <Vector3 X="-5685.524" Y="-1191.506" Z="386.0048" />
          <Vector3 X="-5683.096" Y="-1217.622" Z="387.8421" />
          <Vector3 X="-5680.732" Y="-1243.765" Z="389.1014" />
          <Vector3 X="-5680.301" Y="-1248.681" Z="389.2705" />
          <Vector3 X="-5679.621" Y="-1265.883" Z="389.8383" />
          <Vector3 X="-5680.114" Y="-1292.128" Z="391.112" />
          <Vector3 X="-5680.088" Y="-1318.358" Z="392.9959" />
          <Vector3 X="-5669.197" Y="-1341.592" Z="394.7759" />
          <Vector3 X="-5653.281" Y="-1362.185" Z="396.5941" />
          <Vector3 X="-5650.897" Y="-1388.195" Z="397.321" />
          <Vector3 X="-5650.917" Y="-1394.757" Z="397.588" />
          <Vector3 X="-5649.563" Y="-1400.371" Z="397.6675" />
          <Vector3 X="-5638.93" Y="-1423.603" Z="398.3415" />
          <Vector3 X="-5628.813" Y="-1430.516" Z="398.408" />
          <Vector3 X="-5616.878" Y="-1439.063" Z="398.7978" />
          <Vector3 X="-5616.477" Y="-1447.242" Z="398.9056" />
          <Vector3 X="-5613.45" Y="-1464.156" Z="399.1053" />
          <Vector3 X="-5614.39" Y="-1490.145" Z="399.0362" />
          <Vector3 X="-5618.394" Y="-1501.727" Z="399.0695" />
          <Vector3 X="-5626.512" Y="-1505.682" Z="398.8185" />
          <Vector3 X="-5650.192" Y="-1517.006" Z="398.0424" />
          <Vector3 X="-5672.946" Y="-1526.411" Z="394.3738" />
          <Vector3 X="-5684.651" Y="-1532.33" Z="391.618" />
          <Vector3 X="-5689.066" Y="-1538.272" Z="390.3311" />
          <Vector3 X="-5704.244" Y="-1559.649" Z="384.5373" />
          <Vector3 X="-5706.313" Y="-1566.732" Z="383.3175" />
          <Vector3 X="-5707.137" Y="-1571.597" Z="383.2182" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTERumbleshotGoToWendigos</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="-6014.236" Y="-214.152" Z="409.717" />
          <Vector3 X="-6012.985" Y="-225.5284" Z="412.3568" />
          <Vector3 X="-6010.279" Y="-252.4656" Z="414.6222" />
          <Vector3 X="-6008.765" Y="-277.8289" Z="417.3934" />
          <Vector3 X="-6008.021" Y="-293.4036" Z="418.5954" />
          <Vector3 X="-6006.223" Y="-303.0551" Z="419.1489" />
          <Vector3 X="-6000.359" Y="-329.4353" Z="419.3446" />
          <Vector3 X="-5998.895" Y="-334.9673" Z="419.1511" />
          <Vector3 X="-5991.27" Y="-360.058" Z="417.0925" />
          <Vector3 X="-5979.753" Y="-382.7021" Z="414.23" />
          <Vector3 X="-5976.749" Y="-387.6277" Z="413.5715" />
          <Vector3 X="-5965.832" Y="-404.0109" Z="413.0182" />
          <Vector3 X="-5957.24" Y="-416.002" Z="412.9046" />
          <Vector3 X="-5941.508" Y="-436.0111" Z="412.9304" />
          <Vector3 X="-5923.113" Y="-454.713" Z="413.4645" />
          <Vector3 X="-5910.756" Y="-465.4632" Z="412.5477" />
          <Vector3 X="-5893.141" Y="-448.3745" Z="415.2777" />
          <Vector3 X="-5882.511" Y="-434.8335" Z="415.4086" />
          <Vector3 X="-5872.084" Y="-420.1516" Z="413.1624" />
          <Vector3 X="-5858.819" Y="-411.962" Z="406.6252" />
          <Vector3 X="-5840.014" Y="-394.9314" Z="391.7296" />
          <Vector3 X="-5820.095" Y="-376.7391" Z="374.2614" />
          <Vector3 X="-5795.44" Y="-371.6619" Z="366.5205" />
          <Vector3 X="-5783.999" Y="-371.343" Z="365.502" />
          <Vector3 X="-5762.613" Y="-377.096" Z="366.0402" />
          <Vector3 X="-5746.435" Y="-379.5043" Z="365.4306" />
          <Vector3 X="-5730.484" Y="-375.582" Z="365.6748" />
          <Vector3 X="-5721.446" Y="-366.0648" Z="365.0891" />
          <Vector3 X="-5715.512" Y="-359.2607" Z="365.4902" />
          <Vector3 X="-5708.31" Y="-349.3083" Z="365.8318" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTEStormwindToHumanStart</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="-8798.489" Y="593.7233" Z="97.48536" />
          <Vector3 X="-8811.192" Y="605.7567" Z="96.04408" />
          <Vector3 X="-8824.408" Y="618.0422" Z="94.57997" />
          <Vector3 X="-8830.958" Y="619.2742" Z="93.86533" />
          <Vector3 X="-8845.049" Y="608.9033" Z="92.66541" />
          <Vector3 X="-8859.38" Y="597.9139" Z="92.01637" />
          <Vector3 X="-8872.495" Y="587.1944" Z="92.70063" />
          <Vector3 X="-8886.424" Y="575.6984" Z="92.80397" />
          <Vector3 X="-8899.525" Y="564.9585" Z="92.81625" />
          <Vector3 X="-8913.14" Y="553.9643" Z="93.814" />
          <Vector3 X="-8924.358" Y="544.3589" Z="94.25432" />
          <Vector3 X="-8920.346" Y="531.3929" Z="94.79802" />
          <Vector3 X="-8913.323" Y="515.3992" Z="93.86639" />
          <Vector3 X="-8916.879" Y="504.5376" Z="93.88494" />
          <Vector3 X="-8923.534" Y="498.4711" Z="93.868" />
          <Vector3 X="-8939.14" Y="506.2813" Z="94.98109" />
          <Vector3 X="-8954.359" Y="514.8523" Z="96.35815" />
          <Vector3 X="-8970.464" Y="509.9178" Z="96.35157" />
          <Vector3 X="-8984.021" Y="498.8578" Z="96.45685" />
          <Vector3 X="-8997.856" Y="488.1434" Z="96.61992" />
          <Vector3 X="-9012.137" Y="477.0875" Z="96.47024" />
          <Vector3 X="-9025.532" Y="466.7171" Z="94.47813" />
          <Vector3 X="-9039.369" Y="456.004" Z="93.05624" />
          <Vector3 X="-9053.207" Y="445.2908" Z="93.05624" />
          <Vector3 X="-9067.045" Y="434.5777" Z="93.05624" />
          <Vector3 X="-9080.886" Y="423.8683" Z="92.52913" />
          <Vector3 X="-9095.194" Y="413.7959" Z="92.12041" />
          <Vector3 X="-9109.503" Y="403.7204" Z="92.6192" />
          <Vector3 X="-9123.278" Y="392.933" Z="91.81026" />
          <Vector3 X="-9136.597" Y="381.5854" Z="90.64966" />
          <Vector3 X="-9149.144" Y="368.6039" Z="90.37992" />
          <Vector3 X="-9160.141" Y="355.7198" Z="88.51685" />
          <Vector3 X="-9170.715" Y="341.0908" Z="84.87413" />
          <Vector3 X="-9179.045" Y="325.772" Z="81.20165" />
          <Vector3 X="-9180.565" Y="308.97" Z="78.89033" />
          <Vector3 X="-9180.575" Y="291.4701" Z="77.05386" />
          <Vector3 X="-9180.501" Y="273.4102" Z="75.13261" />
          <Vector3 X="-9181.173" Y="256.4952" Z="73.86385" />
          <Vector3 X="-9186.787" Y="240.0464" Z="72.53564" />
          <Vector3 X="-9195.855" Y="225.1052" Z="71.60852" />
          <Vector3 X="-9207.98" Y="212.5366" Z="70.51082" />
          <Vector3 X="-9221.439" Y="200.5128" Z="68.69363" />
          <Vector3 X="-9232.071" Y="187.3448" Z="67.67371" />
          <Vector3 X="-9241.539" Y="171.989" Z="67.85105" />
          <Vector3 X="-9253.649" Y="160.4393" Z="67.75178" />
          <Vector3 X="-9270.107" Y="154.837" Z="67.08743" />
          <Vector3 X="-9287.711" Y="150.863" Z="66.56328" />
          <Vector3 X="-9303.137" Y="143.9373" Z="65.7847" />
          <Vector3 X="-9318.172" Y="135.0029" Z="64.57686" />
          <Vector3 X="-9333.494" Y="125.4522" Z="63.55779" />
          <Vector3 X="-9348.686" Y="116.7713" Z="62.60555" />
          <Vector3 X="-9364.453" Y="110.6245" Z="61.22637" />
          <Vector3 X="-9381.391" Y="106.2299" Z="60.06672" />
          <Vector3 X="-9398.244" Y="99.86794" Z="58.7687" />
          <Vector3 X="-9412.64" Y="90.96172" Z="57.4704" />
          <Vector3 X="-9426.823" Y="80.73067" Z="56.60097" />
          <Vector3 X="-9440.132" Y="69.36658" Z="56.02245" />
          <Vector3 X="-9432.023" Y="48.7035" Z="56.54382" />
          <Vector3 X="-9411.837" Y="21.49722" Z="58.63479" />
          <Vector3 X="-9390.478" Y="-3.336598" Z="60.85267" />
          <Vector3 X="-9366.754" Y="-29.051" Z="63.24266" />
          <Vector3 X="-9340.377" Y="-50.19236" Z="65.47728" />
          <Vector3 X="-9319.145" Y="-55.31688" Z="66.52237" />
          <Vector3 X="-9285.476" Y="-67.37714" Z="67.85442" />
          <Vector3 X="-9258.071" Y="-87.2393" Z="69.53921" />
          <Vector3 X="-9227.12" Y="-105.5967" Z="71.11157" />
          <Vector3 X="-9195.792" Y="-114.8549" Z="71.09279" />
          <Vector3 X="-9161.229" Y="-108.1671" Z="72.66881" />
          <Vector3 X="-9129.708" Y="-90.53562" Z="77.14198" />
          <Vector3 X="-9104.873" Y="-69.41543" Z="83.03304" />
          <Vector3 X="-9077.17" Y="-48.37921" Z="87.42242" />
          <Vector3 X="-9065.964" Y="-44.26425" Z="88.09898" />
          <Vector3 X="-9054.993" Y="-44.91518" Z="88.40983" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition>return (Quest.GetQuestCompleted(2158) ||  new Vector3(-9054.993f, -44.91518f, 88.40983f).DistanceTo(ObjectManager.Me.Position) &lt; 3);


</IsCompleteCondition>
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTEToStormwind</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="-6234.658" Y="126.7186" Z="430.6251" />
          <Vector3 X="-6231.228" Y="124.8423" Z="430.7651" />
          <Vector3 X="-6221.781" Y="119.5358" Z="431.6618" />
          <Vector3 X="-6212.766" Y="114.842" Z="431.6618" />
          <Vector3 X="-6207.784" Y="112.3162" Z="431.8899" />
          <Vector3 X="-6196.402" Y="117.9303" Z="430.2196" />
          <Vector3 X="-6189.64" Y="125.9618" Z="429.0498" />
          <Vector3 X="-6181.195" Y="131.9438" Z="425.9787" />
          <Vector3 X="-6170.808" Y="132.1393" Z="422.9008" />
          <Vector3 X="-6164.044" Y="127.7619" Z="422.5421" />
          <Vector3 X="-6160.58" Y="122.9872" Z="421.9613" />
          <Vector3 X="-6156.632" Y="113.3361" Z="420.8667" />
          <Vector3 X="-6156.865" Y="102.5379" Z="419.2678" />
          <Vector3 X="-6157.96" Y="88.81396" Z="416.8835" />
          <Vector3 X="-6156.976" Y="78.36019" Z="414.2181" />
          <Vector3 X="-6155.721" Y="74.79415" Z="413.6888" />
          <Vector3 X="-6145.482" Y="72.55794" Z="415.9415" />
          <Vector3 X="-6136.666" Y="73.06705" Z="416.606" />
          <Vector3 X="-6136.666" Y="73.06705" Z="416.606" />
          <Vector3 X="-6129.571" Y="77.15603" Z="417.2857" />
          <Vector3 X="-6128.96" Y="77.43639" Z="417.2838" />
          <Vector3 X="-6119.391" Y="78.30783" Z="416.5444" />
          <Vector3 X="-6119.073" Y="78.1995" Z="416.4962" />
          <Vector3 X="-6111.408" Y="71.85905" Z="416.0042" />
          <Vector3 X="-6111.095" Y="71.26424" Z="416.0201" />
          <Vector3 X="-6107.637" Y="61.71175" Z="415.0874" />
          <Vector3 X="-6107.637" Y="61.71175" Z="415.0874" />
          <Vector3 X="-6102.526" Y="53.05252" Z="413.9529" />
          <Vector3 X="-6102.267" Y="52.83905" Z="413.9348" />
          <Vector3 X="-6093.491" Y="48.62719" Z="413.4755" />
          <Vector3 X="-6092.518" Y="48.46444" Z="413.3784" />
          <Vector3 X="-6082.846" Y="46.73645" Z="411.5129" />
          <Vector3 X="-6082.518" Y="46.66111" Z="411.4554" />
          <Vector3 X="-6072.602" Y="44.42995" Z="409.5898" />
          <Vector3 X="-6071.945" Y="44.28762" Z="409.4795" />
          <Vector3 X="-6062.242" Y="42.89974" Z="408.4588" />
          <Vector3 X="-6061.906" Y="42.9038" Z="408.4842" />
          <Vector3 X="-6051.45" Y="43.85828" Z="407.8439" />
          <Vector3 X="-6051.45" Y="43.85828" Z="407.8439" />
          <Vector3 X="-6041.497" Y="45.86133" Z="407.8439" />
          <Vector3 X="-6040.845" Y="46.02223" Z="407.3767" />
          <Vector3 X="-6028.025" Y="49.64777" Z="405.905" />
          <Vector3 X="-6027.277" Y="49.8826" Z="405.9213" />
          <Vector3 X="-6011.943" Y="54.69646" Z="404.2545" />
          <Vector3 X="-6011.943" Y="54.69646" Z="404.2545" />
          <Vector3 X="-5992.225" Y="60.45208" Z="400.6035" />
          <Vector3 X="-5991.137" Y="60.71871" Z="400.4293" />
          <Vector3 X="-5974.916" Y="62.42582" Z="396.9508" />
          <Vector3 X="-5974.357" Y="62.39288" Z="396.7689" />
          <Vector3 X="-5957.456" Y="61.25754" Z="389.9059" />
          <Vector3 X="-5956.896" Y="61.2262" Z="389.6929" />
          <Vector3 X="-5939.979" Y="60.34927" Z="382.4934" />
          <Vector3 X="-5939.42" Y="60.31951" Z="382.2545" />
          <Vector3 X="-5923.124" Y="58.7353" Z="375.994" />
          <Vector3 X="-5921.592" Y="58.13593" Z="375.3576" />
          <Vector3 X="-5911.429" Y="46.09949" Z="370.5257" />
          <Vector3 X="-5911.167" Y="45.01053" Z="370.2913" />
          <Vector3 X="-5908.36" Y="28.88714" Z="367.4963" />
          <Vector3 X="-5908.336" Y="28.32765" Z="367.4631" />
          <Vector3 X="-5911.526" Y="11.77648" Z="367.4636" />
          <Vector3 X="-5911.822" Y="10.69639" Z="367.5396" />
          <Vector3 X="-5915.977" Y="-5.14776" Z="368.949" />
          <Vector3 X="-5916.122" Y="-5.688846" Z="369.0039" />
          <Vector3 X="-5920.778" Y="-21.94299" Z="371.8043" />
          <Vector3 X="-5920.935" Y="-22.48067" Z="371.919" />
          <Vector3 X="-5925.617" Y="-39.30168" Z="375.676" />
          <Vector3 X="-5925.617" Y="-39.30168" Z="375.676" />
          <Vector3 X="-5929.988" Y="-55.66683" Z="379.3346" />
          <Vector3 X="-5930.121" Y="-56.21067" Z="379.4654" />
          <Vector3 X="-5934.4" Y="-72.05575" Z="383.543" />
          <Vector3 X="-5934.906" Y="-73.62095" Z="383.9969" />
          <Vector3 X="-5942.705" Y="-87.92279" Z="389.3586" />
          <Vector3 X="-5943.37" Y="-88.82446" Z="389.7418" />
          <Vector3 X="-5951.832" Y="-102.8212" Z="393.7944" />
          <Vector3 X="-5952.088" Y="-103.3189" Z="393.8644" />
          <Vector3 X="-5959.055" Y="-118.7557" Z="395.6507" />
          <Vector3 X="-5959.484" Y="-119.7899" Z="395.8325" />
          <Vector3 X="-5965.453" Y="-135.0423" Z="397.0198" />
          <Vector3 X="-5965.647" Y="-135.5676" Z="397.0813" />
          <Vector3 X="-5971.708" Y="-151.9567" Z="398.9279" />
          <Vector3 X="-5971.708" Y="-151.9567" Z="398.9279" />
          <Vector3 X="-5977.609" Y="-167.8358" Z="401.0041" />
          <Vector3 X="-5978" Y="-168.8851" Z="401.1425" />
          <Vector3 X="-5983.761" Y="-184.2189" Z="403.3737" />
          <Vector3 X="-5983.959" Y="-184.7424" Z="403.4373" />
          <Vector3 X="-5990.164" Y="-201.1058" Z="405.7626" />
          <Vector3 X="-5990.359" Y="-201.6305" Z="405.8418" />
          <Vector3 X="-5995.778" Y="-217.0367" Z="407.6057" />
          <Vector3 X="-5996.108" Y="-218.1071" Z="407.7637" />
          <Vector3 X="-6000.619" Y="-233.3063" Z="410.2598" />
          <Vector3 X="-6000.901" Y="-234.3538" Z="410.4743" />
          <Vector3 X="-6004.761" Y="-250.8459" Z="413.4529" />
          <Vector3 X="-6004.959" Y="-251.9481" Z="413.6563" />
          <Vector3 X="-6006.927" Y="-268.2088" Z="416.2892" />
          <Vector3 X="-6006.992" Y="-268.765" Z="416.37" />
          <Vector3 X="-6007.744" Y="-286.2308" Z="418.0952" />
          <Vector3 X="-6007.744" Y="-286.2308" Z="418.0952" />
          <Vector3 X="-6005.212" Y="-302.9278" Z="419.089" />
          <Vector3 X="-6005.212" Y="-302.9278" Z="419.089" />
          <Vector3 X="-6001.948" Y="-320.1203" Z="419.4271" />
          <Vector3 X="-6001.833" Y="-320.6683" Z="419.4511" />
          <Vector3 X="-5998.17" Y="-337.7605" Z="419.0862" />
          <Vector3 X="-5998.17" Y="-337.7605" Z="419.0862" />
          <Vector3 X="-5992.604" Y="-353.6483" Z="417.9346" />
          <Vector3 X="-5992.352" Y="-354.1487" Z="417.8751" />
          <Vector3 X="-5984.795" Y="-369.9312" Z="416.1156" />
          <Vector3 X="-5984.795" Y="-369.9312" Z="416.1156" />
          <Vector3 X="-5977.655" Y="-385.2899" Z="413.7952" />
          <Vector3 X="-5977.117" Y="-386.2723" Z="413.6865" />
          <Vector3 X="-5967.634" Y="-400.3044" Z="412.9966" />
          <Vector3 X="-5967.634" Y="-400.3044" Z="412.9966" />
          <Vector3 X="-5957.708" Y="-414.0271" Z="412.9795" />
          <Vector3 X="-5957.028" Y="-414.917" Z="412.9863" />
          <Vector3 X="-5946.698" Y="-428.3425" Z="413.0356" />
          <Vector3 X="-5946.698" Y="-428.3425" Z="413.0356" />
          <Vector3 X="-5934.842" Y="-441.1952" Z="412.9305" />
          <Vector3 X="-5934.842" Y="-441.1952" Z="412.9305" />
          <Vector3 X="-5923.121" Y="-453.3418" Z="413.4716" />
          <Vector3 X="-5923.121" Y="-453.3418" Z="413.4716" />
          <Vector3 X="-5911.216" Y="-466.1637" Z="412.5522" />
          <Vector3 X="-5910.852" Y="-466.5897" Z="412.5437" />
          <Vector3 X="-5897.65" Y="-477.5304" Z="411.0558" />
          <Vector3 X="-5897.65" Y="-477.5304" Z="411.0558" />
          <Vector3 X="-5881.175" Y="-481.4534" Z="409.9953" />
          <Vector3 X="-5880.629" Y="-481.5774" Z="409.9573" />
          <Vector3 X="-5865.198" Y="-486.8816" Z="408.6407" />
          <Vector3 X="-5863.824" Y="-487.7855" Z="408.5918" />
          <Vector3 X="-5850.501" Y="-497.3144" Z="408" />
          <Vector3 X="-5850.046" Y="-497.6399" Z="407.9446" />
          <Vector3 X="-5836.448" Y="-506.823" Z="406.1794" />
          <Vector3 X="-5835.498" Y="-507.3471" Z="406.0772" />
          <Vector3 X="-5818.674" Y="-511.5689" Z="404.4985" />
          <Vector3 X="-5818.674" Y="-511.5689" Z="404.4985" />
          <Vector3 X="-5801.765" Y="-512.5402" Z="403.3011" />
          <Vector3 X="-5801.205" Y="-512.5541" Z="403.2435" />
          <Vector3 X="-5784.266" Y="-512.7279" Z="401.6083" />
          <Vector3 X="-5783.706" Y="-512.7243" Z="401.5447" />
          <Vector3 X="-5766.767" Y="-512.6158" Z="399.1824" />
          <Vector3 X="-5765.646" Y="-512.6087" Z="398.9783" />
          <Vector3 X="-5749.268" Y="-512.4576" Z="396.6582" />
          <Vector3 X="-5748.708" Y="-512.4302" Z="396.6107" />
          <Vector3 X="-5732.274" Y="-508.6538" Z="396.0838" />
          <Vector3 X="-5731.247" Y="-508.2083" Z="396.0808" />
          <Vector3 X="-5717.591" Y="-499.2887" Z="395.9859" />
          <Vector3 X="-5717.138" Y="-498.9599" Z="395.969" />
          <Vector3 X="-5703.564" Y="-489.7333" Z="395.7904" />
          <Vector3 X="-5702.175" Y="-488.8524" Z="395.824" />
          <Vector3 X="-5686.776" Y="-483.813" Z="395.949" />
          <Vector3 X="-5685.666" Y="-483.6712" Z="395.9273" />
          <Vector3 X="-5669.321" Y="-483.0603" Z="396.1383" />
          <Vector3 X="-5668.762" Y="-483.0773" Z="396.1383" />
          <Vector3 X="-5651.852" Y="-483.5927" Z="396.2105" />
          <Vector3 X="-5650.732" Y="-483.6237" Z="396.2287" />
          <Vector3 X="-5634.363" Y="-483.5333" Z="396.8452" />
          <Vector3 X="-5633.805" Y="-483.4853" Z="396.9114" />
          <Vector3 X="-5616.915" Y="-482.1937" Z="396.9805" />
          <Vector3 X="-5616.355" Y="-482.1742" Z="396.9805" />
          <Vector3 X="-5598.858" Y="-482.3987" Z="396.9805" />
          <Vector3 X="-5598.858" Y="-482.3987" Z="396.9805" />
          <Vector3 X="-5581.92" Y="-482.2472" Z="397.441" />
          <Vector3 X="-5581.361" Y="-482.2277" Z="397.4473" />
          <Vector3 X="-5563.872" Y="-481.6241" Z="397.4861" />
          <Vector3 X="-5563.872" Y="-481.6241" Z="397.4861" />
          <Vector3 X="-5546.941" Y="-481.6491" Z="397.4678" />
          <Vector3 X="-5545.83" Y="-481.7846" Z="397.4797" />
          <Vector3 X="-5530.996" Y="-488.1575" Z="397.4616" />
          <Vector3 X="-5530.559" Y="-488.5071" Z="397.4616" />
          <Vector3 X="-5518.819" Y="-500.6484" Z="397.4616" />
          <Vector3 X="-5518.121" Y="-501.5245" Z="397.4616" />
          <Vector3 X="-5507.184" Y="-513.6271" Z="397.4616" />
          <Vector3 X="-5506.713" Y="-513.9304" Z="397.4616" />
          <Vector3 X="-5490.079" Y="-518.7545" Z="397.4753" />
          <Vector3 X="-5490.079" Y="-518.7545" Z="397.4753" />
          <Vector3 X="-5473.144" Y="-519.0845" Z="397.461" />
          <Vector3 X="-5472.584" Y="-519.0889" Z="397.461" />
          <Vector3 X="-5455.697" Y="-517.9608" Z="397.4552" />
          <Vector3 X="-5455.141" Y="-517.9001" Z="397.4497" />
          <Vector3 X="-5437.726" Y="-516.1905" Z="396.3467" />
          <Vector3 X="-5437.167" Y="-516.1583" Z="396.2971" />
          <Vector3 X="-5420.792" Y="-515.7919" Z="394.3687" />
          <Vector3 X="-5420.232" Y="-515.7883" Z="394.2914" />
          <Vector3 X="-5402.738" Y="-516.2206" Z="392.2693" />
          <Vector3 X="-5402.738" Y="-516.2206" Z="392.2693" />
          <Vector3 X="-5385.952" Y="-518.2449" Z="391.5615" />
          <Vector3 X="-5385.401" Y="-518.3471" Z="391.5598" />
          <Vector3 X="-5368.163" Y="-521.3089" Z="391.4937" />
          <Vector3 X="-5368.163" Y="-521.3089" Z="391.4937" />
          <Vector3 X="-5350.77" Y="-519.7546" Z="391.4937" />
          <Vector3 X="-5350.77" Y="-519.7546" Z="391.4937" />
          <Vector3 X="-5334.045" Y="-517.0632" Z="391.4937" />
          <Vector3 X="-5333.492" Y="-516.9742" Z="391.4937" />
          <Vector3 X="-5316.881" Y="-513.6864" Z="391.6411" />
          <Vector3 X="-5316.336" Y="-513.5554" Z="391.7253" />
          <Vector3 X="-5299.915" Y="-509.3968" Z="391.5072" />
          <Vector3 X="-5298.83" Y="-509.1194" Z="391.5034" />
          <Vector3 X="-5283.535" Y="-503.5006" Z="389.8971" />
          <Vector3 X="-5283.04" Y="-503.2392" Z="389.7961" />
          <Vector3 X="-5267.064" Y="-499.2522" Z="386.9215" />
          <Vector3 X="-5267.064" Y="-499.2522" Z="386.9215" />
          <Vector3 X="-5252.574" Y="-508.5449" Z="386.1115" />
          <Vector3 X="-5252.23" Y="-508.9869" Z="386.1115" />
          <Vector3 X="-5245.597" Y="-525.0414" Z="388.2557" />
          <Vector3 X="-5245.597" Y="-525.0414" Z="388.2557" />
          <Vector3 X="-5243.363" Y="-541.8284" Z="394.3566" />
          <Vector3 X="-5243.307" Y="-542.3857" Z="394.5652" />
          <Vector3 X="-5242.24" Y="-559.2836" Z="400.6644" />
          <Vector3 X="-5242.213" Y="-559.843" Z="400.8659" />
          <Vector3 X="-5241.301" Y="-576.7573" Z="406.9794" />
          <Vector3 X="-5241.192" Y="-577.8719" Z="407.382" />
          <Vector3 X="-5238.572" Y="-594.03" Z="412.7741" />
          <Vector3 X="-5238.452" Y="-594.577" Z="412.8667" />
          <Vector3 X="-5234.495" Y="-611.0472" Z="416.814" />
          <Vector3 X="-5234.22" Y="-612.1328" Z="417.049" />
          <Vector3 X="-5229.978" Y="-627.9533" Z="420.5421" />
          <Vector3 X="-5229.824" Y="-628.4918" Z="420.6611" />
          <Vector3 X="-5224.852" Y="-644.6851" Z="424.5935" />
          <Vector3 X="-5224.684" Y="-645.2195" Z="424.727" />
          <Vector3 X="-5218.608" Y="-664.5153" Z="429.5613" />
          <Vector3 X="-5218.439" Y="-665.0493" Z="429.6939" />
          <Vector3 X="-5212.532" Y="-680.9224" Z="433.7264" />
          <Vector3 X="-5212.127" Y="-681.967" Z="434.0058" />
          <Vector3 X="-5205.329" Y="-698.6575" Z="437.8545" />
          <Vector3 X="-5205.1" Y="-699.1682" Z="437.9781" />
          <Vector3 X="-5197.32" Y="-714.839" Z="442.2538" />
          <Vector3 X="-5197.32" Y="-714.839" Z="442.2538" />
          <Vector3 X="-5187.572" Y="-728.6332" Z="446.4554" />
          <Vector3 X="-5186.752" Y="-729.396" Z="446.6938" />
          <Vector3 X="-5172.091" Y="-736.4319" Z="449.403" />
          <Vector3 X="-5171.554" Y="-736.5928" Z="449.5349" />
          <Vector3 X="-5154.345" Y="-739.6277" Z="453.9481" />
          <Vector3 X="-5154.345" Y="-739.6277" Z="453.9481" />
          <Vector3 X="-5137.454" Y="-740.911" Z="458.2838" />
          <Vector3 X="-5136.896" Y="-740.9471" Z="458.4136" />
          <Vector3 X="-5120.515" Y="-742.005" Z="462.5759" />
          <Vector3 X="-5119.432" Y="-742.075" Z="462.8619" />
          <Vector3 X="-5113.424" Y="-742.4629" Z="464.4386" />
          <Vector3 X="-5112.307" Y="-742.5446" Z="464.7259" />
          <Vector3 X="-5095.439" Y="-743.7782" Z="469.1269" />
          <Vector3 X="-5095.439" Y="-743.7782" Z="469.1269" />
          <Vector3 X="-5078.118" Y="-746.1365" Z="474.4197" />
          <Vector3 X="-5078.118" Y="-746.1365" Z="474.4197" />
          <Vector3 X="-5063.753" Y="-754.6165" Z="481.696" />
          <Vector3 X="-5063.362" Y="-755.0179" Z="481.9704" />
          <Vector3 X="-5054.452" Y="-769.2631" Z="490" />
          <Vector3 X="-5054.247" Y="-769.7843" Z="490.2474" />
          <Vector3 X="-5049.682" Y="-786.0552" Z="495.0918" />
          <Vector3 X="-5049.51" Y="-787.162" Z="495.1275" />
          <Vector3 X="-5043.52" Y="-802.2792" Z="495.1275" />
          <Vector3 X="-5043.254" Y="-802.7723" Z="495.1275" />
          <Vector3 X="-5034.457" Y="-817.2341" Z="495.1275" />
          <Vector3 X="-5033.806" Y="-818.1456" Z="495.1275" />
          <Vector3 X="-5023.904" Y="-831.1922" Z="495.3188" />
          <Vector3 X="-5023.211" Y="-832.0723" Z="495.6173" />
          <Vector3 X="-5013.373" Y="-844.5026" Z="497.0647" />
          <Vector3 X="-5012.7" Y="-845.3533" Z="497.1038" />
          <Vector3 X="-5001.805" Y="-859.049" Z="497.0557" />
          <Vector3 X="-5001.805" Y="-859.049" Z="497.0557" />
          <Vector3 X="-4990.839" Y="-871.9601" Z="496.9843" />
          <Vector3 X="-4990.472" Y="-872.3829" Z="496.9843" />
          <Vector3 X="-4983.582" Y="-880.0713" Z="501.3337" />
          <Vector3 X="-4983.582" Y="-880.0713" Z="501.3337" />
          <Vector3 X="-4964.667" Y="-878.2189" Z="501.6617" />
          <Vector3 X="-4963.636" Y="-877.7821" Z="501.6617" />
          <Vector3 X="-4949.109" Y="-869.1113" Z="501.6617" />
          <Vector3 X="-4949.109" Y="-869.1113" Z="501.6617" />
          <Vector3 X="-4934.739" Y="-860.1505" Z="501.6617" />
          <Vector3 X="-4934.244" Y="-859.889" Z="501.6617" />
          <Vector3 X="-4920.087" Y="-866.5045" Z="501.6601" />
          <Vector3 X="-4919.708" Y="-866.9168" Z="501.6601" />
          <Vector3 X="-4910.48" Y="-881.0357" Z="501.6601" />
          <Vector3 X="-4909.986" Y="-882.0408" Z="501.6601" />
          <Vector3 X="-4902.571" Y="-896.6432" Z="501.6601" />
          <Vector3 X="-4902.303" Y="-897.1348" Z="501.6601" />
          <Vector3 X="-4894.235" Y="-912.0303" Z="502.9591" />
          <Vector3 X="-4893.971" Y="-912.5242" Z="502.9215" />
          <Vector3 X="-4885.297" Y="-927.0435" Z="501.6039" />
          <Vector3 X="-4884.579" Y="-927.9025" Z="501.5988" />
          <Vector3 X="-4872.678" Y="-939.1165" Z="501.4504" />
          <Vector3 X="-4872.222" Y="-939.4408" Z="501.4504" />
          <Vector3 X="-4863.943" Y="-943.5864" Z="501.4406" />
          <Vector3 X="-4863.943" Y="-943.5864" Z="501.4406" />
          <Vector3 X="-4854.11" Y="-942.7404" Z="501.4406" />
          <Vector3 X="-4854.11" Y="-942.7404" Z="501.4406" />
          <Vector3 X="-4845.113" Y="-959.3763" Z="501.6377" />
          <Vector3 X="-4844.784" Y="-960.4469" Z="501.649" />
          <Vector3 X="-4839.917" Y="-976.0865" Z="501.8135" />
          <Vector3 X="-4839.744" Y="-976.6194" Z="501.8187" />
          <Vector3 X="-4834.41" Y="-992.6976" Z="501.9823" />
          <Vector3 X="-4834.054" Y="-993.7594" Z="501.9938" />
          <Vector3 X="-4828.845" Y="-1009.289" Z="502.1469" />
          <Vector3 X="-4828.489" Y="-1010.351" Z="502.1584" />
          <Vector3 X="-4823.135" Y="-1025.831" Z="502.1873" />
          <Vector3 X="-4822.938" Y="-1026.355" Z="502.1873" />
          <Vector3 X="-4818.641" Y="-1033.919" Z="502.1918" />
          <Vector3 X="-4818.063" Y="-1034.879" Z="502.1918" />
          <Vector3 X="-4811.7" Y="-1050.414" Z="502.1935" />
          <Vector3 X="-4811.7" Y="-1050.414" Z="502.1935" />
          <Vector3 X="-4813.366" Y="-1067.109" Z="502.1988" />
          <Vector3 X="-4813.55" Y="-1067.638" Z="502.2007" />
          <Vector3 X="-4821.177" Y="-1076.151" Z="502.2043" />
          <Vector3 X="-4821.592" Y="-1076.526" Z="502.2043" />
          <Vector3 X="-4836.476" Y="-1085.553" Z="502.1924" />
          <Vector3 X="-4836.476" Y="-1085.553" Z="502.1924" />
          <Vector3 X="-4853.007" Y="-1091.29" Z="502.2021" />
          <Vector3 X="-4853.007" Y="-1091.29" Z="502.2021" />
          <Vector3 X="-4868.431" Y="-1098.17" Z="502.212" />
          <Vector3 X="-4868.913" Y="-1098.455" Z="502.212" />
          <Vector3 X="-4883.007" Y="-1106.87" Z="502.212" />
          <Vector3 X="-4883.938" Y="-1107.427" Z="502.212" />
          <Vector3 X="-4898.748" Y="-1116.743" Z="501.6978" />
          <Vector3 X="-4898.748" Y="-1116.743" Z="501.6978" />
          <Vector3 X="-4911.564" Y="-1127.747" Z="501.6978" />
          <Vector3 X="-4911.935" Y="-1128.167" Z="501.6978" />
          <Vector3 X="-4921.563" Y="-1142.055" Z="501.4561" />
          <Vector3 X="-4922.079" Y="-1143.049" Z="501.4623" />
          <Vector3 X="-4928.541" Y="-1158.088" Z="501.4997" />
          <Vector3 X="-4928.734" Y="-1158.613" Z="501.5019" />
          <Vector3 X="-4934.306" Y="-1174.609" Z="501.6746" />
          <Vector3 X="-4934.473" Y="-1175.143" Z="501.6766" />
          <Vector3 X="-4939.22" Y="-1191.985" Z="501.5165" />
          <Vector3 X="-4939.22" Y="-1191.985" Z="501.5165" />
          <Vector3 X="-4942.078" Y="-1208.656" Z="501.6606" />
          <Vector3 X="-4942.102" Y="-1209.215" Z="501.6606" />
          <Vector3 X="-4936.966" Y="-1225.518" Z="501.6517" />
          <Vector3 X="-4936.966" Y="-1225.518" Z="501.6517" />
          <Vector3 X="-4925.55" Y="-1237.96" Z="501.6595" />
          <Vector3 X="-4925.101" Y="-1238.294" Z="501.6595" />
          <Vector3 X="-4911.098" Y="-1246.851" Z="501.869" />
          <Vector3 X="-4910.154" Y="-1247.386" Z="501.869" />
          <Vector3 X="-4894.521" Y="-1255.24" Z="501.869" />
          <Vector3 X="-4894.521" Y="-1255.24" Z="501.869" />
          <Vector3 X="-4878.925" Y="-1261.848" Z="501.869" />
          <Vector3 X="-4878.402" Y="-1262.047" Z="501.869" />
          <Vector3 X="-4861.736" Y="-1267.37" Z="501.869" />
          <Vector3 X="-4861.736" Y="-1267.37" Z="501.869" />
          <Vector3 X="-4846" Y="-1272.041" Z="501.869" />
          <Vector3 X="-4846" Y="-1272.041" Z="501.869" />
          <Vector3 X="-4838.776" Y="-1274.494" Z="501.869" />
          <Vector3 X="-4838.259" Y="-1274.709" Z="501.869" />
          <Vector3 X="-4835.354" Y="-1279.726" Z="501.869" />
          <Vector3 X="-4835.354" Y="-1279.726" Z="501.869" />
          <Vector3 X="-4835.051" Y="-1284.652" Z="501.869" />
          <Vector3 X="-4835.051" Y="-1284.652" Z="501.869" />
          <Vector3 X="-4835.188" Y="-1289.55" Z="501.869" />
          <Vector3 X="-4835.188" Y="-1289.55" Z="501.869" />
          <Vector3 X="-4837.1" Y="-1304.155" Z="501.869" />
          <Vector3 X="-4837.185" Y="-1304.709" Z="501.869" />
          <Vector3 X="-4837.766" Y="-1308.479" Z="501.869" />
          <Vector3 X="-4837.766" Y="-1308.479" Z="501.869" />
          <Vector3 X="-4838.427" Y="-1312.768" Z="501.869" />
          <Vector3 X="-4838.51" Y="-1313.322" Z="501.869" />
          <Vector3 X="-4839.002" Y="-1316.575" Z="501.869" />
          <Vector3 X="-4839.248" Y="-1318.202" Z="501.869" />
          <Vector3 X="-4839.739" Y="-1321.455" Z="501.869" />
          <Vector3 X="-4839.822" Y="-1322.009" Z="501.869" />
          <Vector3 X="-4840.323" Y="-1330.039" Z="501.869" />
          <Vector3 X="-4842.323" Y="-1332.039" Z="503.869" />
          <Vector3 X="43.03407" Y="11.06601" Z="-4.297344" />
          <Vector3 X="38.12021" Y="11.096" Z="-4.297344" />
          <Vector3 X="27.93795" Y="11.28735" Z="-4.297344" />
          <Vector3 X="17.7784" Y="14.3432" Z="-4.297344" />
          <Vector3 X="17.49033" Y="24.50041" Z="-4.297344" />
          <Vector3 X="18.02508" Y="32.3545" Z="-4.297344" />
          <Vector3 X="21.66537" Y="35.15179" Z="-4.297344" />
          <Vector3 X="26.58547" Y="35.51544" Z="-4.297344" />
          <Vector3 X="30.6186" Y="37.44245" Z="-4.297344" />
          <Vector3 X="22.16048" Y="39.40787" Z="-8.229182" />
          <Vector3 X="11.47801" Y="41.02354" Z="-13.53503" />
          <Vector3 X="4.736948" Y="47.91613" Z="-13.86343" />
          <Vector3 X="4.790727" Y="58.41328" Z="-13.86343" />
          <Vector3 X="4.653714" Y="74.59645" Z="-13.86343" />
          <Vector3 X="4.780041" Y="92.09597" Z="-13.86343" />
          <Vector3 X="4.747419" Y="110.1208" Z="-13.86343" />
          <Vector3 X="4.67594" Y="127.0957" Z="-13.86343" />
          <Vector3 X="4.600039" Y="145.1205" Z="-13.86343" />
          <Vector3 X="4.52856" Y="162.0954" Z="-13.86343" />
          <Vector3 X="4.45487" Y="179.5952" Z="-13.86343" />
          <Vector3 X="4.38118" Y="197.0951" Z="-13.86343" />
          <Vector3 X="4.358189" Y="202.555" Z="-13.86343" />
          <Vector3 X="4.286857" Y="219.4949" Z="-20.00733" />
          <Vector3 X="4.204295" Y="239.1017" Z="-25.81147" />
          <Vector3 X="4.098033" Y="264.3365" Z="-34.04978" />
          <Vector3 X="3.963387" Y="296.3122" Z="-40.93103" />
          <Vector3 X="3.820723" Y="330.1919" Z="-51.90271" />
          <Vector3 X="3.460785" Y="366.3091" Z="-54.46487" />
          <Vector3 X="3.332485" Y="401.3053" Z="-54.46487" />
          <Vector3 X="3.775861" Y="437.3525" Z="-54.46487" />
          <Vector3 X="3.537216" Y="471.3013" Z="-54.46487" />
          <Vector3 X="3.489104" Y="506.3013" Z="-54.46487" />
          <Vector3 X="3.440991" Y="541.3013" Z="-54.46487" />
          <Vector3 X="3.725393" Y="576.2982" Z="-54.46487" />
          <Vector3 X="4.7349" Y="611.2835" Z="-65.28667" />
          <Vector3 X="5.032172" Y="647.3322" Z="-74.76553" />
          <Vector3 X="5.082189" Y="681.2817" Z="-84.92974" />
          <Vector3 X="4.587411" Y="716.2781" Z="-95.06628" />
          <Vector3 X="4.098986" Y="751.2745" Z="-95.06628" />
          <Vector3 X="4.094356" Y="786.2744" Z="-95.06628" />
          <Vector3 X="4.145511" Y="821.2744" Z="-95.06628" />
          <Vector3 X="4.196666" Y="856.2743" Z="-95.06628" />
          <Vector3 X="4.249356" Y="892.3243" Z="-95.06628" />
          <Vector3 X="4.300512" Y="927.3242" Z="-95.06628" />
          <Vector3 X="4.350132" Y="961.2742" Z="-97.83864" />
          <Vector3 X="4.118982" Y="996.273" Z="-108.6001" />
          <Vector3 X="3.773084" Y="1031.271" Z="-117.4809" />
          <Vector3 X="3.427186" Y="1066.27" Z="-128.9008" />
          <Vector3 X="3.07091" Y="1102.318" Z="-135.6677" />
          <Vector3 X="3.110998" Y="1136.266" Z="-135.6677" />
          <Vector3 X="3.659588" Y="1172.312" Z="-135.6677" />
          <Vector3 X="3.811847" Y="1206.262" Z="-135.6677" />
          <Vector3 X="3.962265" Y="1241.261" Z="-135.6677" />
          <Vector3 X="3.938973" Y="1276.261" Z="-135.6677" />
          <Vector3 X="3.890865" Y="1311.261" Z="-135.6677" />
          <Vector3 X="3.768309" Y="1346.261" Z="-135.6677" />
          <Vector3 X="4.121559" Y="1382.309" Z="-135.6677" />
          <Vector3 X="4.652587" Y="1416.255" Z="-135.1391" />
          <Vector3 X="5.182521" Y="1450.13" Z="-123.1689" />
          <Vector3 X="5.519345" Y="1487.299" Z="-115.0441" />
          <Vector3 X="5.587626" Y="1521.249" Z="-103.0423" />
          <Vector3 X="5.561158" Y="1556.249" Z="-95.06606" />
          <Vector3 X="5.460242" Y="1591.248" Z="-95.06606" />
          <Vector3 X="5.31287" Y="1626.248" Z="-95.06606" />
          <Vector3 X="5.300448" Y="1660.128" Z="-95.06606" />
          <Vector3 X="5.340733" Y="1696.248" Z="-95.06606" />
          <Vector3 X="5.291181" Y="1732.298" Z="-95.06606" />
          <Vector3 X="5.409094" Y="1766.248" Z="-95.06606" />
          <Vector3 X="5.687909" Y="1800.126" Z="-90.61327" />
          <Vector3 X="6.058484" Y="1837.294" Z="-79.88584" />
          <Vector3 X="6.396645" Y="1871.211" Z="-70.50108" />
          <Vector3 X="6.195426" Y="1907.259" Z="-60.25814" />
          <Vector3 X="5.667353" Y="1941.205" Z="-54.46441" />
          <Vector3 X="5.122948" Y="1976.201" Z="-54.46441" />
          <Vector3 X="4.99895" Y="2012.25" Z="-54.46441" />
          <Vector3 X="4.952284" Y="2046.2" Z="-54.46441" />
          <Vector3 X="5.011127" Y="2082.25" Z="-54.46441" />
          <Vector3 X="5.439527" Y="2116.197" Z="-54.46441" />
          <Vector3 X="5.901171" Y="2152.244" Z="-54.46441" />
          <Vector3 X="6.109212" Y="2186.193" Z="-47.69762" />
          <Vector3 X="6.062643" Y="2220.073" Z="-35.83216" />
          <Vector3 X="6.012995" Y="2256.193" Z="-27.39691" />
          <Vector3 X="5.976914" Y="2282.443" Z="-19.48648" />
          <Vector3 X="5.943912" Y="2306.453" Z="-13.86308" />
          <Vector3 X="5.897246" Y="2340.403" Z="-13.86308" />
          <Vector3 X="5.792956" Y="2375.402" Z="-13.86308" />
          <Vector3 X="5.325047" Y="2402.698" Z="-13.86308" />
          <Vector3 X="5.021571" Y="2424.606" Z="-13.86308" />
          <Vector3 X="4.881138" Y="2438.815" Z="-13.86308" />
          <Vector3 X="4.940031" Y="2443.413" Z="-13.86308" />
          <Vector3 X="5.09191" Y="2451.938" Z="-13.86308" />
          <Vector3 X="5.390513" Y="2456.522" Z="-13.86308" />
          <Vector3 X="10.78065" Y="2459.54" Z="-13.86308" />
          <Vector3 X="20.9477" Y="2460.144" Z="-8.831277" />
          <Vector3 X="31.40736" Y="2460.974" Z="-4.297014" />
          <Vector3 X="32.56397" Y="2465.206" Z="-4.297014" />
          <Vector3 X="31.09654" Y="2475.28" Z="-4.296459" />
          <Vector3 X="30.24754" Y="2485.369" Z="-4.296113" />
          <Vector3 X="31.7309" Y="2490.049" Z="-4.296113" />
          <Vector3 X="37.29616" Y="2490.366" Z="-4.296113" />
          <Vector3 X="42.23095" Y="2490.349" Z="-4.296113" />
          <Vector3 X="48.44682" Y="2490.39" Z="-4.296113" />
          <Vector3 X="54.6834" Y="2490.461" Z="-4.296113" />
          <Vector3 X="58.29513" Y="2490.505" Z="-4.296113" />
          <Vector3 X="61.90686" Y="2490.55" Z="-4.296113" />
          <Vector3 X="82.13547" Y="2490.614" Z="-4.296113" />
          <Vector3 X="-8367.643" Y="539.8162" Z="91.7969" />
          <Vector3 X="-8371.017" Y="544.268" Z="91.7969" />
          <Vector3 X="-8377.524" Y="552.9323" Z="91.7969" />
          <Vector3 X="-8382.645" Y="559.7496" Z="91.7969" />
          <Vector3 X="-8390.755" Y="570.0513" Z="91.7969" />
          <Vector3 X="-8396.895" Y="572.5865" Z="91.3298" />
          <Vector3 X="-8414.048" Y="569.152" Z="92.42038" />
          <Vector3 X="-8430.951" Y="573.9994" Z="94.02469" />
          <Vector3 X="-8446.615" Y="580.0803" Z="94.48235" />
          <Vector3 X="-8462.853" Y="574.3329" Z="95.33842" />
          <Vector3 X="-8477.06" Y="563.2115" Z="97.10958" />
          <Vector3 X="-8490.476" Y="550.0182" Z="97.48755" />
          <Vector3 X="-8507.322" Y="533.3264" Z="97.7924" />
          <Vector3 X="-8525.424" Y="516.8364" Z="98.36327" />
          <Vector3 X="-8542.199" Y="504.4253" Z="98.4901" />
          <Vector3 X="-8550.519" Y="507.141" Z="98.36659" />
          <Vector3 X="-8555.481" Y="516.2621" Z="99.44007" />
          <Vector3 X="-8564.981" Y="531.6028" Z="101.2537" />
          <Vector3 X="-8577.502" Y="541.095" Z="101.784" />
          <Vector3 X="-8586.387" Y="536.9328" Z="103.5804" />
          <Vector3 X="-8599.431" Y="526.153" Z="106.4582" />
          <Vector3 X="-8612.771" Y="514.826" Z="103.413" />
          <Vector3 X="-8623.912" Y="524.5216" Z="101.924" />
          <Vector3 X="-8637.236" Y="536.7102" Z="99.65813" />
          <Vector3 X="-8651.347" Y="547.978" Z="97.05293" />
          <Vector3 X="-8660.438" Y="552.9023" Z="96.93359" />
          <Vector3 X="-8674.766" Y="549.4728" Z="97.36392" />
          <Vector3 X="-8689.05" Y="539.4504" Z="97.85152" />
          <Vector3 X="-8702.481" Y="528.2341" Z="97.67848" />
          <Vector3 X="-8711.939" Y="520.792" Z="97.30478" />
          <Vector3 X="-8725.597" Y="535.5993" Z="100.5479" />
          <Vector3 X="-8736.963" Y="548.9001" Z="100.5342" />
          <Vector3 X="-8747.13" Y="559.6099" Z="97.40246" />
          <Vector3 X="-8743.655" Y="566.4408" Z="97.39405" />
          <Vector3 X="-8738.082" Y="577.1095" Z="97.53005" />
          <Vector3 X="-8745.235" Y="583.0593" Z="97.43817" />
          <Vector3 X="-8757.137" Y="595.113" Z="97.21247" />
          <Vector3 X="-8768.519" Y="606.9413" Z="96.99496" />
          <Vector3 X="-8778.381" Y="601.3635" Z="97.28312" />
          <Vector3 X="-8792.561" Y="591.11" Z="97.59814" />
          <Vector3 X="-8805.521" Y="580.3613" Z="96.03001" />
          <Vector3 X="-8807.519" Y="577.3768" Z="95.43327" />
          <Vector3 X="-8813.608" Y="568.4147" Z="94.15166" />
          <Vector3 X="-8819.998" Y="560.5169" Z="94.38174" />
          <Vector3 X="-8823.835" Y="556.1544" Z="94.92928" />
          <Vector3 X="-8829" Y="550.6915" Z="95.82998" />
          <Vector3 X="-8836.269" Y="542.6624" Z="96.99928" />
          <Vector3 X="-8842.36" Y="534.5304" Z="101.5125" />
          <Vector3 X="-8847.921" Y="527.0658" Z="106.0214" />
          <Vector3 X="-8851.581" Y="528.3154" Z="106.0261" />
          <Vector3 X="-8853.066" Y="531.3609" Z="105.9455" />
          <Vector3 X="-8854.582" Y="534.6396" Z="105.9117" />
          <Vector3 X="-8857.312" Y="536.1687" Z="106.389" />
          <Vector3 X="-8860.782" Y="535.2136" Z="106.4809" />
          <Vector3 X="-8863.929" Y="533.9559" Z="106.6291" />
          <Vector3 X="-8866.59" Y="531.7625" Z="106.7717" />
          <Vector3 X="-8865.216" Y="526.6431" Z="107.2576" />
          <Vector3 X="-8860.267" Y="517.0384" Z="108.6253" />
          <Vector3 X="-8854.162" Y="508.9124" Z="109.6068" />
          <Vector3 X="-8847.38" Y="500.4635" Z="109.6091" />
          <Vector3 X="-8842.806" Y="494.8723" Z="109.6092" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition>return (Quest.GetQuestCompleted(2158) ||  new Vector3(-8842.806f, 494.8723f, 109.6092f).DistanceTo(ObjectManager.Me.Position) &lt; 3);


</IsCompleteCondition>
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTETurnInShimmerStout</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="-5170.547" Y="-2318.445" Z="400.2146" />
          <Vector3 X="-5188.287" Y="-2300.181" Z="400.2807" />
          <Vector3 X="-5205.338" Y="-2280.305" Z="401.8147" />
          <Vector3 X="-5222.736" Y="-2260.648" Z="404.1217" />
          <Vector3 X="-5240.133" Y="-2240.991" Z="412.9935" />
          <Vector3 X="-5257.554" Y="-2221.355" Z="423.1629" />
          <Vector3 X="-5275.093" Y="-2201.826" Z="426.084" />
          <Vector3 X="-5288.913" Y="-2179.792" Z="423.1795" />
          <Vector3 X="-5299.895" Y="-2157.464" Z="421.1807" />
          <Vector3 X="-5325.672" Y="-2156.45" Z="419.5879" />
          <Vector3 X="-5341.962" Y="-2155.797" Z="417.735" />
          <Vector3 X="-5366.443" Y="-2147.082" Z="411.9255" />
          <Vector3 X="-5386.842" Y="-2130.6" Z="403.0688" />
          <Vector3 X="-5402.953" Y="-2116.654" Z="400.3012" />
          <Vector3 X="-5409.912" Y="-2110.899" Z="399.5177" />
          <Vector3 X="-5425.349" Y="-2098.688" Z="399.3762" />
          <Vector3 X="-5448.859" Y="-2087.338" Z="399.3762" />
          <Vector3 X="-5472.375" Y="-2076.019" Z="399.3762" />
          <Vector3 X="-5491.164" Y="-2057.711" Z="399.3762" />
          <Vector3 X="-5511.93" Y="-2047.553" Z="399.3762" />
          <Vector3 X="-5528.894" Y="-2067.388" Z="399.5919" />
          <Vector3 X="-5552.84" Y="-2077.965" Z="399.4755" />
          <Vector3 X="-5574.004" Y="-2093.34" Z="399.816" />
          <Vector3 X="-5589.83" Y="-2114.2" Z="399.6416" />
          <Vector3 X="-5600.292" Y="-2138.133" Z="403.8" />
          <Vector3 X="-5605.859" Y="-2163.771" Z="410.6514" />
          <Vector3 X="-5612.577" Y="-2189.136" Z="417.4666" />
          <Vector3 X="-5621.83" Y="-2213.672" Z="423.3561" />
          <Vector3 X="-5632.008" Y="-2237.64" Z="424.7536" />
          <Vector3 X="-5631.424" Y="-2251.062" Z="425.5348" />
          <Vector3 X="-5618.722" Y="-2267.135" Z="424.806" />
          <Vector3 X="-5604.518" Y="-2289.207" Z="418.4851" />
          <Vector3 X="-5588.38" Y="-2309.872" Z="406.6269" />
          <Vector3 X="-5572.314" Y="-2330.629" Z="402.0404" />
          <Vector3 X="-5557.153" Y="-2352.057" Z="400.5377" />
          <Vector3 X="-5554.323" Y="-2356.1" Z="400.4919" />
          <Vector3 X="-5548.445" Y="-2377.45" Z="400.4919" />
          <Vector3 X="-5538.683" Y="-2401.512" Z="400.507" />
          <Vector3 X="-5522.631" Y="-2422.281" Z="399.8333" />
          <Vector3 X="-5514.145" Y="-2433.261" Z="400.3761" />
          <Vector3 X="-5499.838" Y="-2442.845" Z="400.2914" />
          <Vector3 X="-5486.247" Y="-2448.177" Z="400.4797" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Senir's Observations</Name>
      <QuestId>
        <int>282</int>
      </QuestId>
      <QuestType>None</QuestType>
      <QuestClass />
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Shimmer Stout</Name>
      <QuestId>
        <int>413</int>
      </QuestId>
      <QuestType>None</QuestType>
      <QuestClass />
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Stocking Jetsteam1</Name>
      <QuestId>
        <int>317</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="-5530.311" Y="-626.6097" Z="407.2708" />
          <Vector3 X="-5554.923" Y="-722.996" Z="409.6626" />
          <Vector3 X="-5416.352" Y="-548.7641" Z="397.3504" />
        </HotSpots>
        <EntryTarget>
          <int>1125</int>
          <int>1126</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>true</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Stocking Jetsteam2</Name>
      <QuestId>
        <int>317</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="-5517.642" Y="-570.4877" Z="402.9741" />
          <Vector3 X="-5578.471" Y="-685.1397" Z="407.6606" />
          <Vector3 X="-5447.434" Y="-376.378" Z="398.9363" />
        </HotSpots>
        <EntryTarget>
          <int>1128</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>true</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Supplies to Tannok</Name>
      <QuestId>
        <int>2160</int>
      </QuestId>
      <QuestType>None</QuestType>
      <QuestClass />
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>The Grizzled Den</Name>
      <QuestId>
        <int>313</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="-5691.25" Y="-310.021" Z="365.7577" />
          <Vector3 X="-5624.078" Y="-273.5621" Z="367.8749" />
          <Vector3 X="-5575.137" Y="-280.4088" Z="366.5837" />
          <Vector3 X="-5509.329" Y="-221.9501" Z="353.5078" />
        </HotSpots>
        <EntryTarget>
          <int>1134</int>
          <int>1135</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>true</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>The Lost Pilot</Name>
      <QuestId>
        <int>419</int>
      </QuestId>
      <QuestType>None</QuestType>
      <QuestClass />
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition>return ObjectManager.Me.WowClass != WoWClass.Warrior;</CanCondition>
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>The Perfect Stout</Name>
      <QuestId>
        <int>315</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="-5071.065" Y="-228.9935" Z="441.6222" />
        </HotSpots>
        <EntryTarget>
          <int>1397</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>true</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>The Public Servant</Name>
      <QuestId>
        <int>433</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="-5700.129" Y="-1704.633" Z="361.6661" />
          <Vector3 X="-5621.019" Y="-1676.533" Z="361.9831" />
          <Vector3 X="-5563.508" Y="-1725.805" Z="342.9849" />
          <Vector3 X="-5618.609" Y="-1772.489" Z="355.7193" />
        </HotSpots>
        <EntryTarget>
          <int>1117</int>
        </EntryTarget>
        <IsGrinderNotQuest>true</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>true</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Those Blasted Troggs</Name>
      <QuestId>
        <int>432</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="-5765.883" Y="-1639.94" Z="359.0059" />
          <Vector3 X="-5833.872" Y="-1537.416" Z="358.6434" />
        </HotSpots>
        <EntryTarget>
          <int>1115</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>true</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Tools for Steelgrill</Name>
      <QuestId>
        <int>400</int>
      </QuestId>
      <QuestType>None</QuestType>
      <QuestClass />
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Tundra MacGrann's Stolen Stash</Name>
      <QuestId>
        <int>312</int>
      </QuestId>
      <QuestType>Gatherer</QuestType>
      <QuestClass xsi:type="GathererEasyQuestClass">
        <HotSpots>
          <Vector3 X="-5648.278" Y="-92.98562" Z="417.9136" />
        </HotSpots>
        <EntryIdObjects>
          <int>272</int>
        </EntryIdObjects>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>true</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>HUNTERGrindTo10</Name>
      <QuestId />
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="-5597.283" Y="-993.1307" Z="393.0779" />
          <Vector3 X="-5702.398" Y="-1004.195" Z="394.8536" />
          <Vector3 X="-5898.222" Y="-1121.099" Z="382.0451" />
          <Vector3 X="-5802.331" Y="-1255.812" Z="380.1024" />
          <Vector3 X="-5754.801" Y="-1305.372" Z="388.2632" />
        </HotSpots>
        <EntryTarget>
          <int>1126</int>
          <int>1201</int>
          <int>1127</int>
          <int>1196</int>
        </EntryTarget>
        <IsGrinderNotQuest>true</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>9</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>GRINDGrindTo9</Name>
      <QuestId />
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="-5695.546" Y="-1003.205" Z="395.436" />
          <Vector3 X="-5811.642" Y="-1203.028" Z="377.9382" />
          <Vector3 X="-5853.648" Y="-1379.986" Z="395.4249" />
          <Vector3 X="-5523.745" Y="-1456.754" Z="407.0782" />
          <Vector3 X="-5577.199" Y="-975.3799" Z="392.9907" />
        </HotSpots>
        <EntryTarget>
          <int>1201</int>
          <int>1127</int>
          <int>1196</int>
        </EntryTarget>
        <IsGrinderNotQuest>true</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>8</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTEKharanosToInnkeeper</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="-5597.995" Y="-492.398" Z="398.0722" />
          <Vector3 X="-5598.406" Y="-495.9865" Z="398.8508" />
          <Vector3 X="-5598.826" Y="-499.46" Z="399.6177" />
          <Vector3 X="-5599.671" Y="-506.2959" Z="400.9207" />
          <Vector3 X="-5600.101" Y="-509.7695" Z="401.3037" />
          <Vector3 X="-5593.884" Y="-511.0717" Z="403.2486" />
          <Vector3 X="-5590.286" Y="-510.7539" Z="404.096" />
          <Vector3 X="-5586.797" Y="-510.4778" Z="404.3741" />
          <Vector3 X="-5581.362" Y="-511.7233" Z="404.3741" />
          <Vector3 X="-5581.764" Y="-517.1498" Z="402.1919" />
          <Vector3 X="-5582.172" Y="-520.6247" Z="400.7628" />
          <Vector3 X="-5586.363" Y="-525.663" Z="399.6517" />
          <Vector3 X="-5592.761" Y="-528.4546" Z="399.6517" />
          <Vector3 X="-5599.245" Y="-530.4403" Z="399.6517" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTEHunterTrainerToTamePet</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="-5016.822" Y="-1247.965" Z="505.2993" />
          <Vector3 X="-5009.689" Y="-1242.191" Z="505.2993" />
          <Vector3 X="-5001.522" Y="-1235.591" Z="505.2993" />
          <Vector3 X="-4997.469" Y="-1232.255" Z="505.0167" />
          <Vector3 X="-4989.421" Y="-1225.523" Z="501.6836" />
          <Vector3 X="-4987.73" Y="-1215.512" Z="501.6758" />
          <Vector3 X="-4990.614" Y="-1205.419" Z="501.6743" />
          <Vector3 X="-4992.446" Y="-1195.084" Z="501.6666" />
          <Vector3 X="-4994.388" Y="-1178.806" Z="501.6605" />
          <Vector3 X="-4996.45" Y="-1161.428" Z="501.6605" />
          <Vector3 X="-4999.911" Y="-1144.284" Z="501.6605" />
          <Vector3 X="-5003.734" Y="-1127.207" Z="501.6989" />
          <Vector3 X="-5007.18" Y="-1116.64" Z="501.6893" />
          <Vector3 X="-5014.342" Y="-1109.049" Z="501.6722" />
          <Vector3 X="-5017.014" Y="-1099.148" Z="501.6788" />
          <Vector3 X="-5016.526" Y="-1087.132" Z="501.6595" />
          <Vector3 X="-5016.078" Y="-1069.657" Z="501.7334" />
          <Vector3 X="-5013.969" Y="-1052.343" Z="501.7189" />
          <Vector3 X="-5008.873" Y="-1035.602" Z="501.6575" />
          <Vector3 X="-5003.801" Y="-1018.854" Z="501.6575" />
          <Vector3 X="-4998.1" Y="-1002.312" Z="501.6586" />
          <Vector3 X="-4991.874" Y="-985.9591" Z="501.6599" />
          <Vector3 X="-4989.396" Y="-968.8825" Z="501.6599" />
          <Vector3 X="-4998.104" Y="-954.0389" Z="501.6599" />
          <Vector3 X="-5010.158" Y="-941.3547" Z="501.6599" />
          <Vector3 X="-5015.098" Y="-925.2724" Z="501.6599" />
          <Vector3 X="-5004.313" Y="-912.4841" Z="501.6599" />
          <Vector3 X="-4990.824" Y="-901.3763" Z="501.6599" />
          <Vector3 X="-4982.498" Y="-890.1012" Z="501.6318" />
          <Vector3 X="-4985.044" Y="-878.9519" Z="499.9846" />
          <Vector3 X="-4995.357" Y="-864.9736" Z="497.0316" />
          <Vector3 X="-5006.339" Y="-851.351" Z="497.0805" />
          <Vector3 X="-5017.113" Y="-837.5608" Z="496.9844" />
          <Vector3 X="-5027.517" Y="-823.4948" Z="495.1714" />
          <Vector3 X="-5035.368" Y="-807.8803" Z="495.1493" />
          <Vector3 X="-5041.547" Y="-791.5096" Z="495.1287" />
          <Vector3 X="-5048.381" Y="-775.4271" Z="493.2046" />
          <Vector3 X="-5057.377" Y="-760.4194" Z="485.7672" />
          <Vector3 X="-5069.166" Y="-747.699" Z="477.8575" />
          <Vector3 X="-5085.549" Y="-741.9609" Z="471.7977" />
          <Vector3 X="-5103.031" Y="-741.3806" Z="467.1331" />
          <Vector3 X="-5120.529" Y="-741.1902" Z="462.5682" />
          <Vector3 X="-5138.029" Y="-741.0519" Z="458.1387" />
          <Vector3 X="-5155.485" Y="-739.9778" Z="453.6742" />
          <Vector3 X="-5172.714" Y="-737.0499" Z="449.2327" />
          <Vector3 X="-5187.806" Y="-728.4005" Z="446.3775" />
          <Vector3 X="-5198.523" Y="-714.66" Z="442.0352" />
          <Vector3 X="-5205.302" Y="-698.5813" Z="437.8444" />
          <Vector3 X="-5211.014" Y="-682.041" Z="434.1204" />
          <Vector3 X="-5216.897" Y="-665.5599" Z="429.9622" />
          <Vector3 X="-5222.766" Y="-649.0731" Z="425.7444" />
          <Vector3 X="-5228.634" Y="-632.5862" Z="421.645" />
          <Vector3 X="-5234.501" Y="-616.0994" Z="417.7444" />
          <Vector3 X="-5238.143" Y="-599.0662" Z="413.6245" />
          <Vector3 X="-5239.671" Y="-581.6331" Z="408.7401" />
          <Vector3 X="-5241.333" Y="-564.2123" Z="402.4456" />
          <Vector3 X="-5243.871" Y="-546.8992" Z="396.1873" />
          <Vector3 X="-5246.687" Y="-529.6278" Z="389.7145" />
          <Vector3 X="-5251.615" Y="-512.8686" Z="386.1434" />
          <Vector3 X="-5261.062" Y="-500.4025" Z="386.2924" />
          <Vector3 X="-5277.986" Y="-494.6055" Z="388.8251" />
          <Vector3 X="-5280.921" Y="-497.2147" Z="389.3471" />
          <Vector3 X="-5289.275" Y="-503.5672" Z="390.9344" />
          <Vector3 X="-5298.532" Y="-508.4868" Z="391.4995" />
          <Vector3 X="-5308.542" Y="-511.6152" Z="392.2122" />
          <Vector3 X="-5318.738" Y="-514.0635" Z="391.6666" />
          <Vector3 X="-5328.811" Y="-516.9844" Z="391.6033" />
          <Vector3 X="-5338.111" Y="-521.8274" Z="391.5139" />
          <Vector3 X="-5345.818" Y="-528.8966" Z="391.4936" />
          <Vector3 X="-5350.543" Y="-538.1738" Z="391.6109" />
          <Vector3 X="-5353.084" Y="-548.3415" Z="391.9344" />
          <Vector3 X="-5357.899" Y="-557.6142" Z="391.511" />
          <Vector3 X="-5364.687" Y="-565.6136" Z="392.1097" />
          <Vector3 X="-5371.86" Y="-573.2812" Z="392.386" />
          <Vector3 X="-5379.034" Y="-580.9487" Z="392.3703" />
          <Vector3 X="-5386.323" Y="-588.5015" Z="392.789" />
          <Vector3 X="-5394.968" Y="-594.3838" Z="392.9644" />
          <Vector3 X="-5404.973" Y="-597.3474" Z="393.7737" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>HUNTERTamePet</Name>
      <QuestId />
      <QuestType>OverridePulseCSharpCode</QuestType>
      <QuestClass xsi:type="OverridePulseCSharpCodeEasyQuestClass">
        <Code>var pos = new Vector3(-5421f, -581f, 396f);
int npc = 1126;

if(!ObjectManager.Pet.IsValid)
{
   wManager.Wow.Bot.Tasks.GoToTask.ToPosition(pos);
   wManager.wManagerSetting.CurrentSetting.MaxUnitsNear = 100;
   var target = ObjectManager.GetObjectWoWUnit().FirstOrDefault(o =&gt; o.Entry == npc &amp;&amp; o.Position.DistanceTo(ObjectManager.Me.Position) &lt; 50 &amp;&amp; o.IsAlive);

if(target != null &amp;&amp; target.IsAlive)
{
   ObjectManager.Me.Target = target.Guid;

if(ObjectManager.Me.Position.DistanceTo(target.Position) &gt;= 30)
   MovementManager.MoveTo(target.Position);

   Thread.Sleep(Usefuls.Latency + 250);
   SpellManager.CastSpellByNameLUA("Tame Beast");
}

if(ObjectManager.Pet.IsValid)
   return true;


}
else
{
   return true;
}

return false;
</Code>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition>return ObjectManager.Pet.IsValid;</IsCompleteCondition>
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>Hunter</WoWClass>
    </EasyQuest>
  </EasyQuests>
  <Script>using robotManager.Helpful;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Threading;
using wManager.Events;
using wManager.Wow.Bot.Tasks;
using wManager.Wow.Enums;
using wManager.Wow.Helpers;
using wManager.Wow.ObjectManager;
using System.ComponentModel;
using System.Configuration;
using System.Net;
using System.Windows.Forms;
using robotManager.Products;
using System.Threading.Tasks;



//FlightMaster
public class FlightMaster
{

    private int priority;

    public FlightMaster(int priority)
    {
        this.priority = priority;
    }

    public static void main(String[] args)
    {
        FlightMaster temp = new FlightMaster(1);
        Logging.Write("Stuff");
    }


    public static int timer = 0;
    public static Vector3 myPositionAtStart = new Vector3(0, 0, 0);
    public static bool _deleteOldPath = false;
    public static bool _isLaunched ;
    static bool longMoveState = false;
    static Vector3 checkDistanceToDestination;
    private static int travelDistance = 1250;
    private static float saveDistance;
    public static Vector3 destinationVector = new Vector3(0, 0, 0);

    //public static MovementEvents.MovementCancelableHandler MovementEventsOnOnMovementPulse { get; private set; }

    // public static List&lt;FlightMasterDB&gt; FML = fillDB();

    public void startFlightMaster()
    {
        Logging.Write("[FNV_Quester]: Flight Master initialized");
        _isLaunched = true;
        FNVQuesterFlightMaster.Load();
        //flightMasterLoop();
    }

    public void start()
    {
        //Logging.Write("Subscribing to event");
       // SubscribeToEvent();
       // watchForEvents();
    }

    public void stop()
    {
        //Logging.Write("Unsubscribing to event");
        //UnSubscribeEvents();
    }

    public static void disposeFlightMaster()
    {
        _isLaunched = false;
        FNVQuesterFlightMaster.CurrentSettings.Save();
        //clearOldPath();
        //_deleteOldPath = true;
        //UnSubscribeEvents();
        //MovementEvents.OnMovementPulse -= new MovementEvents.MovementCancelableHandler(FlightMaster.MovementEventsOnOnMovementPulse);
        //Logging.Write("[FNV_Quester]: Flight Master disposed");
    }

    public static void disposeFlightMaster(int wert)
    {
        _isLaunched = false;
        if(wert == 1)
        {
            Logging.Write("Flight Master stopped, dead");
        }
        else
        {
            Logging.Write("Flight Master stopped, combat");
        }
    }


    private void SubscribeToEvent()
    {
         MovementEvents.OnMovementPulse += MovementEventsOnOnMovementPulse;
    }

    public void UnSubscribeEvents()
    {
        MovementEvents.OnMovementPulse -= MovementEventsOnOnMovementPulse;
    }

    private void watchForEvents()
    {

        EventsLuaWithArgs.OnEventsLuaWithArgs += (LuaEventsId id, List&lt;string&gt; args) =&gt;
        {


            if (id == wManager.Wow.Enums.LuaEventsId.PLAYER_DEAD)
            {
                Logging.Write("[FNV_Quester]: Player died, stop Flight Master");
                disposeFlightMaster(1);
            }
            if (id == wManager.Wow.Enums.LuaEventsId.PLAYER_ENTER_COMBAT)
            {
                disposeFlightMaster(2);
          		  Logging.Write("[FNV_Quester]: Player entered combat, stop Flight Master");
            }

        };

    }


    private void MovementEventsOnOnMovementPulse(List&lt;Vector3&gt; path, CancelEventArgs cancelEventArgs)
    {
        if(timer &lt; 1)
        {
            checkDistanceToDestination = path.Last&lt;Vector3&gt;();
            longMove(path.Last&lt;Vector3&gt;());
            destinationVector = path.Last&lt;Vector3&gt;();
            if(ObjectManager.Me.Position.DistanceTo(destinationVector) &gt; 1000 &amp;&amp; !_isLaunched)
                startFlightMaster();
        }
        else
        {
            Logging.Write("[FNV_Quester]: Taxi in Pause");
        }
    }

    public bool longMove(Vector3 destination)
    {
        saveDistance = new Vector3(destination).DistanceTo(ObjectManager.Me.Position);
        if(new Vector3(destination).DistanceTo(ObjectManager.Me.Position) &lt; travelDistance)
        {
            longMoveState = false;
            return false;
        }
        else
        {
            longMoveState = true;
            return true;
        }
    }


    public static FlightMasterDB getClosestFlightMasterFrom()
    {
        List&lt;FlightMasterDB&gt; FMLnfmd = fillDB();
        float tempDistance = 99999;
        FlightMasterDB returnObject = new FlightMasterDB("null", 0, new Vector3(0, 0, 0), false);

        foreach(var a in FMLnfmd)
        {
            if(a.alreadyDiscovered &amp;&amp; a.position.DistanceTo(ObjectManager.Me.Position) &lt; tempDistance &amp;&amp; (a.continent == checkContinent()))
            {
                tempDistance = a.position.DistanceTo(ObjectManager.Me.Position);
                returnObject = a;
            }
        }
        return returnObject;
    }

    public static FlightMasterDB getClosestFlightMasterTo()
    {
        List&lt;FlightMasterDB&gt; FMLgcfmt = fillDB();
        float tempDistance = 99999;
        FlightMasterDB returnObject = new FlightMasterDB("null", 0, new Vector3(0, 0, 0), false);

        foreach(var a in FMLgcfmt)
        {
            if(a.alreadyDiscovered &amp;&amp; a.position.DistanceTo(destinationVector) &lt; tempDistance &amp;&amp; (a.continent == checkContinent()))
            {
                tempDistance = a.position.DistanceTo(destinationVector);
                returnObject = a;
            }
        }
        return returnObject;
    }

    public static bool checkContinent()
    {
        if(Usefuls.ContinentId == (int)ContinentId.Kalimdor)
        {
            return true;
        }
        else
        {
            return false;
        }
        
    }

    public static void waitFlying()
    {

        while(ObjectManager.Me.IsOnTaxi)
        {
            Logging.Write("[FNV_Quester]: On taxi, waiting");
            Thread.Sleep(30000);
        }

        Logging.Write("[FNV_Quester]: Arrived at destination Flight Master, finished waiting");
    }

    public static List&lt;FlightMasterDB&gt; fillDB()
    {
        //True = Kalimdor ; False = Eastern Kingdoms
        List&lt;FlightMasterDB&gt; FMListe = new List&lt;FlightMasterDB&gt;();
        FlightMasterDB Stormwind = new FlightMasterDB("Stormwind", 352, new Vector3(-8835.76f, 490.084f, 109.6157f), false);
        FMListe.Add(Stormwind);
        FlightMasterDB ArathiHighlands = new FlightMasterDB("Arathi", 2835, new Vector3(-1240.03f, -2513.96f, 21.92969f), false);
        FMListe.Add(ArathiHighlands);
        FlightMasterDB Ashenvale = new FlightMasterDB("Ashenvale", 4267, new Vector3(2828.4f, -284.3f, 106.7f), true);
        FMListe.Add(Ashenvale);
        FlightMasterDB Darkshore = new FlightMasterDB("Darkshore", 3841, new Vector3(6343.2f, 561.651f, 15.79876f), true);
        FMListe.Add(Darkshore);
        FlightMasterDB Stranglethorn = new FlightMasterDB("Stranglethorn", 2859, new Vector3(-14477.9f, 464.101f, 36.38163f), false);
        FMListe.Add(Stranglethorn);
        FlightMasterDB Duskwood = new FlightMasterDB("Duskwood", 2409, new Vector3(-10513.8f, -1258.79f, 41.43174f), false);
        FMListe.Add(Duskwood);
        FlightMasterDB FeralasFeathermoon = new FlightMasterDB("Feralas, Feathermoon", 8019, new Vector3(-4370.5f, 3340f, 12f), true);
        FMListe.Add(FeralasFeathermoon);
        FlightMasterDB FeralasThalanaar = new FlightMasterDB("Feralas, Thalanaar", 4319, new Vector3(-4491f, -781f, -40f), true);
        FMListe.Add(FeralasThalanaar);
        FlightMasterDB Tanaris = new FlightMasterDB("Tanaris", 7823, new Vector3(-7224.9f, -3738.2f, 8.4f), true);
        FMListe.Add(Tanaris);
        FlightMasterDB Hinterlands = new FlightMasterDB("The Hinterlands", 8018, new Vector3(282.1f, -2001.3f, 194.1f), false);
        FMListe.Add(Hinterlands);
        FlightMasterDB Ironforge = new FlightMasterDB("Ironforge", 1573, new Vector3(-4821.13f, -1152.4f, 502.2116f), false);
        FMListe.Add(Ironforge);
        FlightMasterDB Menethil = new FlightMasterDB("Wetlands", 1571, new Vector3(-3793.2f, -782.052f, 9.014864f), false);
        FMListe.Add(Menethil);
        FlightMasterDB TheBarrens = new FlightMasterDB("The Barrens", 16227, new Vector3(-898.246f, -3769.65f, 11.71021f), true);
        FMListe.Add(TheBarrens);
        FlightMasterDB Redridge = new FlightMasterDB("Redridge Mountains", 931, new Vector3(-9435.8f, -2234.79f, 69.43174f), false);
        FMListe.Add(Redridge);
        FlightMasterDB Teldrassil = new FlightMasterDB("Teldrassil", 3838, new Vector3(8640.58f, 841.118f, 23.26363f), true);
        FMListe.Add(Teldrassil);
        FlightMasterDB Southshore = new FlightMasterDB("Hillsbrad Foothiils", 2432, new Vector3(-715.146f, -512.134f, 26.54455f), false);
        FMListe.Add(Southshore);
        FlightMasterDB Stonetalon = new FlightMasterDB("Stonetalon Mountains", 4407, new Vector3(2682.83f, 1466.45f, 233.6483f), true);
        FMListe.Add(Stonetalon);
        FlightMasterDB Thelsamar = new FlightMasterDB("Loch Modan", 1572, new Vector3(-5424.85f, -2929.87f, 347.5623f), false);
        FMListe.Add(Thelsamar);
        FlightMasterDB Theramore = new FlightMasterDB("Dustwallow Marsh", 4321, new Vector3(-3828.88f, -4517.51f, 10.66067f), true);
        FMListe.Add(Theramore);
        FlightMasterDB WesternP = new FlightMasterDB("Western Pleaguelands", 12596, new Vector3(928.3f, -1429.1f, 64.8f), false);
        FMListe.Add(WesternP);
        FlightMasterDB Westfall = new FlightMasterDB("Westfall", 523, new Vector3(-10628.8f, 1037.79f, 34.43174f), false);
        FMListe.Add(Westfall);
        FlightMasterDB EasternP = new FlightMasterDB("Eastern Pleaguelands", 12617, new Vector3(2269.9f, -5345.4f, 86.9f), false);
        FMListe.Add(EasternP);
        FlightMasterDB SearingGorge = new FlightMasterDB("Searing Gorge", 2941, new Vector3(-6559.1f, -1169.4f, 309.8f), false);
        FMListe.Add(SearingGorge);
        FlightMasterDB BurningSteppes = new FlightMasterDB("Burning Steppes", 2299, new Vector3(-8365.1f, -2758.5f, 185.6f), false);
        FMListe.Add(BurningSteppes);
        FlightMasterDB Azshara = new FlightMasterDB("Azshara", 12577, new Vector3(2718.2f, -3880.8f, 101.4f), true);
        FMListe.Add(Azshara);
        FlightMasterDB Felwood = new FlightMasterDB("Felwood", 12578, new Vector3(6204.2f, -1951.4f, 571.3f), true);
        FMListe.Add(Felwood);
        FlightMasterDB Winterspring = new FlightMasterDB("Winterspring", 11138, new Vector3(6800.5f, -4742.4f, 701.5f), true);
        FMListe.Add(Winterspring);
        FlightMasterDB UngoroCreater = new FlightMasterDB("Ungoro Crater", 10583, new Vector3(-6110.5f, -1140.4f, -186.9f), true);
        FMListe.Add(UngoroCreater);
        FlightMasterDB Silithus = new FlightMasterDB("Silithus", 15177, new Vector3(-6758.6f, 775.6f, 89f), true);
        FMListe.Add(Silithus);
        FlightMasterDB Desolace = new FlightMasterDB("Desolace", 6706, new Vector3(136f, 1326f, 193f), true);
        FMListe.Add(Desolace);
        return FMListe;
    }

    public static bool validFlight(String from, String to)
    {
        bool von = false;
        bool zu = false;
        List&lt;FlightMasterDB&gt; FMLvf = fillDB();

        for(int i = 0; i &lt; FMLvf.Count; i++)
        {
            if(FMLvf[i].name.Contains(from))
            {
                von = FMLvf[i].continent;
            }
            if(FMLvf[i].name.Contains(to))
            {
                zu = FMLvf[i].continent;
            }
        }
        return von != zu;
    }

    public static bool discoveredTaxiNodes(String from, String to)
    {

        List&lt;FlightMasterDB&gt; FMLDTN = fillDB();

        foreach(var ele in FMLDTN)
        {
            if(ele.name.Contains(from))
            {
                if(!ele.alreadyDiscovered)
                {
                    Logging.Write("[FNV_Quester]: Taxi node from " + ele.name + " has not been discovered so far. Abort taking taxi.");
                    return false;
                }
            }
        }

        foreach(var ele in FMLDTN)
        {
            if(ele.name.Contains(to))
            {
                if(!ele.alreadyDiscovered)
                {
                    Logging.Write("[FNV_Quester]: Taxi node to " + ele.name + " has not been discovered so far. Abort taking taxi.");
                    return false;
                }
            }
        }
        return true;
    }

    public static void takeTaxi(String from, String to)
    {

        List&lt;FlightMasterDB&gt; FMLtt = fillDB();
        bool canProceed = true;
        try
        {
            FMLtt = fillDB();
        }
        catch(Exception e)
        {
            Logging.Write("Error: " + e);
        }


        Vector3 myPos = ObjectManager.Me.Position;

        if(Usefuls.MapZoneName.Contains(to))
        {
            canProceed = false;
            Logging.Write("[FNV_Quester]: Already in the zone we are going to travel to. Skip flying");
        }

        if(canProceed)
        {

            if(validFlight(from, to))
            {
                Logging.Write("[FNV_Quester]: Unable to fly between Kalimdor and Eastern Kingdoms");
            }

            var position = new Vector3();
            int npcEntryId = 0;

            for(int i = 0; i &lt; FMLtt.Count; i++)
            {
                if(FMLtt[i].name.Contains(from))
                {
                    position = FMLtt[i].position;
                    npcEntryId = FMLtt[i].NPCId;
                    FMLtt[i].name.Contains(from);
                }
            }


            if(!ObjectManager.Me.IsOnTaxi)
            {
                wManager.wManagerSetting.ClearBlacklistOfCurrentProductSession();

                while(!wManager.Wow.Bot.Tasks.GoToTask.ToPositionAndIntecractWithNpc(position, npcEntryId, -1, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore) &amp;&amp; !Fight.InFight)
                {
                    wManager.wManagerSetting.ClearBlacklistOfCurrentProductSession();
                    wManager.Wow.Bot.Tasks.GoToTask.ToPositionAndIntecractWithNpc(position, npcEntryId, -1, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore);
                }
                if(wManager.Wow.Bot.Tasks.GoToTask.ToPositionAndIntecractWithNpc(position, npcEntryId, -1, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore))
                {
                    while(!ObjectManager.Me.IsOnTaxi)
                    {
                        Usefuls.SelectGossipOption(GossipOptionsType.taxi);

                        int node = Lua.LuaDoString&lt;int&gt;("for i=0,30 do if string.find(TaxiNodeName(i),'" + to + "') then return i end end");
                        Lua.LuaDoString("TakeTaxiNode(" + node + ")");
                        Logging.Write("[FNV_Quester]: Taking Taxi from " + from + " to " + to);
                        Thread.Sleep(Usefuls.Latency + 2500);
                    }
                }
            }
            waitFlying();
            return;
        }
    }

    public static void discoverTaxi(String discoverName)
    {
        FNVQuesterFlightMaster.Load();
        List&lt;FlightMasterDB&gt; FMLdt = fillDB();

        var position = new Vector3();
        int npcEntryId = 0;
        int j = 0;
        bool alreadyDiscoveredFlightMaster = false;

        for(int i = 0; i &lt; FMLdt.Count; i++)
        {
            if(FMLdt[i].name.Contains(discoverName))
            {
                if(FMLdt[i].alreadyDiscovered)
                {
                    Logging.Write("[FNV_Quester]: Flight Master of " + FMLdt[i].name + " already discovered. Skip it.");
                    alreadyDiscoveredFlightMaster = true;
                    break;
                }

                position = FMLdt[i].position;
                npcEntryId = FMLdt[i].NPCId;
                j = i;
            }
        }

        if(!alreadyDiscoveredFlightMaster)
        {

            if(!ObjectManager.Me.IsOnTaxi)
            {
                wManager.wManagerSetting.ClearBlacklistOfCurrentProductSession();

                while(!wManager.Wow.Bot.Tasks.GoToTask.ToPositionAndIntecractWithNpc(position, npcEntryId, -1, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore))
                {
                   // wManager.Wow.Helpers.Conditions.ForceIgnoreIsAttacked = true;
                    wManager.wManagerSetting.ClearBlacklistOfCurrentProductSession();
                    wManager.Wow.Bot.Tasks.GoToTask.ToPositionAndIntecractWithNpc(position, npcEntryId, -1, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore);
                }
                if(wManager.Wow.Bot.Tasks.GoToTask.ToPositionAndIntecractWithNpc(position, npcEntryId, -1, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore))
                {
                    Usefuls.SelectGossipOption(GossipOptionsType.taxi);
                    Thread.Sleep(Usefuls.Latency + 250);
                    //wManager.Wow.Helpers.Conditions.ForceIgnoreIsAttacked = true;
                }
            }
            Logging.Write("[FNV_Quester]: Flight Master " + FMLdt[j].name + " discovered");
            FMLdt[j].alreadyDiscovered = true;
            FNVQuesterFlightMaster.flightMasterSaveChanges(FMLdt[j]);
            //wManager.Wow.Helpers.Conditions.ForceIgnoreIsAttacked = false;
            
        }
        timer = 0;
        return;
    }

    }

    public class FlightMasterDB
    {
        public FlightMasterDB(String name, int NPCId, Vector3 position, bool continent, bool alreadyDiscovered)
        {
            this.name = name;
            this.NPCId = NPCId;
            this.position = position;
            this.continent = continent;
            this.alreadyDiscovered = alreadyDiscovered;
        }

        public FlightMasterDB(String name, int NPCId, Vector3 position, bool continent)
        {
            this.name = name;
            this.NPCId = NPCId;
            this.position = position;
            this.continent = continent;
            
        }

        public int NPCId { get; set; }
        public Vector3 position { get; set; }
        public String name { get; set; }
        public bool continent { get; set; }
        public bool alreadyDiscovered { get; set; }

    }

//Tram
public class Tram
{

    //Stormwind to Ironforge
    static Vector3 positionTramInIronforge = new Vector3(4.58065, 28.2097, 6.90526);
    static Vector3 positionTramInStormwind = new Vector3(4.581913, 2511.531, 7.091796);

    static Vector3 positionWaitTramIronforge = new Vector3(19.1, 28, -4.3);
    static Vector3 positionOnTramIronforge = new Vector3(4.8, 28.1, -4.3);

    static Vector3 positionWaitTramStormwind = new Vector3(15.3, 2510.4, -4.3);
    static Vector3 positionOnTramStormwind = new Vector3(4.3, 2510.6, -4.3);

    static Vector3 enterStormwindInside = new Vector3(67, 2490.7, -4.3);
    static Vector3 enterIronforgeInside = new Vector3(64.5, 10.2, -4.3);

    static Vector3 enterStormwindOutside = new Vector3(-8365, 536.9, 91.8);
    static Vector3 enterIronforgeOutside = new Vector3(-4836.7, -1304.6, 501.9);

    static Vector3 leavePosIronforge = new Vector3(-10.6, 30.2, -4.3);
    static Vector3 leavePosStormwind = new Vector3(-10.6, 2510.9, -4.3);

    static Vector3 playerFellDownIronforge = new Vector3(4.5, 28, -13.9);

    static int[] tramEntryArray = new int[6] { 176080, 176082, 176083, 176084, 176085, 176081 };

    //Ironforge to Stormwind
    static Vector3 waitPosPlayerInStormwindToIronforge = new Vector3(-32.8, 2512.1, -4.3);

    //Pos where upper Tram arrives and waits in Stormwind
    static Vector3 waitPosTramSwTramStormwind = new Vector3(-45.4007, 2512.15, 6.90526);
    //Pos where player waits on upper tram in Stormwind
    static Vector3 waitPosPlayerSwTramStormwind = new Vector3(-45.20206, 2512.266, -3.562748);

    static Vector3 waitPosSwTramIronforge = new Vector3(-45.399, 30.38013, 5.877773);

    static Vector3 leavePosSwTramIronforge = new Vector3(-61.8, 30.3, -4.3);
    static Vector3 waitPlayerOnTramPosSwTramIronforge = new Vector3(-34.49804, 2511.917, -4.3);
    static Vector3 posPlayerOnTramSwToIfInIronforge = new Vector3(-20.9837, 2459.93, -4.297);

    static Vector3 playerFellDownStormwind = new Vector3(-45, 2512.6, -13.9);

    static bool isRestarted = false;
    static Process[] pname = Process.GetProcessesByName(AppDomain.CurrentDomain.FriendlyName.Remove(AppDomain.CurrentDomain.FriendlyName.Length - 4));
    static Vector3 nullVector = new Vector3(0, 0, 0);


    public static void restartTram(String from)
    {
        switch(from)
        {
            case ("Stormwind"):
                takeTramStormwind();
                break;
            case ("Ironforge"):
                takeTramIronforge();
                break;
            default:
                Logging.Write("Something failed");
                break;
        }
    }

    public static void end()
    {
        Logging.Write("[FNV_Quester]: Ending Tream");
    }



    public static void takeTramStormwind()
    {
        Logging.Write("[FNV_Quester]: Taking Tram from Stormwind to Ironforge");

        if(!Usefuls.MapZoneName.Contains("Deep"))
        {
            while(!GoToTask.ToPosition(enterStormwindOutside))
            {
                GoToTask.ToPosition(enterStormwindOutside);
                Thread.Sleep(250);
            }

            wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;
            Logging.Write("[FNV_Quester]: Disable teleport during Tram");
            wManager.Wow.Helpers.MovementManager.Face(new Vector3(-8353.4, 521.4, 91.8));

            while(!Usefuls.MapZoneName.Contains("Deep"))
            {
                wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 250);
                Thread.Sleep(robotManager.Helpful.Others.Random(25, 50));
            }

        }

        if(Usefuls.MapZoneName.Contains("Deep"))
        {
            if(!GoToTask.ToPosition(enterStormwindInside))
            {
                GoToTask.ToPosition(enterStormwindInside);
                Thread.Sleep(250);
            }
            while(!GoToTask.ToPosition(waitPosPlayerInStormwindToIronforge))
            {
                GoToTask.ToPosition(waitPosPlayerInStormwindToIronforge);
                Thread.Sleep(250);
            }

            wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;
            var tram = (WoWGameObject)null;

            try
            {
                tram = chooseTramStormwind();
            }
            catch
            {

            }


            if(tram != null &amp;&amp; ObjectManager.Me.Position.DistanceTo(tram.Position) &lt; 200 &amp;&amp; !tram.Position.Equals(nullVector))
            {
                Logging.Write("[FNV_Quester]: Bad circle, restart... .");
                isRestarted = true;
                takeTramStormwind();
                end();
            }

            if(!isRestarted)
            {

                if(tram != null &amp;&amp; tram.Position.DistanceTo(nullVector) &gt; 1)
                {
                    while(tram.Position.DistanceTo(waitPosTramSwTramStormwind) &gt;= 5 || ObjectManager.Me.Position.DistanceTo(waitPosPlayerInStormwindToIronforge) &gt;= 5)
                    {
                        Thread.Sleep(500);
                    }

                    if(tram.Position.DistanceTo(waitPosTramSwTramStormwind) &lt; 5)
                    {
                        Lua.LuaDoString("ClearTarget()");
                        wManager.Wow.Helpers.MovementManager.Face(waitPosPlayerSwTramStormwind);

                        while(ObjectManager.Me.Position.DistanceTo(waitPosPlayerSwTramStormwind) &gt; 1)
                        {
                            MovementManager.MoveTo(waitPosPlayerSwTramStormwind);
                            Thread.Sleep(1000);

                            if(ObjectManager.Me.Position.DistanceTo(playerFellDownStormwind) &lt; 4)
                            {
                                Logging.Write("[FNV_Quester]: Fell down, while trying to take tram. Restart...");
                                restartTram("Stormwind");
                            }
                        }

                        GoToTask.ToPosition(waitPosPlayerSwTramStormwind);
                    }

                    while(tram.Position.DistanceTo(waitPosSwTramIronforge) &gt; 5)
                    {
                        Thread.Sleep(3000);
                    }

                    if(ObjectManager.Me.HaveBuff("Stealth"))
                    {
                        Lua.LuaDoString("CastSpellByName('Stealth')");
                    }

                    wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 1500);

                    if(ObjectManager.Me.Position.DistanceTo(posPlayerOnTramSwToIfInIronforge) &lt; 5)
                    {
                        MovementManager.MoveTo(leavePosSwTramIronforge);
                        Thread.Sleep(1000);

                        while(ObjectManager.Me.Position.DistanceTo(leavePosSwTramIronforge) &gt; 4)
                        {
                            MovementManager.MoveTo(leavePosSwTramIronforge);
                            Thread.Sleep(1000);
                        }
                    }

                    if(Usefuls.MapZoneName.Contains("Deep"))
                    {
                        if(!GoToTask.ToPosition(enterIronforgeInside))
                        {
                            GoToTask.ToPosition(enterIronforgeInside);
                            Thread.Sleep(250);
                        }
                    }

                    while(Usefuls.MapZoneName.Contains("Deep"))
                    {
                        wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 250);
                        Thread.Sleep(robotManager.Helpful.Others.Random(25, 50));
                    }

                    Logging.Write("[FNV_Quester]: Re enable teleport ");
                    wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = true;


                    while(!GoToTask.ToPosition(enterIronforgeOutside))
                    {
                        wManager.Wow.Helpers.MovementManager.Face(enterIronforgeOutside);
                        GoToTask.ToPosition(enterIronforgeOutside);
                        Thread.Sleep(250);
                    }

                }
                else if(Usefuls.MapZoneName.Contains("Tram") || Usefuls.MapZoneName.Contains("Stormwind"))
                {
                    Logging.Write("[FNV_Quester]: Unable to find tram, restart... .");
                    isRestarted = true;
                    restartTram("Stormwind");
                }

            }
        }

        isRestarted = false;
    }

    public static WoWGameObject chooseTramIronforge()
    {
        List&lt;WoWGameObject&gt; tramList = new List&lt;WoWGameObject&gt;();
        var tramTemp = (WoWGameObject)null;

        foreach(int ele in tramEntryArray)
        {
            tramTemp = null;
            try
            {
                tramTemp = ObjectManager.GetWoWGameObjectByEntry(ele).OrderBy(o =&gt; o.GetDistance).FirstOrDefault();
            }
            catch
            {
            }

            if(tramTemp != null &amp;&amp; tramTemp.IsValid &amp;&amp; !tramTemp.Equals((WoWGameObject)null) &amp;&amp; tramTemp.ToString().Contains("Subway"))
            {
                tramList.Add(tramTemp);
            }
            else
            {

            }
        }

        float distance = 0;
        float entryDistance = 0;
        foreach(var ele in tramList)
        {
            if(ObjectManager.Me.Position.DistanceTo(ele.Position) &gt;= distance)
            {
                distance = ObjectManager.Me.Position.DistanceTo(ele.Position);
                entryDistance = ele.Entry;
            }
        }

        foreach(var ele in tramList)
        {
            if(ele.Entry == entryDistance &amp;&amp; ele != null &amp;&amp; !ele.Position.Equals(nullVector))
            {
                if(ObjectManager.Me.Position.DistanceTo(ele.Position) &lt; 200)
                {
                    Logging.Write("[FNV_Quester]: Bad circle, restart... .");
                    restartTram("Ironforge");
                }

                Logging.Write("[FNV_Quester]: Choosing tram id: " + ele.Entry + " with a current position of " + ele.Position);
                return ele;
            }
        }
        return null;
    }

    public static WoWGameObject chooseTramStormwind()
    {
        List&lt;WoWGameObject&gt; tramList = new List&lt;WoWGameObject&gt;();
        var tramTemp = (WoWGameObject)null;

        foreach(int ele in tramEntryArray)
        {
            tramTemp = null;
            try
            {
                tramTemp = ObjectManager.GetWoWGameObjectByEntry(ele).OrderBy(o =&gt; o.GetDistance).FirstOrDefault();
            }
            catch
            {
            }

            if(tramTemp != null &amp;&amp; tramTemp.IsValid &amp;&amp; !tramTemp.Equals((WoWGameObject)null) &amp;&amp; tramTemp.ToString().Contains("Subway"))
            {
                tramList.Add(tramTemp);
            }
            else
            {

            }
        }

        float distance = 99999;
        float entryDistance = 0;
        foreach(var ele in tramList)
        {
            if(ObjectManager.Me.Position.DistanceTo(ele.Position) &lt;= distance)
            {
                distance = ObjectManager.Me.Position.DistanceTo(ele.Position);
                entryDistance = ele.Entry;
            }
        }

        foreach(var ele in tramList)
        {
            if(ele.Entry == entryDistance &amp;&amp; ele != null &amp;&amp; !ele.Position.Equals(nullVector))
            {
                if(ObjectManager.Me.Position.DistanceTo(ele.Position) &lt; 200)
                {
                    Logging.Write("[FNV_Quester]: Bad circle, restart... .");
                    restartTram("Stormwind");
                }

                Logging.Write("[FNV_Quester]: Choosing tram id: " + ele.Entry + " with a current position of " + ele.Position);
                return ele;
            }
        }

        return null;
    }

    public static void takeTramIronforge()
    {
        Logging.Write("[FNV_Quester]: Taking Tram from Ironforge to Stormwind");

        if(!Usefuls.MapZoneName.Contains("Deep"))
        {
            while(!GoToTask.ToPosition(enterIronforgeOutside))
            {
                GoToTask.ToPosition(enterIronforgeOutside);
                Thread.Sleep(250);
            }

            wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;
            Logging.Write("[FNV_Quester]: Disable teleport during Tram");
            wManager.Wow.Helpers.MovementManager.Face(new Vector3(-4839.4, -1320.9, 501.9));

            while(!Usefuls.MapZoneName.Contains("Deep"))
            {
                wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 250);
                Thread.Sleep(robotManager.Helpful.Others.Random(25, 50));
            }
        }

        if(Usefuls.MapZoneName.Contains("Deep"))
        {
            if(!GoToTask.ToPosition(enterIronforgeInside))
            {
                GoToTask.ToPosition(enterIronforgeInside);
                Thread.Sleep(250);
            }

            var pathEins = new List&lt;Vector3&gt;() {
new Vector3(42.56478f, 10.32987f, -4.29664f, "None"),
new Vector3(36.11083f, 10.30502f, -4.29664f, "None"),
new Vector3(29.11088f, 10.27806f, -4.29664f, "None"),
new Vector3(25.49891f, 10.26415f, -4.29664f, "None"),
new Vector3(20.57794f, 10.2452f, -4.29664f, "None"),
new Vector3(16.61328f, 11.97739f, -4.29664f, "None"),
new Vector3(17.03823f, 18.79025f, -4.29664f, "None"),
new Vector3(19.41723f, 25.35655f, -4.29664f, "None"),
};


                        while(ObjectManager.Me.Position.DistanceTo2D(pathEins.Last&lt;Vector3&gt;()) &gt; 5)
                        {
                            MovementManager.Go(pathEins); // or MovementManager.GoLoop(path);
                        }

            while(!GoToTask.ToPosition(positionWaitTramIronforge))
            {
                GoToTask.ToPosition(positionWaitTramIronforge);
                Thread.Sleep(250);
            }

            wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;

            var tram = (WoWGameObject)null;

            try
            {
                tram = chooseTramIronforge();
            }
            catch
            {

            }

            if(ObjectManager.Me.Position.DistanceTo(tram.Position) &lt; 200 &amp;&amp; tram != null &amp;&amp; !tram.Position.Equals(nullVector))
            {
                Logging.Write("[FNV_Quester]: Bad circle, restart... .");
                isRestarted = true;
                restartTram("Ironforge");
                end();
            }

            if(!isRestarted)
            {

                if(tram != null &amp;&amp; tram.Position.DistanceTo(nullVector) &gt; 1)
                {


                    while(tram.Position.DistanceTo(positionTramInIronforge) &gt;= 5 &amp;&amp; Usefuls.MapZoneName.Contains("Deep") &amp;&amp; !tram.Position.Equals(nullVector))
                    {
                        Thread.Sleep(1000);
                    }


                    if(tram.Position.DistanceTo(positionTramInIronforge) &lt; 5 &amp;&amp; Usefuls.MapZoneName.Contains("Deep"))
                    {
                        Lua.LuaDoString("ClearTarget()");
                        wManager.Wow.Helpers.MovementManager.Face(positionOnTramIronforge);

                        while(ObjectManager.Me.Position.DistanceTo(positionOnTramIronforge) &gt; 2)
                        {
                            MovementManager.MoveTo(positionOnTramIronforge);
                            Thread.Sleep(1000);

                            if(ObjectManager.Me.Position.DistanceTo(playerFellDownIronforge) &lt; 4)
                            {
                                Logging.Write("[FNV_Quester]: Fell down, while trying to take tram. Restart");
                                restartTram("Ironforge");
                            }
                        }

                        GoToTask.ToPosition(positionOnTramIronforge);
                    }


                    while(tram.Position.DistanceTo(positionTramInStormwind) &gt; 5 &amp;&amp; Usefuls.MapZoneName.Contains("Deep"))
                    {
                        Thread.Sleep(3000);
                    }

                    if(ObjectManager.Me.Position.DistanceTo(positionOnTramStormwind) &lt; 5 &amp;&amp; Usefuls.MapZoneName.Contains("Deep"))
                    {

                        Vector3 leavingTramPos = new Vector3(-4.500117, 2510.398, -4.18221, "None");
                        Vector3 leavingTramPosZwei = new Vector3(-8.363175, 2510.536, -4.291304, "None");

                        MovementManager.MoveTo(leavingTramPos);
                        Thread.Sleep(1000);
                        MovementManager.MoveTo(leavingTramPosZwei);
                        Thread.Sleep(1000);

                        var pathZwei = new List&lt;Vector3&gt;() {
new Vector3(-8.722651f, 2521.781f, -4.296569f, "None"),
new Vector3(-8.406331f, 2528.227f, -4.296569f, "None"),
new Vector3(-5.509378f, 2534.194f, -4.296569f, "None"),
new Vector3(1.102043f, 2536.338f, -4.296569f, "None"),
new Vector3(8.024714f, 2535.66f, -4.296569f, "None"),
new Vector3(13.7771f, 2531.926f, -4.296569f, "None"),
new Vector3(15.53208f, 2525.218f, -4.296569f, "None"),
new Vector3(19.39666f, 2520.334f, -4.296569f, "None"),
new Vector3(26.3053f, 2519.244f, -4.296569f, "None"),
new Vector3(31.07252f, 2514.534f, -4.296569f, "None"),
new Vector3(32.08603f, 2507.629f, -4.296569f, "None"),
new Vector3(32.20792f, 2500.735f, -4.296569f, "None"),
new Vector3(32.69915f, 2493.784f, -4.296569f, "None"),
new Vector3(38.39471f, 2490.469f, -4.296569f, "None"),
new Vector3(45.39016f, 2490.699f, -4.296569f, "None"),
new Vector3(52.39009f, 2490.728f, -4.296569f, "None"),
new Vector3(55.99506f, 2490.741f, -4.296569f, "None"),
new Vector3(62.99502f, 2490.766f, -4.296569f, "None"),
};


                        while(ObjectManager.Me.Position.DistanceTo2D(pathZwei.Last&lt;Vector3&gt;()) &gt; 5)
                        {
                            MovementManager.Go(pathZwei); // or MovementManager.GoLoop(path);

                            if(ObjectManager.Me.Position.DistanceTo2D(pathZwei.Last&lt;Vector3&gt;()) &lt;= 5)
                                break;
                        }


                        //MovementManager.MoveTo(leavePosStormwind);
                        /*
                        while(ObjectManager.Me.Position.DistanceTo(leavePosStormwind) &gt; 4)
                        {
                            MovementManager.MoveTo(leavePosStormwind);
                            Thread.Sleep(1000);

                        } */

                    }

                    if(Usefuls.MapZoneName.Contains("Deep"))
                    {
                        if(!GoToTask.ToPosition(enterStormwindInside))
                        {
                            GoToTask.ToPosition(enterStormwindInside);
                            Thread.Sleep(250);
                        }
                    }

                    while(Usefuls.MapZoneName.Contains("Deep"))
                    {
                        wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 250);
                        Thread.Sleep(robotManager.Helpful.Others.Random(25, 50));
                    }

                    Logging.Write("Re enable teleport ");
                    wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = true;


                    while(!GoToTask.ToPosition(enterStormwindOutside))
                    {
                        wManager.Wow.Helpers.MovementManager.Face(enterStormwindOutside);
                        GoToTask.ToPosition(enterStormwindOutside);
                        Thread.Sleep(250);
                    }

                }
                else if(Usefuls.MapZoneName.Contains("Tram") || Usefuls.MapZoneName.Contains("Ironforge"))
                {
                    Logging.Write("[FNV_Quester]: Unable to find tram, restart... .");
                    isRestarted = true;
                    restartTram("Ironforge");
                }

            }
        }
        isRestarted = false;
    }

    /*
    public static void takeTramIronforge()
    {
        Logging.Write("[FNV_Quester]: Taking Tram from Ironforge to Stormwind");

        if(!Usefuls.MapZoneName.Contains("Deep"))
        {
            while(!GoToTask.ToPosition(enterIronforgeOutside))
            {
                GoToTask.ToPosition(enterIronforgeOutside);
                Thread.Sleep(250);
            }

            wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;
            Logging.Write("[FNV_Quester]: Disable teleport during Tram");
            wManager.Wow.Helpers.MovementManager.Face(new Vector3(-4839.4, -1320.9, 501.9));

            while(!Usefuls.MapZoneName.Contains("Deep"))
            {
                wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 250);
                Thread.Sleep(robotManager.Helpful.Others.Random(25, 50));
            }
        }

        if(Usefuls.MapZoneName.Contains("Deep"))
        {
            if(!GoToTask.ToPosition(enterIronforgeInside))
            {
                GoToTask.ToPosition(enterIronforgeInside);
                Thread.Sleep(250);
            }

            GoToTask.ToPosition(new Vector3(26.31003, 9.936551, -4.29664));
            Thread.Sleep(250);
            GoToTask.ToPosition(new Vector3(17.09965, 12.71437, -4.29664));
            Thread.Sleep(250);
            GoToTask.ToPosition(new Vector3(18.14983, 22.89955, -4.29664));
            Thread.Sleep(250);

            while(!GoToTask.ToPosition(positionWaitTramIronforge))
            {
                GoToTask.ToPosition(positionWaitTramIronforge);
                Thread.Sleep(250);
            }

            wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;

            var tram = (WoWGameObject)null;

            try
            {
                tram = chooseTramIronforge();
            }
            catch
            {

            }

            if(ObjectManager.Me.Position.DistanceTo(tram.Position) &lt; 200 &amp;&amp; tram != null &amp;&amp; !tram.Position.Equals(nullVector))
            {
                Logging.Write("[FNV_Quester]: Bad circle, restart... .");
                isRestarted = true;
                restartTram("Ironforge");
                end();
            }

            if(!isRestarted)
            {

                if(tram != null &amp;&amp; tram.Position.DistanceTo(nullVector) &gt; 1)
                {


                    while(tram.Position.DistanceTo(positionTramInIronforge) &gt;= 5 &amp;&amp; Usefuls.MapZoneName.Contains("Deep") &amp;&amp; !tram.Position.Equals(nullVector))
                    {
                        Thread.Sleep(1000);
                    }


                    if(tram.Position.DistanceTo(positionTramInIronforge) &lt; 5 &amp;&amp; Usefuls.MapZoneName.Contains("Deep"))
                    {
                        Lua.LuaDoString("ClearTarget()");
                        wManager.Wow.Helpers.MovementManager.Face(positionOnTramIronforge);

                        while(ObjectManager.Me.Position.DistanceTo(positionOnTramIronforge) &gt; 2)
                        {
                            wManager.Wow.Helpers.MovementManager.Face(positionOnTramIronforge);
                            wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 125);
                            Thread.Sleep(robotManager.Helpful.Others.Random(10, 25));

                            if(ObjectManager.Me.Position.DistanceTo(playerFellDownIronforge) &lt; 4)
                            {
                                Logging.Write("[FNV_Quester]: Fell down, while trying to take tram. Restart");
                                restartTram("Ironforge");
                            }
                        }

                        GoToTask.ToPosition(positionOnTramIronforge);
                    }


                    while(tram.Position.DistanceTo(positionTramInStormwind) &gt; 5 &amp;&amp; Usefuls.MapZoneName.Contains("Deep"))
                    {
                        Thread.Sleep(3000);
                    }

                    if(ObjectManager.Me.Position.DistanceTo(positionOnTramStormwind) &lt; 5 &amp;&amp; Usefuls.MapZoneName.Contains("Deep"))
                    {

                        wManager.Wow.Helpers.Move.StrafeLeft(Move.MoveAction.PressKey, 350);

                        while(ObjectManager.Me.Position.DistanceTo(leavePosStormwind) &gt; 4)
                        {
                            wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 125);
                            Thread.Sleep(robotManager.Helpful.Others.Random(10, 25));

                        }

                    }

                    if(Usefuls.MapZoneName.Contains("Deep"))
                    {
                        if(!GoToTask.ToPosition(enterStormwindInside))
                        {
                            GoToTask.ToPosition(enterStormwindInside);
                            Thread.Sleep(250);
                        }
                    }

                    while(Usefuls.MapZoneName.Contains("Deep"))
                    {
                        wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 250);
                        Thread.Sleep(robotManager.Helpful.Others.Random(25, 50));
                    }

                    Logging.Write("Re enable teleport ");
                    wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = true;


                    while(!GoToTask.ToPosition(enterStormwindOutside))
                    {
                        wManager.Wow.Helpers.MovementManager.Face(enterStormwindOutside);
                        GoToTask.ToPosition(enterStormwindOutside);
                        Thread.Sleep(250);
                    }

                }
                else if(Usefuls.MapZoneName.Contains("Tram") || Usefuls.MapZoneName.Contains("Ironforge"))
                {
                    Logging.Write("[FNV_Quester]: Unable to find tram, restart... .");
                    isRestarted = true;
                    restartTram("Ironforge");
                }

            }
        }
        isRestarted = false;
    }
    */
}

//Additional functions for quests
public class Quests
{
    public static void abandon(string questName)
    {
        wManager.Wow.Helpers.Lua.LuaDoString("local name = '" + questName + "' for i=1,GetNumQuestLogEntries() do local questTitle, level, questTag, suggestedGroup, isHeader, isCollapsed, isComplete = GetQuestLogTitle(i) if string.find(questTitle, name) then SelectQuestLogEntry(i) SetAbandonQuest() AbandonQuest() end end");

    }

    public static bool hasFailed(string questName)
    {
        int temp = 0;
        temp = wManager.Wow.Helpers.Lua.LuaDoString&lt;int&gt;("local name = '" + questName + "'  for i=1,GetNumQuestLogEntries() do local questTitle, level, questTag, suggestedGroup, isHeader, isCollapsed, isComplete = GetQuestLogTitle(i) if string.find(questTitle, name) then SelectQuestLogEntry(i) local questTimer = GetQuestLogTimeLeft() return questTimer end end");

        if(temp &gt; 8)
        {
            return false;
        }
        else
        {
            return true;
        }
    }

    public static bool isComplete(string questName)
    {
        int temp;
        temp = wManager.Wow.Helpers.Lua.LuaDoString&lt;int&gt;("local name = '" + questName + "'  for i=1,GetNumQuestLogEntries() do local questTitle, level, questTag, isHeader, isCollapsed, isComplete = GetQuestLogTitle(i) if string.find(questTitle, name) then local questTitleZ, levelZ, questTagZ, isHeaderZ, isCollapsedZ, isCompleteZ = GetQuestLogTitle(i) return isCompleteZ end end");

        if(temp == 1)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    public static bool isFailed(string questName)
    {
        int temp;
        temp = wManager.Wow.Helpers.Lua.LuaDoString&lt;int&gt;("local name = '" + questName + "'  for i=1,GetNumQuestLogEntries() do local questTitle, level, questTag, isHeader, isCollapsed, isComplete = GetQuestLogTitle(i) if string.find(questTitle, name) then local questTitleZ, levelZ, questTagZ, isHeaderZ, isCollapsedZ, isCompleteZ = GetQuestLogTitle(i) return isCompleteZ end end");

        if(temp == -1)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
}


public class ProgressSettings : Settings
{
    public static bool inProgress = false;
        public static void Initialize()
        {
            ProgressSettings.Load();
        }

        public static void Dispose()
        {
            ProgressSettings.CurrentSettings.Save();
            //isLaunched = false;
        }

        public void Settings()
        {
            ProgressSettings.Load();
            ProgressSettings.CurrentSettings.ToForm();
            ProgressSettings.CurrentSettings.Save();
        }

    public ProgressSettings()
    {
        this.launcher = 2;
        this.dwarfStart = 1 + 1;
        this.humanStart = 1 + 1;
        this.nightelfStart = 1 + 1;
        this.dwarfHunter = 1 + 1;
        this.nightelfHunter = 1 + 1;
        this.nightelfDruid = 1 + 1;
        this.warlock = 1 + 1;
        this.kharanos = 1 + 1;
        this.elwynn = 1 + 1;
        this.westfallEins = 1 + 1;
        this.lochModanEins = 1 + 1;
        this.darkshoreEins = 10 + 1;
        this.westfallZwei = 1 + 1;
        this.lochModanZwei = 1 + 1;
        this.darkshoreZwei = 6 + 1;
        this.westfallDrei = 1 + 1;
        this.redridge = 1 + 1;
        this.duskwoodEins = 1 + 1;
        this.stonetalon = 14 + 1;
        this.darkshoreDrei = 1 + 1;
        this.duskwoodZwei = 1 + 1;
        this.wetlandsEins = 1 + 1;
        this.ashenvaleEins = 7 + 1;
        this.wetlandsZwei = 1 + 1;
        this.duskwoodDrei = 2 + 1;
        this.ashenvaleZwei = 7 + 1;
        this.duskwoodVier = 2 + 1;
        this.ashenvaleDrei = 6 + 1;
        this.thousandNeedles = 7 + 1;
        this.desolaceEins = 7 + 1;
        this.hillsbradEins = 2 + 1;
        this.stranglethornEins = 2 + 1;
        this.stranglethornZwei = 2 + 1;
        this.hillsbradZwei = 2 + 1;
        this.arathiEins = 2 + 1;
        this.stranglethornDrei = 2 + 1;
        this.dustwallowEins = 10 + 1;
        this.desolaceZwei = 9 + 1;
        this.swampOfSorrowsEins = 2 + 1;
        this.stranglethornVier = 2 + 1;
        this.badlandsEins = 2 + 1;
        this.alteracMountain = 2 + 1;
        this.badlandsZwei = 2 + 1;
        this.tanarisEins = 7 + 1;
        this.stranglethornFünf  = 2 + 1;
        this.hinterlandsEins = 2 + 1;
        this.feralasEins = 7 + 1;
        this.hinterlandsZwei = 2 + 1;

                //48+

        this.hinterlandsDrei = 2 + 1;
        this.blastedLandsEins = 2 + 1;
        this.blastedLandsZwei = 2 + 1;
        this.blastedLandsDrei = 2 + 1;
        this.burningSteppesEins = 2 + 1;
        this.burningSteppesZwei = 2 + 1;
        this.burningSteppesDrei = 2 + 1;
        this.easternPleaguelandsEins = 2 + 1;
        this.easternPleaguelandsZwei = 2 + 1;
        this.easternPleaguelandsDrei = 2 + 1;
        this.searingGorgeEins = 2 + 1;
        this.searingGorgeZwei = 2 + 1;
        this.searingGorgeDrei = 2 + 1;
        this.swampOfSorrowsZwei = 2 + 1;
        this.westernPleaguelandsEins = 2 + 1;
        this.westernPleaguelandsZwei = 2 + 1;
        this.westernPleaguelandsDrei = 2 + 1;

        //48+ Kalimdor

        this.azsharaEins = 7 + 1;
        this.azsharaZwei = 7 + 1;
        this.azsharaDrei = 7 + 1;
        this.felwoodEins = 7 + 1;
        this.felwoodZwei = 7 + 1;
        this.felwoodDrei = 7 + 1;
        this.silithusEins = 7 + 1;
        this.silithusZwei = 7 + 1;
        this.silithusDrei = 7 + 1;
        this.feralasZwei = 7 + 1;
        this.feralasDrei = 7 + 1;
        this.feralasVier = 7 + 1;
        this.tanarisZwei = 7 + 1;
        this.tanarisDrei = 7 + 1;
        this.ungoroEins = 7 + 1;
        this.ungoroZwei = 7 + 1;
        this.ungoroDrei = 7 + 1;
        this.winterspringEins = 7 + 1; 
        this.winterspringZwei = 7 + 1;
        this.winterspringDrei = 7 + 1;
        this.winterspringVier = 7 + 1;
    }
    

      public static ProgressSettings CurrentSettings { get; set; }

        public bool Save()
        {
            try
            {
                return Save(AdviserFilePathAndName("FNV_Progress", ObjectManager.Me.Name + "." + Usefuls.RealmName));
            }
            catch(Exception e)
            {
                Logging.WriteDebug("FNV_Progress =&gt; Save(): " + e);
                return false;
            }
        }

        public static bool Load()
        {
            try
            {
                if(File.Exists(AdviserFilePathAndName("FNV_Progress", ObjectManager.Me.Name + "." + Usefuls.RealmName)))
                {
                    CurrentSettings = Load&lt;ProgressSettings&gt;(AdviserFilePathAndName("FNV_Progress", ObjectManager.Me.Name + "." + Usefuls.RealmName));
                    return true;
                }

                ProgressSettings.CurrentSettings = new ProgressSettings();
            }
            catch(Exception e)
            {
                Logging.WriteDebug("FNV_Progress =&gt; Load(): " + e);
            }
            return false;
        }

    public static bool ResetCurrentCharactersProgressSaver()
    {
        try
        {
            if(File.Exists(AdviserFilePathAndName("FNV_Progress", ObjectManager.Me.Name + "." + Usefuls.RealmName)))
            {
                File.Delete(AdviserFilePathAndName("FNV_Progress", ObjectManager.Me.Name + "." + Usefuls.RealmName));
                ProgressSettings.CurrentSettings = new ProgressSettings();
                Logging.Write("[FNV_Quester]: FNV_Progress file of " + ObjectManager.Me.Name + " on server " + Usefuls.RealmName + " successfully deleted");
                return true;
            }
            else
            {
                Logging.Write("[FNV_Quester]: No FNV_Progress file found for " + ObjectManager.Me.Name + " on server " + Usefuls.RealmName);
                return false;
            }
        }
        catch(Exception e)
        {
            Logging.WriteDebug("FNV_Progress =&gt; Load(): " + e);
        }
         return false;
    }

        public int launcher { get; set; }
        public int dwarfStart { get; set; }
        public int dwarfHunter { get; set; }
        public int nightelfHunter { get; set; }
        public int nightelfDruid { get; set; }
        public int warlock { get; set; }
        public int nightelfStart { get; set; }
        public int humanStart { get; set; }
        public int kharanos { get; set; }
        public int elwynn { get; set; }
        public int westfallEins { get; set; }
        public int lochModanEins { get; set; }
        public int darkshoreEins { get; set; }
        public int westfallZwei { get; set; }
        public int lochModanZwei { get; set; }
        public int darkshoreZwei { get; set; }
        public int westfallDrei { get; set; }
        public int redridge { get; set; }
        public int duskwoodEins { get; set; }
        public int darkshoreDrei { get; set; }
        public int stonetalon { get; set; }
        public int duskwoodZwei { get; set; }
        public int wetlandsEins { get; set; }
        public int ashenvaleEins { get; set; }
        public int wetlandsZwei { get; set; }
        public int duskwoodDrei { get; set; }
        public int ashenvaleZwei { get; set; }
        public int duskwoodVier { get; set; }
        public int ashenvaleDrei { get; set; }
        public int thousandNeedles { get; set; }
        public int desolaceEins { get; set; }
        public int hillsbradEins { get; set; }
        public int stranglethornEins { get; set; }
        public int stranglethornZwei{ get; set; }
        public int hillsbradZwei { get; set; }
        public int arathiEins { get; set; }
        public int stranglethornDrei { get; set; }
        public int dustwallowEins { get; set; }
        public int desolaceZwei { get; set; }
        public int badlandsEins { get; set; }
        public int swampOfSorrowsEins { get; set; }
        public int stranglethornVier { get; set; }
        public int alteracMountain { get; set; }
        public int badlandsZwei { get; set; }
        public int tanarisEins { get; set; }
        public int stranglethornFünf { get; set; }
        public int hinterlandsEins { get; set; }
        public int feralasEins { get; set; }
        public int hinterlandsZwei { get; set; }

        //48+ Eastern Kingdoms
        public int hinterlandsDrei { get; set; }
        public int blastedLandsEins { get; set; }
        public int blastedLandsZwei { get; set; }
        public int blastedLandsDrei { get; set; }
        public int burningSteppesEins { get; set; }
        public int burningSteppesZwei { get; set; }
        public int burningSteppesDrei { get; set; }
        public int easternPleaguelandsEins { get; set; }
        public int easternPleaguelandsZwei { get; set; }
        public int easternPleaguelandsDrei { get; set; }
        public int searingGorgeEins { get; set; }
        public int searingGorgeZwei { get; set; }
        public int searingGorgeDrei { get; set; }
        public int swampOfSorrowsZwei { get; set; }
        public int westernPleaguelandsEins { get; set; }
        public int westernPleaguelandsZwei { get; set; }
        public int westernPleaguelandsDrei { get; set; }

        //48+ Kalimdor

        public int azsharaEins { get; set; }
        public int azsharaZwei { get; set; }
        public int azsharaDrei { get; set; }
        public int felwoodEins { get; set; }
        public int felwoodZwei { get; set; }
        public int felwoodDrei { get; set; }
        public int silithusEins { get; set; }
        public int silithusZwei { get; set; }
        public int silithusDrei { get; set; }
        public int feralasZwei { get; set; }
        public int feralasDrei { get; set; }
        public int feralasVier { get; set; }
        public int tanarisZwei { get; set; }
        public int tanarisDrei { get; set; }
        public int ungoroEins { get; set; }
        public int ungoroZwei { get; set; }
        public int ungoroDrei { get; set; }
        public int winterspringEins { get; set; }
        public int winterspringZwei { get; set; }
        public int winterspringDrei { get; set; }
        public int winterspringVier { get; set; }





}


/*
    //Settings   
    public class QuesterSettings
    {
        private static bool isLaunched;

        public static void Initialize()
        {
            isLaunched = true;
            FNVSettings.Load();

            while(isLaunched &amp; Products.IsStarted)
            {
                Thread.Sleep(500);
                Dispose();
            }
        }

        public static void Dispose()
        {
            FNVSettings.CurrentSettings.Save();
            //isLaunched = false;
        }

        public void Settings()
        {
            FNVSettings.Load();
            FNVSettings.CurrentSettings.ToForm();
            FNVSettings.CurrentSettings.Save();
        }
    }

    */

    [Serializable]
    public class FNVSettings : Settings
    {

        public static bool inProgress = false;
        public static void Initialize()
        {
            FNVSettings.Load();
        }

        public static void Dispose()
        {
            FNVSettings.CurrentSettings.Save();
            //isLaunched = false;
        }

        public void Settings()
        {
            FNVSettings.Load();
            FNVSettings.CurrentSettings.ToForm();
            FNVSettings.CurrentSettings.Save();
        }

        public FNVSettings()
        {
        //Completed profiles -&gt; True == completed
        this.launcher = false;
        this.dwarfStart = false;
        this.humanStart = false;
        this.nightelfStart = false;
        this.dwarfHunter = false;
        this.nightelfHunter = false;
        this.nightelfDruid = false;
        this.warlock = false;
        this.kharanos = false;
        this.elwynn = false;
        this.westfallEins = false;
        this.lochModanEins = false;
        this.darkshoreEins = false;
        this.westfallZwei = false;
        this.lochModanZwei = false;
        this.darkshoreZwei = false;
        this.westfallDrei = false;
        this.redridge = false;
        this.duskwoodEins = false;
        this.darkshoreDrei = false;
        this.stonetalon = false;
        this.duskwoodZwei = false;
        this.wetlandsEins = false;
        this.ashenvaleEins = false;
        this.wetlandsZwei = false;
        this.duskwoodDrei = false;
        this.ashenvaleZwei = false;
        this.duskwoodVier = false;
        this.ashenvaleDrei = false;
        this.thousandNeedles = false;
        this.desolaceEins = false; 
        this.hillsbradEins = false; 
        this.stranglethornEins = false;
        this.stranglethornZwei = false;
        this.hillsbradZwei = false;
        this.arathiEins = false;
        this.stranglethornDrei = false;
        this.dustwallowEins = false; 
        this.desolaceZwei = false; 
        this.swampOfSorrowsEins = false; 
        this.stranglethornVier = false; 
        this.badlandsEins = false; 
        this.alteracMountain = false;
        this.badlandsZwei = false;
        this.tanarisEins = false;
        this.stranglethornFünf  = false;
        this.hinterlandsEins = false;
        this.feralasEins = false; 
        this.hinterlandsZwei = false; 

        //48+

        this.hinterlandsDrei = false; 
        this.blastedLandsEins = false; 
        this.blastedLandsZwei = false; 
        this.blastedLandsDrei = false; 
        this.burningSteppesEins = false; 
        this.burningSteppesZwei = false; 
        this.burningSteppesDrei = false; 
        this.easternPleaguelandsEins = false; 
        this.easternPleaguelandsZwei = false; 
        this.easternPleaguelandsDrei = false; 
        this.searingGorgeEins = false; 
        this.searingGorgeZwei = false; 
        this.searingGorgeDrei = false; 
        this.swampOfSorrowsZwei = false; 
        this.westernPleaguelandsEins = false; 
        this.westernPleaguelandsZwei = false; 
        this.westernPleaguelandsDrei = false; 

        //48+ Kalimdor

        this.azsharaEins = false; 
        this.azsharaZwei = false; 
        this.azsharaDrei = false; 
        this.felwoodEins = false; 
        this.felwoodZwei = false; 
        this.felwoodDrei = false; 
        this.silithusEins = false; 
        this.silithusZwei = false; 
        this.silithusDrei = false; 
        this.feralasZwei = false; 
        this.feralasDrei = false; 
        this.feralasVier = false; 
        this.tanarisZwei = false; 
        this.tanarisDrei = false; 
        this.ungoroEins = false; 
        this.ungoroZwei = false; 
        this.ungoroDrei = false; 
        this.winterspringEins = false; 
        this.winterspringZwei = false; 
        this.winterspringDrei = false; 
        this.winterspringVier = false; 

            //FlightMaster discovered
            //Eastern Kingdoms
            this.ArathiHighlands = false;
            this.Wetlands = false;
            this.WesternPlaguelands = false;
            this.EasternPlaguelands = false;
            this.HillsbradFoothills = false;
            this.TheHinterlands = false;
            this.LochModan = false;
            this.Ironforge = false;
            this.SearingGorge = false;
            this.BurningSteppes = false;
            this.RedridgeMountains = false;
            this.Stormwind = false;
            this.Westfall = false;
            this.Duskwood = false;
            this.StranglethornValley = false;

            //Kalimdor
            this.Teldrassil = false;
            this.Darkshore = false;
            this.Winterspring = false;
            this.Azshara = false;
            this.Ashenvale = false;
            this.StonetalonMountains = false;
            this.Desolace = false;
            this.TheBarrens = false;
            this.Tanaris = false;
            this.FeralasFeathermoon = false;
            this.FeralasThalanaar = false;
            this.UngoroCrater = false;
            this.DustwallowMarsh = false;
            this.Silithus = false;
            this.Moonglade = false;
            this.Felwood = false;

        }

    public static void flightMasterSaveChanges(FlightMasterDB needToChange)
    {

        if(needToChange.name.Contains("Arathi"))
            CurrentSettings.ArathiHighlands = true;

        if(needToChange.name.Contains("Wetlands"))
            CurrentSettings.Wetlands = true;

        if(needToChange.name.Contains("Western"))
            CurrentSettings.WesternPlaguelands = true;

        if(needToChange.name.Contains("Eastern"))
            CurrentSettings.EasternPlaguelands = true;

        if(needToChange.name.Contains("Hillsbrad"))
            CurrentSettings.HillsbradFoothills = true;

        if(needToChange.name.Contains("Hinterlands"))
            CurrentSettings.TheHinterlands = true;

        if(needToChange.name.Contains("Modan"))
            CurrentSettings.LochModan = true;

        if(needToChange.name.Contains("Ironforge"))
            CurrentSettings.Ironforge = true;

        if(needToChange.name.Contains("Searing"))
            CurrentSettings.SearingGorge = true;

        if(needToChange.name.Contains("Burning"))
            CurrentSettings.BurningSteppes = true;

        if(needToChange.name.Contains("Redridge"))
            CurrentSettings.RedridgeMountains = true;

        if(needToChange.name.Contains("Stormwind"))
            CurrentSettings.Stormwind = true;

        if(needToChange.name.Contains("Westfall"))
            CurrentSettings.Westfall = true;

        if(needToChange.name.Contains("Duskwood"))
            CurrentSettings.Duskwood = true;

        if(needToChange.name.Contains("Stranglethorn"))
            CurrentSettings.StranglethornValley = true;


        if(needToChange.name.Contains("Teldrassil"))
            CurrentSettings.Teldrassil = true;

        if(needToChange.name.Contains("Darkshore"))
            CurrentSettings.Darkshore = true;

        if(needToChange.name.Contains("Winterspring"))
            CurrentSettings.Winterspring = true;

        if(needToChange.name.Contains("Azshara"))
            CurrentSettings.Azshara = true;

        if(needToChange.name.Contains("Ashenvale"))
            CurrentSettings.Ashenvale = true;

        if(needToChange.name.Contains("Stonetalon"))
            CurrentSettings.StonetalonMountains = true;

        if(needToChange.name.Contains("Desolace"))
            CurrentSettings.Desolace = true;

        if(needToChange.name.Contains("TheBarrens"))
            CurrentSettings.TheBarrens = true;

        if(needToChange.name.Contains("Tanaris"))
            CurrentSettings.Tanaris = true;

        if(needToChange.name.Contains("TheBarrens"))
            CurrentSettings.TheBarrens = true;

        if(needToChange.name.Contains("Feathermoon"))
            CurrentSettings.FeralasFeathermoon = true;

        if(needToChange.name.Contains("Thalanaar"))
            CurrentSettings.FeralasThalanaar = true;

        if(needToChange.name.Contains("ro Crater"))
            CurrentSettings.UngoroCrater = true;

        if(needToChange.name.Contains("Dustwallow"))
            CurrentSettings.DustwallowMarsh = true;

        if(needToChange.name.Contains("Silithus"))
            CurrentSettings.Silithus = true;

        if(needToChange.name.Contains("Felwood"))
            CurrentSettings.Felwood = true;
            
            FNVSettings.CurrentSettings.Save();
            Logging.Write("[FNV_Quester]: Settings saved of Flight Master " + needToChange.name);
            return;
    }

        public static void flightMasterSaveChanges(String needToChange)
    {

        if(needToChange.Contains("Arathi"))
            CurrentSettings.ArathiHighlands = true;

        if(needToChange.Contains("Wetlands"))
            CurrentSettings.Wetlands = true;

        if(needToChange.Contains("Western"))
            CurrentSettings.WesternPlaguelands = true;

        if(needToChange.Contains("Eastern"))
            CurrentSettings.EasternPlaguelands = true;

        if(needToChange.Contains("Hillsbrad"))
            CurrentSettings.HillsbradFoothills = true;

        if(needToChange.Contains("Hinterlands"))
            CurrentSettings.TheHinterlands = true;

        if(needToChange.Contains("Modan"))
            CurrentSettings.LochModan = true;

        if(needToChange.Contains("Ironforge"))
            CurrentSettings.Ironforge = true;

        if(needToChange.Contains("Searing"))
            CurrentSettings.SearingGorge = true;

        if(needToChange.Contains("Burning"))
            CurrentSettings.BurningSteppes = true;

        if(needToChange.Contains("Redridge"))
            CurrentSettings.RedridgeMountains = true;

        if(needToChange.Contains("Stormwind"))
            CurrentSettings.Stormwind = true;

        if(needToChange.Contains("Westfall"))
            CurrentSettings.Westfall = true;

        if(needToChange.Contains("Duskwood"))
            CurrentSettings.Duskwood = true;

        if(needToChange.Contains("Stranglethorn"))
            CurrentSettings.StranglethornValley = true;

        if(needToChange.Contains("Blasted"))

        if(needToChange.Contains("Teldrassil"))
            CurrentSettings.Teldrassil = true;

        if(needToChange.Contains("Darkshore"))
            CurrentSettings.Darkshore = true;

        if(needToChange.Contains("Winterspring"))
            CurrentSettings.Winterspring = true;

        if(needToChange.Contains("Azshara"))
            CurrentSettings.Azshara = true;

        if(needToChange.Contains("Ashenvale"))
            CurrentSettings.Ashenvale = true;

        if(needToChange.Contains("Stonetalon"))
            CurrentSettings.StonetalonMountains = true;

        if(needToChange.Contains("Desolace"))
            CurrentSettings.Desolace = true;

        if(needToChange.Contains("TheBarrens"))
            CurrentSettings.TheBarrens = true;

        if(needToChange.Contains("Tanaris"))
            CurrentSettings.Tanaris = true;

        if(needToChange.Contains("TheBarrens"))
            CurrentSettings.TheBarrens = true;

        if(needToChange.Contains("Feathermoon"))
            CurrentSettings.FeralasFeathermoon = true;

        if(needToChange.Contains("Thalanaar"))
            CurrentSettings.FeralasThalanaar = true;

        if(needToChange.Contains("ro Crater"))
            CurrentSettings.UngoroCrater = true;

        if(needToChange.Contains("Dustwallow"))
            CurrentSettings.DustwallowMarsh = true;

        if(needToChange.Contains("Silithus"))
            CurrentSettings.Silithus = true;

        if(needToChange.Contains("Felwood"))
            CurrentSettings.Felwood = true;
            
            FNVSettings.CurrentSettings.Save();
            Logging.Write("[FNV_Quester]: Settings saved of Flight Master " + needToChange);
            return;
    }

        public static FNVSettings CurrentSettings { get; set; }

        public bool Save()
        {
            try
            {
                return Save(AdviserFilePathAndName("FNV_Quester", ObjectManager.Me.Name + "." + Usefuls.RealmName));
            }
            catch(Exception e)
            {
                Logging.WriteDebug("FNV_Quester =&gt; Save(): " + e);
                return false;
            }
        }

        public static bool Load()
        {
            try
            {
                if(File.Exists(AdviserFilePathAndName("FNV_Quester", ObjectManager.Me.Name + "." + Usefuls.RealmName)))
                {
                    CurrentSettings = Load&lt;FNVSettings&gt;(AdviserFilePathAndName("FNV_Quester", ObjectManager.Me.Name + "." + Usefuls.RealmName));
                    return true;
                }

                FNVSettings.CurrentSettings = new FNVSettings();
            }
            catch(Exception e)
            {
                Logging.WriteDebug("FNV_Quester =&gt; Load(): " + e);
            }
            return false;
        }

        //Finished profiles -&gt; True == completed
        public bool launcher { get; set; }
        public bool dwarfStart { get; set; }
        public bool dwarfHunter { get; set; }
        public bool nightelfHunter { get; set; }
        public bool nightelfDruid { get; set; }
        public bool warlock { get; set; }
        public bool nightelfStart { get; set; }
        public bool humanStart { get; set; }
        public bool kharanos { get; set; }
        public bool elwynn { get; set; }
        public bool westfallEins { get; set; }
        public bool lochModanEins { get; set; }
        public bool darkshoreEins { get; set; }
        public bool westfallZwei { get; set; }
        public bool lochModanZwei { get; set; }
        public bool darkshoreZwei { get; set; }
        public bool westfallDrei { get; set; }
        public bool redridge { get; set; }
        public bool duskwoodEins { get; set; }
        public bool darkshoreDrei { get; set; }
        public bool stonetalon { get; set; }
        public bool duskwoodZwei { get; set; }
        public bool wetlandsEins { get; set; }
        public bool ashenvaleEins { get; set; }
        public bool wetlandsZwei { get; set; }
        public bool duskwoodDrei { get; set; }
        public bool ashenvaleZwei { get; set; }
        public bool duskwoodVier { get; set; }
        public bool ashenvaleDrei { get; set; }
        public bool thousandNeedles { get; set; }
        public bool desolaceEins { get; set; }
        public bool hillsbradEins { get; set; }
        public bool stranglethornEins { get; set; }
        public bool stranglethornZwei{ get; set; }
        public bool hillsbradZwei { get; set; }
        public bool arathiEins { get; set; }
        public bool stranglethornDrei { get; set; }
        public bool dustwallowEins { get; set; }
        public bool desolaceZwei { get; set; }
        public bool swampOfSorrowsEins { get; set; }
        public bool stranglethornVier { get; set; }
        public bool badlandsEins { get; set; }
        public bool alteracMountain { get; set; }
        public bool badlandsZwei { get; set; }
        public bool tanarisEins { get; set; }
        public bool stranglethornFünf { get; set; }
        public bool hinterlandsEins { get; set; }
        public bool feralasEins { get; set; }
        public bool hinterlandsZwei { get; set; }

                //48+ Eastern Kingdoms
        public bool hinterlandsDrei { get; set; }
        public bool blastedLandsEins { get; set; }
        public bool blastedLandsZwei { get; set; }
        public bool blastedLandsDrei { get; set; }
        public bool burningSteppesEins { get; set; }
        public bool burningSteppesZwei { get; set; }
        public bool burningSteppesDrei { get; set; }
        public bool easternPleaguelandsEins { get; set; }
        public bool easternPleaguelandsZwei { get; set; }
        public bool easternPleaguelandsDrei { get; set; }
        public bool searingGorgeEins { get; set; }
        public bool searingGorgeZwei { get; set; }
        public bool searingGorgeDrei { get; set; }
        public bool swampOfSorrowsZwei { get; set; }
        public bool westernPleaguelandsEins { get; set; }
        public bool westernPleaguelandsZwei { get; set; }
        public bool westernPleaguelandsDrei { get; set; }

        //48+ Kalimdor

        public bool azsharaEins { get; set; }
        public bool azsharaZwei { get; set; }
        public bool azsharaDrei { get; set; }
        public bool felwoodEins { get; set; }
        public bool felwoodZwei { get; set; }
        public bool felwoodDrei { get; set; }
        public bool silithusEins { get; set; }
        public bool silithusZwei { get; set; }
        public bool silithusDrei { get; set; }
        public bool feralasZwei { get; set; }
        public bool feralasDrei { get; set; }
        public bool feralasVier { get; set; }
        public bool tanarisZwei { get; set; }
        public bool tanarisDrei { get; set; }
        public bool ungoroEins { get; set; }
        public bool ungoroZwei { get; set; }
        public bool ungoroDrei { get; set; }
        public bool winterspringEins { get; set; }
        public bool winterspringZwei { get; set; }
        public bool winterspringDrei { get; set; }
        public bool winterspringVier { get; set; }



       // public bool hinterlandsZwei { get; set; }

        public bool defaultSettings { get; set; }
       // public bool dwarfStart { get; set; }
       // public bool nightelfStart { get; set; }
        //public bool humanStart { get; set; }
      //  public bool westfallEins { get; set; }
        public bool lochModan { get; set; }
        public bool auberdine { get; set; }
       // public bool westfallZwei { get; set; }
        public bool lakeshire { get; set; }
        public bool wetlands { get; set; }
        public bool ashenvale { get; set; }
       // public bool thousandNeedles { get; set; }
        public bool dustwallow { get; set; }
        public bool badlands { get; set; }
        public bool alterac { get; set; }
        public bool swampOfSorrows { get; set; }
        public bool tanaris { get; set; }
        public bool stranglethorn { get; set; }
        //public bool hinterlandsEins { get; set; }
        public bool feralas { get; set; }
       // public bool hinterlandsZwei { get; set; }

        //FlightMaster
        //Eastern Kingdoms
        public bool Stormwind { get; set; }
        public bool Westfall { get; set; }
        public bool RedridgeMountains { get; set; }
        public bool Duskwood { get; set; }
        public bool StranglethornValley { get; set; }
        public bool Ironforge { get; set; }
        public bool BurningSteppes { get; set; }
        public bool SearingGorge { get; set; }
        public bool LochModan { get; set; }
        public bool Wetlands { get; set; }
        public bool ArathiHighlands { get; set; }
        public bool HillsbradFoothills { get; set; }
        public bool WesternPlaguelands { get; set; }
        public bool EasternPlaguelands { get; set; }
        public bool TheHinterlands { get; set; }

        //Kalimdor
        public bool Ashenvale { get; set; }
        public bool Azshara { get; set; }
        public bool Darkshore { get; set; }
        public bool Teldrassil { get; set; }
        public bool Desolace { get; set; }
        public bool DustwallowMarsh { get; set; }
        public bool Felwood { get; set; }
        public bool FeralasFeathermoon { get; set; }
        public bool FeralasThalanaar { get; set; }
        public bool Moonglade { get; set; }
        public bool Silithus { get; set; }
        public bool StonetalonMountains { get; set; }
        public bool Tanaris { get; set; }
        public bool TheBarrens { get; set; }
        public bool UngoroCrater { get; set; }
        public bool Winterspring { get; set; }

    }

    //Buy and check bags
    public class bags
    {
        public static bool bagsStarted = false;

        public static int bagsEquipped()
        {
            int returnValue = 0;
            string empty = "";

            for(int i = 20; i &lt;= 23; i++)
            {
                empty = wManager.Wow.Helpers.Lua.LuaDoString&lt;string&gt;("return GetInventoryItemLink('player', " + i + ")");

                if(empty.Contains("o"))
                    returnValue++;
            }

            return returnValue;
        }

        public static string checkMoney()
        {
            string returnVariableNameZ = "";

            returnVariableNameZ = wManager.Wow.Helpers.Lua.LuaDoString("returnVariableNameZ = GetMoney() return returnVariableNameZ", returnVariableNameZ);

            return returnVariableNameZ;
        }

        public static bool canEquip()
        {
            string returnVariableName = "";

            returnVariableName = wManager.Wow.Helpers.Lua.LuaDoString("returnVariableName = GetInventoryItemLink('player', 23 ) return returnVariableName", returnVariableName);


            if(returnVariableName.Equals(""))
            {
                return true;
            }
            else
            {
                return false;
            }

        }

    }


    //Abandon Quests
    public class abandonQuest
    {

        public static void abandon(string questName)
        {

            string name = questName;

            wManager.Wow.Helpers.Lua.LuaDoString("local name = '" + name + "' for i=1,GetNumQuestLogEntries() do local questTitle, level, questTag, suggestedGroup, isHeader, isCollapsed, isComplete = GetQuestLogTitle(i) if string.find(questTitle, name) then SelectQuestLogEntry(i) SetAbandonQuest() AbandonQuest() end end");


        }

    }



    //Throw away items - by Reapler
    public class throwAway
    {
        public static int GetItemQuantity(string itemName)
        {
            var execute =
                "local itemCount = 0; " +
                "for b=0,4 do " +
                    "if GetBagName(b) then " +
                        "for s=1, GetContainerNumSlots(b) do " +
                            "local itemLink = GetContainerItemLink(b, s) " +
                            "if itemLink then " +
                                "local _, stackCount = GetContainerItemInfo(b, s)\t " +
                                "if string.find(itemLink, \"" + itemName + "\") then " +
                                    "itemCount = itemCount + stackCount; " +
                                "end " +
                            "end " +
                        "end " +
                    "end " +
                "end; " +
                "return itemCount; ";
            return Lua.LuaDoString&lt;int&gt;(execute);
        }

        /// &lt;summary&gt;
        /// Used to delete all items by name.
        /// &lt;/summary&gt;
        /// &lt;param name="itemName"&gt;The item to delete.&lt;/param&gt;
        /// &lt;param name="leaveAmount"&gt;The amount of items which remain in the bag.&lt;/param&gt;
        /// &lt;remarks&gt;Bug at links with "-"&lt;/remarks&gt;
        public static void DeleteItems(string itemName, int leaveAmount)
        {
            var itemQuantity = GetItemQuantity(itemName) - leaveAmount;
            if(string.IsNullOrWhiteSpace(itemName) || itemQuantity &lt;= 0)
                return;
            var execute =
                "local itemCount = " + itemQuantity + "; " +
                "local deleted = 0; " +
                "for b=0,4 do " +
                    "if GetBagName(b) then " +
                        "for s=1, GetContainerNumSlots(b) do " +
                            "local itemLink = GetContainerItemLink(b, s) " +
                            "if itemLink then " +
                                "local _, stackCount = GetContainerItemInfo(b, s)\t " +
                                "local leftItems = itemCount - deleted; " +
                                "if string.find(itemLink, \"" + itemName + "\") and leftItems &gt; 0 then " +
                                    "if stackCount &lt;= 1 then " +
                                        "PickupContainerItem(b, s); " +
                                        "DeleteCursorItem(); " +
                                        "deleted = deleted + 1; " +
                                    "else " +
                                        "if (leftItems &gt; stackCount) then " +
                                            "SplitContainerItem(b, s, stackCount); " +
                                            "DeleteCursorItem(); " +
                                            "deleted = deleted + stackCount; " +
                                        "else " +
                                            "SplitContainerItem(b, s, leftItems); " +
                                            "DeleteCursorItem(); " +
                                            "deleted = deleted + leftItems; " +
                                        "end " +
                                    "end " +
                                "end " +
                            "end " +
                        "end " +
                    "end " +
                "end; ";
            Lua.LuaDoString(execute);
        }
    }


public class Darnassus
{
    private static Vector3 darnassusEnterPos = new Vector3(8775.104, 962.8825, 30.33067);
    private static Vector3 darnassusLeavePos = new Vector3(9945.827, 2598.705, 1316.187);

    public static void enter()
    {
        Logging.Write("[FNV_Quester]: Moving to position to enter Darnassus portal...");

        GoToTask.ToPosition(darnassusEnterPos);

        Logging.Write("[FNV_Quester]: Enter Darnassus, disable teleport...");

        wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;

        Vector3 pos = new Vector3(8812.807f, 972.6884f, 32.50122f);

        while(ObjectManager.Me.Position.DistanceTo(pos) &gt; 1 &amp;&amp; Usefuls.SubMapZoneName.Contains("theran Village"))
        {
            wManager.Wow.Helpers.MovementManager.Face(pos);
            wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 125);
            Thread.Sleep(robotManager.Helpful.Others.Random(10, 25));
        }

        Logging.Write("[FNV_Quester]: Reenable teleport");

        wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = true;
    }

    public static void leave()
    {
        Logging.Write("[FNV_Quester]: Moving to position to leave Darnassus portal...");

        GoToTask.ToPosition(darnassusLeavePos);

        Logging.Write("[FNV_Quester]: Leave Darnassus, disable teleport...");

        wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;

        Vector3 pos = new Vector3(9946.378f, 2642.551f, 1316.749f);

        while(ObjectManager.Me.Position.DistanceTo(pos) &gt; 1 &amp;&amp; Usefuls.MapZoneName.Contains("Darnassus"))
        {
            wManager.Wow.Helpers.MovementManager.Face(pos);
            wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 125);
            Thread.Sleep(robotManager.Helpful.Others.Random(10, 25));
        }

        Logging.Write("[FNV_Quester]: Reenable teleport");
        wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = true;
    }
}

    [Serializable]
    public class FNVQuesterFlightMaster : Settings
    {
        public FNVQuesterFlightMaster()
        {
            //FlightMaster discovered
            //Eastern Kingdoms
            this.ArathiHighlands = false;
            this.Wetlands = false;
            this.WesternPlaguelands = false;
            this.EasternPlaguelands = false;
            this.HillsbradFoothills = false;
            this.TheHinterlands = false;
            this.LochModan = false;
            this.Ironforge = false;
            this.SearingGorge = false;
            this.BurningSteppes = false;
            this.RedridgeMountains = false;
            this.Stormwind = false;
            this.Westfall = false;
            this.Duskwood = false;
            this.StranglethornValley = false;

            //Kalimdor
            this.Teldrassil = false;
            this.Darkshore = false;
            this.Winterspring = false;
            this.Azshara = false;
            this.Ashenvale = false;
            this.StonetalonMountains = false;
            this.Desolace = false;
            this.TheBarrens = false;
            this.Tanaris = false;
            this.FeralasFeathermoon = false;
            this.FeralasThalanaar = false;
            this.UngoroCrater = false;
            this.DustwallowMarsh = false;
            this.Silithus = false;
            this.Moonglade = false;
            this.Felwood = false;

        }

    public static void flightMasterSaveChanges(FlightMasterDB needToChange)
    {

        if(needToChange.name.Contains("Arathi"))
            CurrentSettings.ArathiHighlands = true;

        if(needToChange.name.Contains("Wetlands"))
            CurrentSettings.Wetlands = true;

        if(needToChange.name.Contains("Western"))
            CurrentSettings.WesternPlaguelands = true;

        if(needToChange.name.Contains("Eastern"))
            CurrentSettings.EasternPlaguelands = true;

        if(needToChange.name.Contains("Hillsbrad"))
            CurrentSettings.HillsbradFoothills = true;

        if(needToChange.name.Contains("Hinterlands"))
            CurrentSettings.TheHinterlands = true;

        if(needToChange.name.Contains("Modan"))
            CurrentSettings.LochModan = true;

        if(needToChange.name.Contains("Ironforge"))
            CurrentSettings.Ironforge = true;

        if(needToChange.name.Contains("Searing"))
            CurrentSettings.SearingGorge = true;

        if(needToChange.name.Contains("Burning"))
            CurrentSettings.BurningSteppes = true;

        if(needToChange.name.Contains("Redridge"))
            CurrentSettings.RedridgeMountains = true;

        if(needToChange.name.Contains("Stormwind"))
            CurrentSettings.Stormwind = true;

        if(needToChange.name.Contains("Westfall"))
            CurrentSettings.Westfall = true;

        if(needToChange.name.Contains("Duskwood"))
            CurrentSettings.Duskwood = true;

        if(needToChange.name.Contains("Stranglethorn"))
            CurrentSettings.StranglethornValley = true;


        if(needToChange.name.Contains("Teldrassil"))
            CurrentSettings.Teldrassil = true;

        if(needToChange.name.Contains("Darkshore"))
            CurrentSettings.Darkshore = true;

        if(needToChange.name.Contains("Winterspring"))
            CurrentSettings.Winterspring = true;

        if(needToChange.name.Contains("Azshara"))
            CurrentSettings.Azshara = true;

        if(needToChange.name.Contains("Ashenvale"))
            CurrentSettings.Ashenvale = true;

        if(needToChange.name.Contains("Stonetalon"))
            CurrentSettings.StonetalonMountains = true;

        if(needToChange.name.Contains("Desolace"))
            CurrentSettings.Desolace = true;

        if(needToChange.name.Contains("Tanaris"))
            CurrentSettings.Tanaris = true;

        if(needToChange.name.Contains("The Barrens"))
            CurrentSettings.TheBarrens = true;

        if(needToChange.name.Contains("Feathermoon"))
            CurrentSettings.FeralasFeathermoon = true;

        if(needToChange.name.Contains("Thalanaar"))
            CurrentSettings.FeralasThalanaar = true;

        if(needToChange.name.Contains("ro Crater"))
            CurrentSettings.UngoroCrater = true;

        if(needToChange.name.Contains("Dustwallow"))
            CurrentSettings.DustwallowMarsh = true;

        if(needToChange.name.Contains("Silithus"))
            CurrentSettings.Silithus = true;

        if(needToChange.name.Contains("Felwood"))
            CurrentSettings.Felwood = true;

        FNVQuesterFlightMaster.CurrentSettings.Save();
        Logging.Write("[FNV_FlightMaster]: Settings saved of Flight Master " + needToChange.name);
        return;
    }

        public static FNVQuesterFlightMaster CurrentSettings { get; set; }

        public bool Save()
        {
            try
            {
                return Save(AdviserFilePathAndName("FNVQuesterFlightMaster", ObjectManager.Me.Name + "." + Usefuls.RealmName));
            }
            catch(Exception e)
            {
                Logging.WriteDebug("FNVQuesterFlightMaster =&gt; Save(): " + e);
                return false;
            }
        }

        public static bool Load()
        {
            try
            {
                if(File.Exists(AdviserFilePathAndName("FNVQuesterFlightMaster", ObjectManager.Me.Name + "." + Usefuls.RealmName)))
                {
                    CurrentSettings = Load&lt;FNVQuesterFlightMaster&gt;(AdviserFilePathAndName("FNVQuesterFlightMaster", ObjectManager.Me.Name + "." + Usefuls.RealmName));
                    return true;
                }

                FNVQuesterFlightMaster.CurrentSettings = new FNVQuesterFlightMaster();
            }
            catch(Exception e)
            {
                Logging.WriteDebug("FNVQuesterFlightMaster =&gt; Load(): " + e);
            }
            return false;
        }


        //FlightMaster
        //Eastern Kingdoms
        public bool Stormwind { get; set; }
        public bool Westfall { get; set; }
        public bool RedridgeMountains { get; set; }
        public bool Duskwood { get; set; }
        public bool StranglethornValley { get; set; }
        public bool Ironforge { get; set; }
        public bool BurningSteppes { get; set; }
        public bool SearingGorge { get; set; }
        public bool LochModan { get; set; }
        public bool Wetlands { get; set; }
        public bool ArathiHighlands { get; set; }
        public bool HillsbradFoothills { get; set; }
        public bool WesternPlaguelands { get; set; }
        public bool EasternPlaguelands { get; set; }
        public bool TheHinterlands { get; set; }

        //Kalimdor

        public bool Ashenvale { get; set; }
        public bool Azshara { get; set; }
        public bool Darkshore { get; set; }
        public bool Teldrassil { get; set; }
        public bool Desolace { get; set; }
        public bool DustwallowMarsh { get; set; }
        public bool Felwood { get; set; }
        public bool FeralasFeathermoon { get; set; }
        public bool FeralasThalanaar { get; set; }
        public bool Moonglade { get; set; }
        public bool Silithus { get; set; }
        public bool StonetalonMountains { get; set; }
        public bool Tanaris { get; set; }
        public bool TheBarrens { get; set; }
        public bool UngoroCrater { get; set; }
        public bool Winterspring { get; set; }

    }

public class Boat
{
    private static bool _boatTaken = false;

    public static void menethilToAuberdine()
    {

        // Settings
        var zeppelinEntryId = 176310; // Zeppelin/Ship EntryId
                                      // From
        var fromZeppelinWaitPosition = new Vector3(-3709.475, -575.0988, 0); // Position where Zeppelin/Ship waits players (from)
        var fromPlayerWaitPosition = new Vector3(-3727.4, -581.3, 6.2); // Position where the player waits Zeppelin/Ship (from)
        var fromPlayerInZeppelinPosition = new Vector3(-3713.333, -571.7416, 6.098111); // Position where the player waits in the Zeppelin/Ship (from)
                                                                                        // To
        var toZeppelinWaitPosition = new Vector3(6406.216, 823.0809, 0); // Position where Zeppelin/Ship waits players (to)
        var toPlayerLeavePosition = new Vector3(6461.408, 806.1595, 6.770809); // Position to go out the Zeppelin/Ship (to)
                                                                               //Pos1
        var enterPos1 = new Vector3(-3724.827, -581.0698, 6.191196);
        //Pos2
        var enterPos2 = new Vector3(-3723.727, -580.3727, 6.184784);
        _boatTaken = false;

        if(!_boatTaken)
        {
            // Change WRobot settings:
            Logging.Write("[FNV_Quester]: Taking boat from Menethil to Auberdine");
            wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;
            wManager.wManagerSetting.CurrentSetting.Repair = false;
            wManager.wManagerSetting.CurrentSetting.Selling = false;
            wManager.wManagerSetting.CurrentSetting.UsePathsFinder = false;

            // Code:
            if(!Conditions.InGameAndConnectedAndProductStartedNotInPause)
                return;

            while(Products.IsStarted &amp;&amp; !_boatTaken)
            {
                while(Usefuls.ContinentId != (int)ContinentId.Kalimdor)
                {
                    if(!ObjectManager.Me.InTransport)
                    {
                        if(GoToTask.ToPosition(fromPlayerWaitPosition))
                        {
                            var zeppelin = ObjectManager.GetWoWGameObjectByEntry(zeppelinEntryId).OrderBy(o =&gt; o.GetDistance).FirstOrDefault();
                            if(zeppelin != null &amp;&amp; zeppelin.Position.DistanceTo(fromZeppelinWaitPosition) &lt; 1)
                            {

                                MovementManager.MoveTo(enterPos1);
                                if(GoToTask.ToPosition(enterPos1))
                                    MovementManager.MoveTo(enterPos2);

                                Lua.LuaDoString("ClearTarget()");

                                //wManager.Wow.Helpers.MovementManager.Face(new Vector3(-3713.333, -571.7416, 6.098111));

                                MovementManager.MoveTo(fromPlayerInZeppelinPosition);
                            }
                        }
                    }
                }
                while(Usefuls.ContinentId == (int)ContinentId.Kalimdor)
                {
                    if(ObjectManager.Me.InTransport)
                    {
                        var zeppelin = ObjectManager.GetWoWGameObjectByEntry(zeppelinEntryId).OrderBy(o =&gt; o.GetDistance).FirstOrDefault();
                        if(zeppelin != null &amp;&amp; zeppelin.Position.DistanceTo(toZeppelinWaitPosition) &lt; 1)
                        {
                            MovementManager.MoveTo(toPlayerLeavePosition);
                            break;
                        }
                    }
                }

                Logging.Write("[FNV_Quester]: Boat taken from Menethil to Auberdine");

                wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = true;
                wManager.wManagerSetting.CurrentSetting.Repair = true;
                wManager.wManagerSetting.CurrentSetting.Selling = true;
                wManager.wManagerSetting.CurrentSetting.UsePathsFinder = true;
                _boatTaken = true;
            }
            return;
        }
        return;
    }
}

public class Key
{
    public static bool haveKey(int keyId)
    {
        bool haveKey = Lua.LuaDoString&lt;bool&gt;("local itemIdSearch = " + keyId + "; local bag = KEYRING_CONTAINER; for slot = 1,MAX_CONTAINER_ITEMS do local itemLink = GetContainerItemLink(bag,slot); local _, itemCount = GetContainerItemInfo(bag,slot); if itemLink and itemCount then local _,_,itemId = string.find(itemLink, '.*|Hitem:(%d+):.*'); if itemId and tonumber(itemId) == itemIdSearch then return true end end end return false");
        return haveKey;
    }
}




public class Authentication
{
    
    private readonly string orderId;
    private readonly string productId;
    private readonly string wRobotAuthKey;

    private readonly BackgroundWorker _validationThread = new BackgroundWorker();
    private bool _isRunning = false;
    private string authUrl;

    public Authentication(string orderId, string productId)
    {
    
        return;  if (orderId == null)
        {
            MessageBox.Show("You need to enter your transaction id (from your Rocketr email) into the plugin settings to use this!");
        }

        this.orderId = orderId;
        this.productId = productId;

        this.wRobotAuthKey = robotManager.Helpful.Others.StringBetween(authManager.LoginServer.GetSubcriptionInfoThread(), robotManager.Translate.Get("License Key") + ": ", "...  - " + robotManager.Translate.Get("Subscription time expire"));
            authUrl = "http://51.38.127.249:8080/authenticate?orderId=" + orderId.Trim() + "&amp;productId=" + productId + "&amp;wRobotAuthKey=" + wRobotAuthKey;
        


        _isRunning = true;
        _validationThread.DoWork += CheckValidiation;
        _validationThread.RunWorkerAsync();
    }
    
    ~Authentication()
    {
        _isRunning = false;
        _validationThread.DoWork -= CheckValidiation;
        _validationThread.Dispose();
    }

    private void CheckValidiation(object sender, DoWorkEventArgs e)
    {
        while (Products.IsStarted &amp;&amp; _isRunning)
        {
            try
            {
                bool timedOut = false;
                HttpWebResponse content = null;
                try
                {
                    var request = (HttpWebRequest)WebRequest.Create(authUrl);
                    request.Timeout = 30000;
                    request.ReadWriteTimeout = 30000;
                    content = (HttpWebResponse)request.GetResponse();
                }
                catch (Exception ex)
                {
                    timedOut = true;
                }
                
                //give it another try
                if ((content != null &amp;&amp; content.StatusCode != HttpStatusCode.OK) || timedOut)
                {
                    Thread.Sleep(60 * 1000);
                    try
                    {
                        var request = (HttpWebRequest)WebRequest.Create(authUrl);
                        request.Timeout = 30000;
                        request.ReadWriteTimeout = 30000;
                        content = (HttpWebResponse)request.GetResponse();
                        timedOut = false;
                    }
                    catch (Exception ex)
                    {
                        timedOut = true;
                    }
                }

                string result = content != null ? new StreamReader(content.GetResponseStream()).ReadToEnd() : "false";

                if (!bool.Parse(result) || (content != null &amp;&amp; content.StatusCode != HttpStatusCode.OK) || timedOut)
                {
                    Products.ProductStop();
                    _isRunning = false;
                    _validationThread.DoWork -= CheckValidiation;
                    _validationThread.Dispose();
                    MessageBox.Show("You are trying to use a different wRobot key with the same order Id or your wRobot key is used by more than 10 IPs. \n\nBot name: " + ObjectManager.Me.Name + "\n\nIf your wRobot key has changed recently (f.e. after purchasing a new one), please contact FNV316");
                    return;
                }

                Thread.Sleep(60 * 1000);
            }
            catch (Exception exp)
            {
                Logging.WriteError("" + exp);
            }
        }
    }
}

    /*
    static ControlAuthentication()
    { return;
        new Thread(() =&gt;
        {
            while (!Conditions.InGameAndConnectedAndAliveAndProductStarted)
            {
                Thread.Sleep(500);
            }
            Thread.Sleep(30000);
            string status = Logging.Status;
            if (_controlVariable != 5 &amp;&amp; !status.Contains("To Town") &amp;&amp; !status.Contains("Regeneration") &amp;&amp; !status.Contains("Attacked") &amp;&amp; !status.Contains("Trainers") &amp;&amp; !status.Contains("Ressurect") &amp;&amp; !status.Contains("Started"))
            {
                Products.ProductStop();
                MessageBox.Show("Please enter your ID faster, restart the Bot now.");
            }
            Logging.Write("[FNV_Quester]: Launcher authentication sucessful");
        }).Start();
    }
    */

public class ControlAuthentication
{
    private static volatile int _controlVariable = 0;
    private static int _timeout = 0;
    private static bool _isRunning = true;
    private static bool disposeAuthThread = false;
    private static string profileName = "";

    public static void SetControl(int control)
    {
        _controlVariable = control;
    }

    static ControlAuthentication()
    { return;
        new Thread(() =&gt;
        {
            profileName = wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName;

            while(_isRunning &amp;&amp; !disposeAuthThread &amp;&amp; (wManager.Wow.Helpers.Conditions.ProductIsStarted || wManager.Wow.Helpers.Conditions.ProductInPause))
            {
                if(!wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName.Equals(profileName))
                {
                    disposeAuthThread = true;
                    break;
                }

                if(!wManager.Wow.Helpers.Conditions.ProductIsStarted)
                {
                    disposeAuthThread = true;
                    break;
                }

                while(wManager.Wow.Helpers.Quest.QuesterCurrentContext.CurrentStep &lt; 2)
                {
                    Thread.Sleep(500);

                    if(_controlVariable == 5 || !wManager.Wow.Helpers.Conditions.ProductIsStarted)
                        break;

                    _timeout += 500;

                    if(_timeout &gt;= 910000)
                    {
                        Products.ProductStop();
                        MessageBox.Show("[FNV_Quester]: Timeout error. Unable to authenticate for more than 15 minutes. \n\nBot name: " + ObjectManager.Me.Name);
                        break;
                    }
                }

                _isRunning = false;

                if(wManager.Wow.Helpers.Conditions.ProductIsStarted || wManager.Wow.Helpers.Conditions.ProductInPause)
                {
                    Thread.Sleep(60000);

                    if(_controlVariable != 5)
                    {
                        Products.ProductStop();
                        MessageBox.Show("[FNV_Quester]: Please enter your ID faster or make sure the authentication step is enabled (#0 START_FNVLauncher_V2 -&gt; Step [1], any other profile -&gt; Step [0]). \nRestart the Bot now. \n\nBot name: " + ObjectManager.Me.Name);
                    }
                    /*
                    else
                    {
                        if(!disposeAuthThread &amp;&amp; wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName.Equals(profileName) &amp;&amp; Conditions.ProductIsStarted)
                            Logging.Write("[FNV_Quester]: Authentication sucessful");
                    }
                    */
                    _timeout = 0;
                    _isRunning = true;
                }
            }

        }).Start();
    }
    
}

[Serializable]
public class FNVQuesterAuthSettings : robotManager.Helpful.Settings
{
    [Setting]
    [Category("__IMPORTANT__")]
    [DisplayName("Rocketr Order id")]
    [Description("This is your tracking number for when you purchased this product, it is required to use this consistently. You can find it within your product delivery e-mail")]
    public string TransactionId { get { return "free"; } set { } }

    public FNVQuesterAuthSettings()
    {
        TransactionId = null;
    }
    
    public static FNVQuesterAuthSettings CurrentSetting { get; set; }

    public bool Save()
    {
        try
        {
            return Save(AdviserFilePathAndName("FNVQuester_AuthSettings", "Vanilla_Alliance"));
        }
        catch (Exception e)
        {
            robotManager.Helpful.Logging.Write("FNVQuester_AuthSettings &gt; Save(): " + e);
            return false;
        }
    }

    public static bool Load()
    {
        try
        {
            if (File.Exists(AdviserFilePathAndName("FNVQuester_AuthSettings", "Vanilla_Alliance")))
            {
                CurrentSetting =
                    Load&lt;FNVQuesterAuthSettings&gt;(AdviserFilePathAndName("FNVQuester_AuthSettings", "Vanilla_Alliance"));
                return true;
            }
            CurrentSetting = new FNVQuesterAuthSettings();
        }
        catch (Exception e)
        {
            robotManager.Helpful.Logging.Write("FNVQuester_AuthSettings &gt; Load(): " + e);
        }
        return false;
    }
}

public class SearingGorge
{
     private static bool _isStarted = false;
     private static bool _inPause = false;
     private static int gateId = 161536;
     private static Vector3 gatePosition = new Vector3(-6756, -1166, 187);

    public static void initializeGateDetection()
    {
        if(!_isStarted)
        {
            Logging.Write("[FNV_Quester]: Searing Gorge gate detection initialized");
            _isStarted = true;
            MovementEvents.OnSeemStuck += MovementEventsOnOnSeemStuck;
        }
    }

    private static void pause()
    {
        for(int i = 0; i &lt; 15000; i += 1000)
        {
            Thread.Sleep(1000);
        }
        _inPause = false;
        return;
    }

    public static void disposeGateDetection()
    {
        if(_isStarted)
        {
            Logging.Write("[FNV_Quester]: Searing Gorge gate detection disposed");
            _isStarted = false;
            MovementEvents.OnSeemStuck -= MovementEventsOnOnSeemStuck;
        }
    }

    private static void MovementEventsOnOnSeemStuck()
    {
        Logging.Write("SeemStuck detected");

        if(ObjectManager.Me.Position.DistanceTo(gatePosition) &lt;= 10 &amp;&amp; !_inPause)
        {
            Logging.Write("[FNV_Quester]: Stuck at Quarry Gate, trying to open it...");

            GoToTask.ToPositionAndIntecractWithGameObject(gatePosition, gateId, -1, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore);
            
            if(GoToTask.ToPositionAndIntecractWithGameObject(gatePosition, gateId, -1, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore))
            {
               // _inPause = true;
               // pause();
            }
        }
    }
}

public class SearingGorgeFixedPathfinding
{
    private static List&lt;Vector3&gt; brokenLocationNodes = new List&lt;Vector3&gt;();
    private static bool _inProcessing;
    private static Vector3 currentDestination = new Vector3(0, 0, 0);
    private static string status = "";

    private static void ApplyNodes()
    {
        Vector3 thoriumPoint = new Vector3(-6514, -1162, 308);
        brokenLocationNodes.Add(thoriumPoint);
    }

    public static void Initialize()
    {
        Logging.Write("[FNV_Quester]: Thorium Point pathfinder workaround started");
        MovementEvents.OnMovementPulse += MovementEventsOnOnMovementPulse;
        MovementEvents.OnSeemStuck += MovementEventsOnOnSeemStuck;
        Logging.OnChanged += LoggingEvents_OnChangedStatus;
        ApplyNodes();
        _inProcessing = false;
    }

    public static void Dispose()
    {
        MovementEvents.OnMovementPulse -= MovementEventsOnOnMovementPulse;
        MovementEvents.OnSeemStuck -= MovementEventsOnOnSeemStuck;
        Logging.OnChanged -= LoggingEvents_OnChangedStatus;
    }

    private static void MovementEventsOnOnSeemStuck()
    {
        _inProcessing = false;
    }

    private static void MovementEventsOnOnMovementPulse(List&lt;Vector3&gt; points, CancelEventArgs cancelable)
    {  
        //status = Logging.Status;
        if(CheckDestination(points.LastOrDefault&lt;Vector3&gt;()) &amp;&amp; !_inProcessing &amp;&amp; ObjectManager.Me.Position.DistanceTo(points.Last&lt;Vector3&gt;()) &gt; 50 &amp;&amp; !status.Contains("Follow Path"))
        {
            _inProcessing = true;
            Logging.Write("[FNV_Quester]: Destination vector within broken path finder range. Using custom path for movement to enter instead");
            cancelable.Cancel = true;
            UseCustomPathIn(points.LastOrDefault&lt;Vector3&gt;());
            cancelable.Cancel = false;
            _inProcessing = false;
        }

        if(CheckDestination(ObjectManager.Me.Position) &amp;&amp; !_inProcessing &amp;&amp; ObjectManager.Me.Position.DistanceTo(points.Last&lt;Vector3&gt;()) &gt; 50 &amp;&amp; !status.Contains("Follow Path"))
        {
            _inProcessing = true;
            Logging.Write("[FNV_Quester]: Starting vector within broken path finder range. Using custom path for movement to leave instead");
            cancelable.Cancel = true;
            UseCustomPathOut(points.LastOrDefault&lt;Vector3&gt;());
            cancelable.Cancel = false;
            _inProcessing = false;
        }

        if(CheckDestination(ObjectManager.Me.Position) &amp;&amp; !_inProcessing &amp;&amp; CheckDestination(points.Last&lt;Vector3&gt;()) &amp;&amp; ObjectManager.Me.Position.DistanceTo(points.Last&lt;Vector3&gt;()) &gt; 10 &amp;&amp; !status.Contains("Follow Path"))
        {
            _inProcessing = true;
            currentDestination = points.Last&lt;Vector3&gt;();
            Logging.Write("[FNV_Quester]: Starting and destination vector within broken path finder range. Using custom path for movement instead");
            cancelable.Cancel = true;
            UseCustomPathLoop(points.LastOrDefault&lt;Vector3&gt;());
            cancelable.Cancel = false;
            _inProcessing = false;
        }
    }

    
    private static void LoggingEvents_OnChangedStatus(object sender, Logging.LoggingChangeEventArgs e)
    {
        status = Logging.Status;
    }
    

    private static bool CheckDestination(Vector3 destination)
    {
        foreach(var ele in brokenLocationNodes)
        {
            //Logging.Write("Distance is: " + destination.DistanceTo(ele)); 
            if(destination.DistanceTo(ele) &lt;= 60)
                return true;
        }
        return false;
    }

    private static void UseCustomPathIn(Vector3 destination)
    {

        Vector3 currentDestination = new Vector3(0, 0, 0);

        var path = new List&lt;Vector3&gt;() {
new Vector3(-6605.966f, -1023.291f, 244.5074f, "None"),
new Vector3(-6601.826f, -1023.744f, 244.9385f, "None"),
new Vector3(-6597.218f, -1026.855f, 248.186f, "None"),
new Vector3(-6593.908f, -1031.353f, 252.414f, "None"),
new Vector3(-6591.3f, -1036.307f, 255.8175f, "None"),
new Vector3(-6588.852f, -1041.541f, 258.5742f, "None"),
new Vector3(-6586.07f, -1046.571f, 260.5392f, "None"),
new Vector3(-6582.013f, -1050.151f, 262.3918f, "None"),
new Vector3(-6577.125f, -1052.881f, 264.4617f, "None"),
new Vector3(-6572.03f, -1055.201f, 266.5196f, "None"),
new Vector3(-6566.89f, -1057.423f, 268.521f, "None"),
new Vector3(-6561.761f, -1059.671f, 270.6708f, "None"),
new Vector3(-6556.499f, -1062.034f, 272.971f, "None"),
new Vector3(-6551.548f, -1064.268f, 275.2576f, "None"),
new Vector3(-6546.625f, -1066.932f, 277.3527f, "None"),
new Vector3(-6541.8f, -1069.774f, 279.032f, "None"),
new Vector3(-6536.636f, -1071.892f, 280.7285f, "None"),
new Vector3(-6531.107f, -1072.746f, 282.576f, "None"),
new Vector3(-6525.543f, -1073.38f, 284.4381f, "None"),
new Vector3(-6519.98f, -1074.023f, 286.3544f, "None"),
new Vector3(-6514.447f, -1074.884f, 288.3375f, "None"),
new Vector3(-6508.975f, -1076.073f, 290.369f, "None"),
new Vector3(-6503.632f, -1077.715f, 292.0928f, "None"),
new Vector3(-6498.638f, -1080.577f, 293.695f, "None"),
new Vector3(-6494.001f, -1083.713f, 295.3442f, "None"),
new Vector3(-6490.028f, -1087.634f, 296.9394f, "None"),
new Vector3(-6486.872f, -1092.256f, 298.4525f, "None"),
new Vector3(-6484.295f, -1097.215f, 300.1746f, "None"),
new Vector3(-6483.278f, -1102.701f, 301.5711f, "None"),
new Vector3(-6483.816f, -1108.252f, 302.851f, "None"),
new Vector3(-6485.005f, -1113.707f, 304.0922f, "None"),
new Vector3(-6487.139f, -1118.884f, 305.0337f, "None"),
new Vector3(-6489.344f, -1124.032f, 305.7626f, "None"),
new Vector3(-6491.585f, -1129.163f, 306.1504f, "None"),
new Vector3(-6494.281f, -1134.475f, 306.4971f, "None"),
new Vector3(-6497.214f, -1139.442f, 306.8915f, "None"),
new Vector3(-6500.032f, -1144.085f, 307.3696f, "None"),
new Vector3(-6503.025f, -1149.016f, 307.632f, "None"),
new Vector3(-6505.93f, -1153.804f, 307.8793f, "None"),
new Vector3(-6508.76f, -1158.441f, 307.9853f, "None"),
new Vector3(-6512.148f, -1162.893f, 308.3222f, "None"),
new Vector3(-6517.508f, -1163.161f, 308.5844f, "None"),
            };

        foreach(var ele in path)
        {
            if(ele.DistanceTo(destination) &lt; ele.DistanceTo(currentDestination))
                currentDestination = ele;
        }

        if(wManager.Wow.Bot.Tasks.GoToTask.ToPosition(path.First&lt;Vector3&gt;(), 3.5f, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore))
        {
            wManager.Wow.Bot.Tasks.GoToTask.ToPosition(path.First&lt;Vector3&gt;(), 3.5f, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore);
        }

        while(ObjectManager.Me.Position.DistanceTo(currentDestination) &gt; 5 &amp;&amp; !currentDestination.Equals((Vector3)null) &amp;&amp; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore)
        {
            MovementManager.Go(path);
            Thread.Sleep(100);
        }

        //Logging.Write("Finished takeCustomPath");
        //Reenable();
        _inProcessing = false;
        return;
    }

    private static void UseCustomPathOut(Vector3 destination)
    {

        Vector3 currentDestination = new Vector3(0, 0, 0);

        var path = new List&lt;Vector3&gt;() {
new Vector3(-6520.889f, -1186.334f, 309.2557f, "None"),
new Vector3(-6511.543f, -1163.732f, 308.3743f, "None"),
new Vector3(-6508.988f, -1161.179f, 308.1429f, "None"),
new Vector3(-6504.05f, -1156.218f, 308.0315f, "None"),
new Vector3(-6501.398f, -1153.294f, 308.1518f, "None"),
new Vector3(-6495.091f, -1144.908f, 307.875f, "None"),
new Vector3(-6489.66f, -1136.319f, 307.1272f, "None"),
new Vector3(-6484.931f, -1126.579f, 306.6054f, "None"),
new Vector3(-6481.782f, -1116.925f, 305.3705f, "None"),
new Vector3(-6480.768f, -1106.506f, 302.6744f, "None"),
new Vector3(-6483.211f, -1096.021f, 299.9566f, "None"),
new Vector3(-6488.722f, -1087.545f, 297.2002f, "None"),
new Vector3(-6496.905f, -1080.999f, 294.2147f, "None"),
new Vector3(-6506.868f, -1076.894f, 291.0374f, "None"),
new Vector3(-6516.972f, -1075.943f, 287.6053f, "None"),
new Vector3(-6527.435f, -1075.096f, 283.8497f, "None"),
new Vector3(-6537.802f, -1073.449f, 280.6175f, "None"),
new Vector3(-6548.082f, -1070.127f, 276.9659f, "None"),
new Vector3(-6556.992f, -1065.242f, 273.4804f, "None"),
new Vector3(-6566.444f, -1059.943f, 269.1368f, "None"),
new Vector3(-6575.575f, -1055.484f, 265.3927f, "None"),
new Vector3(-6585.064f, -1050.99f, 261.5944f, "None"),
new Vector3(-6592.596f, -1046.345f, 258.3036f, "None"),
new Vector3(-6594.945f, -1035.768f, 253.8222f, "None"),
new Vector3(-6598.657f, -1026.457f, 247.278f, "None"),
new Vector3(-6605.125f, -1027.011f, 244.9202f, "None"),
new Vector3(-6614.792f, -1030.953f, 244.2407f, "None"),
};

        foreach(var ele in path)
        {
            if(ele.DistanceTo(destination) &lt; ele.DistanceTo(currentDestination))
                currentDestination = ele;
        }

        if(wManager.Wow.Bot.Tasks.GoToTask.ToPosition(path.First&lt;Vector3&gt;(), 3.5f, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore))
        {
            wManager.Wow.Bot.Tasks.GoToTask.ToPosition(path.First&lt;Vector3&gt;(), 3.5f, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore);
        }

        while(ObjectManager.Me.Position.DistanceTo(currentDestination) &gt; 5 &amp;&amp; !currentDestination.Equals((Vector3)null) &amp;&amp; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore)
        {
            MovementManager.Go(path);
            Thread.Sleep(100);
        }

       // Logging.Write("Finished takeCustomPathOut");
        //Reenable();
        _inProcessing = false;
        return;
    }

    private static void UseCustomPathLoop(Vector3 destination)
    {

var path = new List&lt;Vector3&gt;() {
new Vector3(-6511.968f, -1178.022f, 309.2499f, "None"),
new Vector3(-6514.226f, -1180.391f, 309.2652f, "None"),
new Vector3(-6514.92f, -1183.646f, 309.2562f, "None"),
new Vector3(-6512.791f, -1186.548f, 309.2562f, "None"),
new Vector3(-6510.783f, -1189.414f, 309.2562f, "None"),
new Vector3(-6509.006f, -1192.427f, 309.2562f, "None"),
new Vector3(-6512.155f, -1191.501f, 309.2562f, "None"),
new Vector3(-6515.301f, -1190.243f, 309.2562f, "None"),
new Vector3(-6518.614f, -1189.136f, 309.2562f, "None"),
new Vector3(-6522.209f, -1188.875f, 309.2562f, "None"),
new Vector3(-6524.712f, -1188.661f, 309.2562f, "None"),
new Vector3(-6522.414f, -1187.187f, 309.2562f, "None"),
new Vector3(-6521.051f, -1184.315f, 309.2562f, "None"),
new Vector3(-6522.533f, -1181.164f, 309.5719f, "None"),
new Vector3(-6525.171f, -1178.908f, 310.5407f, "None"),
new Vector3(-6528.434f, -1177.668f, 311.458f, "None"),
new Vector3(-6531.906f, -1176.674f, 311.5628f, "None"),
new Vector3(-6535.271f, -1175.711f, 311.0577f, "None"),
new Vector3(-6538.62f, -1174.692f, 310.2652f, "None"),
new Vector3(-6541.887f, -1173.795f, 309.7975f, "None"),
new Vector3(-6545.396f, -1172.942f, 309.3479f, "None"),
new Vector3(-6548.806f, -1172.151f, 309.2578f, "None"),
new Vector3(-6552.216f, -1171.361f, 309.2927f, "None"),
new Vector3(-6555.617f, -1170.538f, 309.4913f, "None"),
new Vector3(-6558.993f, -1169.615f, 309.787f, "None"),
new Vector3(-6559.922f, -1167.805f, 309.8352f, "None"),
new Vector3(-6556.908f, -1165.864f, 310.0252f, "None"),
new Vector3(-6553.557f, -1164.877f, 310.0215f, "None"),
new Vector3(-6550.08f, -1164.484f, 309.926f, "None"),
new Vector3(-6544.97f, -1163.94f, 309.7741f, "None"),
new Vector3(-6534.195f, -1162.793f, 309.3187f, "None"),
new Vector3(-6523.741f, -1161.811f, 309.0215f, "None"),
new Vector3(-6513.615f, -1160.933f, 308.2635f, "None"),
new Vector3(-6506.418f, -1160.309f, 308.1041f, "None"),
new Vector3(-6502.819f, -1159.997f, 308.3569f, "None"),
new Vector3(-6499.444f, -1159.705f, 308.7631f, "None"),
new Vector3(-6496.717f, -1159.744f, 309.0773f, "None"),
new Vector3(-6495.118f, -1161.894f, 309.1303f, "None"),
new Vector3(-6493f, -1162.4f, 309.2f, "None"),
new Vector3(-6495.47f, -1165.365f, 309.19f, "None"),
new Vector3(-6496.578f, -1168.801f, 309.2209f, "None"),
new Vector3(-6497.424f, -1172.189f, 309.2521f, "None"),
new Vector3(-6496.599f, -1175.496f, 311.4286f, "None"),
new Vector3(-6494.471f, -1178.274f, 314.4402f, "None"),
new Vector3(-6492.365f, -1181.069f, 316.9778f, "None"),
new Vector3(-6490.402f, -1183.967f, 319.4284f, "None"),
new Vector3(-6488.469f, -1186.885f, 322.0103f, "None"),
new Vector3(-6486.568f, -1189.69f, 324.5566f, "None"),
new Vector3(-6484.392f, -1192.128f, 325.7157f, "None"),
new Vector3(-6479.565f, -1189.753f, 325.8502f, "None"),
new Vector3(-6477.512f, -1187.101f, 325.9147f, "None"),
new Vector3(-6478.307f, -1183.857f, 325.7819f, "None"),
new Vector3(-6480.627f, -1181.089f, 325.6377f, "None"),
new Vector3(-6482.864f, -1178.397f, 325.7611f, "None"),
new Vector3(-6485f, -1175.625f, 325.7878f, "None"),
new Vector3(-6487.067f, -1172.94f, 325.5157f, "None"),
new Vector3(-6489.333f, -1170.127f, 325.4131f, "None"),
new Vector3(-6492.227f, -1171.737f, 325.9383f, "None"),
new Vector3(-6495.255f, -1173.477f, 326.5012f, "None"),
new Vector3(-6498.819f, -1173.806f, 326.2171f, "None"),
new Vector3(-6501.867f, -1173.776f, 325.811f, "None"),
new Vector3(-6504.835f, -1175.808f, 325.9436f, "None"),
new Vector3(-6507.222f, -1178.351f, 326.3931f, "None"),
new Vector3(-6507.92f, -1181.704f, 326.9203f, "None"),
new Vector3(-6506.445f, -1184.833f, 327.1803f, "None"),
new Vector3(-6504.251f, -1187.702f, 326.8068f, "None"),
new Vector3(-6502.15f, -1190.501f, 326.4582f, "None"),
new Vector3(-6500.116f, -1193.21f, 326.1217f, "None"),
new Vector3(-6498.121f, -1196.085f, 325.64f, "None"),
new Vector3(-6496.097f, -1199.072f, 325.2523f, "None"),
new Vector3(-6493.148f, -1199.734f, 325.4391f, "None"),
new Vector3(-6490.279f, -1197.56f, 325.5786f, "None"),
new Vector3(-6488.075f, -1194.888f, 325.6983f, "None"),
new Vector3(-6489.056f, -1191.798f, 324.8035f, "None"),
new Vector3(-6491.162f, -1189.002f, 322.1753f, "None"),
new Vector3(-6493.301f, -1186.232f, 319.5414f, "None"),
new Vector3(-6495.447f, -1183.467f, 316.7057f, "None"),
new Vector3(-6497.518f, -1180.777f, 313.957f, "None"),
new Vector3(-6499.785f, -1177.831f, 311.3158f, "None"),
new Vector3(-6501.965f, -1175.094f, 309.255f, "None"),
new Vector3(-6504.853f, -1173.284f, 309.1891f, "None"),
new Vector3(-6507.97f, -1174.138f, 309.1942f, "None"),
new Vector3(-6511.066f, -1175.981f, 309.2368f, "None"),
new Vector3(-6513.179f, -1177.529f, 309.2469f, "None"),
};


        foreach(var ele in path)
        {
            if(ele.DistanceTo(destination) &lt; ele.DistanceTo(currentDestination))
                currentDestination = ele;
        }

        if(wManager.Wow.Bot.Tasks.GoToTask.ToPosition(path.First&lt;Vector3&gt;(), 3.5f, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore))
        {
            wManager.Wow.Bot.Tasks.GoToTask.ToPosition(path.First&lt;Vector3&gt;(), 3.5f, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore);
        }
        

        while(ObjectManager.Me.Position.DistanceTo(currentDestination) &gt; 2 &amp;&amp; !currentDestination.Equals((Vector3)null) &amp;&amp; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore)
        {
            if(ObjectManager.Me.Position.DistanceTo(currentDestination) &lt;= 2)
            {
                break;
            }
            
            MovementManager.Go(path);
            Thread.Sleep(100);
        }

        MovementManager.MoveTo(currentDestination);

        //Logging.Write("Finished takeCustomPathLoop");
        currentDestination = new Vector3(0, 0, 0);
        //Reenable();
        _inProcessing = false;
        return;
    }

    //By Matenia
    private static async void Reenable()
    {
        //Logging.Write("Enter reenable");
        await Task.Run(() =&gt;
        {
            Products.InPause = true;
            if(ObjectManager.Me.WowClass == WoWClass.Hunter)
                Lua.LuaDoString("RotaOn = false");
            MovementManager.StopMove();
            MovementManager.CurrentPath.Clear();
            MovementManager.CurrentPathOrigine.Clear();
            Thread.Sleep(5000);
            Products.InPause = false;
            if(ObjectManager.Me.WowClass == WoWClass.Hunter)
                Lua.LuaDoString("RotaOn = true");
            Logging.Write("[VanillaFlightMaster]: Resetting pathing");
        });
    }

}

public class QuesterSettings
{

    public static void ClassSettings()
    {
        if(ObjectManager.Me.WowClass == WoWClass.Warlock)
        {
            switch(ObjectManager.Me.Level / 10)
            {
                case (1):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (2):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (3):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (4):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 45;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 45;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (5):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 50;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 50;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (6):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 50;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 50;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                default:
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;
            }

            if(wManager.wManagerSetting.CurrentSetting.DrinkName.Length &lt; 2)
            {
                wManager.wManagerSetting.CurrentSetting.DrinkIsSpell = false;
                wManager.wManagerSetting.CurrentSetting.DrinkName = "Refreshing Spring Water";
            }


            if(wManager.wManagerSetting.CurrentSetting.FoodName.Length &lt; 2)
            {
                wManager.wManagerSetting.CurrentSetting.FoodIsSpell = false;
                wManager.wManagerSetting.CurrentSetting.FoodName = "Tough Hunk of Bread";
            }

            Logging.Write("[FNV_Quester]: Using default food / drink settings for Warlock");
        }

        if(ObjectManager.Me.WowClass == WoWClass.Warrior)
        {
            switch(ObjectManager.Me.Level / 10)
            {

                case (1):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;

                case (2):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;

                case (3):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 60;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 70;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;

                case (4):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 80;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;

                case (5):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 100;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 80;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;

                case (6):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 120;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 80;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;

                default:
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;
            }

            if(wManager.wManagerSetting.CurrentSetting.FoodName.Length &lt; 2)
            {
                wManager.wManagerSetting.CurrentSetting.FoodIsSpell = false;
                wManager.wManagerSetting.CurrentSetting.FoodName = "Tough Hunk of Bread";
            }

            Logging.Write("[FNV_Quester]: Using default food / drink settings for Warrior");
        }

        if(ObjectManager.Me.WowClass == WoWClass.Rogue)
        {
            switch(ObjectManager.Me.Level / 10)
            {
                case (1):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;

                case (2):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;

                case (3):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;

                case (4):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 75;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;

                case (5):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 100;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 80;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;

                case (6):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 120;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 80;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;

                default:
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;
            }


            if(wManager.wManagerSetting.CurrentSetting.FoodName.Length &lt; 2)
            {
                wManager.wManagerSetting.CurrentSetting.FoodIsSpell = false;
                wManager.wManagerSetting.CurrentSetting.FoodName = "Tough Hunk of Bread";
            }

            Logging.Write("[FNV_Quester]: Using default food / drink settings for Rogue");
        }

        if(ObjectManager.Me.WowClass == WoWClass.Mage)
        {
            switch(ObjectManager.Me.Level / 10)
            {
                case (1):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 50;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (2):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 50;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (3):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 50;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (4):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 60;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 70;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (5):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 60;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 75;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (6):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 60;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 75;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                default:
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 50;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;
            }

            if(wManager.wManagerSetting.CurrentSetting.DrinkName.Length &lt; 2)
            {
                wManager.wManagerSetting.CurrentSetting.DrinkIsSpell = false;
                wManager.wManagerSetting.CurrentSetting.DrinkName = "Refreshing Spring Water";
            }


            if(wManager.wManagerSetting.CurrentSetting.FoodName.Length &lt; 2)
            {
                wManager.wManagerSetting.CurrentSetting.FoodIsSpell = false;
                wManager.wManagerSetting.CurrentSetting.FoodName = "Tough Hunk of Bread";
            }

            Logging.Write("[FNV_Quester]: Using default food / drink settings for Mage");
        }

        if(ObjectManager.Me.WowClass == WoWClass.Druid)
        {
            switch(ObjectManager.Me.Level / 10)
            {
                case (1):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (2):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (3):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (4):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 45;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (5):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 50;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (6):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                default:
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;
            }

            if(wManager.wManagerSetting.CurrentSetting.DrinkName.Length &lt; 2)
            {
                wManager.wManagerSetting.CurrentSetting.DrinkIsSpell = false;
                wManager.wManagerSetting.CurrentSetting.DrinkName = "Refreshing Spring Water";
            }

            if(wManager.wManagerSetting.CurrentSetting.FoodName.Length &lt; 2)
            {
                wManager.wManagerSetting.CurrentSetting.FoodName = "Healing Touch";
                wManager.wManagerSetting.CurrentSetting.FoodIsSpell = true;
            }

            Logging.Write("[FNV_Quester]: Using default food / drink settings for Druid");
        }

        if(ObjectManager.Me.WowClass == WoWClass.Paladin)
        {

            switch(ObjectManager.Me.Level / 10)
            {
                case (1):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (2):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (3):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 60;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (4):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 45;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (5):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 50;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (6):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 100;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 55;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                default:
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;
            }

            if(wManager.wManagerSetting.CurrentSetting.DrinkName.Length &lt; 2)
            {
                wManager.wManagerSetting.CurrentSetting.DrinkIsSpell = false;
                wManager.wManagerSetting.CurrentSetting.DrinkName = "Refreshing Spring Water";
            }

            if(wManager.wManagerSetting.CurrentSetting.FoodName.Length &lt; 2)
            {
                wManager.wManagerSetting.CurrentSetting.FoodName = "Holy Light";
                wManager.wManagerSetting.CurrentSetting.FoodIsSpell = true;
            }


            Logging.Write("[FNV_Quester]: Using default food / drink settings for Paladin");
        }

        if(ObjectManager.Me.WowClass == WoWClass.Hunter)
        {
            switch(ObjectManager.Me.Level / 10)
            {
                case (1):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    Lua.LuaDoString("DEFAULT_CHAT_FRAME:AddMessage('[FNV_Quester]: Do not forget that wRobot counts empty bag slots of ammo bags as free bag space!')");
                    break;

                case (2):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (3):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (4):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 60;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 60;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (5):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (6):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                default:
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    Lua.LuaDoString("DEFAULT_CHAT_FRAME:AddMessage('[FNV_Quester]: Do not forget that wRobot counts empty bag slots of ammo bags as free bag space!')");
                    break;
            }

            if(wManager.wManagerSetting.CurrentSetting.DrinkName.Length &lt; 2)
            {
                wManager.wManagerSetting.CurrentSetting.DrinkIsSpell = false;
                wManager.wManagerSetting.CurrentSetting.DrinkName = "Refreshing Spring Water";
            }

            if(wManager.wManagerSetting.CurrentSetting.FoodName.Length &lt; 2)
            {
                wManager.wManagerSetting.CurrentSetting.FoodIsSpell = false;
                wManager.wManagerSetting.CurrentSetting.FoodName = "Tough Hunk of Bread";
            }

            Logging.Write("[FNV_Quester]: Using default food / drink settings for Hunter");

        }
    }

    public static void SettingsEasternKingdoms()
    {
        //Eastern Kingdoms only
        wManager.wManagerSetting.CurrentSetting.TrainNewSkills = true;

        wManager.wManagerSetting.CurrentSetting.DontStartFighting = false;
        wManager.wManagerSetting.CurrentSetting.DetectNodesStuck = true;
        wManager.wManagerSetting.CurrentSetting.CanAttackUnitsAlreadyInFight = false;
        wManager.wManagerSetting.CurrentSetting.AvoidBlacklistedZonesPathFinder = true;
        wManager.wManagerSetting.CurrentSetting.AttackElite = false;
        wManager.wManagerSetting.CurrentSetting.AttackBeforeBeingAttacked = true;
        wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = true;
        wManager.wManagerSetting.CurrentSetting.FlightMasterTaxiUse = false;
        wManager.wManagerSetting.CurrentSetting.IgnoreFightWhenInMove = false;

        wManager.wManagerSetting.CurrentSetting.Repair = true;
        wManager.wManagerSetting.CurrentSetting.SellGray = true;
        wManager.wManagerSetting.CurrentSetting.SellGreen = true;
        wManager.wManagerSetting.CurrentSetting.Selling = true;
        wManager.wManagerSetting.CurrentSetting.SellWhite = true;
        wManager.wManagerSetting.CurrentSetting.MinFreeBagSlotsToGoToTown = 4;

        wManager.wManagerSetting.CurrentSetting.SearchRadius = 100;
        wManager.wManagerSetting.CurrentSetting.MaxUnitsNear = 100;

        wManager.wManagerSetting.CurrentSetting.WallDistancePathFinder = 2;
        wManager.wManagerSetting.CurrentSetting.AddToNpcDb = false;
        wManager.wManagerSetting.CurrentSetting.BlackListIfNotCompletePath = false;
        wManager.wManagerSetting.CurrentSetting.UseCTM = true;
        wManager.wManagerSetting.CurrentSetting.UseLuaToMove = true;

        wManager.wManagerSetting.CurrentSetting.NpcScanAuctioneer = false;
        wManager.wManagerSetting.CurrentSetting.NpcScanMailboxes = false;
        wManager.wManagerSetting.CurrentSetting.NpcScanRepair = false;
        wManager.wManagerSetting.CurrentSetting.NpcScanVendor = false;

        wManager.wManagerSetting.CurrentSetting.HarvestHerbs = false;
        wManager.wManagerSetting.CurrentSetting.HarvestMinerals = false;

        wManager.wManagerSetting.CurrentSetting.AvoidBlacklistedZonesPathFinder = true;
        wManager.wManagerSetting.CurrentSetting.AvoidWallWithRays = true;
        wManager.wManagerSetting.CurrentSetting.BlackListTrainingDummy = true;
        wManager.wManagerSetting.CurrentSetting.BlackListZoneWhereDead = false;
        wManager.wManagerSetting.CurrentSetting.CalcuCombatRange = false;
        wManager.wManagerSetting.CurrentSetting.CanAttackUnitsAlreadyInFight = false;
        wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;
        wManager.wManagerSetting.CurrentSetting.DetectNodesStuck = true;
        wManager.wManagerSetting.CurrentSetting.DontStartFighting = false;
        wManager.wManagerSetting.CurrentSetting.FlightMasterDiscoverRange = 50;
        wManager.wManagerSetting.CurrentSetting.FlightMasterTaxiUse = false;
        wManager.wManagerSetting.CurrentSetting.HarvestAvoidPlayersRadius = 1;
        wManager.wManagerSetting.CurrentSetting.HarvestDuringLongMove = false;
        wManager.wManagerSetting.CurrentSetting.HarvestTimber = false;
        wManager.wManagerSetting.CurrentSetting.HelpingGroupMembers = true;
        wManager.wManagerSetting.CurrentSetting.IgnoreCombatWithPet = false;
        wManager.wManagerSetting.CurrentSetting.IgnoreFightDuringFarmIfDruidForm = false;
        wManager.wManagerSetting.CurrentSetting.IgnoreFightGoundMount = true;
        wManager.wManagerSetting.CurrentSetting.LootChests = false;
        wManager.wManagerSetting.CurrentSetting.LootMobs = true;
        wManager.wManagerSetting.CurrentSetting.MountDistance = 100;
        wManager.wManagerSetting.CurrentSetting.Relogger = true;
        wManager.wManagerSetting.CurrentSetting.SecurityPauseBotIfNerbyPlayer = false;
        wManager.wManagerSetting.CurrentSetting.RecordChatInLog = true;
        wManager.wManagerSetting.CurrentSetting.SecurityShutdownComputer = false;
        wManager.wManagerSetting.CurrentSetting.UsePathsFinder = true;
        wManager.wManagerSetting.CurrentSetting.UseSpiritHealer = false;
        wManager.wManagerSetting.CurrentSetting.WaitResurrectionSickness = true;
        wManager.wManagerSetting.CurrentSetting.WallDistancePathFinder = 2;

        ClassSettings();

        if(Conditions.ForceIgnoreIsAttacked)
        {
            Logging.Write("[FNV_Quester]: Force ignore attack is enabled, going to disable it...");
            Conditions.ForceIgnoreIsAttacked = false;
        }

         wManager.wManagerSetting.CurrentSetting.Save();
         Thread.Sleep(500);
         wManager.wManagerSetting.CurrentSetting.Save();

        wManager.Wow.Forms.UserControlTabGeneralSettings.ReloadGeneralSettings();

        Logging.Write("[FNV_Quester]: Applied default settings for Eastern Kingdoms");

        return;
    }

    public static void SettingsKalimdor()
    {
        //Kalimdor only
        wManager.wManagerSetting.CurrentSetting.TrainNewSkills = false;

        wManager.wManagerSetting.CurrentSetting.DontStartFighting = false;
        wManager.wManagerSetting.CurrentSetting.DetectNodesStuck = true;
        wManager.wManagerSetting.CurrentSetting.CanAttackUnitsAlreadyInFight = false;
        wManager.wManagerSetting.CurrentSetting.AvoidBlacklistedZonesPathFinder = true;
        wManager.wManagerSetting.CurrentSetting.AttackElite = false;
        wManager.wManagerSetting.CurrentSetting.AttackBeforeBeingAttacked = true;
        wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = true;
        wManager.wManagerSetting.CurrentSetting.FlightMasterTaxiUse = false;
        wManager.wManagerSetting.CurrentSetting.IgnoreFightWhenInMove = false;

        wManager.wManagerSetting.CurrentSetting.Repair = true;
        wManager.wManagerSetting.CurrentSetting.SellGray = true;
        wManager.wManagerSetting.CurrentSetting.SellGreen = true;
        wManager.wManagerSetting.CurrentSetting.Selling = true;
        wManager.wManagerSetting.CurrentSetting.SellWhite = true;
        wManager.wManagerSetting.CurrentSetting.MinFreeBagSlotsToGoToTown = 4;

        wManager.wManagerSetting.CurrentSetting.SearchRadius = 100;
        wManager.wManagerSetting.CurrentSetting.MaxUnitsNear = 100;

        wManager.wManagerSetting.CurrentSetting.WallDistancePathFinder = 2;
        wManager.wManagerSetting.CurrentSetting.AddToNpcDb = false;
        wManager.wManagerSetting.CurrentSetting.BlackListIfNotCompletePath = false;
        wManager.wManagerSetting.CurrentSetting.UseCTM = true;
        wManager.wManagerSetting.CurrentSetting.UseLuaToMove = true;

        wManager.wManagerSetting.CurrentSetting.NpcScanAuctioneer = false;
        wManager.wManagerSetting.CurrentSetting.NpcScanMailboxes = false;
        wManager.wManagerSetting.CurrentSetting.NpcScanRepair = false;
        wManager.wManagerSetting.CurrentSetting.NpcScanVendor = false;

        wManager.wManagerSetting.CurrentSetting.HarvestHerbs = false;
        wManager.wManagerSetting.CurrentSetting.HarvestMinerals = false;

        wManager.wManagerSetting.CurrentSetting.AvoidBlacklistedZonesPathFinder = true;
        wManager.wManagerSetting.CurrentSetting.AvoidWallWithRays = true;
        wManager.wManagerSetting.CurrentSetting.BlackListTrainingDummy = true;
        wManager.wManagerSetting.CurrentSetting.BlackListZoneWhereDead = false;
        wManager.wManagerSetting.CurrentSetting.CalcuCombatRange = false;
        wManager.wManagerSetting.CurrentSetting.CanAttackUnitsAlreadyInFight = false;
        wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;
        wManager.wManagerSetting.CurrentSetting.DetectNodesStuck = true;
        wManager.wManagerSetting.CurrentSetting.DontStartFighting = false;
        wManager.wManagerSetting.CurrentSetting.FlightMasterDiscoverRange = 50;
        wManager.wManagerSetting.CurrentSetting.FlightMasterTaxiUse = false;
        wManager.wManagerSetting.CurrentSetting.HarvestAvoidPlayersRadius = 1;
        wManager.wManagerSetting.CurrentSetting.HarvestDuringLongMove = false;
        wManager.wManagerSetting.CurrentSetting.HarvestTimber = false;
        wManager.wManagerSetting.CurrentSetting.HelpingGroupMembers = true;
        wManager.wManagerSetting.CurrentSetting.IgnoreCombatWithPet = false;
        wManager.wManagerSetting.CurrentSetting.IgnoreFightDuringFarmIfDruidForm = false;
        wManager.wManagerSetting.CurrentSetting.IgnoreFightGoundMount = true;
        wManager.wManagerSetting.CurrentSetting.LootChests = false;
        wManager.wManagerSetting.CurrentSetting.LootMobs = true;
        wManager.wManagerSetting.CurrentSetting.MountDistance = 100;
        wManager.wManagerSetting.CurrentSetting.Relogger = true;
        wManager.wManagerSetting.CurrentSetting.SecurityPauseBotIfNerbyPlayer = false;
        wManager.wManagerSetting.CurrentSetting.RecordChatInLog = true;
        wManager.wManagerSetting.CurrentSetting.SecurityShutdownComputer = false;
        wManager.wManagerSetting.CurrentSetting.UsePathsFinder = true;
        wManager.wManagerSetting.CurrentSetting.UseSpiritHealer = false;
        wManager.wManagerSetting.CurrentSetting.WaitResurrectionSickness = true;
        wManager.wManagerSetting.CurrentSetting.WallDistancePathFinder = 2;

        ClassSettings();

        if(Conditions.ForceIgnoreIsAttacked)
        {
            Logging.Write("[FNV_Quester]: Force ignore attack is enabled, going to disable it...");
            Conditions.ForceIgnoreIsAttacked = false;
        }

         wManager.wManagerSetting.CurrentSetting.Save();
         Thread.Sleep(500);
         wManager.wManagerSetting.CurrentSetting.Save();

        wManager.Wow.Forms.UserControlTabGeneralSettings.ReloadGeneralSettings();

        Logging.Write("[FNV_Quester]: Applied default settings for Kalimdor");

        return;
    }

}


public class Blackspots
{
   

    public static void StartThread()
    {

    Thread BlackspotValidation = new Thread(() =&gt;
    {
        Logging.Write("[FNV_Quester]: Blackspot validation started");
        Dictionary&lt;Vector3, float&gt; blackspots = new Dictionary&lt;Vector3, float&gt;();
        bool _isStarted = false;

        string profileName = "FNV_V2\\#0 START_FNVLauncher_V2.xml";
        string currentProfileName = wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName;
        int counter = 0;

        if(!_isStarted)
        {
            _isStarted = true;

            while(wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName.Equals(profileName) &amp;&amp; Conditions.ProductIsStarted)
            {
                Thread.Sleep(1000);
            }

            while(Conditions.ProductIsStarted || Conditions.ProductInPause)
            {

                if(wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName.Equals(profileName))
                    break;

                if(counter &gt; 300)
                {
                    Logging.Write("[FNV_Quester]: Clear blacklist of current product session");
                    wManager.wManagerSetting.ClearBlacklistOfCurrentProductSession();
                    counter = 0;
                }

                if(wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported)
                    wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;

                if(!wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName.Equals(currentProfileName))
                {
                    Logging.Write("[FNV_Quester]: Profile has been changed. Reset current blackspots and save blackspots of loaded profile...");
                    currentProfileName = wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName;

                    blackspots.Clear();

                    foreach(var temp in wManager.wManagerSetting.GetListZoneBlackListed())
                    {
                        blackspots.Add(temp.GetPosition(), temp.Radius);
                    }
                }

                if(blackspots.Count &gt; wManager.wManagerSetting.GetListZoneBlackListed().Count)
                {
                    Logging.Write("[FNV_Quester]: Reaply default blackspots");
                    try
                    {
                        foreach(var temp in blackspots)
                        {
                            if (!wManager.wManagerSetting.GetListZoneBlackListed().Any(b =&gt; b.GetPosition().DistanceTo(temp.Key) &lt; 0.1 &amp;&amp; System.Math.Abs(b.Radius - temp.Value) &lt; 0.1))
                                wManager.wManagerSetting.AddBlackListZone(temp.Key, temp.Value, true);
                        }
                    }
                    catch(Exception e)
                    {
                    }
                }

                if(wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName.Equals(profileName))
                    break;

                counter++;
                Thread.Sleep(1000);
            }
        }
        _isStarted = false;
        Logging.Write("[FNV_Quester]: Blackspot validation disposed");

    });

        BlackspotValidation.Start();
    }
}

public class ProfileRestarter
{
    private static bool _IsAfk = false;
    private static Vector3 afkPosition = (Vector3)null;
    private static int timer = 0;
    private static bool _isSubscribed = false;
    private static void WatchForEvents()
    {
        if(!_isSubscribed)
        {
            _isSubscribed = true;

            EventsLuaWithArgs.OnEventsLuaWithArgs += (LuaEventsId id, List&lt;string&gt; args) =&gt;
            {
                if(id == wManager.Wow.Enums.LuaEventsId.CHAT_MSG_SYSTEM &amp;&amp; Conditions.ProductIsStartedNotInPause)
                {

                    if(args.FirstOrDefault().Contains("You are now AFK"))
                    {
                        _IsAfk = true;
                        timer = 0;
                        afkPosition = ObjectManager.Me.Position;
                    }
                }
            };
        }
    }

    public static void StartProfileRestarter()
    {

        Thread ProfileRestarterThread = new Thread(() =&gt;
        {
            Logging.Write("[FNV_Quester]: Profile Restarter initialized");

            string profileName = "FNV_V2\\#0 START_FNVLauncher_V2.xml";
            string currentProfileName = wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName;


            while((wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName.Equals(profileName) || !ObjectManager.Me.GetMove) &amp;&amp; Conditions.ProductIsStarted)
            {
                Thread.Sleep(1000);
            }

            if(!_isSubscribed)
            {
                Thread.Sleep(Usefuls.Latency + 500);
                WatchForEvents();
            }

            while(Conditions.ProductIsStarted || Conditions.ProductInPause)
            {

                if(wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName.Equals(profileName))
                    break;

                while(_IsAfk &amp;&amp; timer &lt; 600 &amp;&amp; !wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName.Equals(profileName))
                {
                    Thread.Sleep(1000);
                    timer++;
                }

                if(_IsAfk &amp;&amp; timer &gt;= 600 &amp;&amp; ObjectManager.Me.Position.DistanceTo(afkPosition) &lt; 25)
                {
                    Logging.Write("[FNV_Quester]: Bot seems to stopped / went AFK for too long. Restart of profile in process...");
                    wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName = profileName;
                    robotManager.Products.Products.ProductRestart();
                    break;
                }

                timer = 0;
                _IsAfk = false;
                Thread.Sleep(10000);
            }

            Logging.Write("[FNV_Quester]: Profile Restarter disposed");

        });

        ProfileRestarterThread.Start();
    }
}


class test
{


    public static void testen()
    {

    }
}
    </Script>
  <OffMeshConnections />
  <BlacklistNpc />
  <BlacklistNpcType />
  <Blackspots>
    <Blackspot X="-5794.358" Y="-799.04425" Z="397.5827" Radius="35" Continent="None" Comment="" />
    <Blackspot X="-5331.89453" Y="-233.271927" Z="440.3644" Radius="30" Continent="None" Comment="" />
    <Blackspot X="-5026.133" Y="-203.9557" Z="444.771027" Radius="25" Continent="None" Comment="" />
    <Blackspot X="-5465.857" Y="-141.215622" Z="413.437378" Radius="35" Continent="None" Comment="" />
    <Blackspot X="-5181.204" Y="627.980652" Z="399.479767" Radius="35" Continent="None" Comment="" />
    <Blackspot X="-5311.13037" Y="602.113" Z="390.544952" Radius="15" Continent="None" Comment="" />
    <Blackspot X="-5336.36865" Y="561.5826" Z="395.7264" Radius="15" Continent="None" Comment="" />
    <Blackspot X="-5564.5874" Y="520.957336" Z="381.5234" Radius="35" Continent="None" Comment="" />
    <Blackspot X="-5548.208" Y="596.4897" Z="395.935516" Radius="50" Continent="None" Comment="" />
    <Blackspot X="-5810.096" Y="-1574.08325" Z="358.4762" Radius="75" Continent="None" Comment="" />
    <Blackspot X="-5871.79443" Y="-2013.65784" Z="401.1163" Radius="75" Continent="None" Comment="" />
    <Blackspot X="-5424.27441" Y="-1254.018" Z="445.653625" Radius="35" Continent="None" Comment="" />
    <Blackspot X="-5798.66748" Y="-938.6562" Z="393.6898" Radius="40" Continent="None" Comment="" />
  </Blackspots>
</EasyQuestProfile>