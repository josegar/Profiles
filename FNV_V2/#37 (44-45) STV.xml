<?xml version="1.0" encoding="utf-8"?>
<EasyQuestProfile xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <QuestsSorted>
    <QuestsSorted Action="RunCode" NameClass="NpcDB.AcceptOnlyProfileNpc = true;&#xD;&#xA;wManager.wManagerSetting.CurrentSetting.WallDistancePathFinder = 2;&#xD;&#xA;wManager.wManagerSetting.CurrentSetting.AttackBeforeBeingAttacked = true;&#xD;&#xA;wManager.wManagerSetting.CurrentSetting.TrainNewSkills = true;&#xD;&#xA;&#xD;&#xA;FNVQuesterAuthSettings.Load();&#xD;&#xA;        if (FNVQuesterAuthSettings.CurrentSetting.TransactionId == null)&#xD;&#xA;        {&#xD;&#xA;            FNVQuesterAuthSettings.CurrentSetting.ToForm();&#xD;&#xA;        }&#xD;&#xA;        FNVQuesterAuthSettings.CurrentSetting.Save();&#xD;&#xA;        new Authentication(FNVQuesterAuthSettings.CurrentSetting.TransactionId, &quot;e8b609dcf76e&quot;); &#xD;&#xA;        ControlAuthentication.SetControl(5);&#xD;&#xA;&#xD;&#xA;ProgressSettings.Initialize();&#xD;&#xA;wManager.Wow.Helpers.Quest.QuesterCurrentContext.CurrentStep = ProgressSettings.CurrentSettings.stranglethornFünf - 1;&#xD;&#xA;&#xD;&#xA;Logging.Write(&quot;[FNV_Quester]: Loading current Quester step &quot; + (ProgressSettings.CurrentSettings.stranglethornFünf));&#xD;&#xA;&#xD;&#xA;Thread p = new Thread(() =&gt;&#xD;&#xA;{    &#xD;&#xA;ProgressSettings.inProgress = true;&#xD;&#xA;Logging.Write(&quot;[FNV_Quester]: Progress saver initialized&quot;);&#xD;&#xA; &#xD;&#xA; while(robotManager.Products.Products.IsStarted)&#xD;&#xA; {&#xD;&#xA;if(!ProgressSettings.inProgress)&#xD;&#xA;{&#xD;&#xA;ProgressSettings.Dispose();&#xD;&#xA;Logging.Write(&quot;[FNV_Quester]: Progress saver disposed&quot;);&#xD;&#xA;break;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;  if (Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause)&#xD;&#xA;  {&#xD;&#xA; if(ProgressSettings.CurrentSettings.stranglethornFünf &lt; wManager.Wow.Helpers.Quest.QuesterCurrentContext.CurrentStep)&#xD;&#xA;{&#xD;&#xA;ProgressSettings.CurrentSettings.stranglethornFünf = wManager.Wow.Helpers.Quest.QuesterCurrentContext.CurrentStep;&#xD;&#xA;ProgressSettings.CurrentSettings.Save();&#xD;&#xA;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;  Thread.Sleep(1000);&#xD;&#xA; }&#xD;&#xA;&#xD;&#xA;});&#xD;&#xA;&#xD;&#xA;p.Start();&#xD;&#xA;&#xD;&#xA;NpcDB.AcceptOnlyProfileNpc = true;&#xD;&#xA;wManager.wManagerSetting.CurrentSetting.AttackBeforeBeingAttacked = false;&#xD;&#xA;QuesterSettings.SettingsEasternKingdoms();&#xD;&#xA;wManager.Wow.Forms.UserControlTabGeneralSettings.ReloadGeneralSettings();" />
    <QuestsSorted Action="Wait" NameClass="1" />
    <QuestsSorted Action="Wait" NameClass="1" />
    <QuestsSorted Action="RunCode" NameClass="wManager.Wow.Forms.UserControlTabGeneralSettings.ReloadGeneralSettings();" />
    <QuestsSorted Action="RunCode" NameClass="FlightMaster.takeTaxi(&quot;Stormwind&quot;, &quot;Stranglethorn&quot;);" />
    <QuestsSorted Action="PickUp" NameClass="SkullsplitterTusks" />
    <QuestsSorted Action="Pulse" NameClass="ROUTEGoToSkullsplitterTusks" />
    <QuestsSorted Action="Pulse" NameClass="SkullsplitterTusks" />
    <QuestsSorted Action="Pulse" NameClass="ROUTESkullsplitterTusksBackToBootyBay" />
    <QuestsSorted Action="TurnIn" NameClass="SkullsplitterTusks" />
    <QuestsSorted Action="PickUp" NameClass="TheBloodsailBuccaneers" />
    <QuestsSorted Action="TurnIn" NameClass="AnsiremsKey" />
    <QuestsSorted Action="PickUp" NameClass="PrettyBoyDuncan" />
    <QuestsSorted Action="Pulse" NameClass="PrettyBoyDuncan" />
    <QuestsSorted Action="Pulse" NameClass="ROUTEGoToBloodsailDocuments" />
    <QuestsSorted Action="TurnIn" NameClass="TheBloodsailBuccaneers" />
    <QuestsSorted Action="PickUp" NameClass="TheBloodsailBuccaneers2" />
    <QuestsSorted Action="Pulse" NameClass="ROUTEBloodsailDocumentsBack" />
    <QuestsSorted Action="TurnIn" NameClass="TheBloodsailBuccaneers2" />
    <QuestsSorted Action="PickUp" NameClass="TheBloodsailBuccaneers3" />
    <QuestsSorted Action="TurnIn" NameClass="TheBloodsailBuccaneers3" />
    <QuestsSorted Action="TurnIn" NameClass="PrettyBoyDuncan" />
    <QuestsSorted Action="PickUp" NameClass="ZanzilsSecret" />
    <QuestsSorted Action="PickUp" NameClass="UptoSnuff" />
    <QuestsSorted Action="PickUp" NameClass="VoodooDues1" />
    <QuestsSorted Action="PickUp" NameClass="KeepAnEyeOut" />
    <QuestsSorted Action="Pulse" NameClass="ROUTEVoodooDuesArena" />
    <QuestsSorted Action="Pulse" NameClass="VoodooDues2" />
    <QuestsSorted Action="Pulse" NameClass="VoodooDues1" />
    <QuestsSorted Action="Pulse" NameClass="ROUTEArenaToChucky" />
    <QuestsSorted Action="Pulse" NameClass="VoodooDues3" />
    <QuestsSorted Action="Pulse" NameClass="ZanzilsSecret" />
    <QuestsSorted Action="Pulse" NameClass="ROUTEChuckyToBloodsails" />
    <QuestsSorted Action="Pulse" NameClass="UptoSnuff" />
    <QuestsSorted Action="Pulse" NameClass="KeepAnEyeOut" />
    <QuestsSorted Action="Pulse" NameClass="ROUTEBooldsailsBackToBooty" />
    <QuestsSorted Action="TurnIn" NameClass="KeepAnEyeOut" />
    <QuestsSorted Action="TurnIn" NameClass="VoodooDues1" />
    <QuestsSorted Action="TurnIn" NameClass="ZanzilsSecret" />
    <QuestsSorted Action="TurnIn" NameClass="UptoSnuff" />
    <QuestsSorted Action="PickUp" NameClass="AkirisbytheBundle" />
    <QuestsSorted Action="Pulse" NameClass="ROUTEBootyToAkiris" />
    <QuestsSorted Action="Pulse" NameClass="AkirisbytheBundle" />
    <QuestsSorted Action="Pulse" NameClass="ROUTEAkirisBackToBooty" />
    <QuestsSorted Action="TurnIn" NameClass="AkirisbytheBundle" />
    <QuestsSorted Action="Pulse" NameClass="ROUTEBootyToFlightMaster" />
    <QuestsSorted Action="RunCode" NameClass="FlightMaster.takeTaxi(&quot;Stranglethorn&quot;, &quot;Stormwind&quot;);" />
    <QuestsSorted Action="RunCode" NameClass="abandonQuest.abandon(&quot;The Curse of the Tides&quot;);" />
    <QuestsSorted Action="RunCode" NameClass="ProgressSettings.Dispose();&#xD;&#xA;ProgressSettings.inProgress = false;&#xD;&#xA;&#xD;&#xA;FNVSettings.Initialize();&#xD;&#xA;FNVSettings.CurrentSettings.stranglethornFünf = true;&#xD;&#xA;FNVSettings.Dispose();" />
    <QuestsSorted Action="LoadProfile" NameClass="FNV_V2\#0 START_FNVLauncher_V2.xml" />
  </QuestsSorted>
  <NpcQuest>
    <NPCQuest Id="2494" Name="Privateer Bloads" GameObject="false">
      <PickUpQuests>
        <int>617</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>617</int>
      </TurnInQuests>
      <Position X="-14418.2" Y="513.462" Z="4.95955" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="2490" Name="First Mate Crazz" GameObject="false">
      <PickUpQuests>
        <int>595</int>
        <int>599</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>597</int>
      </TurnInQuests>
      <Position X="-14411.1" Y="427.967" Z="8.872122" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="2083" Name="Bloodsail Correspondence" GameObject="true">
      <PickUpQuests>
        <int>597</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>595</int>
      </TurnInQuests>
      <Position X="-14126.1" Y="481.0784" Z="1.229288" />
    </NPCQuest>
    <NPCQuest Id="2487" Name="Fleet Master Seahorn" GameObject="false">
      <PickUpQuests>
        <int>604</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>599</int>
        <int>604</int>
      </TurnInQuests>
      <Position X="-14444.8" Y="486.81" Z="28.72204" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="2493" Name="Dizzy One-Eye" GameObject="false">
      <PickUpQuests>
        <int>576</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>576</int>
      </TurnInQuests>
      <Position X="-14397.6" Y="396.286" Z="22.63972" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="2501" Name="&quot;Sea Wolf&quot; MacKinley" GameObject="false">
      <PickUpQuests>
        <int>606</int>
        <int>609</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>609</int>
        <int>607</int>
      </TurnInQuests>
      <Position X="-14447.4" Y="448.001" Z="15.63506" />
    </NPCQuest>
    <NPCQuest Id="2502" Name="&quot;Shaky&quot; Phillipe" GameObject="false">
      <PickUpQuests>
        <int>607</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>606</int>
      </TurnInQuests>
      <Position X="-14299.4" Y="504.577" Z="8.971" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="2498" Name="Crank Fizzlebub" GameObject="false">
      <PickUpQuests>
        <int>621</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>621</int>
      </TurnInQuests>
      <Position X="-14453.4" Y="490.262" Z="15.12632" />
    </NPCQuest>
    <NPCQuest Id="2488" Name="Deeg" GameObject="false">
      <PickUpQuests>
        <int>587</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>587</int>
      </TurnInQuests>
      <Position X="-14459.2" Y="503" Z="26.27392" />
    </NPCQuest>
    <NPCQuest Id="737" Name="Kebok" GameObject="false">
      <PickUpQuests>
        <int>209</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>209</int>
      </TurnInQuests>
      <Position X="-14449.8" Y="497.925" Z="26.28407" />
    </NPCQuest>
    <NPCQuest Id="2542" Name="Catelyn the Blade" GameObject="false">
      <PickUpQuests>
        <int>610</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>603</int>
        <int>610</int>
      </TurnInQuests>
      <Position X="-14467" Y="479.833" Z="20.38247" />
    </NPCQuest>
  </NpcQuest>
  <Npc>
    <Npc>
      <Position X="-14379.1" Y="412.672" Z="6.628966" />
      <Entry>2482</Entry>
      <Name>Zarena Cromwind</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>Repair</Type>
      <ContinentId>Azeroth</ContinentId>
    </Npc>
    <Npc>
      <Position X="-14457.7" Y="495.348" Z="15.12651" />
      <Entry>6807</Entry>
      <Name>Innkeeper Skindle</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>Vendor</Type>
      <ContinentId>Azeroth</ContinentId>
    </Npc>
  </Npc>
  <EasyQuests>
    <EasyQuest>
      <Name>Akiris by the Bundle</Name>
      <QuestId>
        <int>617</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="-13878.91" Y="652.0649" Z="16.19452" />
          <Vector3 X="-13701.77" Y="602.0822" Z="11.46202" />
          <Vector3 X="-13733.06" Y="536.9597" Z="42.69122" />
          <Vector3 X="-13849.12" Y="575.3732" Z="45.57581" />
          <Vector3 X="-13735.86" Y="496.9335" Z="57.25402" />
          <Vector3 X="-13842.68" Y="495.1484" Z="88.32509" />
          <Vector3 X="-13796.31" Y="442.5676" Z="92.11918" />
          <Vector3 X="-13904.11" Y="417.4921" Z="98.62872" />
        </HotSpots>
        <EntryTarget>
          <int>1907</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>true</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Keep An Eye Out</Name>
      <QuestId>
        <int>576</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="-14674.51" Y="419.2348" Z="3.274075" />
          <Vector3 X="-14637.27" Y="326.5349" Z="3.492242" />
          <Vector3 X="-14551.94" Y="177.5345" Z="2.792726" />
          <Vector3 X="-14456.51" Y="119.6643" Z="4.898944" />
          <Vector3 X="-14314.62" Y="111.463" Z="4.781827" />
          <Vector3 X="-14698.7" Y="503.829" Z="2.271737" />
          <Vector3 X="-14721.93" Y="532.1109" Z="2.678781" />
        </HotSpots>
        <EntryTarget>
          <int>1563</int>
          <int>1564</int>
          <int>1561</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>true</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Return to MacKinley</Name>
      <QuestId>
        <int>607</int>
      </QuestId>
      <QuestType>None</QuestType>
      <QuestClass />
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTEAkirisBackToBooty</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="-13848.32" Y="476.3867" Z="93.46673" />
          <Vector3 X="-13846.42" Y="489.2309" Z="90.01227" />
          <Vector3 X="-13835.68" Y="493.3861" Z="86.42036" />
          <Vector3 X="-13811.92" Y="498.576" Z="79.27036" />
          <Vector3 X="-13787.43" Y="498.0704" Z="72.29646" />
          <Vector3 X="-13762.93" Y="497.5622" Z="65.4845" />
          <Vector3 X="-13738.44" Y="496.9938" Z="58.0737" />
          <Vector3 X="-13713.96" Y="496.1188" Z="49.36793" />
          <Vector3 X="-13689.86" Y="492.1735" Z="38.62431" />
          <Vector3 X="-13679.4" Y="484.691" Z="38.60965" />
          <Vector3 X="-13667.09" Y="467.1077" Z="37.14994" />
          <Vector3 X="-13657" Y="445.1011" Z="36.11835" />
          <Vector3 X="-13653.69" Y="420.8971" Z="34.88441" />
          <Vector3 X="-13645.42" Y="397.8482" Z="34.23568" />
          <Vector3 X="-13635.95" Y="375.2527" Z="38.12676" />
          <Vector3 X="-13631.26" Y="364.7892" Z="39.82197" />
          <Vector3 X="-13626.07" Y="344.2358" Z="41.81959" />
          <Vector3 X="-13630.78" Y="330.6655" Z="42.84807" />
          <Vector3 X="-13643.59" Y="309.7809" Z="42.65308" />
          <Vector3 X="-13657.04" Y="289.3055" Z="39.81089" />
          <Vector3 X="-13671.57" Y="269.5986" Z="35.02219" />
          <Vector3 X="-13677.47" Y="261.6126" Z="33.01754" />
          <Vector3 X="-13689.88" Y="240.5031" Z="28.12069" />
          <Vector3 X="-13705.1" Y="220.3805" Z="23.39908" />
          <Vector3 X="-13721.12" Y="202.8241" Z="17.91749" />
          <Vector3 X="-13739.25" Y="186.4066" Z="18.55499" />
          <Vector3 X="-13754.58" Y="177.8686" Z="23.81455" />
          <Vector3 X="-13758.48" Y="180.3246" Z="23.78312" />
          <Vector3 X="-13777.28" Y="195.922" Z="22.03852" />
          <Vector3 X="-13796.3" Y="211.3629" Z="20.12893" />
          <Vector3 X="-13816.83" Y="227.6395" Z="18.84067" />
          <Vector3 X="-13838.31" Y="242.5304" Z="18.60635" />
          <Vector3 X="-13864.27" Y="245.7535" Z="18.35964" />
          <Vector3 X="-13889.69" Y="252.2355" Z="18.24214" />
          <Vector3 X="-13911.26" Y="266.2231" Z="18.35382" />
          <Vector3 X="-13931" Y="282.9161" Z="18.59092" />
          <Vector3 X="-13956.97" Y="283.4632" Z="18.60788" />
          <Vector3 X="-13983" Y="280.042" Z="18.63511" />
          <Vector3 X="-14009.02" Y="276.6145" Z="18.63324" />
          <Vector3 X="-14034.25" Y="269.5657" Z="18.5953" />
          <Vector3 X="-14059.93" Y="264.1348" Z="18.45208" />
          <Vector3 X="-14085.72" Y="259.2676" Z="17.11903" />
          <Vector3 X="-14111.58" Y="254.7795" Z="15.97768" />
          <Vector3 X="-14137.44" Y="250.2375" Z="14.80349" />
          <Vector3 X="-14163.29" Y="245.6956" Z="15.37979" />
          <Vector3 X="-14189.14" Y="241.1537" Z="15.45757" />
          <Vector3 X="-14214.14" Y="245.2531" Z="19.90465" />
          <Vector3 X="-14234.32" Y="261.4522" Z="24.60846" />
          <Vector3 X="-14241.77" Y="286.1241" Z="27.16125" />
          <Vector3 X="-14245.8" Y="312.8391" Z="26.12279" />
          <Vector3 X="-14251.11" Y="330.8076" Z="24.26121" />
          <Vector3 X="-14263.6" Y="343.8299" Z="29.52244" />
          <Vector3 X="-14270.9" Y="350.3908" Z="32.71332" />
          <Vector3 X="-14273.99" Y="360.4237" Z="33.19968" />
          <Vector3 X="-14277.13" Y="375.3375" Z="34.79581" />
          <Vector3 X="-14275.69" Y="392.7763" Z="36.74805" />
          <Vector3 X="-14273.1" Y="410.0583" Z="37.08178" />
          <Vector3 X="-14279.21" Y="425.8701" Z="35.37545" />
          <Vector3 X="-14287.83" Y="431.4041" Z="33.27431" />
          <Vector3 X="-14298.74" Y="436.5006" Z="31.41832" />
          <Vector3 X="-14315.41" Y="444.6677" Z="23.28455" />
          <Vector3 X="-14319.74" Y="450.1135" Z="23.33361" />
          <Vector3 X="-14320.68" Y="454.3841" Z="23.48968" />
          <Vector3 X="-14316.79" Y="468.0517" Z="18.47577" />
          <Vector3 X="-14310.45" Y="484.327" Z="14.18797" />
          <Vector3 X="-14302.29" Y="499.8066" Z="10.15733" />
          <Vector3 X="-14302.71" Y="510.5078" Z="8.692237" />
          <Vector3 X="-14306.02" Y="507.649" Z="8.65158" />
          <Vector3 X="-14313.26" Y="494.1593" Z="8.594985" />
          <Vector3 X="-14320.87" Y="478.3996" Z="8.557796" />
          <Vector3 X="-14330.23" Y="463.6715" Z="8.055314" />
          <Vector3 X="-14340.65" Y="449.6238" Z="7.587078" />
          <Vector3 X="-14354.02" Y="438.4297" Z="7.389704" />
          <Vector3 X="-14369.77" Y="430.8259" Z="7.354514" />
          <Vector3 X="-14386.4" Y="425.4387" Z="7.368645" />
          <Vector3 X="-14403.64" Y="423.5148" Z="8.338777" />
          <Vector3 X="-14407.67" Y="425.9946" Z="8.591537" />
          <Vector3 X="-14419.97" Y="438.437" Z="10.03704" />
          <Vector3 X="-14433.35" Y="449.6108" Z="15.40923" />
          <Vector3 X="-14444.84" Y="462.6417" Z="15.40696" />
          <Vector3 X="-14446.06" Y="470.144" Z="15.28031" />
          <Vector3 X="-14445.6" Y="481.5476" Z="15.13556" />
          <Vector3 X="-14442.19" Y="490.1388" Z="14.53325" />
          <Vector3 X="-14437.74" Y="497.6718" Z="12.79663" />
          <Vector3 X="-14427.41" Y="511.1307" Z="4.947598" />
          <Vector3 X="-14424.12" Y="513.9569" Z="4.959311" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTEArenaToChucky</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="-13384.8" Y="79.11897" Z="24.1659" />
          <Vector3 X="-13407.28" Y="83.07404" Z="24.6278" />
          <Vector3 X="-13434.3" Y="84.80117" Z="25.55803" />
          <Vector3 X="-13444.96" Y="84.70178" Z="26.57231" />
          <Vector3 X="-13458.23" Y="70.27453" Z="26.06021" />
          <Vector3 X="-13468.85" Y="52.74393" Z="29.14696" />
          <Vector3 X="-13472.33" Y="37.65102" Z="31.98687" />
          <Vector3 X="-13485.25" Y="13.91077" Z="35.76003" />
          <Vector3 X="-13498.68" Y="-7.661892" Z="36.55097" />
          <Vector3 X="-13512.66" Y="-26.95108" Z="39.21483" />
          <Vector3 X="-13516.81" Y="-51.16253" Z="39.45477" />
          <Vector3 X="-13519.07" Y="-62.39587" Z="40.50668" />
          <Vector3 X="-13524.33" Y="-83.04955" Z="41.50401" />
          <Vector3 X="-13532.26" Y="-108.0538" Z="44.68063" />
          <Vector3 X="-13535.62" Y="-117.2533" Z="44.90293" />
          <Vector3 X="-13545.63" Y="-142.4246" Z="45.01148" />
          <Vector3 X="-13553.23" Y="-166.6669" Z="40.00356" />
          <Vector3 X="-13562.48" Y="-191.2" Z="35.43459" />
          <Vector3 X="-13574.7" Y="-214.4297" Z="29.39654" />
          <Vector3 X="-13582.6" Y="-228.839" Z="25.70478" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTEBloodsailDocumentsBack</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="-14151.46" Y="437.0496" Z="8.534984" />
          <Vector3 X="-14156.3" Y="430.0069" Z="10.58219" />
          <Vector3 X="-14159.03" Y="426.0196" Z="11.69831" />
          <Vector3 X="-14168.9" Y="411.5729" Z="14.52894" />
          <Vector3 X="-14178.78" Y="397.1263" Z="16.53629" />
          <Vector3 X="-14188.95" Y="382.2462" Z="19.42741" />
          <Vector3 X="-14198.99" Y="368.5607" Z="21.64855" />
          <Vector3 X="-14211.04" Y="355.9446" Z="25.03493" />
          <Vector3 X="-14224.33" Y="344.5638" Z="26.33304" />
          <Vector3 X="-14237.83" Y="333.4516" Z="24.05683" />
          <Vector3 X="-14247.47" Y="332.7364" Z="23.54226" />
          <Vector3 X="-14257.78" Y="339.7417" Z="27.35414" />
          <Vector3 X="-14269.97" Y="352.2991" Z="32.69946" />
          <Vector3 X="-14278.6" Y="367.4266" Z="33.65363" />
          <Vector3 X="-14278.57" Y="384.6444" Z="35.7868" />
          <Vector3 X="-14273.89" Y="402.0481" Z="37.28275" />
          <Vector3 X="-14272.81" Y="418.8381" Z="36.66297" />
          <Vector3 X="-14278.68" Y="427.3023" Z="35.20029" />
          <Vector3 X="-14285.95" Y="431.1375" Z="33.71098" />
          <Vector3 X="-14294.34" Y="434.4142" Z="32.0062" />
          <Vector3 X="-14300.32" Y="437.1507" Z="30.79997" />
          <Vector3 X="-14309.97" Y="441.2716" Z="24.67266" />
          <Vector3 X="-14318.72" Y="447.4008" Z="23.24255" />
          <Vector3 X="-14320.24" Y="453.3793" Z="23.46415" />
          <Vector3 X="-14318.53" Y="464.0163" Z="20.04866" />
          <Vector3 X="-14316.94" Y="468.3338" Z="18.46968" />
          <Vector3 X="-14312.95" Y="478.4003" Z="16.87373" />
          <Vector3 X="-14308.42" Y="487.8705" Z="13.24653" />
          <Vector3 X="-14303.77" Y="497.287" Z="10.81676" />
          <Vector3 X="-14299.41" Y="506.8325" Z="8.968028" />
          <Vector3 X="-14304.9" Y="510.0718" Z="8.662453" />
          <Vector3 X="-14308.67" Y="504.3156" Z="8.621757" />
          <Vector3 X="-14312.84" Y="495.0479" Z="8.595315" />
          <Vector3 X="-14314.71" Y="490.8468" Z="8.587769" />
          <Vector3 X="-14318.05" Y="483.3653" Z="8.570188" />
          <Vector3 X="-14326.57" Y="468.2086" Z="8.245839" />
          <Vector3 X="-14336.62" Y="453.9001" Z="7.731269" />
          <Vector3 X="-14349.21" Y="441.0499" Z="7.433005" />
          <Vector3 X="-14364.27" Y="433.3487" Z="7.359442" />
          <Vector3 X="-14380.43" Y="426.6525" Z="7.36387" />
          <Vector3 X="-14397.39" Y="422.5107" Z="7.809007" />
          <Vector3 X="-14401.76" Y="422.3962" Z="8.223601" />
          <Vector3 X="-14407.38" Y="425.8057" Z="8.567053" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTEBooldsailsBackToBooty</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="-14693.28" Y="400.5881" Z="1.214204" />
          <Vector3 X="-14695.25" Y="387.6408" Z="1.554565" />
          <Vector3 X="-14696.92" Y="376.9752" Z="1.707202" />
          <Vector3 X="-14699.4" Y="361.5139" Z="2.728066" />
          <Vector3 X="-14702.09" Y="344.2224" Z="4.286218" />
          <Vector3 X="-14704.66" Y="326.912" Z="4.560608" />
          <Vector3 X="-14706.9" Y="309.0393" Z="3.493329" />
          <Vector3 X="-14702.46" Y="292.7946" Z="2.450811" />
          <Vector3 X="-14693.04" Y="277.4644" Z="1.922917" />
          <Vector3 X="-14682.66" Y="264.0325" Z="1.013402" />
          <Vector3 X="-14670.98" Y="250.3064" Z="0.3277851" />
          <Vector3 X="-14660.26" Y="237.158" Z="0.2601523" />
          <Vector3 X="-14651.51" Y="222.0102" Z="0.38076" />
          <Vector3 X="-14643.76" Y="206.32" Z="0.1520349" />
          <Vector3 X="-14635.15" Y="190.4986" Z="0.8333122" />
          <Vector3 X="-14622.83" Y="178.9614" Z="1.829731" />
          <Vector3 X="-14607.63" Y="170.307" Z="1.198116" />
          <Vector3 X="-14591.91" Y="162.6416" Z="1.256481" />
          <Vector3 X="-14575.37" Y="156.9426" Z="1.029882" />
          <Vector3 X="-14558.63" Y="151.844" Z="0.2302947" />
          <Vector3 X="-14542.17" Y="144.8726" Z="0.1867758" />
          <Vector3 X="-14529.1" Y="134.0378" Z="0.3617438" />
          <Vector3 X="-14513.75" Y="124.6253" Z="0.2505246" />
          <Vector3 X="-14498.91" Y="116.5867" Z="0.1546677" />
          <Vector3 X="-14488.78" Y="101.7993" Z="-0.1203677" />
          <Vector3 X="-14479.77" Y="87.456" Z="0.6447223" />
          <Vector3 X="-14466.97" Y="75.66682" Z="2.871413" />
          <Vector3 X="-14450.73" Y="69.32067" Z="3.52964" />
          <Vector3 X="-14433.65" Y="65.56033" Z="2.148046" />
          <Vector3 X="-14416.23" Y="63.96811" Z="1.310422" />
          <Vector3 X="-14398.24" Y="64.94138" Z="1.561764" />
          <Vector3 X="-14382.2" Y="70.12003" Z="3.228243" />
          <Vector3 X="-14367.9" Y="81.0365" Z="4.243987" />
          <Vector3 X="-14355.46" Y="92.58195" Z="2.38768" />
          <Vector3 X="-14343.8" Y="106.3108" Z="1.041942" />
          <Vector3 X="-14333.45" Y="119.7596" Z="2.771477" />
          <Vector3 X="-14319" Y="130.4891" Z="6.708116" />
          <Vector3 X="-14304.97" Y="140.0478" Z="8.757009" />
          <Vector3 X="-14291.22" Y="150.7948" Z="8.276914" />
          <Vector3 X="-14278.69" Y="162.9935" Z="10.01739" />
          <Vector3 X="-14266.42" Y="175.4762" Z="8.372198" />
          <Vector3 X="-14252.16" Y="185.5605" Z="8.636417" />
          <Vector3 X="-14237.13" Y="195.4713" Z="8.797441" />
          <Vector3 X="-14223.05" Y="204.9174" Z="9.436512" />
          <Vector3 X="-14215.91" Y="221.3567" Z="13.81684" />
          <Vector3 X="-14217.41" Y="237.653" Z="20.18984" />
          <Vector3 X="-14229.61" Y="250.1564" Z="22.84691" />
          <Vector3 X="-14239.44" Y="264.3735" Z="25.1638" />
          <Vector3 X="-14243.6" Y="281.8954" Z="26.91745" />
          <Vector3 X="-14245.72" Y="298.7345" Z="27.12324" />
          <Vector3 X="-14247.54" Y="316.14" Z="26.00226" />
          <Vector3 X="-14252.67" Y="332.5362" Z="25.7505" />
          <Vector3 X="-14265.25" Y="345.3892" Z="30.31361" />
          <Vector3 X="-14276.15" Y="358.3049" Z="33.13612" />
          <Vector3 X="-14279.05" Y="375.3978" Z="34.73234" />
          <Vector3 X="-14278.89" Y="388.9085" Z="36.21603" />
          <Vector3 X="-14275.44" Y="397.7954" Z="37.15592" />
          <Vector3 X="-14273.21" Y="406.3291" Z="36.98725" />
          <Vector3 X="-14273.21" Y="412.8662" Z="37.10206" />
          <Vector3 X="-14276.86" Y="421.8997" Z="36.02623" />
          <Vector3 X="-14282.89" Y="427.8515" Z="34.55555" />
          <Vector3 X="-14293.78" Y="433.1985" Z="31.96916" />
          <Vector3 X="-14303.1" Y="437.3098" Z="29.50199" />
          <Vector3 X="-14307.89" Y="439.4518" Z="26.25754" />
          <Vector3 X="-14312.07" Y="441.3255" Z="23.28688" />
          <Vector3 X="-14317.03" Y="434.7696" Z="22.73442" />
          <Vector3 X="-14316.42" Y="424.3286" Z="23.21109" />
          <Vector3 X="-14318.5" Y="414.0413" Z="23.66845" />
          <Vector3 X="-14320.29" Y="403.6945" Z="23.95105" />
          <Vector3 X="-14326.43" Y="395.6331" Z="23.38152" />
          <Vector3 X="-14336.01" Y="390.6187" Z="23.25082" />
          <Vector3 X="-14345.13" Y="386.128" Z="23.40388" />
          <Vector3 X="-14355.12" Y="382.0511" Z="23.29605" />
          <Vector3 X="-14365.23" Y="380.8761" Z="23.28959" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTEBootyToAkiris</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="-14423.64" Y="513.2165" Z="4.959841" />
          <Vector3 X="-14410.96" Y="512.1297" Z="3.898484" />
          <Vector3 X="-14400.92" Y="510.4763" Z="0.3197423" />
          <Vector3 X="-14396.45" Y="510.4171" Z="-1.557283" Type="Swimming" />
          <Vector3 X="-14388.51" Y="512.5304" Z="-1.557283" Type="Swimming" />
          <Vector3 X="-14372.06" Y="516.9113" Z="-1.557283" Type="Swimming" />
          <Vector3 X="-14355.58" Y="521.3007" Z="-1.557283" Type="Swimming" />
          <Vector3 X="-14339.93" Y="524.6078" Z="-1.557283" Type="Swimming" />
          <Vector3 X="-14323.19" Y="527.8759" Z="-1.557283" Type="Swimming" />
          <Vector3 X="-14307.49" Y="530.9526" Z="-1.557283" Type="Swimming" />
          <Vector3 X="-14290.75" Y="534.2327" Z="-1.557283" Type="Swimming" />
          <Vector3 X="-14275.05" Y="537.3094" Z="-1.557283" Type="Swimming" />
          <Vector3 X="-14259.93" Y="542.4744" Z="-1.557283" Type="Swimming" />
          <Vector3 X="-14244.19" Y="548.9377" Z="-1.557283" Type="Swimming" />
          <Vector3 X="-14228.86" Y="553.6036" Z="-1.557283" Type="Swimming" />
          <Vector3 X="-14212.48" Y="558.2423" Z="-1.557283" Type="Swimming" />
          <Vector3 X="-14197.23" Y="563.1569" Z="-1.557283" Type="Swimming" />
          <Vector3 X="-14181.71" Y="570.1365" Z="-1.557283" Type="Swimming" />
          <Vector3 X="-14167.06" Y="576.6641" Z="-1.557283" Type="Swimming" />
          <Vector3 X="-14151.37" Y="583.2614" Z="-1.557283" Type="Swimming" />
          <Vector3 X="-14136.6" Y="589.4932" Z="-1.557283" Type="Swimming" />
          <Vector3 X="-14120.93" Y="596.1483" Z="-1.557283" Type="Swimming" />
          <Vector3 X="-14106.17" Y="602.4156" Z="-1.557283" Type="Swimming" />
          <Vector3 X="-14090.5" Y="609.0707" Z="-1.557283" Type="Swimming" />
          <Vector3 X="-14074.81" Y="615.7386" Z="-1.557283" Type="Swimming" />
          <Vector3 X="-14060.08" Y="621.9932" Z="-1.557283" Type="Swimming" />
          <Vector3 X="-14045.32" Y="628.2605" Z="-1.557283" Type="Swimming" />
          <Vector3 X="-14029.65" Y="634.9156" Z="-1.557283" Type="Swimming" />
          <Vector3 X="-14014.9" Y="641.183" Z="-1.557283" Type="Swimming" />
          <Vector3 X="-13999.22" Y="647.827" Z="-1.557283" Type="Swimming" />
          <Vector3 X="-13983.12" Y="653.4207" Z="-1.557283" Type="Swimming" />
          <Vector3 X="-13966.3" Y="657.3191" Z="-0.2192744" />
          <Vector3 X="-13959.48" Y="658.4193" Z="0.8823555" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTEBootyToFlightMaster</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="-14421.44" Y="517.8041" Z="4.99065" />
          <Vector3 X="-14427.12" Y="511.2989" Z="4.943849" />
          <Vector3 X="-14432.66" Y="504.3887" Z="8.606431" />
          <Vector3 X="-14438.23" Y="495.8873" Z="13.18185" />
          <Vector3 X="-14443.93" Y="486.6792" Z="15.05238" />
          <Vector3 X="-14448.91" Y="477.8187" Z="15.147" />
          <Vector3 X="-14454.82" Y="472.2379" Z="15.15903" />
          <Vector3 X="-14463.53" Y="480.6899" Z="14.90098" />
          <Vector3 X="-14468.63" Y="486.2404" Z="14.89692" />
          <Vector3 X="-14470.82" Y="490.2811" Z="14.9016" />
          <Vector3 X="-14469.97" Y="493.8404" Z="15.10972" />
          <Vector3 X="-14465.87" Y="491.7846" Z="15.11641" />
          <Vector3 X="-14462.48" Y="491.8866" Z="15.12132" />
          <Vector3 X="-14460.19" Y="494.4574" Z="15.12304" />
          <Vector3 X="-14458.89" Y="497.7006" Z="15.10556" />
          <Vector3 X="-14459.97" Y="500.7413" Z="15.11895" />
          <Vector3 X="-14463.31" Y="500.9059" Z="15.45185" />
          <Vector3 X="-14465.66" Y="498.4667" Z="17.1729" />
          <Vector3 X="-14468.02" Y="495.8847" Z="18.85159" />
          <Vector3 X="-14470.38" Y="493.299" Z="20.223" />
          <Vector3 X="-14471.83" Y="490.1927" Z="20.37916" />
          <Vector3 X="-14470.34" Y="487.1461" Z="20.3799" />
          <Vector3 X="-14468" Y="484.3929" Z="20.3799" />
          <Vector3 X="-14465.65" Y="481.9627" Z="20.3799" />
          <Vector3 X="-14462.52" Y="481.3736" Z="20.37843" />
          <Vector3 X="-14460.44" Y="484.1281" Z="20.37479" />
          <Vector3 X="-14458.45" Y="487.1392" Z="20.09362" />
          <Vector3 X="-14456.24" Y="489.7094" Z="20.53371" />
          <Vector3 X="-14453.74" Y="492.3073" Z="21.59278" />
          <Vector3 X="-14450.87" Y="493.9881" Z="21.4865" />
          <Vector3 X="-14447.46" Y="493.3924" Z="21.67819" />
          <Vector3 X="-14445.02" Y="490.9504" Z="23.56209" />
          <Vector3 X="-14444.91" Y="487.6419" Z="23.9608" />
          <Vector3 X="-14448.07" Y="487.5601" Z="23.96309" />
          <Vector3 X="-14450.59" Y="489.9866" Z="25.14602" />
          <Vector3 X="-14452.9" Y="492.6224" Z="26.28937" />
          <Vector3 X="-14455.27" Y="495.342" Z="26.27842" />
          <Vector3 X="-14456.48" Y="496.6072" Z="26.27352" />
          <Vector3 X="-14458.48" Y="498.6264" Z="26.27352" />
          <Vector3 X="-14461.62" Y="499.614" Z="26.27352" />
          <Vector3 X="-14464.95" Y="498.4583" Z="26.27352" />
          <Vector3 X="-14467.42" Y="496.1384" Z="25.79015" />
          <Vector3 X="-14469.81" Y="493.5882" Z="25.66553" />
          <Vector3 X="-14472.21" Y="491.0436" Z="26.51042" />
          <Vector3 X="-14474.27" Y="488.1304" Z="26.70618" />
          <Vector3 X="-14472.74" Y="485.3922" Z="26.79742" />
          <Vector3 X="-14469.85" Y="483.229" Z="26.81606" />
          <Vector3 X="-14467.76" Y="480.5851" Z="26.85681" />
          <Vector3 X="-14466.34" Y="477.3898" Z="27.40881" />
          <Vector3 X="-14466.16" Y="474.0021" Z="28.98587" />
          <Vector3 X="-14467.11" Y="470.5189" Z="30.66715" />
          <Vector3 X="-14468.9" Y="467.7139" Z="30.70213" />
          <Vector3 X="-14472.02" Y="465.9059" Z="30.7155" />
          <Vector3 X="-14475.01" Y="464.3109" Z="30.73263" />
          <Vector3 X="-14478.52" Y="463.5889" Z="30.77813" />
          <Vector3 X="-14481.65" Y="464.647" Z="31.40381" />
          <Vector3 X="-14482.39" Y="467.9535" Z="31.53098" />
          <Vector3 X="-14480.71" Y="470.9547" Z="31.54921" />
          <Vector3 X="-14479.51" Y="474.1942" Z="31.51709" />
          <Vector3 X="-14482.41" Y="475.1944" Z="32.68399" />
          <Vector3 X="-14484.95" Y="472.9114" Z="35.99279" />
          <Vector3 X="-14484.81" Y="469.7527" Z="36.31966" />
          <Vector3 X="-14481.44" Y="469.2705" Z="36.33414" />
          <Vector3 X="-14478.28" Y="468.1854" Z="36.33857" />
          <Vector3 X="-14477.01" Y="466.6733" Z="36.32026" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTEChuckyToBloodsails</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="-13582.16" Y="-221.6125" Z="26.90031" />
          <Vector3 X="-13575.1" Y="-211.0696" Z="29.97684" />
          <Vector3 X="-13566.56" Y="-195.8036" Z="34.03734" />
          <Vector3 X="-13559.38" Y="-180.4946" Z="38.06108" />
          <Vector3 X="-13554.25" Y="-163.766" Z="40.44604" />
          <Vector3 X="-13550.15" Y="-146.7561" Z="43.25088" />
          <Vector3 X="-13547.47" Y="-137.2913" Z="44.70485" />
          <Vector3 X="-13545.78" Y="-131.5154" Z="43.07827" />
          <Vector3 X="-13540.6" Y="-114.2149" Z="43.865" />
          <Vector3 X="-13535.37" Y="-98.10223" Z="42.36065" />
          <Vector3 X="-13529.86" Y="-80.90318" Z="41.69513" />
          <Vector3 X="-13524.68" Y="-64.77409" Z="39.99446" />
          <Vector3 X="-13519.04" Y="-47.61903" Z="38.92817" />
          <Vector3 X="-13513.29" Y="-31.68471" Z="39.29863" />
          <Vector3 X="-13505.41" Y="-15.48004" Z="37.94557" />
          <Vector3 X="-13496.56" Y="-1.033337" Z="35.85475" />
          <Vector3 X="-13487.17" Y="14.39073" Z="35.23518" />
          <Vector3 X="-13478.51" Y="28.95157" Z="33.6527" />
          <Vector3 X="-13470.28" Y="44.99341" Z="30.08957" />
          <Vector3 X="-13467.24" Y="61.61365" Z="27.30893" />
          <Vector3 X="-13471.13" Y="78.26746" Z="27.934" />
          <Vector3 X="-13487.16" Y="83.03004" Z="28.76355" />
          <Vector3 X="-13504.66" Y="83.25597" Z="28.76355" />
          <Vector3 X="-13529.53" Y="83.80404" Z="28.75753" />
          <Vector3 X="-13556.56" Y="85.51482" Z="28.69793" />
          <Vector3 X="-13581.96" Y="85.99873" Z="28.10246" />
          <Vector3 X="-13609.05" Y="86.55693" Z="26.56424" />
          <Vector3 X="-13634.22" Y="89.08789" Z="25.37089" />
          <Vector3 X="-13656.11" Y="104.7158" Z="23.53248" />
          <Vector3 X="-13677.51" Y="118.2273" Z="21.53721" />
          <Vector3 X="-13703.99" Y="123.8785" Z="23.3545" />
          <Vector3 X="-13725.99" Y="135.7706" Z="23.17579" />
          <Vector3 X="-13746.19" Y="153.7895" Z="22.34992" />
          <Vector3 X="-13749.09" Y="156.6841" Z="22.6838" />
          <Vector3 X="-13761.34" Y="173.0182" Z="24.14572" />
          <Vector3 X="-13778.05" Y="193.0407" Z="22.15942" />
          <Vector3 X="-13798.5" Y="210.8053" Z="20.12977" />
          <Vector3 X="-13815.68" Y="229.439" Z="18.78487" />
          <Vector3 X="-13838.27" Y="242.4386" Z="18.60635" />
          <Vector3 X="-13863.3" Y="246.6729" Z="18.34397" />
          <Vector3 X="-13889.34" Y="254.0594" Z="18.15298" />
          <Vector3 X="-13911.68" Y="265.8347" Z="18.39586" />
          <Vector3 X="-13931.36" Y="282.7679" Z="18.57982" />
          <Vector3 X="-13957.34" Y="284.2224" Z="18.58858" />
          <Vector3 X="-13984.33" Y="281.9784" Z="18.63299" />
          <Vector3 X="-14009.37" Y="277.8217" Z="18.63062" />
          <Vector3 X="-14035.5" Y="270.6432" Z="18.63361" />
          <Vector3 X="-14060.21" Y="264.7375" Z="18.45233" />
          <Vector3 X="-14071.46" Y="262.3796" Z="17.82369" />
          <Vector3 X="-14096.33" Y="257.1809" Z="16.63716" />
          <Vector3 X="-14122.79" Y="251.3663" Z="15.3399" />
          <Vector3 X="-14147.8" Y="246.8951" Z="14.77854" />
          <Vector3 X="-14174.61" Y="243.0055" Z="15.58487" />
          <Vector3 X="-14190.05" Y="240.8508" Z="15.52477" />
          <Vector3 X="-14198.54" Y="230.8877" Z="15.11209" />
          <Vector3 X="-14213.22" Y="212.1761" Z="10.58614" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTEGoToBloodsailDocuments</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="-14405.46" Y="424.0497" Z="8.410181" />
          <Vector3 X="-14394.96" Y="425.133" Z="7.63255" />
          <Vector3 X="-14384.91" Y="426.7771" Z="7.366301" />
          <Vector3 X="-14374.47" Y="429.584" Z="7.352609" />
          <Vector3 X="-14364.87" Y="432.9811" Z="7.356582" />
          <Vector3 X="-14355.25" Y="437.1495" Z="7.371532" />
          <Vector3 X="-14346.26" Y="442.5717" Z="7.45387" />
          <Vector3 X="-14338.54" Y="449.6096" Z="7.616844" />
          <Vector3 X="-14332.71" Y="458.8697" Z="7.875365" />
          <Vector3 X="-14324.46" Y="474.3003" Z="8.447783" />
          <Vector3 X="-14316.4" Y="489.832" Z="8.580487" />
          <Vector3 X="-14310.42" Y="501.5095" Z="8.607644" />
          <Vector3 X="-14303.88" Y="509.3518" Z="8.675537" />
          <Vector3 X="-14299.07" Y="505.6107" Z="8.968128" />
          <Vector3 X="-14303.47" Y="495.6467" Z="11.13901" />
          <Vector3 X="-14308.53" Y="486.0868" Z="13.65238" />
          <Vector3 X="-14313.22" Y="477.0565" Z="17.48739" />
          <Vector3 X="-14317.04" Y="466.9455" Z="18.49695" />
          <Vector3 X="-14319.42" Y="457.0643" Z="22.76078" />
          <Vector3 X="-14316.47" Y="447.128" Z="23.35162" />
          <Vector3 X="-14308" Y="441.662" Z="25.7231" />
          <Vector3 X="-14298.6" Y="436.9759" Z="31.41364" />
          <Vector3 X="-14285.42" Y="430.0589" Z="33.78255" />
          <Vector3 X="-14273.31" Y="418.1146" Z="36.75381" />
          <Vector3 X="-14274.72" Y="400.9732" Z="37.31757" />
          <Vector3 X="-14278.21" Y="383.3998" Z="35.67255" />
          <Vector3 X="-14276.53" Y="366.5577" Z="33.75415" />
          <Vector3 X="-14269.3" Y="350.8818" Z="32.60664" />
          <Vector3 X="-14257.3" Y="338.1837" Z="27.28733" />
          <Vector3 X="-14246.94" Y="331.0859" Z="23.56751" />
          <Vector3 X="-14243.21" Y="330.2757" Z="23.97812" />
          <Vector3 X="-14236.87" Y="334.5804" Z="24.16365" />
          <Vector3 X="-14223.85" Y="346.2189" Z="26.33715" />
          <Vector3 X="-14214.83" Y="354.9671" Z="25.50463" />
          <Vector3 X="-14209.82" Y="359.6935" Z="24.66589" />
          <Vector3 X="-14202.24" Y="366.5011" Z="22.41657" />
          <Vector3 X="-14194.16" Y="373.6843" Z="20.41468" />
          <Vector3 X="-14187.86" Y="381.5906" Z="19.19222" />
          <Vector3 X="-14183" Y="390.8994" Z="17.77044" />
          <Vector3 X="-14178.24" Y="400.2556" Z="16.3127" />
          <Vector3 X="-14174.96" Y="406.67" Z="15.46083" />
          <Vector3 X="-14169.01" Y="414.0675" Z="14.31048" />
          <Vector3 X="-14165.83" Y="418.2462" Z="13.72835" />
          <Vector3 X="-14162.21" Y="423.3362" Z="12.75543" />
          <Vector3 X="-14158.53" Y="427.502" Z="11.45162" />
          <Vector3 X="-14154.5" Y="432.262" Z="9.86531" />
          <Vector3 X="-14152.24" Y="431.7766" Z="9.109483" />
          <Vector3 X="-14150.03" Y="431.2126" Z="8.388215" />
          <Vector3 X="-14145.96" Y="429.1197" Z="7.181985" />
          <Vector3 X="-14146.14" Y="431.0849" Z="7.082067" />
          <Vector3 X="-14147.01" Y="432.8607" Z="7.229454" />
          <Vector3 X="-14149.27" Y="435.2259" Z="7.850121" />
          <Vector3 X="-14153.42" Y="439.4216" Z="9.157293" />
          <Vector3 X="-14157.85" Y="444.6633" Z="10.98373" />
          <Vector3 X="-14159.01" Y="449.6588" Z="12.07508" />
          <Vector3 X="-14158.81" Y="452.6093" Z="11.96924" />
          <Vector3 X="-14157.19" Y="453.6981" Z="10.82475" />
          <Vector3 X="-14155.98" Y="451.0222" Z="10.15615" />
          <Vector3 X="-14157.73" Y="444.0219" Z="10.89036" />
          <Vector3 X="-14156.7" Y="447.1313" Z="10.49911" />
          <Vector3 X="-14155.37" Y="451.8833" Z="9.735803" />
          <Vector3 X="-14153.65" Y="456.4861" Z="8.23182" />
          <Vector3 X="-14158.2" Y="449.6608" Z="11.52022" />
          <Vector3 X="-14159.53" Y="447.397" Z="12.19248" />
          <Vector3 X="-14156.13" Y="452.2433" Z="10.18019" />
          <Vector3 X="-14152.83" Y="458.2935" Z="7.590456" />
          <Vector3 X="-14150.8" Y="462.038" Z="6.05823" />
          <Vector3 X="-14147.36" Y="468.3943" Z="4.764582" />
          <Vector3 X="-14145.95" Y="471.0193" Z="3.84112" />
          <Vector3 X="-14149.5" Y="463.9875" Z="5.194843" />
          <Vector3 X="-14154.39" Y="454.7116" Z="8.891218" />
          <Vector3 X="-14157.69" Y="451.0473" Z="11.19701" />
          <Vector3 X="-14160.06" Y="448.326" Z="12.62526" />
          <Vector3 X="-14158.26" Y="450.675" Z="11.56547" />
          <Vector3 X="-14154.96" Y="455.1562" Z="9.185746" />
          <Vector3 X="-14152.87" Y="458.1039" Z="7.630848" />
          <Vector3 X="-14150.41" Y="462.3812" Z="5.838747" />
          <Vector3 X="-14149.41" Y="464.4375" Z="5.089202" />
          <Vector3 X="-14148.81" Y="472.9371" Z="4.536416" />
          <Vector3 X="-14148.53" Y="476.5384" Z="4.751063" />
          <Vector3 X="-14147.85" Y="481.0865" Z="4.82075" />
          <Vector3 X="-14146.98" Y="483.2279" Z="4.642617" />
          <Vector3 X="-14145.92" Y="484.9146" Z="4.462851" />
          <Vector3 X="-14144.95" Y="486.2348" Z="4.256123" />
          <Vector3 X="-14143.07" Y="488.9135" Z="3.896244" />
          <Vector3 X="-14140.08" Y="490.9314" Z="3.182337" />
          <Vector3 X="-14135.97" Y="487.1472" Z="2.556575" />
          <Vector3 X="-14134.54" Y="485.8108" Z="2.311501" />
          <Vector3 X="-14134.81" Y="490.7385" Z="2.792409" />
          <Vector3 X="-14132.42" Y="492.1033" Z="2.763747" />
          <Vector3 X="-14127.95" Y="492.1342" Z="2.450048" />
          <Vector3 X="-14126.13" Y="491.4189" Z="2.167418" />
          <Vector3 X="-14123.36" Y="487.7527" Z="1.269725" />
          <Vector3 X="-14120.44" Y="482.9909" Z="0.4584449" />
          <Vector3 X="-14123.62" Y="483.8744" Z="0.9387476" />
          <Vector3 X="-14125.5" Y="482.739" Z="1.120929" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTEVoodooDuesArena</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="-14392.61" Y="396.8048" Z="22.75237" />
          <Vector3 X="-14384.38" Y="390.8133" Z="23.05219" />
          <Vector3 X="-14376.25" Y="384.7334" Z="22.61366" />
          <Vector3 X="-14366.05" Y="382.6208" Z="23.31063" />
          <Vector3 X="-14355.79" Y="384.3343" Z="23.36152" />
          <Vector3 X="-14346.04" Y="388.2421" Z="23.24235" />
          <Vector3 X="-14336.23" Y="391.9853" Z="23.16067" />
          <Vector3 X="-14326.41" Y="395.6485" Z="23.38159" />
          <Vector3 X="-14319.81" Y="403.4763" Z="23.94623" />
          <Vector3 X="-14318.37" Y="413.865" Z="23.68528" />
          <Vector3 X="-14316.76" Y="424.2404" Z="23.20298" />
          <Vector3 X="-14315.82" Y="434.6975" Z="22.80857" />
          <Vector3 X="-14312.13" Y="441.096" Z="23.2739" />
          <Vector3 X="-14301.81" Y="439.4868" Z="29.77919" />
          <Vector3 X="-14292.52" Y="434.4078" Z="31.92683" />
          <Vector3 X="-14278.3" Y="423.352" Z="35.80008" />
          <Vector3 X="-14272.9" Y="407.6409" Z="37.0596" />
          <Vector3 X="-14276.87" Y="390.1155" Z="36.426" />
          <Vector3 X="-14276.91" Y="373.2747" Z="34.42899" />
          <Vector3 X="-14271.86" Y="356.5974" Z="32.89415" />
          <Vector3 X="-14261.44" Y="342.8582" Z="28.74116" />
          <Vector3 X="-14249.12" Y="330.4714" Z="23.7744" />
          <Vector3 X="-14246.43" Y="313.5133" Z="26.07487" />
          <Vector3 X="-14243.1" Y="296.4212" Z="27.18005" />
          <Vector3 X="-14239.26" Y="279.3654" Z="26.64914" />
          <Vector3 X="-14232.86" Y="263.1449" Z="24.77905" />
          <Vector3 X="-14220.1" Y="251.7703" Z="21.14983" />
          <Vector3 X="-14203.56" Y="246.2947" Z="17.5849" />
          <Vector3 X="-14186.09" Y="246.5784" Z="14.6984" />
          <Vector3 X="-14168.06" Y="247.6496" Z="15.48617" />
          <Vector3 X="-14151.15" Y="248.6001" Z="14.78201" />
          <Vector3 X="-14133.71" Y="250.0487" Z="14.81866" />
          <Vector3 X="-14129.92" Y="250.4569" Z="14.98889" />
          <Vector3 X="-14098.63" Y="255.116" Z="16.55705" />
          <Vector3 X="-14087.98" Y="257.5264" Z="17.00064" />
          <Vector3 X="-14072.48" Y="262.9486" Z="17.75307" />
          <Vector3 X="-14051.98" Y="269.7005" Z="18.6368" />
          <Vector3 X="-14026.48" Y="275.6698" Z="18.68352" />
          <Vector3 X="-14000.73" Y="280.7982" Z="18.63956" />
          <Vector3 X="-13974.62" Y="283.3264" Z="18.63445" />
          <Vector3 X="-13948.38" Y="283.7566" Z="18.63018" />
          <Vector3 X="-13923.41" Y="277.0814" Z="18.54468" />
          <Vector3 X="-13903.79" Y="259.9108" Z="18.09366" />
          <Vector3 X="-13878.49" Y="253.3044" Z="18.0745" />
          <Vector3 X="-13852.6" Y="248.9959" Z="18.38516" />
          <Vector3 X="-13827.45" Y="240.0693" Z="18.64927" />
          <Vector3 X="-13808.78" Y="222.9414" Z="18.73543" />
          <Vector3 X="-13789.71" Y="204.9187" Z="20.77025" />
          <Vector3 X="-13771.28" Y="186.3149" Z="22.73974" />
          <Vector3 X="-13753.28" Y="166.1263" Z="23.80067" />
          <Vector3 X="-13737.33" Y="146.4092" Z="22.25185" />
          <Vector3 X="-13715.22" Y="132.408" Z="23.70333" />
          <Vector3 X="-13690.48" Y="123.6396" Z="22.41402" />
          <Vector3 X="-13666.98" Y="112.1442" Z="22.16417" />
          <Vector3 X="-13646.9" Y="95.2444" Z="24.77372" />
          <Vector3 X="-13622.29" Y="86.44623" Z="25.96779" />
          <Vector3 X="-13596.89" Y="86.70708" Z="27.42009" />
          <Vector3 X="-13570.65" Y="85.73919" Z="28.49262" />
          <Vector3 X="-13544.42" Y="84.73915" Z="28.76346" />
          <Vector3 X="-13517.34" Y="84.57794" Z="28.76019" />
          <Vector3 X="-13492.77" Y="84.99243" Z="28.75904" />
          <Vector3 X="-13468.16" Y="85.40781" Z="27.86192" />
          <Vector3 X="-13441.93" Y="84.83713" Z="26.42273" />
          <Vector3 X="-13436.23" Y="84.37219" Z="25.70377" />
          <Vector3 X="-13423.9" Y="83.80535" Z="25.35618" />
          <Vector3 X="-13419.81" Y="83.76187" Z="25.30664" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Scaring Shaky</Name>
      <QuestId>
        <int>606</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="-14062.89" Y="231.9716" Z="13.80579" />
          <Vector3 X="-14040.98" Y="186.5843" Z="13.38161" />
          <Vector3 X="-13978.1" Y="116.0138" Z="14.94047" />
          <Vector3 X="-13873.3" Y="83.29953" Z="15.77985" />
          <Vector3 X="-13817.15" Y="80.98451" Z="25.41931" />
          <Vector3 X="-13952.94" Y="10.81012" Z="17.92197" />
          <Vector3 X="-14007.28" Y="21.29552" Z="32.57564" />
          <Vector3 X="-13909.01" Y="-13.0909" Z="27.29524" />
        </HotSpots>
        <EntryTarget>
          <int>1557</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>true</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>The Bloodsail Buccaneers</Name>
      <QuestId>
        <int>595</int>
      </QuestId>
      <QuestType>None</QuestType>
      <QuestClass />
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>The Bloodsail Buccaneers2</Name>
      <QuestId>
        <int>597</int>
      </QuestId>
      <QuestType>None</QuestType>
      <QuestClass />
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>The Bloodsail Buccaneers3</Name>
      <QuestId>
        <int>599</int>
      </QuestId>
      <QuestType>None</QuestType>
      <QuestClass />
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>The Bloodsail Buccaneers4</Name>
      <QuestId>
        <int>604</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="-14710.45" Y="486.3037" Z="3.227992" />
          <Vector3 X="-14727.82" Y="506.6332" Z="3.558567" />
          <Vector3 X="-14721.47" Y="523.172" Z="2.980137" />
          <Vector3 X="-14672.27" Y="416.815" Z="3.380352" />
          <Vector3 X="-14616.78" Y="244.8406" Z="0.6762002" />
          <Vector3 X="-14552.3" Y="189.6974" Z="2.661063" />
          <Vector3 X="-14461.58" Y="116.1376" Z="5.225151" />
        </HotSpots>
        <EntryTarget>
          <int>1563</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>true</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>The Bloodsail Buccaneers42</Name>
      <QuestId>
        <int>604</int>
      </QuestId>
      <QuestType>Gatherer</QuestType>
      <QuestClass xsi:type="GathererEasyQuestClass">
        <HotSpots>
          <Vector3 X="-14686.65" Y="485.212" Z="2.916321" />
        </HotSpots>
        <EntryIdObjects>
          <int>2086</int>
        </EntryIdObjects>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>true</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>The Bloodsail Buccaneers43</Name>
      <QuestId>
        <int>604</int>
      </QuestId>
      <QuestType>Gatherer</QuestType>
      <QuestClass xsi:type="GathererEasyQuestClass">
        <HotSpots>
          <Vector3 X="-14685.3" Y="483.6725" Z="3.003451" />
        </HotSpots>
        <EntryIdObjects>
          <int>2087</int>
        </EntryIdObjects>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>true</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Up to Snuff</Name>
      <QuestId>
        <int>587</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="-14698.41" Y="481.2125" Z="3.038598" />
          <Vector3 X="-14663.09" Y="363.5701" Z="0.5907953" />
          <Vector3 X="-14563.12" Y="225.5674" Z="1.537454" />
          <Vector3 X="-14345.31" Y="97.25115" Z="1.503488" />
        </HotSpots>
        <EntryTarget>
          <int>1564</int>
          <int>1563</int>
          <int>1561</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>true</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Voodoo Dues1</Name>
      <QuestId>
        <int>609</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="-13349.3" Y="-28.5316" Z="22.26966" />
        </HotSpots>
        <EntryTarget>
          <int>2535</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>true</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Voodoo Dues2</Name>
      <QuestId>
        <int>609</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="-13374.3" Y="-7.69423" Z="21.86033" />
        </HotSpots>
        <EntryTarget>
          <int>2536</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>true</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Voodoo Dues3</Name>
      <QuestId>
        <int>609</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="-13646.5" Y="-331.611" Z="8.17751" />
        </HotSpots>
        <EntryTarget>
          <int>2537</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>true</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Zanzil's Secret</Name>
      <QuestId>
        <int>621</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="-13623.25" Y="-295.8332" Z="8.384202" />
          <Vector3 X="-13688.22" Y="-256.7135" Z="6.666259" />
          <Vector3 X="-13671.23" Y="-362.5307" Z="0.6508881" />
        </HotSpots>
        <EntryTarget>
          <int>1491</int>
          <int>1488</int>
          <int>1489</int>
          <int>1490</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>true</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Skullsplitter Tusks</Name>
      <QuestId>
        <int>209</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="-12731.75" Y="-572.7528" Z="39.33904" />
          <Vector3 X="-12545.14" Y="-625.9694" Z="39.60904" />
          <Vector3 X="-12761.51" Y="-735.9485" Z="64.16246" />
        </HotSpots>
        <EntryTarget>
          <int>667</int>
          <int>696</int>
          <int>780</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>true</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTEGoToSkullsplitterTusks</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="-14450.54" Y="496.0609" Z="26.28426" />
          <Vector3 X="-14454.32" Y="498.035" Z="26.27508" />
          <Vector3 X="-14457.42" Y="499.6474" Z="26.2731" />
          <Vector3 X="-14460.58" Y="501.1377" Z="26.2731" />
          <Vector3 X="-14464.93" Y="498.8193" Z="26.2731" />
          <Vector3 X="-14467.37" Y="496.3188" Z="25.80795" />
          <Vector3 X="-14469.76" Y="493.764" Z="25.65916" />
          <Vector3 X="-14472.3" Y="491.3557" Z="26.51127" />
          <Vector3 X="-14474.47" Y="488.6723" Z="26.69272" />
          <Vector3 X="-14472.85" Y="485.7447" Z="26.78815" />
          <Vector3 X="-14470.05" Y="483.6533" Z="26.8047" />
          <Vector3 X="-14467.22" Y="481.5873" Z="26.83317" />
          <Vector3 X="-14465.69" Y="478.5202" Z="26.88583" />
          <Vector3 X="-14465.47" Y="475.0455" Z="28.39954" />
          <Vector3 X="-14466.26" Y="471.646" Z="30.29626" />
          <Vector3 X="-14467.59" Y="468.416" Z="30.69094" />
          <Vector3 X="-14469.02" Y="465.22" Z="30.6601" />
          <Vector3 X="-14470.4" Y="462.0047" Z="30.62372" />
          <Vector3 X="-14471.27" Y="458.6183" Z="30.5761" />
          <Vector3 X="-14471.63" Y="455.147" Z="30.46999" />
          <Vector3 X="-14471.11" Y="451.6875" Z="30.49247" />
          <Vector3 X="-14470.31" Y="448.2825" Z="30.51735" />
          <Vector3 X="-14468.98" Y="445.0488" Z="30.72532" />
          <Vector3 X="-14467.38" Y="441.9379" Z="30.20228" />
          <Vector3 X="-14465.6" Y="438.9207" Z="28.71156" />
          <Vector3 X="-14463.78" Y="435.9348" Z="27.19732" />
          <Vector3 X="-14462.02" Y="432.9094" Z="25.63547" />
          <Vector3 X="-14460.27" Y="429.8766" Z="25.20851" />
          <Vector3 X="-14458.45" Y="426.8908" Z="25.15814" />
          <Vector3 X="-14455.37" Y="425.5968" Z="25.12976" />
          <Vector3 X="-14452.3" Y="427.2375" Z="23.68022" />
          <Vector3 X="-14449.34" Y="429.1089" Z="21.83205" />
          <Vector3 X="-14446.48" Y="431.1318" Z="20.27721" />
          <Vector3 X="-14443.59" Y="433.1056" Z="20.31494" />
          <Vector3 X="-14441.43" Y="434.3833" Z="20.41405" />
          <Vector3 X="-14439.94" Y="433.3613" Z="20.3636" />
          <Vector3 X="-14438.77" Y="431.2727" Z="20.32577" />
          <Vector3 X="-14435.91" Y="429.7269" Z="20.28723" />
          <Vector3 X="-14435.48" Y="426.583" Z="19.96901" />
          <Vector3 X="-14438.15" Y="424.0277" Z="16.98655" />
          <Vector3 X="-14441.32" Y="422.6952" Z="15.56169" />
          <Vector3 X="-14442.83" Y="425.2469" Z="15.55804" />
          <Vector3 X="-14442.33" Y="428.5408" Z="15.55638" />
          <Vector3 X="-14439.41" Y="430.8333" Z="15.57018" />
          <Vector3 X="-14437.55" Y="433.479" Z="15.5827" />
          <Vector3 X="-14438.63" Y="436.8044" Z="15.58693" />
          <Vector3 X="-14440.31" Y="439.6149" Z="15.32411" />
          <Vector3 X="-14441.35" Y="442.8382" Z="15.35845" />
          <Vector3 X="-14439.27" Y="445.5406" Z="15.46151" />
          <Vector3 X="-14437.37" Y="446.6372" Z="15.45092" />
          <Vector3 X="-14433.32" Y="449.0243" Z="15.41774" />
          <Vector3 X="-14430.01" Y="449.5471" Z="15.44091" />
          <Vector3 X="-14426.95" Y="447.1831" Z="14.81895" />
          <Vector3 X="-14419.92" Y="439.3864" Z="10.21219" />
          <Vector3 X="-14413.19" Y="431.3246" Z="8.975528" />
          <Vector3 X="-14405.48" Y="424.2842" Z="8.41251" />
          <Vector3 X="-14395.37" Y="422.3399" Z="7.686472" />
          <Vector3 X="-14385.29" Y="425.1199" Z="7.371062" />
          <Vector3 X="-14375.55" Y="429.0638" Z="7.350836" />
          <Vector3 X="-14365.82" Y="433.0089" Z="7.35727" />
          <Vector3 X="-14356.13" Y="437.0407" Z="7.367084" />
          <Vector3 X="-14346.9" Y="442.0099" Z="7.447838" />
          <Vector3 X="-14339.33" Y="449.1864" Z="7.596909" />
          <Vector3 X="-14333.47" Y="457.8929" Z="7.846271" />
          <Vector3 X="-14328.16" Y="466.9481" Z="8.18005" />
          <Vector3 X="-14323.08" Y="476.1343" Z="8.522581" />
          <Vector3 X="-14318.42" Y="485.5469" Z="8.570512" />
          <Vector3 X="-14314.35" Y="495.2105" Z="8.591075" />
          <Vector3 X="-14311.59" Y="503.2749" Z="8.606168" />
          <Vector3 X="-14309.98" Y="506.3821" Z="8.613553" />
          <Vector3 X="-14308.16" Y="509.3685" Z="8.621361" />
          <Vector3 X="-14305.2" Y="511.0303" Z="8.653739" />
          <Vector3 X="-14301.74" Y="510.7791" Z="8.713328" />
          <Vector3 X="-14299.31" Y="508.3759" Z="8.965554" />
          <Vector3 X="-14299.71" Y="505.0109" Z="8.968744" />
          <Vector3 X="-14301.25" Y="501.8712" Z="9.631084" />
          <Vector3 X="-14305.77" Y="492.3929" Z="12.03629" />
          <Vector3 X="-14310.67" Y="483.1051" Z="14.59471" />
          <Vector3 X="-14314.9" Y="473.5145" Z="18.37917" />
          <Vector3 X="-14318" Y="463.4823" Z="20.19767" />
          <Vector3 X="-14320.46" Y="453.6365" Z="23.46678" />
          <Vector3 X="-14320.04" Y="448.8559" Z="23.24706" />
          <Vector3 X="-14313.1" Y="442.4718" Z="23.29124" />
          <Vector3 X="-14303.75" Y="438.5001" Z="28.86362" />
          <Vector3 X="-14294.26" Y="434.1771" Z="32.00181" />
          <Vector3 X="-14284.96" Y="429.3134" Z="34.05442" />
          <Vector3 X="-14277.03" Y="422.541" Z="35.92845" />
          <Vector3 X="-14273.32" Y="412.8916" Z="37.10908" />
          <Vector3 X="-14274.48" Y="402.5305" Z="37.14626" />
          <Vector3 X="-14277.84" Y="392.2293" Z="36.58978" />
          <Vector3 X="-14279.15" Y="382.1864" Z="35.50602" />
          <Vector3 X="-14278.8" Y="371.6945" Z="34.08233" />
          <Vector3 X="-14275.52" Y="361.769" Z="33.31068" />
          <Vector3 X="-14270.53" Y="352.5659" Z="32.72107" />
          <Vector3 X="-14263.34" Y="344.9472" Z="29.68001" />
          <Vector3 X="-14255.35" Y="337.6257" Z="27.04368" />
          <Vector3 X="-14248.74" Y="329.9726" Z="23.86296" />
          <Vector3 X="-14247.34" Y="319.6517" Z="25.70794" />
          <Vector3 X="-14246.59" Y="309.5101" Z="26.40681" />
          <Vector3 X="-14244.49" Y="292.1685" Z="27.07655" />
          <Vector3 X="-14244.47" Y="274.1461" Z="26.53608" />
          <Vector3 X="-14236.81" Y="259.2037" Z="24.40747" />
          <Vector3 X="-14224.26" Y="247.3281" Z="21.92887" />
          <Vector3 X="-14207.51" Y="241.751" Z="18.39885" />
          <Vector3 X="-14186.54" Y="243.5135" Z="15.11967" />
          <Vector3 X="-14161.39" Y="247.1022" Z="15.17703" />
          <Vector3 X="-14136.25" Y="250.8406" Z="14.8174" />
          <Vector3 X="-14110.33" Y="254.9586" Z="16.03924" />
          <Vector3 X="-14084.44" Y="259.2856" Z="17.17442" />
          <Vector3 X="-14059.62" Y="267.5893" Z="18.4369" />
          <Vector3 X="-14034.29" Y="274.2639" Z="18.65569" />
          <Vector3 X="-14008.55" Y="279.4473" Z="18.62159" />
          <Vector3 X="-13982.51" Y="282.5119" Z="18.63503" />
          <Vector3 X="-13956.29" Y="283.6987" Z="18.6007" />
          <Vector3 X="-13930.29" Y="281.8057" Z="18.53314" />
          <Vector3 X="-13911.89" Y="264.6553" Z="18.40441" />
          <Vector3 X="-13888.68" Y="256.6151" Z="17.84687" />
          <Vector3 X="-13862.8" Y="253.1535" Z="17.98329" />
          <Vector3 X="-13837.45" Y="246.5324" Z="18.57405" />
          <Vector3 X="-13815.82" Y="232.7136" Z="18.61348" />
          <Vector3 X="-13799.76" Y="212.0748" Z="19.95461" />
          <Vector3 X="-13780.53" Y="194.2041" Z="22.01469" />
          <Vector3 X="-13762" Y="175.689" Z="24.00645" />
          <Vector3 X="-13745.33" Y="155.4312" Z="22.303" />
          <Vector3 X="-13727.24" Y="136.547" Z="23.12906" />
          <Vector3 X="-13704.19" Y="124.6869" Z="23.35943" />
          <Vector3 X="-13678.34" Y="120.3326" Z="21.59218" />
          <Vector3 X="-13656.12" Y="107.0353" Z="23.30429" />
          <Vector3 X="-13636.05" Y="90.30124" Z="25.32175" />
          <Vector3 X="-13610.62" Y="85.63342" Z="26.53409" />
          <Vector3 X="-13584.38" Y="84.97238" Z="27.96799" />
          <Vector3 X="-13558.14" Y="85.35211" Z="28.67648" />
          <Vector3 X="-13531.9" Y="86.16618" Z="28.63425" />
          <Vector3 X="-13505.7" Y="85.85066" Z="28.75484" />
          <Vector3 X="-13479.48" Y="86.78741" Z="28.76246" />
          <Vector3 X="-13453.27" Y="88.24202" Z="26.66957" />
          <Vector3 X="-13427.04" Y="87.6325" Z="25.44971" />
          <Vector3 X="-13401.06" Y="84.03111" Z="24.55548" />
          <Vector3 X="-13375.46" Y="78.27995" Z="24.10677" />
          <Vector3 X="-13349.28" Y="78.6311" Z="23.71331" />
          <Vector3 X="-13324.82" Y="73.35719" Z="22.34772" />
          <Vector3 X="-13313.58" Y="49.9888" Z="21.28951" />
          <Vector3 X="-13306.85" Y="37.09451" Z="21.19556" />
          <Vector3 X="-13283.86" Y="24.50322" Z="19.80227" />
          <Vector3 X="-13262.82" Y="8.86934" Z="19.75658" />
          <Vector3 X="-13248.89" Y="-13.05467" Z="19.80789" />
          <Vector3 X="-13245.53" Y="-38.98584" Z="19.81227" />
          <Vector3 X="-13245.71" Y="-65.23476" Z="19.80127" />
          <Vector3 X="-13246.91" Y="-91.42708" Z="19.75981" />
          <Vector3 X="-13248.91" Y="-117.5998" Z="19.24005" />
          <Vector3 X="-13248.05" Y="-129.7493" Z="18.14882" />
          <Vector3 X="-13234.69" Y="-140.6043" Z="16.35846" />
          <Vector3 X="-13216.17" Y="-149.241" Z="15.19005" />
          <Vector3 X="-13200.14" Y="-169.5673" Z="11.30104" />
          <Vector3 X="-13191.71" Y="-174.139" Z="9.375802" />
          <Vector3 X="-13165.99" Y="-179.3327" Z="2.525308" />
          <Vector3 X="-13140.02" Y="-183.1845" Z="-2.630254" />
          <Vector3 X="-13114.85" Y="-190.5217" Z="-6.316247" />
          <Vector3 X="-13090.29" Y="-199.7565" Z="-8.737516" />
          <Vector3 X="-13065.26" Y="-207.6631" Z="-11.09948" />
          <Vector3 X="-13062.91" Y="-208.4063" Z="-11.16811" />
          <Vector3 X="-13054.26" Y="-211.0119" Z="-10.80712" />
          <Vector3 X="-13030.37" Y="-216.7336" Z="-10.09582" />
          <Vector3 X="-13005.03" Y="-223.5004" Z="-12.05376" />
          <Vector3 X="-12978.57" Y="-232.41" Z="-9.630481" />
          <Vector3 X="-12955.58" Y="-241.0868" Z="-9.104666" />
          <Vector3 X="-12943.3" Y="-245.7218" Z="-7.430228" />
          <Vector3 X="-12929.93" Y="-249.6587" Z="-5.696497" />
          <Vector3 X="-12906.19" Y="-255.8074" Z="-0.3858518" />
          <Vector3 X="-12881.96" Y="-265.3816" Z="3.572899" />
          <Vector3 X="-12875.9" Y="-269.5378" Z="4.349456" />
          <Vector3 X="-12856.47" Y="-278.0378" Z="5.871281" />
          <Vector3 X="-12832.01" Y="-293.0124" Z="9.161611" />
          <Vector3 X="-12813.04" Y="-312.2061" Z="10.12918" />
          <Vector3 X="-12800.08" Y="-333.9941" Z="10.11144" />
          <Vector3 X="-12794.97" Y="-346.0787" Z="10.09936" />
          <Vector3 X="-12788.41" Y="-362.0002" Z="10.42794" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTESkullsplitterTusksBackToBootyBay</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="-12701.33" Y="-378.9901" Z="10.13972" />
          <Vector3 X="-12714.45" Y="-378.2731" Z="10.09974" />
          <Vector3 X="-12731.23" Y="-377.4257" Z="10.09974" />
          <Vector3 X="-12747.42" Y="-375.9305" Z="10.10562" />
          <Vector3 X="-12764.24" Y="-371.8628" Z="10.09997" />
          <Vector3 X="-12778.36" Y="-362.9557" Z="10.1012" />
          <Vector3 X="-12788.75" Y="-350.0114" Z="10.09977" />
          <Vector3 X="-12805.47" Y="-327.5501" Z="10.1023" />
          <Vector3 X="-12822.08" Y="-306.1542" Z="10.09984" />
          <Vector3 X="-12844.75" Y="-286.9144" Z="7.738725" />
          <Vector3 X="-12867.73" Y="-274.3629" Z="4.815395" />
          <Vector3 X="-12890.26" Y="-255.1003" Z="2.042263" />
          <Vector3 X="-12915.74" Y="-250.1857" Z="-3.475024" />
          <Vector3 X="-12942.11" Y="-243.6025" Z="-7.759439" />
          <Vector3 X="-12969.67" Y="-235.2713" Z="-9.161194" />
          <Vector3 X="-12995.34" Y="-226.5836" Z="-12.09363" />
          <Vector3 X="-13022.06" Y="-218.2359" Z="-10.31776" />
          <Vector3 X="-13049.81" Y="-210.1671" Z="-9.969769" />
          <Vector3 X="-13076.66" Y="-202.3596" Z="-10.81582" />
          <Vector3 X="-13103.54" Y="-194.541" Z="-7.400167" />
          <Vector3 X="-13130.55" Y="-187.2073" Z="-4.098709" />
          <Vector3 X="-13157.87" Y="-181.0923" Z="0.8944643" />
          <Vector3 X="-13172.36" Y="-177.8513" Z="3.982233" />
          <Vector3 X="-13188.58" Y="-174.3007" Z="8.849387" />
          <Vector3 X="-13201.18" Y="-166.5834" Z="11.88104" />
          <Vector3 X="-13223.39" Y="-151.4792" Z="15.58141" />
          <Vector3 X="-13245.1" Y="-132.9225" Z="18.05615" />
          <Vector3 X="-13249.72" Y="-105.5789" Z="19.76315" />
          <Vector3 X="-13248.86" Y="-77.59393" Z="19.81257" />
          <Vector3 X="-13247.56" Y="-49.62472" Z="19.811" />
          <Vector3 X="-13250.18" Y="-21.93357" Z="19.81231" />
          <Vector3 X="-13262.85" Y="0.6351267" Z="19.81259" />
          <Vector3 X="-13286.86" Y="18.20365" Z="19.93745" />
          <Vector3 X="-13304.02" Y="40.10705" Z="21.03885" />
          <Vector3 X="-13319.77" Y="63.08422" Z="22.07152" />
          <Vector3 X="-13344.24" Y="76.34556" Z="23.51666" />
          <Vector3 X="-13371.04" Y="80.17165" Z="23.89182" />
          <Vector3 X="-13399.71" Y="83.77316" Z="24.50364" />
          <Vector3 X="-13427.58" Y="86.26089" Z="25.42435" />
          <Vector3 X="-13455.56" Y="85.38799" Z="26.76527" />
          <Vector3 X="-13482.59" Y="84.38088" Z="28.76409" />
          <Vector3 X="-13510.59" Y="84.44637" Z="28.76433" />
          <Vector3 X="-13539.45" Y="85.26448" Z="28.76547" />
          <Vector3 X="-13566.54" Y="86.22919" Z="28.66019" />
          <Vector3 X="-13594.53" Y="86.33623" Z="27.5862" />
          <Vector3 X="-13623.37" Y="85.76159" Z="25.81805" />
          <Vector3 X="-13649.13" Y="95.547" Z="24.55071" />
          <Vector3 X="-13670.01" Y="112.5723" Z="21.78017" />
          <Vector3 X="-13697.83" Y="120.0544" Z="22.83552" />
          <Vector3 X="-13723.23" Y="131.5751" Z="23.46875" />
          <Vector3 X="-13744.11" Y="148.7205" Z="22.36729" />
          <Vector3 X="-13761.27" Y="171.8798" Z="24.1773" />
          <Vector3 X="-13780.49" Y="192.1679" Z="22.12781" />
          <Vector3 X="-13798.91" Y="210.7316" Z="20.10406" />
          <Vector3 X="-13818.61" Y="232.9864" Z="18.6329" />
          <Vector3 X="-13842.89" Y="243.5662" Z="18.61462" />
          <Vector3 X="-13870.47" Y="248.3873" Z="18.45009" />
          <Vector3 X="-13898.37" Y="255.4021" Z="18.00343" />
          <Vector3 X="-13917.83" Y="272.6863" Z="18.6345" />
          <Vector3 X="-13945.07" Y="281.8411" Z="18.63318" />
          <Vector3 X="-13971.26" Y="281.1729" Z="18.62204" />
          <Vector3 X="-13999.2" Y="279.3122" Z="18.62373" />
          <Vector3 X="-14026.6" Y="273.8641" Z="18.63021" />
          <Vector3 X="-14054.54" Y="266.497" Z="18.62589" />
          <Vector3 X="-14082.41" Y="258.9233" Z="17.2195" />
          <Vector3 X="-14109" Y="253.7112" Z="16.08307" />
          <Vector3 X="-14137.54" Y="249.1539" Z="14.81293" />
          <Vector3 X="-14165.18" Y="244.6723" Z="15.44255" />
          <Vector3 X="-14192.83" Y="240.2759" Z="15.82114" />
          <Vector3 X="-14220.52" Y="242.2893" Z="21.0787" />
          <Vector3 X="-14229.35" Y="247.553" Z="22.72586" />
          <Vector3 X="-14244.49" Y="267.7506" Z="26.06021" />
          <Vector3 X="-14245.78" Y="285.1386" Z="26.88137" />
          <Vector3 X="-14245.79" Y="296.5066" Z="27.12712" />
          <Vector3 X="-14245.79" Y="302.2746" Z="27.02901" />
          <Vector3 X="-14246.14" Y="309.5281" Z="26.36817" />
          <Vector3 X="-14246.86" Y="320.3397" Z="25.59381" />
          <Vector3 X="-14249.62" Y="330.0504" Z="23.89985" />
          <Vector3 X="-14257.04" Y="337.8295" Z="27.25678" />
          <Vector3 X="-14264.5" Y="344.7331" Z="29.96482" />
          <Vector3 X="-14271.61" Y="352.9032" Z="32.75901" />
          <Vector3 X="-14276.23" Y="361.5128" Z="33.31269" />
          <Vector3 X="-14277.44" Y="365.9468" Z="33.68912" />
          <Vector3 X="-14279.07" Y="373.3066" Z="34.36923" />
          <Vector3 X="-14279.7" Y="384.0749" Z="35.67925" />
          <Vector3 X="-14277.26" Y="393.9293" Z="36.75369" />
          <Vector3 X="-14274.5" Y="404.0575" Z="37.21118" />
          <Vector3 X="-14273.71" Y="414.8328" Z="37.05831" />
          <Vector3 X="-14276.36" Y="424.542" Z="35.64053" />
          <Vector3 X="-14282.15" Y="430.7352" Z="34.37201" />
          <Vector3 X="-14293.71" Y="436.1588" Z="31.7211" />
          <Vector3 X="-14303.13" Y="439.9712" Z="28.90778" />
          <Vector3 X="-14313.58" Y="443.9361" Z="23.33694" />
          <Vector3 X="-14317.53" Y="445.536" Z="23.2074" />
          <Vector3 X="-14318.74" Y="447.492" Z="23.24545" />
          <Vector3 X="-14319.25" Y="451.0624" Z="23.40295" />
          <Vector3 X="-14319.75" Y="457.3481" Z="22.6954" />
          <Vector3 X="-14317.71" Y="467.6186" Z="18.48876" />
          <Vector3 X="-14313.8" Y="477.355" Z="17.43322" />
          <Vector3 X="-14309.43" Y="486.9028" Z="13.53745" />
          <Vector3 X="-14305.06" Y="496.4505" Z="11.10321" />
          <Vector3 X="-14301.69" Y="503.8087" Z="9.261571" />
          <Vector3 X="-14300.32" Y="507.0283" Z="8.969321" />
          <Vector3 X="-14301.25" Y="509.9722" Z="8.891192" />
          <Vector3 X="-14304.67" Y="510.1349" Z="8.667561" />
          <Vector3 X="-14307.83" Y="508.682" Z="8.624565" />
          <Vector3 X="-14309.69" Y="505.7988" Z="8.615982" />
          <Vector3 X="-14311.83" Y="499.1351" Z="8.602983" />
          <Vector3 X="-14318.73" Y="483.5357" Z="8.568744" />
          <Vector3 X="-14327.15" Y="468.2033" Z="8.235292" />
          <Vector3 X="-14336.88" Y="453.6624" Z="7.722415" />
          <Vector3 X="-14348.96" Y="441.053" Z="7.435933" />
          <Vector3 X="-14364.23" Y="432.6503" Z="7.356336" />
          <Vector3 X="-14376.03" Y="428.6631" Z="7.351147" />
          <Vector3 X="-14385.85" Y="424.9349" Z="7.370583" />
          <Vector3 X="-14395.82" Y="421.7992" Z="7.71838" />
          <Vector3 X="-14405.88" Y="424.3007" Z="8.427039" />
          <Vector3 X="-14414.02" Y="430.8124" Z="8.980484" />
          <Vector3 X="-14420.35" Y="439.1839" Z="10.22811" />
          <Vector3 X="-14427.15" Y="447.1407" Z="14.86086" />
          <Vector3 X="-14436.26" Y="452.3438" Z="15.34819" />
          <Vector3 X="-14443.47" Y="459.8781" Z="15.38732" />
          <Vector3 X="-14449.97" Y="468.1034" Z="15.26596" />
          <Vector3 X="-14457.57" Y="475.3537" Z="15.06132" />
          <Vector3 X="-14464.99" Y="482.7839" Z="14.89583" />
          <Vector3 X="-14469.63" Y="487.8688" Z="14.89905" />
          <Vector3 X="-14471" Y="489.4306" Z="14.90119" />
          <Vector3 X="-14472.31" Y="491.1916" Z="14.90235" />
          <Vector3 X="-14472.21" Y="492.6761" Z="14.90279" />
          <Vector3 X="-14469.64" Y="494.0728" Z="15.11124" />
          <Vector3 X="-14466.61" Y="492.6447" Z="15.11838" />
          <Vector3 X="-14465.38" Y="491.5649" Z="15.11838" />
          <Vector3 X="-14463.96" Y="491.0331" Z="15.11763" />
          <Vector3 X="-14462.44" Y="490.9232" Z="15.1212" />
          <Vector3 X="-14459.7" Y="493.0164" Z="15.12437" />
          <Vector3 X="-14458.66" Y="496.4276" Z="15.12437" />
          <Vector3 X="-14458.53" Y="499.8866" Z="15.11314" />
          <Vector3 X="-14460.37" Y="502.6497" Z="15.12125" />
          <Vector3 X="-14463.33" Y="501.3054" Z="15.18069" />
          <Vector3 X="-14465.53" Y="498.5883" Z="17.08842" />
          <Vector3 X="-14468" Y="496.1053" Z="18.76476" />
          <Vector3 X="-14470.45" Y="493.6041" Z="20.15234" />
          <Vector3 X="-14471.14" Y="492.8988" Z="20.37862" />
          <Vector3 X="-14472.2" Y="491.6503" Z="20.3788" />
          <Vector3 X="-14473.02" Y="490.4212" Z="20.37922" />
          <Vector3 X="-14471.52" Y="487.2964" Z="20.38063" />
          <Vector3 X="-14469.04" Y="484.6769" Z="20.38063" />
          <Vector3 X="-14466.63" Y="482.2974" Z="20.38063" />
          <Vector3 X="-14464.28" Y="480.1807" Z="20.379" />
          <Vector3 X="-14463.25" Y="480.961" Z="20.379" />
          <Vector3 X="-14460.98" Y="483.6133" Z="20.37535" />
          <Vector3 X="-14459.05" Y="486.5262" Z="20.13172" />
          <Vector3 X="-14456.88" Y="489.2748" Z="20.35397" />
          <Vector3 X="-14454.68" Y="491.7838" Z="21.22361" />
          <Vector3 X="-14452.16" Y="494.2182" Z="21.61068" />
          <Vector3 X="-14448.84" Y="494.8108" Z="21.6653" />
          <Vector3 X="-14446.42" Y="492.5125" Z="21.73556" />
          <Vector3 X="-14444.38" Y="489.6671" Z="23.95739" />
          <Vector3 X="-14444.1" Y="487.3356" Z="23.96069" />
          <Vector3 X="-14446.03" Y="487.6829" Z="23.96088" />
          <Vector3 X="-14449.09" Y="489.1316" Z="23.96207" />
          <Vector3 X="-14451.71" Y="491.6095" Z="26.29248" />
          <Vector3 X="-14452.84" Y="493.2109" Z="26.2866" />
          <Vector3 X="-14452.24" Y="495.077" Z="26.28518" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Ansirem's Key</Name>
      <QuestId>
        <int>603</int>
      </QuestId>
      <QuestType>None</QuestType>
      <QuestClass />
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>"Pretty Boy" Duncan</Name>
      <QuestId>
        <int>610</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="-14121.7" Y="473.517" Z="0.9795289" />
        </HotSpots>
        <EntryTarget>
          <int>2545</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>true</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
  </EasyQuests>
  <Script>using robotManager.Helpful;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Threading;
using wManager.Events;
using wManager.Wow.Bot.Tasks;
using wManager.Wow.Enums;
using wManager.Wow.Helpers;
using wManager.Wow.ObjectManager;
using System.ComponentModel;
using System.Configuration;
using System.Net;
using System.Windows.Forms;
using robotManager.Products;
using System.Threading.Tasks;



//FlightMaster
public class FlightMaster
{

    private int priority;

    public FlightMaster(int priority)
    {
        this.priority = priority;
    }

    public static void main(String[] args)
    {
        FlightMaster temp = new FlightMaster(1);
        Logging.Write("Stuff");
    }


    public static int timer = 0;
    public static Vector3 myPositionAtStart = new Vector3(0, 0, 0);
    public static bool _deleteOldPath = false;
    public static bool _isLaunched ;
    static bool longMoveState = false;
    static Vector3 checkDistanceToDestination;
    private static int travelDistance = 1250;
    private static float saveDistance;
    public static Vector3 destinationVector = new Vector3(0, 0, 0);

    //public static MovementEvents.MovementCancelableHandler MovementEventsOnOnMovementPulse { get; private set; }

    // public static List&lt;FlightMasterDB&gt; FML = fillDB();

    public void startFlightMaster()
    {
        Logging.Write("[FNV_Quester]: Flight Master initialized");
        _isLaunched = true;
        FNVQuesterFlightMaster.Load();
        //flightMasterLoop();
    }

    public void start()
    {
        //Logging.Write("Subscribing to event");
       // SubscribeToEvent();
       // watchForEvents();
    }

    public void stop()
    {
        //Logging.Write("Unsubscribing to event");
        //UnSubscribeEvents();
    }

    public static void disposeFlightMaster()
    {
        _isLaunched = false;
        FNVQuesterFlightMaster.CurrentSettings.Save();
        //clearOldPath();
        //_deleteOldPath = true;
        //UnSubscribeEvents();
        //MovementEvents.OnMovementPulse -= new MovementEvents.MovementCancelableHandler(FlightMaster.MovementEventsOnOnMovementPulse);
        //Logging.Write("[FNV_Quester]: Flight Master disposed");
    }

    public static void disposeFlightMaster(int wert)
    {
        _isLaunched = false;
        if(wert == 1)
        {
            Logging.Write("Flight Master stopped, dead");
        }
        else
        {
            Logging.Write("Flight Master stopped, combat");
        }
    }


    private void SubscribeToEvent()
    {
         MovementEvents.OnMovementPulse += MovementEventsOnOnMovementPulse;
    }

    public void UnSubscribeEvents()
    {
        MovementEvents.OnMovementPulse -= MovementEventsOnOnMovementPulse;
    }

    private void watchForEvents()
    {

        EventsLuaWithArgs.OnEventsLuaWithArgs += (LuaEventsId id, List&lt;string&gt; args) =&gt;
        {


            if (id == wManager.Wow.Enums.LuaEventsId.PLAYER_DEAD)
            {
                Logging.Write("[FNV_Quester]: Player died, stop Flight Master");
                disposeFlightMaster(1);
            }
            if (id == wManager.Wow.Enums.LuaEventsId.PLAYER_ENTER_COMBAT)
            {
                disposeFlightMaster(2);
          		  Logging.Write("[FNV_Quester]: Player entered combat, stop Flight Master");
            }

        };

    }


    private void MovementEventsOnOnMovementPulse(List&lt;Vector3&gt; path, CancelEventArgs cancelEventArgs)
    {
        if(timer &lt; 1)
        {
            checkDistanceToDestination = path.Last&lt;Vector3&gt;();
            longMove(path.Last&lt;Vector3&gt;());
            destinationVector = path.Last&lt;Vector3&gt;();
            if(ObjectManager.Me.Position.DistanceTo(destinationVector) &gt; 1000 &amp;&amp; !_isLaunched)
                startFlightMaster();
        }
        else
        {
            Logging.Write("[FNV_Quester]: Taxi in Pause");
        }
    }

    public bool longMove(Vector3 destination)
    {
        saveDistance = new Vector3(destination).DistanceTo(ObjectManager.Me.Position);
        if(new Vector3(destination).DistanceTo(ObjectManager.Me.Position) &lt; travelDistance)
        {
            longMoveState = false;
            return false;
        }
        else
        {
            longMoveState = true;
            return true;
        }
    }


    public static FlightMasterDB getClosestFlightMasterFrom()
    {
        List&lt;FlightMasterDB&gt; FMLnfmd = fillDB();
        float tempDistance = 99999;
        FlightMasterDB returnObject = new FlightMasterDB("null", 0, new Vector3(0, 0, 0), false);

        foreach(var a in FMLnfmd)
        {
            if(a.alreadyDiscovered &amp;&amp; a.position.DistanceTo(ObjectManager.Me.Position) &lt; tempDistance &amp;&amp; (a.continent == checkContinent()))
            {
                tempDistance = a.position.DistanceTo(ObjectManager.Me.Position);
                returnObject = a;
            }
        }
        return returnObject;
    }

    public static FlightMasterDB getClosestFlightMasterTo()
    {
        List&lt;FlightMasterDB&gt; FMLgcfmt = fillDB();
        float tempDistance = 99999;
        FlightMasterDB returnObject = new FlightMasterDB("null", 0, new Vector3(0, 0, 0), false);

        foreach(var a in FMLgcfmt)
        {
            if(a.alreadyDiscovered &amp;&amp; a.position.DistanceTo(destinationVector) &lt; tempDistance &amp;&amp; (a.continent == checkContinent()))
            {
                tempDistance = a.position.DistanceTo(destinationVector);
                returnObject = a;
            }
        }
        return returnObject;
    }

    public static bool checkContinent()
    {
        if(Usefuls.ContinentId == (int)ContinentId.Kalimdor)
        {
            return true;
        }
        else
        {
            return false;
        }
        
    }

    public static void waitFlying()
    {

        while(ObjectManager.Me.IsOnTaxi)
        {
            Logging.Write("[FNV_Quester]: On taxi, waiting");
            Thread.Sleep(30000);
        }

        Logging.Write("[FNV_Quester]: Arrived at destination Flight Master, finished waiting");
    }

    public static List&lt;FlightMasterDB&gt; fillDB()
    {
        //True = Kalimdor ; False = Eastern Kingdoms
        List&lt;FlightMasterDB&gt; FMListe = new List&lt;FlightMasterDB&gt;();
        FlightMasterDB Stormwind = new FlightMasterDB("Stormwind", 352, new Vector3(-8835.76f, 490.084f, 109.6157f), false);
        FMListe.Add(Stormwind);
        FlightMasterDB ArathiHighlands = new FlightMasterDB("Arathi", 2835, new Vector3(-1240.03f, -2513.96f, 21.92969f), false);
        FMListe.Add(ArathiHighlands);
        FlightMasterDB Ashenvale = new FlightMasterDB("Ashenvale", 4267, new Vector3(2828.4f, -284.3f, 106.7f), true);
        FMListe.Add(Ashenvale);
        FlightMasterDB Darkshore = new FlightMasterDB("Darkshore", 3841, new Vector3(6343.2f, 561.651f, 15.79876f), true);
        FMListe.Add(Darkshore);
        FlightMasterDB Stranglethorn = new FlightMasterDB("Stranglethorn", 2859, new Vector3(-14477.9f, 464.101f, 36.38163f), false);
        FMListe.Add(Stranglethorn);
        FlightMasterDB Duskwood = new FlightMasterDB("Duskwood", 2409, new Vector3(-10513.8f, -1258.79f, 41.43174f), false);
        FMListe.Add(Duskwood);
        FlightMasterDB FeralasFeathermoon = new FlightMasterDB("Feralas, Feathermoon", 8019, new Vector3(-4370.5f, 3340f, 12f), true);
        FMListe.Add(FeralasFeathermoon);
        FlightMasterDB FeralasThalanaar = new FlightMasterDB("Feralas, Thalanaar", 4319, new Vector3(-4491f, -781f, -40f), true);
        FMListe.Add(FeralasThalanaar);
        FlightMasterDB Tanaris = new FlightMasterDB("Tanaris", 7823, new Vector3(-7224.9f, -3738.2f, 8.4f), true);
        FMListe.Add(Tanaris);
        FlightMasterDB Hinterlands = new FlightMasterDB("The Hinterlands", 8018, new Vector3(282.1f, -2001.3f, 194.1f), false);
        FMListe.Add(Hinterlands);
        FlightMasterDB Ironforge = new FlightMasterDB("Ironforge", 1573, new Vector3(-4821.13f, -1152.4f, 502.2116f), false);
        FMListe.Add(Ironforge);
        FlightMasterDB Menethil = new FlightMasterDB("Wetlands", 1571, new Vector3(-3793.2f, -782.052f, 9.014864f), false);
        FMListe.Add(Menethil);
        FlightMasterDB TheBarrens = new FlightMasterDB("The Barrens", 16227, new Vector3(-898.246f, -3769.65f, 11.71021f), true);
        FMListe.Add(TheBarrens);
        FlightMasterDB Redridge = new FlightMasterDB("Redridge Mountains", 931, new Vector3(-9435.8f, -2234.79f, 69.43174f), false);
        FMListe.Add(Redridge);
        FlightMasterDB Teldrassil = new FlightMasterDB("Teldrassil", 3838, new Vector3(8640.58f, 841.118f, 23.26363f), true);
        FMListe.Add(Teldrassil);
        FlightMasterDB Southshore = new FlightMasterDB("Hillsbrad Foothiils", 2432, new Vector3(-715.146f, -512.134f, 26.54455f), false);
        FMListe.Add(Southshore);
        FlightMasterDB Stonetalon = new FlightMasterDB("Stonetalon Mountains", 4407, new Vector3(2682.83f, 1466.45f, 233.6483f), true);
        FMListe.Add(Stonetalon);
        FlightMasterDB Thelsamar = new FlightMasterDB("Loch Modan", 1572, new Vector3(-5424.85f, -2929.87f, 347.5623f), false);
        FMListe.Add(Thelsamar);
        FlightMasterDB Theramore = new FlightMasterDB("Dustwallow Marsh", 4321, new Vector3(-3828.88f, -4517.51f, 10.66067f), true);
        FMListe.Add(Theramore);
        FlightMasterDB WesternP = new FlightMasterDB("Western Pleaguelands", 12596, new Vector3(928.3f, -1429.1f, 64.8f), false);
        FMListe.Add(WesternP);
        FlightMasterDB Westfall = new FlightMasterDB("Westfall", 523, new Vector3(-10628.8f, 1037.79f, 34.43174f), false);
        FMListe.Add(Westfall);
        FlightMasterDB EasternP = new FlightMasterDB("Eastern Pleaguelands", 12617, new Vector3(2269.9f, -5345.4f, 86.9f), false);
        FMListe.Add(EasternP);
        FlightMasterDB SearingGorge = new FlightMasterDB("Searing Gorge", 2941, new Vector3(-6559.1f, -1169.4f, 309.8f), false);
        FMListe.Add(SearingGorge);
        FlightMasterDB BurningSteppes = new FlightMasterDB("Burning Steppes", 2299, new Vector3(-8365.1f, -2758.5f, 185.6f), false);
        FMListe.Add(BurningSteppes);
        FlightMasterDB BlastedLands = new FlightMasterDB("Blasted Lands", 8609, new Vector3(-11110.2f, -3437.1f, 79.2f), false);
        FMListe.Add(BlastedLands);
        FlightMasterDB Azshara = new FlightMasterDB("Azshara", 12577, new Vector3(2718.2f, -3880.8f, 101.4f), true);
        FMListe.Add(Azshara);
        FlightMasterDB Felwood = new FlightMasterDB("Felwood", 12578, new Vector3(6204.2f, -1951.4f, 571.3f), true);
        FMListe.Add(Felwood);
        FlightMasterDB Winterspring = new FlightMasterDB("Winterspring", 11138, new Vector3(6800.5f, -4742.4f, 701.5f), true);
        FMListe.Add(Winterspring);
        FlightMasterDB UngoroCreater = new FlightMasterDB("Ungoro Crater", 10583, new Vector3(-6110.5f, -1140.4f, -186.9f), true);
        FMListe.Add(UngoroCreater);
        FlightMasterDB Silithus = new FlightMasterDB("Silithus", 15177, new Vector3(-6758.6f, 775.6f, 89f), true);
        FMListe.Add(Silithus);
        FlightMasterDB Desolace = new FlightMasterDB("Desolace", 6706, new Vector3(136f, 1326f, 193f), true);
        FMListe.Add(Desolace);
        return FMListe;
    }

    public static bool validFlight(String from, String to)
    {
        bool von = false;
        bool zu = false;
        List&lt;FlightMasterDB&gt; FMLvf = fillDB();

        for(int i = 0; i &lt; FMLvf.Count; i++)
        {
            if(FMLvf[i].name.Contains(from))
            {
                von = FMLvf[i].continent;
            }
            if(FMLvf[i].name.Contains(to))
            {
                zu = FMLvf[i].continent;
            }
        }
        return von != zu;
    }

    public static bool discoveredTaxiNodes(String from, String to)
    {

        List&lt;FlightMasterDB&gt; FMLDTN = fillDB();

        foreach(var ele in FMLDTN)
        {
            if(ele.name.Contains(from))
            {
                if(!ele.alreadyDiscovered)
                {
                    Logging.Write("[FNV_Quester]: Taxi node from " + ele.name + " has not been discovered so far. Abort taking taxi.");
                    return false;
                }
            }
        }

        foreach(var ele in FMLDTN)
        {
            if(ele.name.Contains(to))
            {
                if(!ele.alreadyDiscovered)
                {
                    Logging.Write("[FNV_Quester]: Taxi node to " + ele.name + " has not been discovered so far. Abort taking taxi.");
                    return false;
                }
            }
        }
        return true;
    }

    public static void takeTaxi(String from, String to)
    {

        List&lt;FlightMasterDB&gt; FMLtt = fillDB();
        bool canProceed = true;
        try
        {
            FMLtt = fillDB();
        }
        catch(Exception e)
        {
            Logging.Write("Error: " + e);
        }


        Vector3 myPos = ObjectManager.Me.Position;

        if(Usefuls.MapZoneName.Contains(to))
        {
            canProceed = false;
            Logging.Write("[FNV_Quester]: Already in the zone we are going to travel to. Skip flying");
        }

        if(canProceed)
        {

            if(validFlight(from, to))
            {
                Logging.Write("[FNV_Quester]: Unable to fly between Kalimdor and Eastern Kingdoms");
            }

            var position = new Vector3();
            int npcEntryId = 0;

            for(int i = 0; i &lt; FMLtt.Count; i++)
            {
                if(FMLtt[i].name.Contains(from))
                {
                    position = FMLtt[i].position;
                    npcEntryId = FMLtt[i].NPCId;
                    FMLtt[i].name.Contains(from);
                }
            }


            if(!ObjectManager.Me.IsOnTaxi)
            {
                wManager.wManagerSetting.ClearBlacklistOfCurrentProductSession();

                while(!wManager.Wow.Bot.Tasks.GoToTask.ToPositionAndIntecractWithNpc(position, npcEntryId, -1, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore) &amp;&amp; !Fight.InFight)
                {
                    wManager.wManagerSetting.ClearBlacklistOfCurrentProductSession();
                    wManager.Wow.Bot.Tasks.GoToTask.ToPositionAndIntecractWithNpc(position, npcEntryId, -1, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore);
                }
                if(wManager.Wow.Bot.Tasks.GoToTask.ToPositionAndIntecractWithNpc(position, npcEntryId, -1, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore))
                {
                    while(!ObjectManager.Me.IsOnTaxi)
                    {
                        Usefuls.SelectGossipOption(GossipOptionsType.taxi);

                        int node = Lua.LuaDoString&lt;int&gt;("for i=0,30 do if string.find(TaxiNodeName(i),'" + to + "') then return i end end");
                        Lua.LuaDoString("TakeTaxiNode(" + node + ")");
                        Logging.Write("[FNV_Quester]: Taking Taxi from " + from + " to " + to);
                        Thread.Sleep(Usefuls.Latency + 2500);
                    }
                }
            }
            waitFlying();
            return;
        }
    }

    public static void discoverTaxi(String discoverName)
    {
        FNVQuesterFlightMaster.Load();
        List&lt;FlightMasterDB&gt; FMLdt = fillDB();

        var position = new Vector3();
        int npcEntryId = 0;
        int j = 0;
        bool alreadyDiscoveredFlightMaster = false;

        for(int i = 0; i &lt; FMLdt.Count; i++)
        {
            if(FMLdt[i].name.Contains(discoverName))
            {
                if(FMLdt[i].alreadyDiscovered)
                {
                    Logging.Write("[FNV_Quester]: Flight Master of " + FMLdt[i].name + " already discovered. Skip it.");
                    alreadyDiscoveredFlightMaster = true;
                    break;
                }

                position = FMLdt[i].position;
                npcEntryId = FMLdt[i].NPCId;
                j = i;
            }
        }

        if(!alreadyDiscoveredFlightMaster)
        {

            if(!ObjectManager.Me.IsOnTaxi)
            {
                wManager.wManagerSetting.ClearBlacklistOfCurrentProductSession();

                while(!wManager.Wow.Bot.Tasks.GoToTask.ToPositionAndIntecractWithNpc(position, npcEntryId, -1, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore))
                {
                   // wManager.Wow.Helpers.Conditions.ForceIgnoreIsAttacked = true;
                    wManager.wManagerSetting.ClearBlacklistOfCurrentProductSession();
                    wManager.Wow.Bot.Tasks.GoToTask.ToPositionAndIntecractWithNpc(position, npcEntryId, -1, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore);
                }
                if(wManager.Wow.Bot.Tasks.GoToTask.ToPositionAndIntecractWithNpc(position, npcEntryId, -1, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore))
                {
                    Usefuls.SelectGossipOption(GossipOptionsType.taxi);
                    Thread.Sleep(Usefuls.Latency + 250);
                    //wManager.Wow.Helpers.Conditions.ForceIgnoreIsAttacked = true;
                }
            }
            Logging.Write("[FNV_Quester]: Flight Master " + FMLdt[j].name + " discovered");
            FMLdt[j].alreadyDiscovered = true;
            FNVQuesterFlightMaster.flightMasterSaveChanges(FMLdt[j]);
            //wManager.Wow.Helpers.Conditions.ForceIgnoreIsAttacked = false;
            
        }
        timer = 0;
        return;
    }

    }

    public class FlightMasterDB
    {
        public FlightMasterDB(String name, int NPCId, Vector3 position, bool continent, bool alreadyDiscovered)
        {
            this.name = name;
            this.NPCId = NPCId;
            this.position = position;
            this.continent = continent;
            this.alreadyDiscovered = alreadyDiscovered;
        }

        public FlightMasterDB(String name, int NPCId, Vector3 position, bool continent)
        {
            this.name = name;
            this.NPCId = NPCId;
            this.position = position;
            this.continent = continent;
            
        }

        public int NPCId { get; set; }
        public Vector3 position { get; set; }
        public String name { get; set; }
        public bool continent { get; set; }
        public bool alreadyDiscovered { get; set; }

    }

//Tram
public class Tram
{

    //Stormwind to Ironforge
    static Vector3 positionTramInIronforge = new Vector3(4.58065, 28.2097, 6.90526);
    static Vector3 positionTramInStormwind = new Vector3(4.581913, 2511.531, 7.091796);

    static Vector3 positionWaitTramIronforge = new Vector3(19.1, 28, -4.3);
    static Vector3 positionOnTramIronforge = new Vector3(4.8, 28.1, -4.3);

    static Vector3 positionWaitTramStormwind = new Vector3(15.3, 2510.4, -4.3);
    static Vector3 positionOnTramStormwind = new Vector3(4.3, 2510.6, -4.3);

    static Vector3 enterStormwindInside = new Vector3(67, 2490.7, -4.3);
    static Vector3 enterIronforgeInside = new Vector3(64.5, 10.2, -4.3);

    static Vector3 enterStormwindOutside = new Vector3(-8365, 536.9, 91.8);
    static Vector3 enterIronforgeOutside = new Vector3(-4836.7, -1304.6, 501.9);

    static Vector3 leavePosIronforge = new Vector3(-10.6, 30.2, -4.3);
    static Vector3 leavePosStormwind = new Vector3(-10.6, 2510.9, -4.3);

    static Vector3 playerFellDownIronforge = new Vector3(4.5, 28, -13.9);

    static int[] tramEntryArray = new int[6] { 176080, 176082, 176083, 176084, 176085, 176081 };

    //Ironforge to Stormwind
    static Vector3 waitPosPlayerInStormwindToIronforge = new Vector3(-32.8, 2512.1, -4.3);

    //Pos where upper Tram arrives and waits in Stormwind
    static Vector3 waitPosTramSwTramStormwind = new Vector3(-45.4007, 2512.15, 6.90526);
    //Pos where player waits on upper tram in Stormwind
    static Vector3 waitPosPlayerSwTramStormwind = new Vector3(-45.20206, 2512.266, -3.562748);

    static Vector3 waitPosSwTramIronforge = new Vector3(-45.399, 30.38013, 5.877773);

    static Vector3 leavePosSwTramIronforge = new Vector3(-61.8, 30.3, -4.3);
    static Vector3 waitPlayerOnTramPosSwTramIronforge = new Vector3(-34.49804, 2511.917, -4.3);
    static Vector3 posPlayerOnTramSwToIfInIronforge = new Vector3(-20.9837, 2459.93, -4.297);

    static Vector3 playerFellDownStormwind = new Vector3(-45, 2512.6, -13.9);

    static bool isRestarted = false;
    static Process[] pname = Process.GetProcessesByName(AppDomain.CurrentDomain.FriendlyName.Remove(AppDomain.CurrentDomain.FriendlyName.Length - 4));
    static Vector3 nullVector = new Vector3(0, 0, 0);


    public static void restartTram(String from)
    {
        switch(from)
        {
            case ("Stormwind"):
                takeTramStormwind();
                break;
            case ("Ironforge"):
                takeTramIronforge();
                break;
            default:
                Logging.Write("Something failed");
                break;
        }
    }

    public static void end()
    {
        Logging.Write("[FNV_Quester]: Ending Tream");
    }



    public static void takeTramStormwind()
    {
        Logging.Write("[FNV_Quester]: Taking Tram from Stormwind to Ironforge");

        if(!Usefuls.MapZoneName.Contains("Deep"))
        {
            while(!GoToTask.ToPosition(enterStormwindOutside))
            {
                GoToTask.ToPosition(enterStormwindOutside);
                Thread.Sleep(250);
            }

            wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;
            Logging.Write("[FNV_Quester]: Disable teleport during Tram");
            wManager.Wow.Helpers.MovementManager.Face(new Vector3(-8353.4, 521.4, 91.8));

            while(!Usefuls.MapZoneName.Contains("Deep"))
            {
                wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 250);
                Thread.Sleep(robotManager.Helpful.Others.Random(25, 50));
            }

        }

        if(Usefuls.MapZoneName.Contains("Deep"))
        {
            if(!GoToTask.ToPosition(enterStormwindInside))
            {
                GoToTask.ToPosition(enterStormwindInside);
                Thread.Sleep(250);
            }
            while(!GoToTask.ToPosition(waitPosPlayerInStormwindToIronforge))
            {
                GoToTask.ToPosition(waitPosPlayerInStormwindToIronforge);
                Thread.Sleep(250);
            }

            wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;
            var tram = (WoWGameObject)null;

            try
            {
                tram = chooseTramStormwind();
            }
            catch
            {

            }


            if(tram != null &amp;&amp; ObjectManager.Me.Position.DistanceTo(tram.Position) &lt; 200 &amp;&amp; !tram.Position.Equals(nullVector))
            {
                Logging.Write("[FNV_Quester]: Bad circle, restart... .");
                isRestarted = true;
                takeTramStormwind();
                end();
            }

            if(!isRestarted)
            {

                if(tram != null &amp;&amp; tram.Position.DistanceTo(nullVector) &gt; 1)
                {
                    while(tram.Position.DistanceTo(waitPosTramSwTramStormwind) &gt;= 5 || ObjectManager.Me.Position.DistanceTo(waitPosPlayerInStormwindToIronforge) &gt;= 5)
                    {
                        Thread.Sleep(500);
                    }

                    if(tram.Position.DistanceTo(waitPosTramSwTramStormwind) &lt; 5)
                    {
                        Lua.LuaDoString("ClearTarget()");
                        wManager.Wow.Helpers.MovementManager.Face(waitPosPlayerSwTramStormwind);

                        while(ObjectManager.Me.Position.DistanceTo(waitPosPlayerSwTramStormwind) &gt; 1)
                        {
                            MovementManager.MoveTo(waitPosPlayerSwTramStormwind);
                            Thread.Sleep(1000);

                            if(ObjectManager.Me.Position.DistanceTo(playerFellDownStormwind) &lt; 4)
                            {
                                Logging.Write("[FNV_Quester]: Fell down, while trying to take tram. Restart...");
                                restartTram("Stormwind");
                            }
                        }

                        GoToTask.ToPosition(waitPosPlayerSwTramStormwind);
                    }

                    while(tram.Position.DistanceTo(waitPosSwTramIronforge) &gt; 5)
                    {
                        Thread.Sleep(3000);
                    }

                    if(ObjectManager.Me.HaveBuff("Stealth"))
                    {
                        Lua.LuaDoString("CastSpellByName('Stealth')");
                    }

                    wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 1500);

                    if(ObjectManager.Me.Position.DistanceTo(posPlayerOnTramSwToIfInIronforge) &lt; 5)
                    {
                        MovementManager.MoveTo(leavePosSwTramIronforge);
                        Thread.Sleep(1000);

                        while(ObjectManager.Me.Position.DistanceTo(leavePosSwTramIronforge) &gt; 4)
                        {
                            MovementManager.MoveTo(leavePosSwTramIronforge);
                            Thread.Sleep(1000);
                        }
                    }

                    if(Usefuls.MapZoneName.Contains("Deep"))
                    {
                        if(!GoToTask.ToPosition(enterIronforgeInside))
                        {
                            GoToTask.ToPosition(enterIronforgeInside);
                            Thread.Sleep(250);
                        }
                    }

                    while(Usefuls.MapZoneName.Contains("Deep"))
                    {
                        wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 250);
                        Thread.Sleep(robotManager.Helpful.Others.Random(25, 50));
                    }

                    Logging.Write("[FNV_Quester]: Re enable teleport ");
                    wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = true;


                    while(!GoToTask.ToPosition(enterIronforgeOutside))
                    {
                        wManager.Wow.Helpers.MovementManager.Face(enterIronforgeOutside);
                        GoToTask.ToPosition(enterIronforgeOutside);
                        Thread.Sleep(250);
                    }

                }
                else if(Usefuls.MapZoneName.Contains("Tram") || Usefuls.MapZoneName.Contains("Stormwind"))
                {
                    Logging.Write("[FNV_Quester]: Unable to find tram, restart... .");
                    isRestarted = true;
                    restartTram("Stormwind");
                }

            }
        }

        isRestarted = false;
    }

    public static WoWGameObject chooseTramIronforge()
    {
        List&lt;WoWGameObject&gt; tramList = new List&lt;WoWGameObject&gt;();
        var tramTemp = (WoWGameObject)null;

        foreach(int ele in tramEntryArray)
        {
            tramTemp = null;
            try
            {
                tramTemp = ObjectManager.GetWoWGameObjectByEntry(ele).OrderBy(o =&gt; o.GetDistance).FirstOrDefault();
            }
            catch
            {
            }

            if(tramTemp != null &amp;&amp; tramTemp.IsValid &amp;&amp; !tramTemp.Equals((WoWGameObject)null) &amp;&amp; tramTemp.ToString().Contains("Subway"))
            {
                tramList.Add(tramTemp);
            }
            else
            {

            }
        }

        float distance = 0;
        float entryDistance = 0;
        foreach(var ele in tramList)
        {
            if(ObjectManager.Me.Position.DistanceTo(ele.Position) &gt;= distance)
            {
                distance = ObjectManager.Me.Position.DistanceTo(ele.Position);
                entryDistance = ele.Entry;
            }
        }

        foreach(var ele in tramList)
        {
            if(ele.Entry == entryDistance &amp;&amp; ele != null &amp;&amp; !ele.Position.Equals(nullVector))
            {
                if(ObjectManager.Me.Position.DistanceTo(ele.Position) &lt; 200)
                {
                    Logging.Write("[FNV_Quester]: Bad circle, restart... .");
                    restartTram("Ironforge");
                }

                Logging.Write("[FNV_Quester]: Choosing tram id: " + ele.Entry + " with a current position of " + ele.Position);
                return ele;
            }
        }
        return null;
    }

    public static WoWGameObject chooseTramStormwind()
    {
        List&lt;WoWGameObject&gt; tramList = new List&lt;WoWGameObject&gt;();
        var tramTemp = (WoWGameObject)null;

        foreach(int ele in tramEntryArray)
        {
            tramTemp = null;
            try
            {
                tramTemp = ObjectManager.GetWoWGameObjectByEntry(ele).OrderBy(o =&gt; o.GetDistance).FirstOrDefault();
            }
            catch
            {
            }

            if(tramTemp != null &amp;&amp; tramTemp.IsValid &amp;&amp; !tramTemp.Equals((WoWGameObject)null) &amp;&amp; tramTemp.ToString().Contains("Subway"))
            {
                tramList.Add(tramTemp);
            }
            else
            {

            }
        }

        float distance = 99999;
        float entryDistance = 0;
        foreach(var ele in tramList)
        {
            if(ObjectManager.Me.Position.DistanceTo(ele.Position) &lt;= distance)
            {
                distance = ObjectManager.Me.Position.DistanceTo(ele.Position);
                entryDistance = ele.Entry;
            }
        }

        foreach(var ele in tramList)
        {
            if(ele.Entry == entryDistance &amp;&amp; ele != null &amp;&amp; !ele.Position.Equals(nullVector))
            {
                if(ObjectManager.Me.Position.DistanceTo(ele.Position) &lt; 200)
                {
                    Logging.Write("[FNV_Quester]: Bad circle, restart... .");
                    restartTram("Stormwind");
                }

                Logging.Write("[FNV_Quester]: Choosing tram id: " + ele.Entry + " with a current position of " + ele.Position);
                return ele;
            }
        }

        return null;
    }

    public static void takeTramIronforge()
    {
        Logging.Write("[FNV_Quester]: Taking Tram from Ironforge to Stormwind");

        if(!Usefuls.MapZoneName.Contains("Deep"))
        {
            while(!GoToTask.ToPosition(enterIronforgeOutside))
            {
                GoToTask.ToPosition(enterIronforgeOutside);
                Thread.Sleep(250);
            }

            wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;
            Logging.Write("[FNV_Quester]: Disable teleport during Tram");
            wManager.Wow.Helpers.MovementManager.Face(new Vector3(-4839.4, -1320.9, 501.9));

            while(!Usefuls.MapZoneName.Contains("Deep"))
            {
                wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 250);
                Thread.Sleep(robotManager.Helpful.Others.Random(25, 50));
            }
        }

        if(Usefuls.MapZoneName.Contains("Deep"))
        {
            if(!GoToTask.ToPosition(enterIronforgeInside))
            {
                GoToTask.ToPosition(enterIronforgeInside);
                Thread.Sleep(250);
            }

            var pathEins = new List&lt;Vector3&gt;() {
new Vector3(42.56478f, 10.32987f, -4.29664f, "None"),
new Vector3(36.11083f, 10.30502f, -4.29664f, "None"),
new Vector3(29.11088f, 10.27806f, -4.29664f, "None"),
new Vector3(25.49891f, 10.26415f, -4.29664f, "None"),
new Vector3(20.57794f, 10.2452f, -4.29664f, "None"),
new Vector3(16.61328f, 11.97739f, -4.29664f, "None"),
new Vector3(17.03823f, 18.79025f, -4.29664f, "None"),
new Vector3(19.41723f, 25.35655f, -4.29664f, "None"),
};


                        while(ObjectManager.Me.Position.DistanceTo2D(pathEins.Last&lt;Vector3&gt;()) &gt; 5)
                        {
                            MovementManager.Go(pathEins); // or MovementManager.GoLoop(path);
                        }

            while(!GoToTask.ToPosition(positionWaitTramIronforge))
            {
                GoToTask.ToPosition(positionWaitTramIronforge);
                Thread.Sleep(250);
            }

            wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;

            var tram = (WoWGameObject)null;

            try
            {
                tram = chooseTramIronforge();
            }
            catch
            {

            }

            if(ObjectManager.Me.Position.DistanceTo(tram.Position) &lt; 200 &amp;&amp; tram != null &amp;&amp; !tram.Position.Equals(nullVector))
            {
                Logging.Write("[FNV_Quester]: Bad circle, restart... .");
                isRestarted = true;
                restartTram("Ironforge");
                end();
            }

            if(!isRestarted)
            {

                if(tram != null &amp;&amp; tram.Position.DistanceTo(nullVector) &gt; 1)
                {


                    while(tram.Position.DistanceTo(positionTramInIronforge) &gt;= 5 &amp;&amp; Usefuls.MapZoneName.Contains("Deep") &amp;&amp; !tram.Position.Equals(nullVector))
                    {
                        Thread.Sleep(1000);
                    }


                    if(tram.Position.DistanceTo(positionTramInIronforge) &lt; 5 &amp;&amp; Usefuls.MapZoneName.Contains("Deep"))
                    {
                        Lua.LuaDoString("ClearTarget()");
                        wManager.Wow.Helpers.MovementManager.Face(positionOnTramIronforge);

                        while(ObjectManager.Me.Position.DistanceTo(positionOnTramIronforge) &gt; 2)
                        {
                            MovementManager.MoveTo(positionOnTramIronforge);
                            Thread.Sleep(1000);

                            if(ObjectManager.Me.Position.DistanceTo(playerFellDownIronforge) &lt; 4)
                            {
                                Logging.Write("[FNV_Quester]: Fell down, while trying to take tram. Restart");
                                restartTram("Ironforge");
                            }
                        }

                        GoToTask.ToPosition(positionOnTramIronforge);
                    }


                    while(tram.Position.DistanceTo(positionTramInStormwind) &gt; 5 &amp;&amp; Usefuls.MapZoneName.Contains("Deep"))
                    {
                        Thread.Sleep(3000);
                    }

                    if(ObjectManager.Me.Position.DistanceTo(positionOnTramStormwind) &lt; 5 &amp;&amp; Usefuls.MapZoneName.Contains("Deep"))
                    {

                        Vector3 leavingTramPos = new Vector3(-4.500117, 2510.398, -4.18221, "None");
                        Vector3 leavingTramPosZwei = new Vector3(-8.363175, 2510.536, -4.291304, "None");

                        MovementManager.MoveTo(leavingTramPos);
                        Thread.Sleep(1000);
                        MovementManager.MoveTo(leavingTramPosZwei);
                        Thread.Sleep(1000);

                        var pathZwei = new List&lt;Vector3&gt;() {
new Vector3(-8.722651f, 2521.781f, -4.296569f, "None"),
new Vector3(-8.406331f, 2528.227f, -4.296569f, "None"),
new Vector3(-5.509378f, 2534.194f, -4.296569f, "None"),
new Vector3(1.102043f, 2536.338f, -4.296569f, "None"),
new Vector3(8.024714f, 2535.66f, -4.296569f, "None"),
new Vector3(13.7771f, 2531.926f, -4.296569f, "None"),
new Vector3(15.53208f, 2525.218f, -4.296569f, "None"),
new Vector3(19.39666f, 2520.334f, -4.296569f, "None"),
new Vector3(26.3053f, 2519.244f, -4.296569f, "None"),
new Vector3(31.07252f, 2514.534f, -4.296569f, "None"),
new Vector3(32.08603f, 2507.629f, -4.296569f, "None"),
new Vector3(32.20792f, 2500.735f, -4.296569f, "None"),
new Vector3(32.69915f, 2493.784f, -4.296569f, "None"),
new Vector3(38.39471f, 2490.469f, -4.296569f, "None"),
new Vector3(45.39016f, 2490.699f, -4.296569f, "None"),
new Vector3(52.39009f, 2490.728f, -4.296569f, "None"),
new Vector3(55.99506f, 2490.741f, -4.296569f, "None"),
new Vector3(62.99502f, 2490.766f, -4.296569f, "None"),
};


                        while(ObjectManager.Me.Position.DistanceTo2D(pathZwei.Last&lt;Vector3&gt;()) &gt; 5)
                        {
                            MovementManager.Go(pathZwei); // or MovementManager.GoLoop(path);

                            if(ObjectManager.Me.Position.DistanceTo2D(pathZwei.Last&lt;Vector3&gt;()) &lt;= 5)
                                break;
                        }


                        //MovementManager.MoveTo(leavePosStormwind);
                        /*
                        while(ObjectManager.Me.Position.DistanceTo(leavePosStormwind) &gt; 4)
                        {
                            MovementManager.MoveTo(leavePosStormwind);
                            Thread.Sleep(1000);

                        } */

                    }

                    if(Usefuls.MapZoneName.Contains("Deep"))
                    {
                        if(!GoToTask.ToPosition(enterStormwindInside))
                        {
                            GoToTask.ToPosition(enterStormwindInside);
                            Thread.Sleep(250);
                        }
                    }

                    while(Usefuls.MapZoneName.Contains("Deep"))
                    {
                        wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 250);
                        Thread.Sleep(robotManager.Helpful.Others.Random(25, 50));
                    }

                    Logging.Write("Re enable teleport ");
                    wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = true;


                    while(!GoToTask.ToPosition(enterStormwindOutside))
                    {
                        wManager.Wow.Helpers.MovementManager.Face(enterStormwindOutside);
                        GoToTask.ToPosition(enterStormwindOutside);
                        Thread.Sleep(250);
                    }

                }
                else if(Usefuls.MapZoneName.Contains("Tram") || Usefuls.MapZoneName.Contains("Ironforge"))
                {
                    Logging.Write("[FNV_Quester]: Unable to find tram, restart... .");
                    isRestarted = true;
                    restartTram("Ironforge");
                }

            }
        }
        isRestarted = false;
    }

    /*
    public static void takeTramIronforge()
    {
        Logging.Write("[FNV_Quester]: Taking Tram from Ironforge to Stormwind");

        if(!Usefuls.MapZoneName.Contains("Deep"))
        {
            while(!GoToTask.ToPosition(enterIronforgeOutside))
            {
                GoToTask.ToPosition(enterIronforgeOutside);
                Thread.Sleep(250);
            }

            wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;
            Logging.Write("[FNV_Quester]: Disable teleport during Tram");
            wManager.Wow.Helpers.MovementManager.Face(new Vector3(-4839.4, -1320.9, 501.9));

            while(!Usefuls.MapZoneName.Contains("Deep"))
            {
                wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 250);
                Thread.Sleep(robotManager.Helpful.Others.Random(25, 50));
            }
        }

        if(Usefuls.MapZoneName.Contains("Deep"))
        {
            if(!GoToTask.ToPosition(enterIronforgeInside))
            {
                GoToTask.ToPosition(enterIronforgeInside);
                Thread.Sleep(250);
            }

            GoToTask.ToPosition(new Vector3(26.31003, 9.936551, -4.29664));
            Thread.Sleep(250);
            GoToTask.ToPosition(new Vector3(17.09965, 12.71437, -4.29664));
            Thread.Sleep(250);
            GoToTask.ToPosition(new Vector3(18.14983, 22.89955, -4.29664));
            Thread.Sleep(250);

            while(!GoToTask.ToPosition(positionWaitTramIronforge))
            {
                GoToTask.ToPosition(positionWaitTramIronforge);
                Thread.Sleep(250);
            }

            wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;

            var tram = (WoWGameObject)null;

            try
            {
                tram = chooseTramIronforge();
            }
            catch
            {

            }

            if(ObjectManager.Me.Position.DistanceTo(tram.Position) &lt; 200 &amp;&amp; tram != null &amp;&amp; !tram.Position.Equals(nullVector))
            {
                Logging.Write("[FNV_Quester]: Bad circle, restart... .");
                isRestarted = true;
                restartTram("Ironforge");
                end();
            }

            if(!isRestarted)
            {

                if(tram != null &amp;&amp; tram.Position.DistanceTo(nullVector) &gt; 1)
                {


                    while(tram.Position.DistanceTo(positionTramInIronforge) &gt;= 5 &amp;&amp; Usefuls.MapZoneName.Contains("Deep") &amp;&amp; !tram.Position.Equals(nullVector))
                    {
                        Thread.Sleep(1000);
                    }


                    if(tram.Position.DistanceTo(positionTramInIronforge) &lt; 5 &amp;&amp; Usefuls.MapZoneName.Contains("Deep"))
                    {
                        Lua.LuaDoString("ClearTarget()");
                        wManager.Wow.Helpers.MovementManager.Face(positionOnTramIronforge);

                        while(ObjectManager.Me.Position.DistanceTo(positionOnTramIronforge) &gt; 2)
                        {
                            wManager.Wow.Helpers.MovementManager.Face(positionOnTramIronforge);
                            wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 125);
                            Thread.Sleep(robotManager.Helpful.Others.Random(10, 25));

                            if(ObjectManager.Me.Position.DistanceTo(playerFellDownIronforge) &lt; 4)
                            {
                                Logging.Write("[FNV_Quester]: Fell down, while trying to take tram. Restart");
                                restartTram("Ironforge");
                            }
                        }

                        GoToTask.ToPosition(positionOnTramIronforge);
                    }


                    while(tram.Position.DistanceTo(positionTramInStormwind) &gt; 5 &amp;&amp; Usefuls.MapZoneName.Contains("Deep"))
                    {
                        Thread.Sleep(3000);
                    }

                    if(ObjectManager.Me.Position.DistanceTo(positionOnTramStormwind) &lt; 5 &amp;&amp; Usefuls.MapZoneName.Contains("Deep"))
                    {

                        wManager.Wow.Helpers.Move.StrafeLeft(Move.MoveAction.PressKey, 350);

                        while(ObjectManager.Me.Position.DistanceTo(leavePosStormwind) &gt; 4)
                        {
                            wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 125);
                            Thread.Sleep(robotManager.Helpful.Others.Random(10, 25));

                        }

                    }

                    if(Usefuls.MapZoneName.Contains("Deep"))
                    {
                        if(!GoToTask.ToPosition(enterStormwindInside))
                        {
                            GoToTask.ToPosition(enterStormwindInside);
                            Thread.Sleep(250);
                        }
                    }

                    while(Usefuls.MapZoneName.Contains("Deep"))
                    {
                        wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 250);
                        Thread.Sleep(robotManager.Helpful.Others.Random(25, 50));
                    }

                    Logging.Write("Re enable teleport ");
                    wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = true;


                    while(!GoToTask.ToPosition(enterStormwindOutside))
                    {
                        wManager.Wow.Helpers.MovementManager.Face(enterStormwindOutside);
                        GoToTask.ToPosition(enterStormwindOutside);
                        Thread.Sleep(250);
                    }

                }
                else if(Usefuls.MapZoneName.Contains("Tram") || Usefuls.MapZoneName.Contains("Ironforge"))
                {
                    Logging.Write("[FNV_Quester]: Unable to find tram, restart... .");
                    isRestarted = true;
                    restartTram("Ironforge");
                }

            }
        }
        isRestarted = false;
    }
    */
}

//Additional functions for quests
public class Quests
{
    public static void abandon(string questName)
    {
        wManager.Wow.Helpers.Lua.LuaDoString("local name = '" + questName + "' for i=1,GetNumQuestLogEntries() do local questTitle, level, questTag, suggestedGroup, isHeader, isCollapsed, isComplete = GetQuestLogTitle(i) if string.find(questTitle, name) then SelectQuestLogEntry(i) SetAbandonQuest() AbandonQuest() end end");

    }

    public static bool hasFailed(string questName)
    {
        int temp = 0;
        temp = wManager.Wow.Helpers.Lua.LuaDoString&lt;int&gt;("local name = '" + questName + "'  for i=1,GetNumQuestLogEntries() do local questTitle, level, questTag, suggestedGroup, isHeader, isCollapsed, isComplete = GetQuestLogTitle(i) if string.find(questTitle, name) then SelectQuestLogEntry(i) local questTimer = GetQuestLogTimeLeft() return questTimer end end");

        if(temp &gt; 8)
        {
            return false;
        }
        else
        {
            return true;
        }
    }

    public static bool isComplete(string questName)
    {
        int temp;
        temp = wManager.Wow.Helpers.Lua.LuaDoString&lt;int&gt;("local name = '" + questName + "'  for i=1,GetNumQuestLogEntries() do local questTitle, level, questTag, isHeader, isCollapsed, isComplete = GetQuestLogTitle(i) if string.find(questTitle, name) then local questTitleZ, levelZ, questTagZ, isHeaderZ, isCollapsedZ, isCompleteZ = GetQuestLogTitle(i) return isCompleteZ end end");

        if(temp == 1)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    public static bool isFailed(string questName)
    {
        int temp;
        temp = wManager.Wow.Helpers.Lua.LuaDoString&lt;int&gt;("local name = '" + questName + "'  for i=1,GetNumQuestLogEntries() do local questTitle, level, questTag, isHeader, isCollapsed, isComplete = GetQuestLogTitle(i) if string.find(questTitle, name) then local questTitleZ, levelZ, questTagZ, isHeaderZ, isCollapsedZ, isCompleteZ = GetQuestLogTitle(i) return isCompleteZ end end");

        if(temp == -1)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
}


public class ProgressSettings : Settings
{
    public static bool inProgress = false;
        public static void Initialize()
        {
            ProgressSettings.Load();
        }

        public static void Dispose()
        {
            ProgressSettings.CurrentSettings.Save();
            //isLaunched = false;
        }

        public void Settings()
        {
            ProgressSettings.Load();
            ProgressSettings.CurrentSettings.ToForm();
            ProgressSettings.CurrentSettings.Save();
        }

    public ProgressSettings()
    {
        this.launcher = 2;
        this.dwarfStart = 1 + 1;
        this.humanStart = 1 + 1;
        this.nightelfStart = 1 + 1;
        this.dwarfHunter = 1 + 1;
        this.nightelfHunter = 1 + 1;
        this.nightelfDruid = 1 + 1;
        this.warlock = 1 + 1;
        this.kharanos = 1 + 1;
        this.elwynn = 1 + 1;
        this.westfallEins = 1 + 1;
        this.lochModanEins = 1 + 1;
        this.darkshoreEins = 10 + 1;
        this.westfallZwei = 1 + 1;
        this.lochModanZwei = 1 + 1;
        this.darkshoreZwei = 6 + 1;
        this.westfallDrei = 1 + 1;
        this.redridge = 1 + 1;
        this.duskwoodEins = 1 + 1;
        this.stonetalon = 14 + 1;
        this.darkshoreDrei = 1 + 1;
        this.duskwoodZwei = 1 + 1;
        this.wetlandsEins = 1 + 1;
        this.ashenvaleEins = 7 + 1;
        this.wetlandsZwei = 1 + 1;
        this.duskwoodDrei = 2 + 1;
        this.ashenvaleZwei = 7 + 1;
        this.duskwoodVier = 2 + 1;
        this.ashenvaleDrei = 6 + 1;
        this.thousandNeedles = 7 + 1;
        this.desolaceEins = 7 + 1;
        this.hillsbradEins = 2 + 1;
        this.stranglethornEins = 2 + 1;
        this.stranglethornZwei = 2 + 1;
        this.hillsbradZwei = 2 + 1;
        this.arathiEins = 2 + 1;
        this.stranglethornDrei = 2 + 1;
        this.dustwallowEins = 10 + 1;
        this.desolaceZwei = 9 + 1;
        this.swampOfSorrowsEins = 2 + 1;
        this.stranglethornVier = 2 + 1;
        this.badlandsEins = 2 + 1;
        this.alteracMountain = 2 + 1;
        this.badlandsZwei = 2 + 1;
        this.tanarisEins = 7 + 1;
        this.stranglethornFünf  = 2 + 1;
        this.hinterlandsEins = 2 + 1;
        this.feralasEins = 7 + 1;
        this.hinterlandsZwei = 2 + 1;

                //48+

        this.hinterlandsDrei = 2 + 1;
        this.blastedLandsEins = 2 + 1;
        this.blastedLandsZwei = 2 + 1;
        this.blastedLandsDrei = 2 + 1;
        this.burningSteppesEins = 2 + 1;
        this.burningSteppesZwei = 2 + 1;
        this.burningSteppesDrei = 2 + 1;
        this.easternPleaguelandsEins = 2 + 1;
        this.easternPleaguelandsZwei = 2 + 1;
        this.easternPleaguelandsDrei = 2 + 1;
        this.searingGorgeEins = 2 + 1;
        this.searingGorgeZwei = 2 + 1;
        this.searingGorgeDrei = 2 + 1;
        this.swampOfSorrowsZwei = 2 + 1;
        this.westernPleaguelandsEins = 2 + 1;
        this.westernPleaguelandsZwei = 2 + 1;
        this.westernPleaguelandsDrei = 2 + 1;

        //48+ Kalimdor

        this.azsharaEins = 7 + 1;
        this.azsharaZwei = 7 + 1;
        this.azsharaDrei = 7 + 1;
        this.felwoodEins = 7 + 1;
        this.felwoodZwei = 7 + 1;
        this.felwoodDrei = 7 + 1;
        this.silithusEins = 7 + 1;
        this.silithusZwei = 7 + 1;
        this.silithusDrei = 7 + 1;
        this.feralasZwei = 7 + 1;
        this.feralasDrei = 7 + 1;
        this.feralasVier = 7 + 1;
        this.tanarisZwei = 7 + 1;
        this.tanarisDrei = 7 + 1;
        this.ungoroEins = 7 + 1;
        this.ungoroZwei = 7 + 1;
        this.ungoroDrei = 7 + 1;
        this.winterspringEins = 7 + 1; 
        this.winterspringZwei = 7 + 1;
        this.winterspringDrei = 7 + 1;
        this.winterspringVier = 7 + 1;
    }
    

      public static ProgressSettings CurrentSettings { get; set; }

        public bool Save()
        {
            try
            {
                return Save(AdviserFilePathAndName("FNV_Progress", ObjectManager.Me.Name + "." + Usefuls.RealmName));
            }
            catch(Exception e)
            {
                Logging.WriteDebug("FNV_Progress =&gt; Save(): " + e);
                return false;
            }
        }

        public static bool Load()
        {
            try
            {
                if(File.Exists(AdviserFilePathAndName("FNV_Progress", ObjectManager.Me.Name + "." + Usefuls.RealmName)))
                {
                    CurrentSettings = Load&lt;ProgressSettings&gt;(AdviserFilePathAndName("FNV_Progress", ObjectManager.Me.Name + "." + Usefuls.RealmName));
                    return true;
                }

                ProgressSettings.CurrentSettings = new ProgressSettings();
            }
            catch(Exception e)
            {
                Logging.WriteDebug("FNV_Progress =&gt; Load(): " + e);
            }
            return false;
        }

    public static bool ResetCurrentCharactersProgressSaver()
    {
        try
        {
            if(File.Exists(AdviserFilePathAndName("FNV_Progress", ObjectManager.Me.Name + "." + Usefuls.RealmName)))
            {
                File.Delete(AdviserFilePathAndName("FNV_Progress", ObjectManager.Me.Name + "." + Usefuls.RealmName));
                ProgressSettings.CurrentSettings = new ProgressSettings();
                Logging.Write("[FNV_Quester]: FNV_Progress file of " + ObjectManager.Me.Name + " on server " + Usefuls.RealmName + " successfully deleted");
                return true;
            }
            else
            {
                Logging.Write("[FNV_Quester]: No FNV_Progress file found for " + ObjectManager.Me.Name + " on server " + Usefuls.RealmName);
                return false;
            }
        }
        catch(Exception e)
        {
            Logging.WriteDebug("FNV_Progress =&gt; Load(): " + e);
        }
         return false;
    }

        public int launcher { get; set; }
        public int dwarfStart { get; set; }
        public int dwarfHunter { get; set; }
        public int nightelfHunter { get; set; }
        public int nightelfDruid { get; set; }
        public int warlock { get; set; }
        public int nightelfStart { get; set; }
        public int humanStart { get; set; }
        public int kharanos { get; set; }
        public int elwynn { get; set; }
        public int westfallEins { get; set; }
        public int lochModanEins { get; set; }
        public int darkshoreEins { get; set; }
        public int westfallZwei { get; set; }
        public int lochModanZwei { get; set; }
        public int darkshoreZwei { get; set; }
        public int westfallDrei { get; set; }
        public int redridge { get; set; }
        public int duskwoodEins { get; set; }
        public int darkshoreDrei { get; set; }
        public int stonetalon { get; set; }
        public int duskwoodZwei { get; set; }
        public int wetlandsEins { get; set; }
        public int ashenvaleEins { get; set; }
        public int wetlandsZwei { get; set; }
        public int duskwoodDrei { get; set; }
        public int ashenvaleZwei { get; set; }
        public int duskwoodVier { get; set; }
        public int ashenvaleDrei { get; set; }
        public int thousandNeedles { get; set; }
        public int desolaceEins { get; set; }
        public int hillsbradEins { get; set; }
        public int stranglethornEins { get; set; }
        public int stranglethornZwei{ get; set; }
        public int hillsbradZwei { get; set; }
        public int arathiEins { get; set; }
        public int stranglethornDrei { get; set; }
        public int dustwallowEins { get; set; }
        public int desolaceZwei { get; set; }
        public int badlandsEins { get; set; }
        public int swampOfSorrowsEins { get; set; }
        public int stranglethornVier { get; set; }
        public int alteracMountain { get; set; }
        public int badlandsZwei { get; set; }
        public int tanarisEins { get; set; }
        public int stranglethornFünf { get; set; }
        public int hinterlandsEins { get; set; }
        public int feralasEins { get; set; }
        public int hinterlandsZwei { get; set; }

        //48+ Eastern Kingdoms
        public int hinterlandsDrei { get; set; }
        public int blastedLandsEins { get; set; }
        public int blastedLandsZwei { get; set; }
        public int blastedLandsDrei { get; set; }
        public int burningSteppesEins { get; set; }
        public int burningSteppesZwei { get; set; }
        public int burningSteppesDrei { get; set; }
        public int easternPleaguelandsEins { get; set; }
        public int easternPleaguelandsZwei { get; set; }
        public int easternPleaguelandsDrei { get; set; }
        public int searingGorgeEins { get; set; }
        public int searingGorgeZwei { get; set; }
        public int searingGorgeDrei { get; set; }
        public int swampOfSorrowsZwei { get; set; }
        public int westernPleaguelandsEins { get; set; }
        public int westernPleaguelandsZwei { get; set; }
        public int westernPleaguelandsDrei { get; set; }

        //48+ Kalimdor

        public int azsharaEins { get; set; }
        public int azsharaZwei { get; set; }
        public int azsharaDrei { get; set; }
        public int felwoodEins { get; set; }
        public int felwoodZwei { get; set; }
        public int felwoodDrei { get; set; }
        public int silithusEins { get; set; }
        public int silithusZwei { get; set; }
        public int silithusDrei { get; set; }
        public int feralasZwei { get; set; }
        public int feralasDrei { get; set; }
        public int feralasVier { get; set; }
        public int tanarisZwei { get; set; }
        public int tanarisDrei { get; set; }
        public int ungoroEins { get; set; }
        public int ungoroZwei { get; set; }
        public int ungoroDrei { get; set; }
        public int winterspringEins { get; set; }
        public int winterspringZwei { get; set; }
        public int winterspringDrei { get; set; }
        public int winterspringVier { get; set; }





}


/*
    //Settings   
    public class QuesterSettings
    {
        private static bool isLaunched;

        public static void Initialize()
        {
            isLaunched = true;
            FNVSettings.Load();

            while(isLaunched &amp; Products.IsStarted)
            {
                Thread.Sleep(500);
                Dispose();
            }
        }

        public static void Dispose()
        {
            FNVSettings.CurrentSettings.Save();
            //isLaunched = false;
        }

        public void Settings()
        {
            FNVSettings.Load();
            FNVSettings.CurrentSettings.ToForm();
            FNVSettings.CurrentSettings.Save();
        }
    }

    */

    [Serializable]
    public class FNVSettings : Settings
    {

        public static bool inProgress = false;
        public static void Initialize()
        {
            FNVSettings.Load();
        }

        public static void Dispose()
        {
            FNVSettings.CurrentSettings.Save();
            //isLaunched = false;
        }

        public void Settings()
        {
            FNVSettings.Load();
            FNVSettings.CurrentSettings.ToForm();
            FNVSettings.CurrentSettings.Save();
        }

        public FNVSettings()
        {
        //Completed profiles -&gt; True == completed
        this.launcher = false;
        this.dwarfStart = false;
        this.humanStart = false;
        this.nightelfStart = false;
        this.dwarfHunter = false;
        this.nightelfHunter = false;
        this.nightelfDruid = false;
        this.warlock = false;
        this.kharanos = false;
        this.elwynn = false;
        this.westfallEins = false;
        this.lochModanEins = false;
        this.darkshoreEins = false;
        this.westfallZwei = false;
        this.lochModanZwei = false;
        this.darkshoreZwei = false;
        this.westfallDrei = false;
        this.redridge = false;
        this.duskwoodEins = false;
        this.darkshoreDrei = false;
        this.stonetalon = false;
        this.duskwoodZwei = false;
        this.wetlandsEins = false;
        this.ashenvaleEins = false;
        this.wetlandsZwei = false;
        this.duskwoodDrei = false;
        this.ashenvaleZwei = false;
        this.duskwoodVier = false;
        this.ashenvaleDrei = false;
        this.thousandNeedles = false;
        this.desolaceEins = false; 
        this.hillsbradEins = false; 
        this.stranglethornEins = false;
        this.stranglethornZwei = false;
        this.hillsbradZwei = false;
        this.arathiEins = false;
        this.stranglethornDrei = false;
        this.dustwallowEins = false; 
        this.desolaceZwei = false; 
        this.swampOfSorrowsEins = false; 
        this.stranglethornVier = false; 
        this.badlandsEins = false; 
        this.alteracMountain = false;
        this.badlandsZwei = false;
        this.tanarisEins = false;
        this.stranglethornFünf  = false;
        this.hinterlandsEins = false;
        this.feralasEins = false; 
        this.hinterlandsZwei = false; 

        //48+

        this.hinterlandsDrei = false; 
        this.blastedLandsEins = false; 
        this.blastedLandsZwei = false; 
        this.blastedLandsDrei = false; 
        this.burningSteppesEins = false; 
        this.burningSteppesZwei = false; 
        this.burningSteppesDrei = false; 
        this.easternPleaguelandsEins = false; 
        this.easternPleaguelandsZwei = false; 
        this.easternPleaguelandsDrei = false; 
        this.searingGorgeEins = false; 
        this.searingGorgeZwei = false; 
        this.searingGorgeDrei = false; 
        this.swampOfSorrowsZwei = false; 
        this.westernPleaguelandsEins = false; 
        this.westernPleaguelandsZwei = false; 
        this.westernPleaguelandsDrei = false; 

        //48+ Kalimdor

        this.azsharaEins = false; 
        this.azsharaZwei = false; 
        this.azsharaDrei = false; 
        this.felwoodEins = false; 
        this.felwoodZwei = false; 
        this.felwoodDrei = false; 
        this.silithusEins = false; 
        this.silithusZwei = false; 
        this.silithusDrei = false; 
        this.feralasZwei = false; 
        this.feralasDrei = false; 
        this.feralasVier = false; 
        this.tanarisZwei = false; 
        this.tanarisDrei = false; 
        this.ungoroEins = false; 
        this.ungoroZwei = false; 
        this.ungoroDrei = false; 
        this.winterspringEins = false; 
        this.winterspringZwei = false; 
        this.winterspringDrei = false; 
        this.winterspringVier = false; 

            //FlightMaster discovered
            //Eastern Kingdoms
            this.ArathiHighlands = false;
            this.Wetlands = false;
            this.WesternPlaguelands = false;
            this.EasternPlaguelands = false;
            this.HillsbradFoothills = false;
            this.TheHinterlands = false;
            this.LochModan = false;
            this.Ironforge = false;
            this.SearingGorge = false;
            this.BurningSteppes = false;
            this.RedridgeMountains = false;
            this.Stormwind = false;
            this.Westfall = false;
            this.Duskwood = false;
            this.StranglethornValley = false;
            this.BlastedLands = false;

            //Kalimdor
            this.Teldrassil = false;
            this.Darkshore = false;
            this.Winterspring = false;
            this.Azshara = false;
            this.Ashenvale = false;
            this.StonetalonMountains = false;
            this.Desolace = false;
            this.TheBarrens = false;
            this.Tanaris = false;
            this.FeralasFeathermoon = false;
            this.FeralasThalanaar = false;
            this.UngoroCrater = false;
            this.DustwallowMarsh = false;
            this.Silithus = false;
            this.Moonglade = false;
            this.Felwood = false;

        }

    public static void flightMasterSaveChanges(FlightMasterDB needToChange)
    {

        if(needToChange.name.Contains("Arathi"))
            CurrentSettings.ArathiHighlands = true;

        if(needToChange.name.Contains("Wetlands"))
            CurrentSettings.Wetlands = true;

        if(needToChange.name.Contains("Western"))
            CurrentSettings.WesternPlaguelands = true;

        if(needToChange.name.Contains("Eastern"))
            CurrentSettings.EasternPlaguelands = true;

        if(needToChange.name.Contains("Hillsbrad"))
            CurrentSettings.HillsbradFoothills = true;

        if(needToChange.name.Contains("Hinterlands"))
            CurrentSettings.TheHinterlands = true;

        if(needToChange.name.Contains("Modan"))
            CurrentSettings.LochModan = true;

        if(needToChange.name.Contains("Ironforge"))
            CurrentSettings.Ironforge = true;

        if(needToChange.name.Contains("Searing"))
            CurrentSettings.SearingGorge = true;

        if(needToChange.name.Contains("Burning"))
            CurrentSettings.BurningSteppes = true;

        if(needToChange.name.Contains("Redridge"))
            CurrentSettings.RedridgeMountains = true;

        if(needToChange.name.Contains("Stormwind"))
            CurrentSettings.Stormwind = true;

        if(needToChange.name.Contains("Westfall"))
            CurrentSettings.Westfall = true;

        if(needToChange.name.Contains("Duskwood"))
            CurrentSettings.Duskwood = true;

        if(needToChange.name.Contains("Stranglethorn"))
            CurrentSettings.StranglethornValley = true;

        if(needToChange.name.Contains("Blasted"))
            CurrentSettings.BlastedLands = true;

        if(needToChange.name.Contains("Teldrassil"))
            CurrentSettings.Teldrassil = true;

        if(needToChange.name.Contains("Darkshore"))
            CurrentSettings.Darkshore = true;

        if(needToChange.name.Contains("Winterspring"))
            CurrentSettings.Winterspring = true;

        if(needToChange.name.Contains("Azshara"))
            CurrentSettings.Azshara = true;

        if(needToChange.name.Contains("Ashenvale"))
            CurrentSettings.Ashenvale = true;

        if(needToChange.name.Contains("Stonetalon"))
            CurrentSettings.StonetalonMountains = true;

        if(needToChange.name.Contains("Desolace"))
            CurrentSettings.Desolace = true;

        if(needToChange.name.Contains("TheBarrens"))
            CurrentSettings.TheBarrens = true;

        if(needToChange.name.Contains("Tanaris"))
            CurrentSettings.Tanaris = true;

        if(needToChange.name.Contains("TheBarrens"))
            CurrentSettings.TheBarrens = true;

        if(needToChange.name.Contains("Feathermoon"))
            CurrentSettings.FeralasFeathermoon = true;

        if(needToChange.name.Contains("Thalanaar"))
            CurrentSettings.FeralasThalanaar = true;

        if(needToChange.name.Contains("ro Crater"))
            CurrentSettings.UngoroCrater = true;

        if(needToChange.name.Contains("Dustwallow"))
            CurrentSettings.DustwallowMarsh = true;

        if(needToChange.name.Contains("Silithus"))
            CurrentSettings.Silithus = true;

        if(needToChange.name.Contains("Felwood"))
            CurrentSettings.Felwood = true;
            
            FNVSettings.CurrentSettings.Save();
            Logging.Write("[FNV_Quester]: Settings saved of Flight Master " + needToChange.name);
            return;
    }

        public static void flightMasterSaveChanges(String needToChange)
    {

        if(needToChange.Contains("Arathi"))
            CurrentSettings.ArathiHighlands = true;

        if(needToChange.Contains("Wetlands"))
            CurrentSettings.Wetlands = true;

        if(needToChange.Contains("Western"))
            CurrentSettings.WesternPlaguelands = true;

        if(needToChange.Contains("Eastern"))
            CurrentSettings.EasternPlaguelands = true;

        if(needToChange.Contains("Hillsbrad"))
            CurrentSettings.HillsbradFoothills = true;

        if(needToChange.Contains("Hinterlands"))
            CurrentSettings.TheHinterlands = true;

        if(needToChange.Contains("Modan"))
            CurrentSettings.LochModan = true;

        if(needToChange.Contains("Ironforge"))
            CurrentSettings.Ironforge = true;

        if(needToChange.Contains("Searing"))
            CurrentSettings.SearingGorge = true;

        if(needToChange.Contains("Burning"))
            CurrentSettings.BurningSteppes = true;

        if(needToChange.Contains("Redridge"))
            CurrentSettings.RedridgeMountains = true;

        if(needToChange.Contains("Stormwind"))
            CurrentSettings.Stormwind = true;

        if(needToChange.Contains("Westfall"))
            CurrentSettings.Westfall = true;

        if(needToChange.Contains("Duskwood"))
            CurrentSettings.Duskwood = true;

        if(needToChange.Contains("Stranglethorn"))
            CurrentSettings.StranglethornValley = true;

        if(needToChange.Contains("Blasted"))
            CurrentSettings.BlastedLands = true;

        if(needToChange.Contains("Teldrassil"))
            CurrentSettings.Teldrassil = true;

        if(needToChange.Contains("Darkshore"))
            CurrentSettings.Darkshore = true;

        if(needToChange.Contains("Winterspring"))
            CurrentSettings.Winterspring = true;

        if(needToChange.Contains("Azshara"))
            CurrentSettings.Azshara = true;

        if(needToChange.Contains("Ashenvale"))
            CurrentSettings.Ashenvale = true;

        if(needToChange.Contains("Stonetalon"))
            CurrentSettings.StonetalonMountains = true;

        if(needToChange.Contains("Desolace"))
            CurrentSettings.Desolace = true;

        if(needToChange.Contains("TheBarrens"))
            CurrentSettings.TheBarrens = true;

        if(needToChange.Contains("Tanaris"))
            CurrentSettings.Tanaris = true;

        if(needToChange.Contains("TheBarrens"))
            CurrentSettings.TheBarrens = true;

        if(needToChange.Contains("Feathermoon"))
            CurrentSettings.FeralasFeathermoon = true;

        if(needToChange.Contains("Thalanaar"))
            CurrentSettings.FeralasThalanaar = true;

        if(needToChange.Contains("ro Crater"))
            CurrentSettings.UngoroCrater = true;

        if(needToChange.Contains("Dustwallow"))
            CurrentSettings.DustwallowMarsh = true;

        if(needToChange.Contains("Silithus"))
            CurrentSettings.Silithus = true;

        if(needToChange.Contains("Felwood"))
            CurrentSettings.Felwood = true;
            
            FNVSettings.CurrentSettings.Save();
            Logging.Write("[FNV_Quester]: Settings saved of Flight Master " + needToChange);
            return;
    }

        public static FNVSettings CurrentSettings { get; set; }

        public bool Save()
        {
            try
            {
                return Save(AdviserFilePathAndName("FNV_Quester", ObjectManager.Me.Name + "." + Usefuls.RealmName));
            }
            catch(Exception e)
            {
                Logging.WriteDebug("FNV_Quester =&gt; Save(): " + e);
                return false;
            }
        }

        public static bool Load()
        {
            try
            {
                if(File.Exists(AdviserFilePathAndName("FNV_Quester", ObjectManager.Me.Name + "." + Usefuls.RealmName)))
                {
                    CurrentSettings = Load&lt;FNVSettings&gt;(AdviserFilePathAndName("FNV_Quester", ObjectManager.Me.Name + "." + Usefuls.RealmName));
                    return true;
                }

                FNVSettings.CurrentSettings = new FNVSettings();
            }
            catch(Exception e)
            {
                Logging.WriteDebug("FNV_Quester =&gt; Load(): " + e);
            }
            return false;
        }

        //Finished profiles -&gt; True == completed
        public bool launcher { get; set; }
        public bool dwarfStart { get; set; }
        public bool dwarfHunter { get; set; }
        public bool nightelfHunter { get; set; }
        public bool nightelfDruid { get; set; }
        public bool warlock { get; set; }
        public bool nightelfStart { get; set; }
        public bool humanStart { get; set; }
        public bool kharanos { get; set; }
        public bool elwynn { get; set; }
        public bool westfallEins { get; set; }
        public bool lochModanEins { get; set; }
        public bool darkshoreEins { get; set; }
        public bool westfallZwei { get; set; }
        public bool lochModanZwei { get; set; }
        public bool darkshoreZwei { get; set; }
        public bool westfallDrei { get; set; }
        public bool redridge { get; set; }
        public bool duskwoodEins { get; set; }
        public bool darkshoreDrei { get; set; }
        public bool stonetalon { get; set; }
        public bool duskwoodZwei { get; set; }
        public bool wetlandsEins { get; set; }
        public bool ashenvaleEins { get; set; }
        public bool wetlandsZwei { get; set; }
        public bool duskwoodDrei { get; set; }
        public bool ashenvaleZwei { get; set; }
        public bool duskwoodVier { get; set; }
        public bool ashenvaleDrei { get; set; }
        public bool thousandNeedles { get; set; }
        public bool desolaceEins { get; set; }
        public bool hillsbradEins { get; set; }
        public bool stranglethornEins { get; set; }
        public bool stranglethornZwei{ get; set; }
        public bool hillsbradZwei { get; set; }
        public bool arathiEins { get; set; }
        public bool stranglethornDrei { get; set; }
        public bool dustwallowEins { get; set; }
        public bool desolaceZwei { get; set; }
        public bool swampOfSorrowsEins { get; set; }
        public bool stranglethornVier { get; set; }
        public bool badlandsEins { get; set; }
        public bool alteracMountain { get; set; }
        public bool badlandsZwei { get; set; }
        public bool tanarisEins { get; set; }
        public bool stranglethornFünf { get; set; }
        public bool hinterlandsEins { get; set; }
        public bool feralasEins { get; set; }
        public bool hinterlandsZwei { get; set; }

                //48+ Eastern Kingdoms
        public bool hinterlandsDrei { get; set; }
        public bool blastedLandsEins { get; set; }
        public bool blastedLandsZwei { get; set; }
        public bool blastedLandsDrei { get; set; }
        public bool burningSteppesEins { get; set; }
        public bool burningSteppesZwei { get; set; }
        public bool burningSteppesDrei { get; set; }
        public bool easternPleaguelandsEins { get; set; }
        public bool easternPleaguelandsZwei { get; set; }
        public bool easternPleaguelandsDrei { get; set; }
        public bool searingGorgeEins { get; set; }
        public bool searingGorgeZwei { get; set; }
        public bool searingGorgeDrei { get; set; }
        public bool swampOfSorrowsZwei { get; set; }
        public bool westernPleaguelandsEins { get; set; }
        public bool westernPleaguelandsZwei { get; set; }
        public bool westernPleaguelandsDrei { get; set; }

        //48+ Kalimdor

        public bool azsharaEins { get; set; }
        public bool azsharaZwei { get; set; }
        public bool azsharaDrei { get; set; }
        public bool felwoodEins { get; set; }
        public bool felwoodZwei { get; set; }
        public bool felwoodDrei { get; set; }
        public bool silithusEins { get; set; }
        public bool silithusZwei { get; set; }
        public bool silithusDrei { get; set; }
        public bool feralasZwei { get; set; }
        public bool feralasDrei { get; set; }
        public bool feralasVier { get; set; }
        public bool tanarisZwei { get; set; }
        public bool tanarisDrei { get; set; }
        public bool ungoroEins { get; set; }
        public bool ungoroZwei { get; set; }
        public bool ungoroDrei { get; set; }
        public bool winterspringEins { get; set; }
        public bool winterspringZwei { get; set; }
        public bool winterspringDrei { get; set; }
        public bool winterspringVier { get; set; }



       // public bool hinterlandsZwei { get; set; }

        public bool defaultSettings { get; set; }
       // public bool dwarfStart { get; set; }
       // public bool nightelfStart { get; set; }
        //public bool humanStart { get; set; }
      //  public bool westfallEins { get; set; }
        public bool lochModan { get; set; }
        public bool auberdine { get; set; }
       // public bool westfallZwei { get; set; }
        public bool lakeshire { get; set; }
        public bool wetlands { get; set; }
        public bool ashenvale { get; set; }
       // public bool thousandNeedles { get; set; }
        public bool dustwallow { get; set; }
        public bool badlands { get; set; }
        public bool alterac { get; set; }
        public bool swampOfSorrows { get; set; }
        public bool tanaris { get; set; }
        public bool stranglethorn { get; set; }
        //public bool hinterlandsEins { get; set; }
        public bool feralas { get; set; }
       // public bool hinterlandsZwei { get; set; }

        //FlightMaster
        //Eastern Kingdoms
        public bool Stormwind { get; set; }
        public bool Westfall { get; set; }
        public bool RedridgeMountains { get; set; }
        public bool Duskwood { get; set; }
        public bool StranglethornValley { get; set; }
        public bool Ironforge { get; set; }
        public bool BurningSteppes { get; set; }
        public bool BlastedLands { get; set; }
        public bool SearingGorge { get; set; }
        public bool LochModan { get; set; }
        public bool Wetlands { get; set; }
        public bool ArathiHighlands { get; set; }
        public bool HillsbradFoothills { get; set; }
        public bool WesternPlaguelands { get; set; }
        public bool EasternPlaguelands { get; set; }
        public bool TheHinterlands { get; set; }

        //Kalimdor
        public bool Ashenvale { get; set; }
        public bool Azshara { get; set; }
        public bool Darkshore { get; set; }
        public bool Teldrassil { get; set; }
        public bool Desolace { get; set; }
        public bool DustwallowMarsh { get; set; }
        public bool Felwood { get; set; }
        public bool FeralasFeathermoon { get; set; }
        public bool FeralasThalanaar { get; set; }
        public bool Moonglade { get; set; }
        public bool Silithus { get; set; }
        public bool StonetalonMountains { get; set; }
        public bool Tanaris { get; set; }
        public bool TheBarrens { get; set; }
        public bool UngoroCrater { get; set; }
        public bool Winterspring { get; set; }

    }

    //Buy and check bags
    public class bags
    {
        public static bool bagsStarted = false;

        public static int bagsEquipped()
        {
            int returnValue = 0;
            string empty = "";

            for(int i = 20; i &lt;= 23; i++)
            {
                empty = wManager.Wow.Helpers.Lua.LuaDoString&lt;string&gt;("return GetInventoryItemLink('player', " + i + ")");

                if(empty.Contains("o"))
                    returnValue++;
            }

            return returnValue;
        }

        public static string checkMoney()
        {
            string returnVariableNameZ = "";

            returnVariableNameZ = wManager.Wow.Helpers.Lua.LuaDoString("returnVariableNameZ = GetMoney() return returnVariableNameZ", returnVariableNameZ);

            return returnVariableNameZ;
        }

        public static bool canEquip()
        {
            string returnVariableName = "";

            returnVariableName = wManager.Wow.Helpers.Lua.LuaDoString("returnVariableName = GetInventoryItemLink('player', 23 ) return returnVariableName", returnVariableName);


            if(returnVariableName.Equals(""))
            {
                return true;
            }
            else
            {
                return false;
            }

        }

    }


    //Abandon Quests
    public class abandonQuest
    {

        public static void abandon(string questName)
        {

            string name = questName;

            wManager.Wow.Helpers.Lua.LuaDoString("local name = '" + name + "' for i=1,GetNumQuestLogEntries() do local questTitle, level, questTag, suggestedGroup, isHeader, isCollapsed, isComplete = GetQuestLogTitle(i) if string.find(questTitle, name) then SelectQuestLogEntry(i) SetAbandonQuest() AbandonQuest() end end");


        }

    }



    //Throw away items - by Reapler
    public class throwAway
    {
        public static int GetItemQuantity(string itemName)
        {
            var execute =
                "local itemCount = 0; " +
                "for b=0,4 do " +
                    "if GetBagName(b) then " +
                        "for s=1, GetContainerNumSlots(b) do " +
                            "local itemLink = GetContainerItemLink(b, s) " +
                            "if itemLink then " +
                                "local _, stackCount = GetContainerItemInfo(b, s)\t " +
                                "if string.find(itemLink, \"" + itemName + "\") then " +
                                    "itemCount = itemCount + stackCount; " +
                                "end " +
                            "end " +
                        "end " +
                    "end " +
                "end; " +
                "return itemCount; ";
            return Lua.LuaDoString&lt;int&gt;(execute);
        }

        /// &lt;summary&gt;
        /// Used to delete all items by name.
        /// &lt;/summary&gt;
        /// &lt;param name="itemName"&gt;The item to delete.&lt;/param&gt;
        /// &lt;param name="leaveAmount"&gt;The amount of items which remain in the bag.&lt;/param&gt;
        /// &lt;remarks&gt;Bug at links with "-"&lt;/remarks&gt;
        public static void DeleteItems(string itemName, int leaveAmount)
        {
            var itemQuantity = GetItemQuantity(itemName) - leaveAmount;
            if(string.IsNullOrWhiteSpace(itemName) || itemQuantity &lt;= 0)
                return;
            var execute =
                "local itemCount = " + itemQuantity + "; " +
                "local deleted = 0; " +
                "for b=0,4 do " +
                    "if GetBagName(b) then " +
                        "for s=1, GetContainerNumSlots(b) do " +
                            "local itemLink = GetContainerItemLink(b, s) " +
                            "if itemLink then " +
                                "local _, stackCount = GetContainerItemInfo(b, s)\t " +
                                "local leftItems = itemCount - deleted; " +
                                "if string.find(itemLink, \"" + itemName + "\") and leftItems &gt; 0 then " +
                                    "if stackCount &lt;= 1 then " +
                                        "PickupContainerItem(b, s); " +
                                        "DeleteCursorItem(); " +
                                        "deleted = deleted + 1; " +
                                    "else " +
                                        "if (leftItems &gt; stackCount) then " +
                                            "SplitContainerItem(b, s, stackCount); " +
                                            "DeleteCursorItem(); " +
                                            "deleted = deleted + stackCount; " +
                                        "else " +
                                            "SplitContainerItem(b, s, leftItems); " +
                                            "DeleteCursorItem(); " +
                                            "deleted = deleted + leftItems; " +
                                        "end " +
                                    "end " +
                                "end " +
                            "end " +
                        "end " +
                    "end " +
                "end; ";
            Lua.LuaDoString(execute);
        }
    }


public class Darnassus
{
    private static Vector3 darnassusEnterPos = new Vector3(8775.104, 962.8825, 30.33067);
    private static Vector3 darnassusLeavePos = new Vector3(9945.827, 2598.705, 1316.187);

    public static void enter()
    {
        Logging.Write("[FNV_Quester]: Moving to position to enter Darnassus portal...");

        GoToTask.ToPosition(darnassusEnterPos);

        Logging.Write("[FNV_Quester]: Enter Darnassus, disable teleport...");

        wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;

        Vector3 pos = new Vector3(8812.807f, 972.6884f, 32.50122f);

        while(ObjectManager.Me.Position.DistanceTo(pos) &gt; 1 &amp;&amp; Usefuls.SubMapZoneName.Contains("theran Village"))
        {
            wManager.Wow.Helpers.MovementManager.Face(pos);
            wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 125);
            Thread.Sleep(robotManager.Helpful.Others.Random(10, 25));
        }

        Logging.Write("[FNV_Quester]: Reenable teleport");

        wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = true;
    }

    public static void leave()
    {
        Logging.Write("[FNV_Quester]: Moving to position to leave Darnassus portal...");

        GoToTask.ToPosition(darnassusLeavePos);

        Logging.Write("[FNV_Quester]: Leave Darnassus, disable teleport...");

        wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;

        Vector3 pos = new Vector3(9946.378f, 2642.551f, 1316.749f);

        while(ObjectManager.Me.Position.DistanceTo(pos) &gt; 1 &amp;&amp; Usefuls.MapZoneName.Contains("Darnassus"))
        {
            wManager.Wow.Helpers.MovementManager.Face(pos);
            wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 125);
            Thread.Sleep(robotManager.Helpful.Others.Random(10, 25));
        }

        Logging.Write("[FNV_Quester]: Reenable teleport");
        wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = true;
    }
}

    [Serializable]
    public class FNVQuesterFlightMaster : Settings
    {
        public FNVQuesterFlightMaster()
        {
            //FlightMaster discovered
            //Eastern Kingdoms
            this.ArathiHighlands = false;
            this.Wetlands = false;
            this.WesternPlaguelands = false;
            this.EasternPlaguelands = false;
            this.HillsbradFoothills = false;
            this.TheHinterlands = false;
            this.LochModan = false;
            this.Ironforge = false;
            this.SearingGorge = false;
            this.BurningSteppes = false;
            this.RedridgeMountains = false;
            this.Stormwind = false;
            this.Westfall = false;
            this.Duskwood = false;
            this.StranglethornValley = false;
            this.BlastedLands = false;

            //Kalimdor
            this.Teldrassil = false;
            this.Darkshore = false;
            this.Winterspring = false;
            this.Azshara = false;
            this.Ashenvale = false;
            this.StonetalonMountains = false;
            this.Desolace = false;
            this.TheBarrens = false;
            this.Tanaris = false;
            this.FeralasFeathermoon = false;
            this.FeralasThalanaar = false;
            this.UngoroCrater = false;
            this.DustwallowMarsh = false;
            this.Silithus = false;
            this.Moonglade = false;
            this.Felwood = false;

        }

    public static void flightMasterSaveChanges(FlightMasterDB needToChange)
    {

        if(needToChange.name.Contains("Arathi"))
            CurrentSettings.ArathiHighlands = true;

        if(needToChange.name.Contains("Wetlands"))
            CurrentSettings.Wetlands = true;

        if(needToChange.name.Contains("Western"))
            CurrentSettings.WesternPlaguelands = true;

        if(needToChange.name.Contains("Eastern"))
            CurrentSettings.EasternPlaguelands = true;

        if(needToChange.name.Contains("Hillsbrad"))
            CurrentSettings.HillsbradFoothills = true;

        if(needToChange.name.Contains("Hinterlands"))
            CurrentSettings.TheHinterlands = true;

        if(needToChange.name.Contains("Modan"))
            CurrentSettings.LochModan = true;

        if(needToChange.name.Contains("Ironforge"))
            CurrentSettings.Ironforge = true;

        if(needToChange.name.Contains("Searing"))
            CurrentSettings.SearingGorge = true;

        if(needToChange.name.Contains("Burning"))
            CurrentSettings.BurningSteppes = true;

        if(needToChange.name.Contains("Redridge"))
            CurrentSettings.RedridgeMountains = true;

        if(needToChange.name.Contains("Stormwind"))
            CurrentSettings.Stormwind = true;

        if(needToChange.name.Contains("Westfall"))
            CurrentSettings.Westfall = true;

        if(needToChange.name.Contains("Duskwood"))
            CurrentSettings.Duskwood = true;

        if(needToChange.name.Contains("Stranglethorn"))
            CurrentSettings.StranglethornValley = true;

        if(needToChange.name.Contains("Blasted"))
            CurrentSettings.BlastedLands = true;

        if(needToChange.name.Contains("Teldrassil"))
            CurrentSettings.Teldrassil = true;

        if(needToChange.name.Contains("Darkshore"))
            CurrentSettings.Darkshore = true;

        if(needToChange.name.Contains("Winterspring"))
            CurrentSettings.Winterspring = true;

        if(needToChange.name.Contains("Azshara"))
            CurrentSettings.Azshara = true;

        if(needToChange.name.Contains("Ashenvale"))
            CurrentSettings.Ashenvale = true;

        if(needToChange.name.Contains("Stonetalon"))
            CurrentSettings.StonetalonMountains = true;

        if(needToChange.name.Contains("Desolace"))
            CurrentSettings.Desolace = true;

        if(needToChange.name.Contains("Tanaris"))
            CurrentSettings.Tanaris = true;

        if(needToChange.name.Contains("The Barrens"))
            CurrentSettings.TheBarrens = true;

        if(needToChange.name.Contains("Feathermoon"))
            CurrentSettings.FeralasFeathermoon = true;

        if(needToChange.name.Contains("Thalanaar"))
            CurrentSettings.FeralasThalanaar = true;

        if(needToChange.name.Contains("ro Crater"))
            CurrentSettings.UngoroCrater = true;

        if(needToChange.name.Contains("Dustwallow"))
            CurrentSettings.DustwallowMarsh = true;

        if(needToChange.name.Contains("Silithus"))
            CurrentSettings.Silithus = true;

        if(needToChange.name.Contains("Felwood"))
            CurrentSettings.Felwood = true;

        FNVQuesterFlightMaster.CurrentSettings.Save();
        Logging.Write("[FNV_FlightMaster]: Settings saved of Flight Master " + needToChange.name);
        return;
    }

        public static FNVQuesterFlightMaster CurrentSettings { get; set; }

        public bool Save()
        {
            try
            {
                return Save(AdviserFilePathAndName("FNVQuesterFlightMaster", ObjectManager.Me.Name + "." + Usefuls.RealmName));
            }
            catch(Exception e)
            {
                Logging.WriteDebug("FNVQuesterFlightMaster =&gt; Save(): " + e);
                return false;
            }
        }

        public static bool Load()
        {
            try
            {
                if(File.Exists(AdviserFilePathAndName("FNVQuesterFlightMaster", ObjectManager.Me.Name + "." + Usefuls.RealmName)))
                {
                    CurrentSettings = Load&lt;FNVQuesterFlightMaster&gt;(AdviserFilePathAndName("FNVQuesterFlightMaster", ObjectManager.Me.Name + "." + Usefuls.RealmName));
                    return true;
                }

                FNVQuesterFlightMaster.CurrentSettings = new FNVQuesterFlightMaster();
            }
            catch(Exception e)
            {
                Logging.WriteDebug("FNVQuesterFlightMaster =&gt; Load(): " + e);
            }
            return false;
        }


        //FlightMaster
        //Eastern Kingdoms
        public bool Stormwind { get; set; }
        public bool Westfall { get; set; }
        public bool RedridgeMountains { get; set; }
        public bool Duskwood { get; set; }
        public bool StranglethornValley { get; set; }
        public bool Ironforge { get; set; }
        public bool BurningSteppes { get; set; }
        public bool BlastedLands { get; set; }
        public bool SearingGorge { get; set; }
        public bool LochModan { get; set; }
        public bool Wetlands { get; set; }
        public bool ArathiHighlands { get; set; }
        public bool HillsbradFoothills { get; set; }
        public bool WesternPlaguelands { get; set; }
        public bool EasternPlaguelands { get; set; }
        public bool TheHinterlands { get; set; }

        //Kalimdor

        public bool Ashenvale { get; set; }
        public bool Azshara { get; set; }
        public bool Darkshore { get; set; }
        public bool Teldrassil { get; set; }
        public bool Desolace { get; set; }
        public bool DustwallowMarsh { get; set; }
        public bool Felwood { get; set; }
        public bool FeralasFeathermoon { get; set; }
        public bool FeralasThalanaar { get; set; }
        public bool Moonglade { get; set; }
        public bool Silithus { get; set; }
        public bool StonetalonMountains { get; set; }
        public bool Tanaris { get; set; }
        public bool TheBarrens { get; set; }
        public bool UngoroCrater { get; set; }
        public bool Winterspring { get; set; }

    }

public class Boat
{
    private static bool _boatTaken = false;

    public static void menethilToAuberdine()
    {

        // Settings
        var zeppelinEntryId = 176310; // Zeppelin/Ship EntryId
                                      // From
        var fromZeppelinWaitPosition = new Vector3(-3709.475, -575.0988, 0); // Position where Zeppelin/Ship waits players (from)
        var fromPlayerWaitPosition = new Vector3(-3727.4, -581.3, 6.2); // Position where the player waits Zeppelin/Ship (from)
        var fromPlayerInZeppelinPosition = new Vector3(-3713.333, -571.7416, 6.098111); // Position where the player waits in the Zeppelin/Ship (from)
                                                                                        // To
        var toZeppelinWaitPosition = new Vector3(6406.216, 823.0809, 0); // Position where Zeppelin/Ship waits players (to)
        var toPlayerLeavePosition = new Vector3(6461.408, 806.1595, 6.770809); // Position to go out the Zeppelin/Ship (to)
                                                                               //Pos1
        var enterPos1 = new Vector3(-3724.827, -581.0698, 6.191196);
        //Pos2
        var enterPos2 = new Vector3(-3723.727, -580.3727, 6.184784);
        _boatTaken = false;

        if(!_boatTaken)
        {
            // Change WRobot settings:
            Logging.Write("[FNV_Quester]: Taking boat from Menethil to Auberdine");
            wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;
            wManager.wManagerSetting.CurrentSetting.Repair = false;
            wManager.wManagerSetting.CurrentSetting.Selling = false;
            wManager.wManagerSetting.CurrentSetting.UsePathsFinder = false;

            // Code:
            if(!Conditions.InGameAndConnectedAndProductStartedNotInPause)
                return;

            while(Products.IsStarted &amp;&amp; !_boatTaken)
            {
                while(Usefuls.ContinentId != (int)ContinentId.Kalimdor)
                {
                    if(!ObjectManager.Me.InTransport)
                    {
                        if(GoToTask.ToPosition(fromPlayerWaitPosition))
                        {
                            var zeppelin = ObjectManager.GetWoWGameObjectByEntry(zeppelinEntryId).OrderBy(o =&gt; o.GetDistance).FirstOrDefault();
                            if(zeppelin != null &amp;&amp; zeppelin.Position.DistanceTo(fromZeppelinWaitPosition) &lt; 1)
                            {

                                MovementManager.MoveTo(enterPos1);
                                if(GoToTask.ToPosition(enterPos1))
                                    MovementManager.MoveTo(enterPos2);

                                Lua.LuaDoString("ClearTarget()");

                                //wManager.Wow.Helpers.MovementManager.Face(new Vector3(-3713.333, -571.7416, 6.098111));

                                MovementManager.MoveTo(fromPlayerInZeppelinPosition);
                            }
                        }
                    }
                }
                while(Usefuls.ContinentId == (int)ContinentId.Kalimdor)
                {
                    if(ObjectManager.Me.InTransport)
                    {
                        var zeppelin = ObjectManager.GetWoWGameObjectByEntry(zeppelinEntryId).OrderBy(o =&gt; o.GetDistance).FirstOrDefault();
                        if(zeppelin != null &amp;&amp; zeppelin.Position.DistanceTo(toZeppelinWaitPosition) &lt; 1)
                        {
                            MovementManager.MoveTo(toPlayerLeavePosition);
                            break;
                        }
                    }
                }

                Logging.Write("[FNV_Quester]: Boat taken from Menethil to Auberdine");

                wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = true;
                wManager.wManagerSetting.CurrentSetting.Repair = true;
                wManager.wManagerSetting.CurrentSetting.Selling = true;
                wManager.wManagerSetting.CurrentSetting.UsePathsFinder = true;
                _boatTaken = true;
            }
            return;
        }
        return;
    }
}

public class Key
{
    public static bool haveKey(int keyId)
    {
        bool haveKey = Lua.LuaDoString&lt;bool&gt;("local itemIdSearch = " + keyId + "; local bag = KEYRING_CONTAINER; for slot = 1,MAX_CONTAINER_ITEMS do local itemLink = GetContainerItemLink(bag,slot); local _, itemCount = GetContainerItemInfo(bag,slot); if itemLink and itemCount then local _,_,itemId = string.find(itemLink, '.*|Hitem:(%d+):.*'); if itemId and tonumber(itemId) == itemIdSearch then return true end end end return false");
        return haveKey;
    }
}




public class Authentication
{
    
    private readonly string orderId;
    private readonly string productId;
    private readonly string wRobotAuthKey;

    private readonly BackgroundWorker _validationThread = new BackgroundWorker();
    private bool _isRunning = false;
    private string authUrl;

    public Authentication(string orderId, string productId)
    {
    
        return;  if (orderId == null)
        {
            MessageBox.Show("You need to enter your transaction id (from your Rocketr email) into the plugin settings to use this!");
        }

        this.orderId = orderId;
        this.productId = productId;

        this.wRobotAuthKey = robotManager.Helpful.Others.StringBetween(authManager.LoginServer.GetSubcriptionInfoThread(), robotManager.Translate.Get("License Key") + ": ", "...  - " + robotManager.Translate.Get("Subscription time expire"));
            authUrl = "http://51.38.127.249:8080/authenticate?orderId=" + orderId.Trim() + "&amp;productId=" + productId + "&amp;wRobotAuthKey=" + wRobotAuthKey;
        


        _isRunning = true;
        _validationThread.DoWork += CheckValidiation;
        _validationThread.RunWorkerAsync();
    }
    
    ~Authentication()
    {
        _isRunning = false;
        _validationThread.DoWork -= CheckValidiation;
        _validationThread.Dispose();
    }

    private void CheckValidiation(object sender, DoWorkEventArgs e)
    {
        while (Products.IsStarted &amp;&amp; _isRunning)
        {
            try
            {
                bool timedOut = false;
                HttpWebResponse content = null;
                try
                {
                    var request = (HttpWebRequest)WebRequest.Create(authUrl);
                    request.Timeout = 30000;
                    request.ReadWriteTimeout = 30000;
                    content = (HttpWebResponse)request.GetResponse();
                }
                catch (Exception ex)
                {
                    timedOut = true;
                }
                
                //give it another try
                if ((content != null &amp;&amp; content.StatusCode != HttpStatusCode.OK) || timedOut)
                {
                    Thread.Sleep(60 * 1000);
                    try
                    {
                        var request = (HttpWebRequest)WebRequest.Create(authUrl);
                        request.Timeout = 30000;
                        request.ReadWriteTimeout = 30000;
                        content = (HttpWebResponse)request.GetResponse();
                        timedOut = false;
                    }
                    catch (Exception ex)
                    {
                        timedOut = true;
                    }
                }

                string result = content != null ? new StreamReader(content.GetResponseStream()).ReadToEnd() : "false";

                if (!bool.Parse(result) || (content != null &amp;&amp; content.StatusCode != HttpStatusCode.OK) || timedOut)
                {
                    Products.ProductStop();
                    _isRunning = false;
                    _validationThread.DoWork -= CheckValidiation;
                    _validationThread.Dispose();
                    MessageBox.Show("You are trying to use a different wRobot key with the same order Id or your wRobot key is used by more than 10 IPs. \n\nBot name: " + ObjectManager.Me.Name + "\n\nIf your wRobot key has changed recently (f.e. after purchasing a new one), please contact FNV316");
                    return;
                }

                Thread.Sleep(60 * 1000);
            }
            catch (Exception exp)
            {
                Logging.WriteError("" + exp);
            }
        }
    }
}

    /*
    static ControlAuthentication()
    { return;
        new Thread(() =&gt;
        {
            while (!Conditions.InGameAndConnectedAndAliveAndProductStarted)
            {
                Thread.Sleep(500);
            }
            Thread.Sleep(30000);
            string status = Logging.Status;
            if (_controlVariable != 5 &amp;&amp; !status.Contains("To Town") &amp;&amp; !status.Contains("Regeneration") &amp;&amp; !status.Contains("Attacked") &amp;&amp; !status.Contains("Trainers") &amp;&amp; !status.Contains("Ressurect") &amp;&amp; !status.Contains("Started"))
            {
                Products.ProductStop();
                MessageBox.Show("Please enter your ID faster, restart the Bot now.");
            }
            Logging.Write("[FNV_Quester]: Launcher authentication sucessful");
        }).Start();
    }
    */

public class ControlAuthentication
{
    private static volatile int _controlVariable = 0;
    private static int _timeout = 0;
    private static bool _isRunning = true;
    private static bool disposeAuthThread = false;
    private static string profileName = "";

    public static void SetControl(int control)
    {
        _controlVariable = control;
    }

    static ControlAuthentication()
    { return;
        new Thread(() =&gt;
        {
            profileName = wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName;

            while(_isRunning &amp;&amp; !disposeAuthThread &amp;&amp; (wManager.Wow.Helpers.Conditions.ProductIsStarted || wManager.Wow.Helpers.Conditions.ProductInPause))
            {
                if(!wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName.Equals(profileName))
                {
                    disposeAuthThread = true;
                    break;
                }

                if(!wManager.Wow.Helpers.Conditions.ProductIsStarted)
                {
                    disposeAuthThread = true;
                    break;
                }

                while(wManager.Wow.Helpers.Quest.QuesterCurrentContext.CurrentStep &lt; 2)
                {
                    Thread.Sleep(500);

                    if(_controlVariable == 5 || !wManager.Wow.Helpers.Conditions.ProductIsStarted)
                        break;

                    _timeout += 500;

                    if(_timeout &gt;= 910000)
                    {
                        Products.ProductStop();
                        MessageBox.Show("[FNV_Quester]: Timeout error. Unable to authenticate for more than 15 minutes. \n\nBot name: " + ObjectManager.Me.Name);
                        break;
                    }
                }

                _isRunning = false;

                if(wManager.Wow.Helpers.Conditions.ProductIsStarted || wManager.Wow.Helpers.Conditions.ProductInPause)
                {
                    Thread.Sleep(60000);

                    if(_controlVariable != 5)
                    {
                        Products.ProductStop();
                        MessageBox.Show("[FNV_Quester]: Please enter your ID faster or make sure the authentication step is enabled (#0 START_FNVLauncher_V2 -&gt; Step [1], any other profile -&gt; Step [0]). \nRestart the Bot now. \n\nBot name: " + ObjectManager.Me.Name);
                    }
                    /*
                    else
                    {
                        if(!disposeAuthThread &amp;&amp; wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName.Equals(profileName) &amp;&amp; Conditions.ProductIsStarted)
                            Logging.Write("[FNV_Quester]: Authentication sucessful");
                    }
                    */
                    _timeout = 0;
                    _isRunning = true;
                }
            }

        }).Start();
    }
    
}

[Serializable]
public class FNVQuesterAuthSettings : robotManager.Helpful.Settings
{
    [Setting]
    [Category("__IMPORTANT__")]
    [DisplayName("Rocketr Order id")]
    [Description("This is your tracking number for when you purchased this product, it is required to use this consistently. You can find it within your product delivery e-mail")]
    public string TransactionId { get { return "free"; } set { } }

    public FNVQuesterAuthSettings()
    {
        TransactionId = null;
    }
    
    public static FNVQuesterAuthSettings CurrentSetting { get; set; }

    public bool Save()
    {
        try
        {
            return Save(AdviserFilePathAndName("FNVQuester_AuthSettings", "Vanilla_Alliance"));
        }
        catch (Exception e)
        {
            robotManager.Helpful.Logging.Write("FNVQuester_AuthSettings &gt; Save(): " + e);
            return false;
        }
    }

    public static bool Load()
    {
        try
        {
            if (File.Exists(AdviserFilePathAndName("FNVQuester_AuthSettings", "Vanilla_Alliance")))
            {
                CurrentSetting =
                    Load&lt;FNVQuesterAuthSettings&gt;(AdviserFilePathAndName("FNVQuester_AuthSettings", "Vanilla_Alliance"));
                return true;
            }
            CurrentSetting = new FNVQuesterAuthSettings();
        }
        catch (Exception e)
        {
            robotManager.Helpful.Logging.Write("FNVQuester_AuthSettings &gt; Load(): " + e);
        }
        return false;
    }
}

public class SearingGorge
{
     private static bool _isStarted = false;
     private static bool _inPause = false;
     private static int gateId = 161536;
     private static Vector3 gatePosition = new Vector3(-6756, -1166, 187);

    public static void initializeGateDetection()
    {
        if(!_isStarted)
        {
            Logging.Write("[FNV_Quester]: Searing Gorge gate detection initialized");
            _isStarted = true;
            MovementEvents.OnSeemStuck += MovementEventsOnOnSeemStuck;
        }
    }

    private static void pause()
    {
        for(int i = 0; i &lt; 15000; i += 1000)
        {
            Thread.Sleep(1000);
        }
        _inPause = false;
        return;
    }

    public static void disposeGateDetection()
    {
        if(_isStarted)
        {
            Logging.Write("[FNV_Quester]: Searing Gorge gate detection disposed");
            _isStarted = false;
            MovementEvents.OnSeemStuck -= MovementEventsOnOnSeemStuck;
        }
    }

    private static void MovementEventsOnOnSeemStuck()
    {
        Logging.Write("SeemStuck detected");

        if(ObjectManager.Me.Position.DistanceTo(gatePosition) &lt;= 10 &amp;&amp; !_inPause)
        {
            Logging.Write("[FNV_Quester]: Stuck at Quarry Gate, trying to open it...");

            GoToTask.ToPositionAndIntecractWithGameObject(gatePosition, gateId, -1, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore);
            
            if(GoToTask.ToPositionAndIntecractWithGameObject(gatePosition, gateId, -1, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore))
            {
               // _inPause = true;
               // pause();
            }
        }
    }
}

public class SearingGorgeFixedPathfinding
{
    private static List&lt;Vector3&gt; brokenLocationNodes = new List&lt;Vector3&gt;();
    private static bool _inProcessing;
    private static Vector3 currentDestination = new Vector3(0, 0, 0);
    private static string status = "";

    private static void ApplyNodes()
    {
        Vector3 thoriumPoint = new Vector3(-6514, -1162, 308);
        brokenLocationNodes.Add(thoriumPoint);
    }

    public static void Initialize()
    {
        Logging.Write("[FNV_Quester]: Thorium Point pathfinder workaround started");
        MovementEvents.OnMovementPulse += MovementEventsOnOnMovementPulse;
        MovementEvents.OnSeemStuck += MovementEventsOnOnSeemStuck;
        Logging.OnChanged += LoggingEvents_OnChangedStatus;
        ApplyNodes();
        _inProcessing = false;
    }

    public static void Dispose()
    {
        MovementEvents.OnMovementPulse -= MovementEventsOnOnMovementPulse;
        MovementEvents.OnSeemStuck -= MovementEventsOnOnSeemStuck;
        Logging.OnChanged -= LoggingEvents_OnChangedStatus;
    }

    private static void MovementEventsOnOnSeemStuck()
    {
        _inProcessing = false;
    }

    private static void MovementEventsOnOnMovementPulse(List&lt;Vector3&gt; points, CancelEventArgs cancelable)
    {  
        //status = Logging.Status;
        if(CheckDestination(points.LastOrDefault&lt;Vector3&gt;()) &amp;&amp; !_inProcessing &amp;&amp; ObjectManager.Me.Position.DistanceTo(points.Last&lt;Vector3&gt;()) &gt; 50 &amp;&amp; !status.Contains("Follow Path"))
        {
            _inProcessing = true;
            Logging.Write("[FNV_Quester]: Destination vector within broken path finder range. Using custom path for movement to enter instead");
            cancelable.Cancel = true;
            UseCustomPathIn(points.LastOrDefault&lt;Vector3&gt;());
            cancelable.Cancel = false;
            _inProcessing = false;
        }

        if(CheckDestination(ObjectManager.Me.Position) &amp;&amp; !_inProcessing &amp;&amp; ObjectManager.Me.Position.DistanceTo(points.Last&lt;Vector3&gt;()) &gt; 50 &amp;&amp; !status.Contains("Follow Path"))
        {
            _inProcessing = true;
            Logging.Write("[FNV_Quester]: Starting vector within broken path finder range. Using custom path for movement to leave instead");
            cancelable.Cancel = true;
            UseCustomPathOut(points.LastOrDefault&lt;Vector3&gt;());
            cancelable.Cancel = false;
            _inProcessing = false;
        }

        if(CheckDestination(ObjectManager.Me.Position) &amp;&amp; !_inProcessing &amp;&amp; CheckDestination(points.Last&lt;Vector3&gt;()) &amp;&amp; ObjectManager.Me.Position.DistanceTo(points.Last&lt;Vector3&gt;()) &gt; 10 &amp;&amp; !status.Contains("Follow Path"))
        {
            _inProcessing = true;
            currentDestination = points.Last&lt;Vector3&gt;();
            Logging.Write("[FNV_Quester]: Starting and destination vector within broken path finder range. Using custom path for movement instead");
            cancelable.Cancel = true;
            UseCustomPathLoop(points.LastOrDefault&lt;Vector3&gt;());
            cancelable.Cancel = false;
            _inProcessing = false;
        }
    }

    
    private static void LoggingEvents_OnChangedStatus(object sender, Logging.LoggingChangeEventArgs e)
    {
        status = Logging.Status;
    }
    

    private static bool CheckDestination(Vector3 destination)
    {
        foreach(var ele in brokenLocationNodes)
        {
            //Logging.Write("Distance is: " + destination.DistanceTo(ele)); 
            if(destination.DistanceTo(ele) &lt;= 60)
                return true;
        }
        return false;
    }

    private static void UseCustomPathIn(Vector3 destination)
    {

        Vector3 currentDestination = new Vector3(0, 0, 0);

        var path = new List&lt;Vector3&gt;() {
new Vector3(-6605.966f, -1023.291f, 244.5074f, "None"),
new Vector3(-6601.826f, -1023.744f, 244.9385f, "None"),
new Vector3(-6597.218f, -1026.855f, 248.186f, "None"),
new Vector3(-6593.908f, -1031.353f, 252.414f, "None"),
new Vector3(-6591.3f, -1036.307f, 255.8175f, "None"),
new Vector3(-6588.852f, -1041.541f, 258.5742f, "None"),
new Vector3(-6586.07f, -1046.571f, 260.5392f, "None"),
new Vector3(-6582.013f, -1050.151f, 262.3918f, "None"),
new Vector3(-6577.125f, -1052.881f, 264.4617f, "None"),
new Vector3(-6572.03f, -1055.201f, 266.5196f, "None"),
new Vector3(-6566.89f, -1057.423f, 268.521f, "None"),
new Vector3(-6561.761f, -1059.671f, 270.6708f, "None"),
new Vector3(-6556.499f, -1062.034f, 272.971f, "None"),
new Vector3(-6551.548f, -1064.268f, 275.2576f, "None"),
new Vector3(-6546.625f, -1066.932f, 277.3527f, "None"),
new Vector3(-6541.8f, -1069.774f, 279.032f, "None"),
new Vector3(-6536.636f, -1071.892f, 280.7285f, "None"),
new Vector3(-6531.107f, -1072.746f, 282.576f, "None"),
new Vector3(-6525.543f, -1073.38f, 284.4381f, "None"),
new Vector3(-6519.98f, -1074.023f, 286.3544f, "None"),
new Vector3(-6514.447f, -1074.884f, 288.3375f, "None"),
new Vector3(-6508.975f, -1076.073f, 290.369f, "None"),
new Vector3(-6503.632f, -1077.715f, 292.0928f, "None"),
new Vector3(-6498.638f, -1080.577f, 293.695f, "None"),
new Vector3(-6494.001f, -1083.713f, 295.3442f, "None"),
new Vector3(-6490.028f, -1087.634f, 296.9394f, "None"),
new Vector3(-6486.872f, -1092.256f, 298.4525f, "None"),
new Vector3(-6484.295f, -1097.215f, 300.1746f, "None"),
new Vector3(-6483.278f, -1102.701f, 301.5711f, "None"),
new Vector3(-6483.816f, -1108.252f, 302.851f, "None"),
new Vector3(-6485.005f, -1113.707f, 304.0922f, "None"),
new Vector3(-6487.139f, -1118.884f, 305.0337f, "None"),
new Vector3(-6489.344f, -1124.032f, 305.7626f, "None"),
new Vector3(-6491.585f, -1129.163f, 306.1504f, "None"),
new Vector3(-6494.281f, -1134.475f, 306.4971f, "None"),
new Vector3(-6497.214f, -1139.442f, 306.8915f, "None"),
new Vector3(-6500.032f, -1144.085f, 307.3696f, "None"),
new Vector3(-6503.025f, -1149.016f, 307.632f, "None"),
new Vector3(-6505.93f, -1153.804f, 307.8793f, "None"),
new Vector3(-6508.76f, -1158.441f, 307.9853f, "None"),
new Vector3(-6512.148f, -1162.893f, 308.3222f, "None"),
new Vector3(-6517.508f, -1163.161f, 308.5844f, "None"),
            };

        foreach(var ele in path)
        {
            if(ele.DistanceTo(destination) &lt; ele.DistanceTo(currentDestination))
                currentDestination = ele;
        }

        if(wManager.Wow.Bot.Tasks.GoToTask.ToPosition(path.First&lt;Vector3&gt;(), 3.5f, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore))
        {
            wManager.Wow.Bot.Tasks.GoToTask.ToPosition(path.First&lt;Vector3&gt;(), 3.5f, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore);
        }

        while(ObjectManager.Me.Position.DistanceTo(currentDestination) &gt; 5 &amp;&amp; !currentDestination.Equals((Vector3)null) &amp;&amp; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore)
        {
            MovementManager.Go(path);
            Thread.Sleep(100);
        }

        //Logging.Write("Finished takeCustomPath");
        //Reenable();
        _inProcessing = false;
        return;
    }

    private static void UseCustomPathOut(Vector3 destination)
    {

        Vector3 currentDestination = new Vector3(0, 0, 0);

        var path = new List&lt;Vector3&gt;() {
new Vector3(-6520.889f, -1186.334f, 309.2557f, "None"),
new Vector3(-6511.543f, -1163.732f, 308.3743f, "None"),
new Vector3(-6508.988f, -1161.179f, 308.1429f, "None"),
new Vector3(-6504.05f, -1156.218f, 308.0315f, "None"),
new Vector3(-6501.398f, -1153.294f, 308.1518f, "None"),
new Vector3(-6495.091f, -1144.908f, 307.875f, "None"),
new Vector3(-6489.66f, -1136.319f, 307.1272f, "None"),
new Vector3(-6484.931f, -1126.579f, 306.6054f, "None"),
new Vector3(-6481.782f, -1116.925f, 305.3705f, "None"),
new Vector3(-6480.768f, -1106.506f, 302.6744f, "None"),
new Vector3(-6483.211f, -1096.021f, 299.9566f, "None"),
new Vector3(-6488.722f, -1087.545f, 297.2002f, "None"),
new Vector3(-6496.905f, -1080.999f, 294.2147f, "None"),
new Vector3(-6506.868f, -1076.894f, 291.0374f, "None"),
new Vector3(-6516.972f, -1075.943f, 287.6053f, "None"),
new Vector3(-6527.435f, -1075.096f, 283.8497f, "None"),
new Vector3(-6537.802f, -1073.449f, 280.6175f, "None"),
new Vector3(-6548.082f, -1070.127f, 276.9659f, "None"),
new Vector3(-6556.992f, -1065.242f, 273.4804f, "None"),
new Vector3(-6566.444f, -1059.943f, 269.1368f, "None"),
new Vector3(-6575.575f, -1055.484f, 265.3927f, "None"),
new Vector3(-6585.064f, -1050.99f, 261.5944f, "None"),
new Vector3(-6592.596f, -1046.345f, 258.3036f, "None"),
new Vector3(-6594.945f, -1035.768f, 253.8222f, "None"),
new Vector3(-6598.657f, -1026.457f, 247.278f, "None"),
new Vector3(-6605.125f, -1027.011f, 244.9202f, "None"),
new Vector3(-6614.792f, -1030.953f, 244.2407f, "None"),
};

        foreach(var ele in path)
        {
            if(ele.DistanceTo(destination) &lt; ele.DistanceTo(currentDestination))
                currentDestination = ele;
        }

        if(wManager.Wow.Bot.Tasks.GoToTask.ToPosition(path.First&lt;Vector3&gt;(), 3.5f, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore))
        {
            wManager.Wow.Bot.Tasks.GoToTask.ToPosition(path.First&lt;Vector3&gt;(), 3.5f, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore);
        }

        while(ObjectManager.Me.Position.DistanceTo(currentDestination) &gt; 5 &amp;&amp; !currentDestination.Equals((Vector3)null) &amp;&amp; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore)
        {
            MovementManager.Go(path);
            Thread.Sleep(100);
        }

       // Logging.Write("Finished takeCustomPathOut");
        //Reenable();
        _inProcessing = false;
        return;
    }

    private static void UseCustomPathLoop(Vector3 destination)
    {

var path = new List&lt;Vector3&gt;() {
new Vector3(-6511.968f, -1178.022f, 309.2499f, "None"),
new Vector3(-6514.226f, -1180.391f, 309.2652f, "None"),
new Vector3(-6514.92f, -1183.646f, 309.2562f, "None"),
new Vector3(-6512.791f, -1186.548f, 309.2562f, "None"),
new Vector3(-6510.783f, -1189.414f, 309.2562f, "None"),
new Vector3(-6509.006f, -1192.427f, 309.2562f, "None"),
new Vector3(-6512.155f, -1191.501f, 309.2562f, "None"),
new Vector3(-6515.301f, -1190.243f, 309.2562f, "None"),
new Vector3(-6518.614f, -1189.136f, 309.2562f, "None"),
new Vector3(-6522.209f, -1188.875f, 309.2562f, "None"),
new Vector3(-6524.712f, -1188.661f, 309.2562f, "None"),
new Vector3(-6522.414f, -1187.187f, 309.2562f, "None"),
new Vector3(-6521.051f, -1184.315f, 309.2562f, "None"),
new Vector3(-6522.533f, -1181.164f, 309.5719f, "None"),
new Vector3(-6525.171f, -1178.908f, 310.5407f, "None"),
new Vector3(-6528.434f, -1177.668f, 311.458f, "None"),
new Vector3(-6531.906f, -1176.674f, 311.5628f, "None"),
new Vector3(-6535.271f, -1175.711f, 311.0577f, "None"),
new Vector3(-6538.62f, -1174.692f, 310.2652f, "None"),
new Vector3(-6541.887f, -1173.795f, 309.7975f, "None"),
new Vector3(-6545.396f, -1172.942f, 309.3479f, "None"),
new Vector3(-6548.806f, -1172.151f, 309.2578f, "None"),
new Vector3(-6552.216f, -1171.361f, 309.2927f, "None"),
new Vector3(-6555.617f, -1170.538f, 309.4913f, "None"),
new Vector3(-6558.993f, -1169.615f, 309.787f, "None"),
new Vector3(-6559.922f, -1167.805f, 309.8352f, "None"),
new Vector3(-6556.908f, -1165.864f, 310.0252f, "None"),
new Vector3(-6553.557f, -1164.877f, 310.0215f, "None"),
new Vector3(-6550.08f, -1164.484f, 309.926f, "None"),
new Vector3(-6544.97f, -1163.94f, 309.7741f, "None"),
new Vector3(-6534.195f, -1162.793f, 309.3187f, "None"),
new Vector3(-6523.741f, -1161.811f, 309.0215f, "None"),
new Vector3(-6513.615f, -1160.933f, 308.2635f, "None"),
new Vector3(-6506.418f, -1160.309f, 308.1041f, "None"),
new Vector3(-6502.819f, -1159.997f, 308.3569f, "None"),
new Vector3(-6499.444f, -1159.705f, 308.7631f, "None"),
new Vector3(-6496.717f, -1159.744f, 309.0773f, "None"),
new Vector3(-6495.118f, -1161.894f, 309.1303f, "None"),
new Vector3(-6493f, -1162.4f, 309.2f, "None"),
new Vector3(-6495.47f, -1165.365f, 309.19f, "None"),
new Vector3(-6496.578f, -1168.801f, 309.2209f, "None"),
new Vector3(-6497.424f, -1172.189f, 309.2521f, "None"),
new Vector3(-6496.599f, -1175.496f, 311.4286f, "None"),
new Vector3(-6494.471f, -1178.274f, 314.4402f, "None"),
new Vector3(-6492.365f, -1181.069f, 316.9778f, "None"),
new Vector3(-6490.402f, -1183.967f, 319.4284f, "None"),
new Vector3(-6488.469f, -1186.885f, 322.0103f, "None"),
new Vector3(-6486.568f, -1189.69f, 324.5566f, "None"),
new Vector3(-6484.392f, -1192.128f, 325.7157f, "None"),
new Vector3(-6479.565f, -1189.753f, 325.8502f, "None"),
new Vector3(-6477.512f, -1187.101f, 325.9147f, "None"),
new Vector3(-6478.307f, -1183.857f, 325.7819f, "None"),
new Vector3(-6480.627f, -1181.089f, 325.6377f, "None"),
new Vector3(-6482.864f, -1178.397f, 325.7611f, "None"),
new Vector3(-6485f, -1175.625f, 325.7878f, "None"),
new Vector3(-6487.067f, -1172.94f, 325.5157f, "None"),
new Vector3(-6489.333f, -1170.127f, 325.4131f, "None"),
new Vector3(-6492.227f, -1171.737f, 325.9383f, "None"),
new Vector3(-6495.255f, -1173.477f, 326.5012f, "None"),
new Vector3(-6498.819f, -1173.806f, 326.2171f, "None"),
new Vector3(-6501.867f, -1173.776f, 325.811f, "None"),
new Vector3(-6504.835f, -1175.808f, 325.9436f, "None"),
new Vector3(-6507.222f, -1178.351f, 326.3931f, "None"),
new Vector3(-6507.92f, -1181.704f, 326.9203f, "None"),
new Vector3(-6506.445f, -1184.833f, 327.1803f, "None"),
new Vector3(-6504.251f, -1187.702f, 326.8068f, "None"),
new Vector3(-6502.15f, -1190.501f, 326.4582f, "None"),
new Vector3(-6500.116f, -1193.21f, 326.1217f, "None"),
new Vector3(-6498.121f, -1196.085f, 325.64f, "None"),
new Vector3(-6496.097f, -1199.072f, 325.2523f, "None"),
new Vector3(-6493.148f, -1199.734f, 325.4391f, "None"),
new Vector3(-6490.279f, -1197.56f, 325.5786f, "None"),
new Vector3(-6488.075f, -1194.888f, 325.6983f, "None"),
new Vector3(-6489.056f, -1191.798f, 324.8035f, "None"),
new Vector3(-6491.162f, -1189.002f, 322.1753f, "None"),
new Vector3(-6493.301f, -1186.232f, 319.5414f, "None"),
new Vector3(-6495.447f, -1183.467f, 316.7057f, "None"),
new Vector3(-6497.518f, -1180.777f, 313.957f, "None"),
new Vector3(-6499.785f, -1177.831f, 311.3158f, "None"),
new Vector3(-6501.965f, -1175.094f, 309.255f, "None"),
new Vector3(-6504.853f, -1173.284f, 309.1891f, "None"),
new Vector3(-6507.97f, -1174.138f, 309.1942f, "None"),
new Vector3(-6511.066f, -1175.981f, 309.2368f, "None"),
new Vector3(-6513.179f, -1177.529f, 309.2469f, "None"),
};


        foreach(var ele in path)
        {
            if(ele.DistanceTo(destination) &lt; ele.DistanceTo(currentDestination))
                currentDestination = ele;
        }

        if(wManager.Wow.Bot.Tasks.GoToTask.ToPosition(path.First&lt;Vector3&gt;(), 3.5f, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore))
        {
            wManager.Wow.Bot.Tasks.GoToTask.ToPosition(path.First&lt;Vector3&gt;(), 3.5f, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore);
        }
        

        while(ObjectManager.Me.Position.DistanceTo(currentDestination) &gt; 2 &amp;&amp; !currentDestination.Equals((Vector3)null) &amp;&amp; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore)
        {
            if(ObjectManager.Me.Position.DistanceTo(currentDestination) &lt;= 2)
            {
                break;
            }
            
            MovementManager.Go(path);
            Thread.Sleep(100);
        }

        MovementManager.MoveTo(currentDestination);

        //Logging.Write("Finished takeCustomPathLoop");
        currentDestination = new Vector3(0, 0, 0);
        //Reenable();
        _inProcessing = false;
        return;
    }

    //By Matenia
    private static async void Reenable()
    {
        //Logging.Write("Enter reenable");
        await Task.Run(() =&gt;
        {
            Products.InPause = true;
            if(ObjectManager.Me.WowClass == WoWClass.Hunter)
                Lua.LuaDoString("RotaOn = false");
            MovementManager.StopMove();
            MovementManager.CurrentPath.Clear();
            MovementManager.CurrentPathOrigine.Clear();
            Thread.Sleep(5000);
            Products.InPause = false;
            if(ObjectManager.Me.WowClass == WoWClass.Hunter)
                Lua.LuaDoString("RotaOn = true");
            Logging.Write("[VanillaFlightMaster]: Resetting pathing");
        });
    }

}

public class QuesterSettings
{

    public static void ClassSettings()
    {
        if(ObjectManager.Me.WowClass == WoWClass.Warlock)
        {
            switch(ObjectManager.Me.Level / 10)
            {
                case (1):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (2):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (3):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (4):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 45;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 45;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (5):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 50;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 50;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (6):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 50;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 50;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                default:
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;
            }

            if(wManager.wManagerSetting.CurrentSetting.DrinkName.Length &lt; 2)
            {
                wManager.wManagerSetting.CurrentSetting.DrinkIsSpell = false;
                wManager.wManagerSetting.CurrentSetting.DrinkName = "Refreshing Spring Water";
            }


            if(wManager.wManagerSetting.CurrentSetting.FoodName.Length &lt; 2)
            {
                wManager.wManagerSetting.CurrentSetting.FoodIsSpell = false;
                wManager.wManagerSetting.CurrentSetting.FoodName = "Tough Hunk of Bread";
            }

            Logging.Write("[FNV_Quester]: Using default food / drink settings for Warlock");
        }

        if(ObjectManager.Me.WowClass == WoWClass.Warrior)
        {
            switch(ObjectManager.Me.Level / 10)
            {

                case (1):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;

                case (2):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;

                case (3):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 60;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 70;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;

                case (4):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 80;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;

                case (5):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 100;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 80;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;

                case (6):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 120;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 80;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;

                default:
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;
            }

            if(wManager.wManagerSetting.CurrentSetting.FoodName.Length &lt; 2)
            {
                wManager.wManagerSetting.CurrentSetting.FoodIsSpell = false;
                wManager.wManagerSetting.CurrentSetting.FoodName = "Tough Hunk of Bread";
            }

            Logging.Write("[FNV_Quester]: Using default food / drink settings for Warrior");
        }

        if(ObjectManager.Me.WowClass == WoWClass.Rogue)
        {
            switch(ObjectManager.Me.Level / 10)
            {
                case (1):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;

                case (2):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;

                case (3):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;

                case (4):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 75;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;

                case (5):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 100;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 80;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;

                case (6):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 120;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 80;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;

                default:
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;
            }


            if(wManager.wManagerSetting.CurrentSetting.FoodName.Length &lt; 2)
            {
                wManager.wManagerSetting.CurrentSetting.FoodIsSpell = false;
                wManager.wManagerSetting.CurrentSetting.FoodName = "Tough Hunk of Bread";
            }

            Logging.Write("[FNV_Quester]: Using default food / drink settings for Rogue");
        }

        if(ObjectManager.Me.WowClass == WoWClass.Mage)
        {
            switch(ObjectManager.Me.Level / 10)
            {
                case (1):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 50;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (2):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 50;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (3):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 50;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (4):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 60;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 70;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (5):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 60;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 75;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (6):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 60;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 75;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                default:
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 50;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;
            }

            if(wManager.wManagerSetting.CurrentSetting.DrinkName.Length &lt; 2)
            {
                wManager.wManagerSetting.CurrentSetting.DrinkIsSpell = false;
                wManager.wManagerSetting.CurrentSetting.DrinkName = "Refreshing Spring Water";
            }


            if(wManager.wManagerSetting.CurrentSetting.FoodName.Length &lt; 2)
            {
                wManager.wManagerSetting.CurrentSetting.FoodIsSpell = false;
                wManager.wManagerSetting.CurrentSetting.FoodName = "Tough Hunk of Bread";
            }

            Logging.Write("[FNV_Quester]: Using default food / drink settings for Mage");
        }

        if(ObjectManager.Me.WowClass == WoWClass.Druid)
        {
            switch(ObjectManager.Me.Level / 10)
            {
                case (1):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (2):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (3):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (4):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 45;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (5):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 50;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (6):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                default:
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;
            }

            if(wManager.wManagerSetting.CurrentSetting.DrinkName.Length &lt; 2)
            {
                wManager.wManagerSetting.CurrentSetting.DrinkIsSpell = false;
                wManager.wManagerSetting.CurrentSetting.DrinkName = "Refreshing Spring Water";
            }

            if(wManager.wManagerSetting.CurrentSetting.FoodName.Length &lt; 2)
            {
                wManager.wManagerSetting.CurrentSetting.FoodName = "Healing Touch";
                wManager.wManagerSetting.CurrentSetting.FoodIsSpell = true;
            }

            Logging.Write("[FNV_Quester]: Using default food / drink settings for Druid");
        }

        if(ObjectManager.Me.WowClass == WoWClass.Paladin)
        {

            switch(ObjectManager.Me.Level / 10)
            {
                case (1):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (2):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (3):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 60;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (4):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 45;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (5):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 50;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (6):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 100;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 55;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                default:
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;
            }

            if(wManager.wManagerSetting.CurrentSetting.DrinkName.Length &lt; 2)
            {
                wManager.wManagerSetting.CurrentSetting.DrinkIsSpell = false;
                wManager.wManagerSetting.CurrentSetting.DrinkName = "Refreshing Spring Water";
            }

            if(wManager.wManagerSetting.CurrentSetting.FoodName.Length &lt; 2)
            {
                wManager.wManagerSetting.CurrentSetting.FoodName = "Holy Light";
                wManager.wManagerSetting.CurrentSetting.FoodIsSpell = true;
            }


            Logging.Write("[FNV_Quester]: Using default food / drink settings for Paladin");
        }

        if(ObjectManager.Me.WowClass == WoWClass.Hunter)
        {
            switch(ObjectManager.Me.Level / 10)
            {
                case (1):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    Lua.LuaDoString("DEFAULT_CHAT_FRAME:AddMessage('[FNV_Quester]: Do not forget that wRobot counts empty bag slots of ammo bags as free bag space!')");
                    break;

                case (2):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (3):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (4):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 60;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 60;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (5):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (6):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                default:
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    Lua.LuaDoString("DEFAULT_CHAT_FRAME:AddMessage('[FNV_Quester]: Do not forget that wRobot counts empty bag slots of ammo bags as free bag space!')");
                    break;
            }

            if(wManager.wManagerSetting.CurrentSetting.DrinkName.Length &lt; 2)
            {
                wManager.wManagerSetting.CurrentSetting.DrinkIsSpell = false;
                wManager.wManagerSetting.CurrentSetting.DrinkName = "Refreshing Spring Water";
            }

            if(wManager.wManagerSetting.CurrentSetting.FoodName.Length &lt; 2)
            {
                wManager.wManagerSetting.CurrentSetting.FoodIsSpell = false;
                wManager.wManagerSetting.CurrentSetting.FoodName = "Tough Hunk of Bread";
            }

            Logging.Write("[FNV_Quester]: Using default food / drink settings for Hunter");

        }
    }

    public static void SettingsEasternKingdoms()
    {
        //Eastern Kingdoms only
        wManager.wManagerSetting.CurrentSetting.TrainNewSkills = true;

        wManager.wManagerSetting.CurrentSetting.DontStartFighting = false;
        wManager.wManagerSetting.CurrentSetting.DetectNodesStuck = true;
        wManager.wManagerSetting.CurrentSetting.CanAttackUnitsAlreadyInFight = false;
        wManager.wManagerSetting.CurrentSetting.AvoidBlacklistedZonesPathFinder = true;
        wManager.wManagerSetting.CurrentSetting.AttackElite = false;
        wManager.wManagerSetting.CurrentSetting.AttackBeforeBeingAttacked = true;
        wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = true;
        wManager.wManagerSetting.CurrentSetting.FlightMasterTaxiUse = false;
        wManager.wManagerSetting.CurrentSetting.IgnoreFightWhenInMove = false;

        wManager.wManagerSetting.CurrentSetting.Repair = true;
        wManager.wManagerSetting.CurrentSetting.SellGray = true;
        wManager.wManagerSetting.CurrentSetting.SellGreen = true;
        wManager.wManagerSetting.CurrentSetting.Selling = true;
        wManager.wManagerSetting.CurrentSetting.SellWhite = true;
        wManager.wManagerSetting.CurrentSetting.MinFreeBagSlotsToGoToTown = 4;

        wManager.wManagerSetting.CurrentSetting.SearchRadius = 100;
        wManager.wManagerSetting.CurrentSetting.MaxUnitsNear = 100;

        wManager.wManagerSetting.CurrentSetting.WallDistancePathFinder = 2;
        wManager.wManagerSetting.CurrentSetting.AddToNpcDb = false;
        wManager.wManagerSetting.CurrentSetting.BlackListIfNotCompletePath = false;
        wManager.wManagerSetting.CurrentSetting.UseCTM = true;
        wManager.wManagerSetting.CurrentSetting.UseLuaToMove = true;

        wManager.wManagerSetting.CurrentSetting.NpcScanAuctioneer = false;
        wManager.wManagerSetting.CurrentSetting.NpcScanMailboxes = false;
        wManager.wManagerSetting.CurrentSetting.NpcScanRepair = false;
        wManager.wManagerSetting.CurrentSetting.NpcScanVendor = false;

        wManager.wManagerSetting.CurrentSetting.HarvestHerbs = false;
        wManager.wManagerSetting.CurrentSetting.HarvestMinerals = false;

        wManager.wManagerSetting.CurrentSetting.AvoidBlacklistedZonesPathFinder = true;
        wManager.wManagerSetting.CurrentSetting.AvoidWallWithRays = true;
        wManager.wManagerSetting.CurrentSetting.BlackListTrainingDummy = true;
        wManager.wManagerSetting.CurrentSetting.BlackListZoneWhereDead = false;
        wManager.wManagerSetting.CurrentSetting.CalcuCombatRange = false;
        wManager.wManagerSetting.CurrentSetting.CanAttackUnitsAlreadyInFight = false;
        wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;
        wManager.wManagerSetting.CurrentSetting.DetectNodesStuck = true;
        wManager.wManagerSetting.CurrentSetting.DontStartFighting = false;
        wManager.wManagerSetting.CurrentSetting.FlightMasterDiscoverRange = 50;
        wManager.wManagerSetting.CurrentSetting.FlightMasterTaxiUse = false;
        wManager.wManagerSetting.CurrentSetting.HarvestAvoidPlayersRadius = 1;
        wManager.wManagerSetting.CurrentSetting.HarvestDuringLongMove = false;
        wManager.wManagerSetting.CurrentSetting.HarvestTimber = false;
        wManager.wManagerSetting.CurrentSetting.HelpingGroupMembers = true;
        wManager.wManagerSetting.CurrentSetting.IgnoreCombatWithPet = false;
        wManager.wManagerSetting.CurrentSetting.IgnoreFightDuringFarmIfDruidForm = false;
        wManager.wManagerSetting.CurrentSetting.IgnoreFightGoundMount = true;
        wManager.wManagerSetting.CurrentSetting.LootChests = false;
        wManager.wManagerSetting.CurrentSetting.LootMobs = true;
        wManager.wManagerSetting.CurrentSetting.MountDistance = 100;
        wManager.wManagerSetting.CurrentSetting.Relogger = true;
        wManager.wManagerSetting.CurrentSetting.SecurityPauseBotIfNerbyPlayer = false;
        wManager.wManagerSetting.CurrentSetting.RecordChatInLog = true;
        wManager.wManagerSetting.CurrentSetting.SecurityShutdownComputer = false;
        wManager.wManagerSetting.CurrentSetting.UsePathsFinder = true;
        wManager.wManagerSetting.CurrentSetting.UseSpiritHealer = false;
        wManager.wManagerSetting.CurrentSetting.WaitResurrectionSickness = true;
        wManager.wManagerSetting.CurrentSetting.WallDistancePathFinder = 2;

        ClassSettings();

        if(Conditions.ForceIgnoreIsAttacked)
        {
            Logging.Write("[FNV_Quester]: Force ignore attack is enabled, going to disable it...");
            Conditions.ForceIgnoreIsAttacked = false;
        }

         wManager.wManagerSetting.CurrentSetting.Save();
         Thread.Sleep(500);
         wManager.wManagerSetting.CurrentSetting.Save();

        wManager.Wow.Forms.UserControlTabGeneralSettings.ReloadGeneralSettings();

        Logging.Write("[FNV_Quester]: Applied default settings for Eastern Kingdoms");

        return;
    }

    public static void SettingsKalimdor()
    {
        //Kalimdor only
        wManager.wManagerSetting.CurrentSetting.TrainNewSkills = false;

        wManager.wManagerSetting.CurrentSetting.DontStartFighting = false;
        wManager.wManagerSetting.CurrentSetting.DetectNodesStuck = true;
        wManager.wManagerSetting.CurrentSetting.CanAttackUnitsAlreadyInFight = false;
        wManager.wManagerSetting.CurrentSetting.AvoidBlacklistedZonesPathFinder = true;
        wManager.wManagerSetting.CurrentSetting.AttackElite = false;
        wManager.wManagerSetting.CurrentSetting.AttackBeforeBeingAttacked = true;
        wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = true;
        wManager.wManagerSetting.CurrentSetting.FlightMasterTaxiUse = false;
        wManager.wManagerSetting.CurrentSetting.IgnoreFightWhenInMove = false;

        wManager.wManagerSetting.CurrentSetting.Repair = true;
        wManager.wManagerSetting.CurrentSetting.SellGray = true;
        wManager.wManagerSetting.CurrentSetting.SellGreen = true;
        wManager.wManagerSetting.CurrentSetting.Selling = true;
        wManager.wManagerSetting.CurrentSetting.SellWhite = true;
        wManager.wManagerSetting.CurrentSetting.MinFreeBagSlotsToGoToTown = 4;

        wManager.wManagerSetting.CurrentSetting.SearchRadius = 100;
        wManager.wManagerSetting.CurrentSetting.MaxUnitsNear = 100;

        wManager.wManagerSetting.CurrentSetting.WallDistancePathFinder = 2;
        wManager.wManagerSetting.CurrentSetting.AddToNpcDb = false;
        wManager.wManagerSetting.CurrentSetting.BlackListIfNotCompletePath = false;
        wManager.wManagerSetting.CurrentSetting.UseCTM = true;
        wManager.wManagerSetting.CurrentSetting.UseLuaToMove = true;

        wManager.wManagerSetting.CurrentSetting.NpcScanAuctioneer = false;
        wManager.wManagerSetting.CurrentSetting.NpcScanMailboxes = false;
        wManager.wManagerSetting.CurrentSetting.NpcScanRepair = false;
        wManager.wManagerSetting.CurrentSetting.NpcScanVendor = false;

        wManager.wManagerSetting.CurrentSetting.HarvestHerbs = false;
        wManager.wManagerSetting.CurrentSetting.HarvestMinerals = false;

        wManager.wManagerSetting.CurrentSetting.AvoidBlacklistedZonesPathFinder = true;
        wManager.wManagerSetting.CurrentSetting.AvoidWallWithRays = true;
        wManager.wManagerSetting.CurrentSetting.BlackListTrainingDummy = true;
        wManager.wManagerSetting.CurrentSetting.BlackListZoneWhereDead = false;
        wManager.wManagerSetting.CurrentSetting.CalcuCombatRange = false;
        wManager.wManagerSetting.CurrentSetting.CanAttackUnitsAlreadyInFight = false;
        wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;
        wManager.wManagerSetting.CurrentSetting.DetectNodesStuck = true;
        wManager.wManagerSetting.CurrentSetting.DontStartFighting = false;
        wManager.wManagerSetting.CurrentSetting.FlightMasterDiscoverRange = 50;
        wManager.wManagerSetting.CurrentSetting.FlightMasterTaxiUse = false;
        wManager.wManagerSetting.CurrentSetting.HarvestAvoidPlayersRadius = 1;
        wManager.wManagerSetting.CurrentSetting.HarvestDuringLongMove = false;
        wManager.wManagerSetting.CurrentSetting.HarvestTimber = false;
        wManager.wManagerSetting.CurrentSetting.HelpingGroupMembers = true;
        wManager.wManagerSetting.CurrentSetting.IgnoreCombatWithPet = false;
        wManager.wManagerSetting.CurrentSetting.IgnoreFightDuringFarmIfDruidForm = false;
        wManager.wManagerSetting.CurrentSetting.IgnoreFightGoundMount = true;
        wManager.wManagerSetting.CurrentSetting.LootChests = false;
        wManager.wManagerSetting.CurrentSetting.LootMobs = true;
        wManager.wManagerSetting.CurrentSetting.MountDistance = 100;
        wManager.wManagerSetting.CurrentSetting.Relogger = true;
        wManager.wManagerSetting.CurrentSetting.SecurityPauseBotIfNerbyPlayer = false;
        wManager.wManagerSetting.CurrentSetting.RecordChatInLog = true;
        wManager.wManagerSetting.CurrentSetting.SecurityShutdownComputer = false;
        wManager.wManagerSetting.CurrentSetting.UsePathsFinder = true;
        wManager.wManagerSetting.CurrentSetting.UseSpiritHealer = false;
        wManager.wManagerSetting.CurrentSetting.WaitResurrectionSickness = true;
        wManager.wManagerSetting.CurrentSetting.WallDistancePathFinder = 2;

        ClassSettings();

        if(Conditions.ForceIgnoreIsAttacked)
        {
            Logging.Write("[FNV_Quester]: Force ignore attack is enabled, going to disable it...");
            Conditions.ForceIgnoreIsAttacked = false;
        }

         wManager.wManagerSetting.CurrentSetting.Save();
         Thread.Sleep(500);
         wManager.wManagerSetting.CurrentSetting.Save();

        wManager.Wow.Forms.UserControlTabGeneralSettings.ReloadGeneralSettings();

        Logging.Write("[FNV_Quester]: Applied default settings for Kalimdor");

        return;
    }

}


public class Blackspots
{
   

    public static void StartThread()
    {

    Thread BlackspotValidation = new Thread(() =&gt;
    {
        Logging.Write("[FNV_Quester]: Blackspot validation started");
        Dictionary&lt;Vector3, float&gt; blackspots = new Dictionary&lt;Vector3, float&gt;();
        bool _isStarted = false;

        string profileName = "FNV_V2\\#0 START_FNVLauncher_V2.xml";
        string currentProfileName = wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName;
        int counter = 0;

        if(!_isStarted)
        {
            _isStarted = true;

            while(wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName.Equals(profileName) &amp;&amp; Conditions.ProductIsStarted)
            {
                Thread.Sleep(1000);
            }

            while(Conditions.ProductIsStarted || Conditions.ProductInPause)
            {

                if(wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName.Equals(profileName))
                    break;

                if(counter &gt; 300)
                {
                    Logging.Write("[FNV_Quester]: Clear blacklist of current product session");
                    wManager.wManagerSetting.ClearBlacklistOfCurrentProductSession();
                    counter = 0;
                }

                if(wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported)
                    wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;

                if(!wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName.Equals(currentProfileName))
                {
                    Logging.Write("[FNV_Quester]: Profile has been changed. Reset current blackspots and save blackspots of loaded profile...");
                    currentProfileName = wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName;

                    blackspots.Clear();

                    foreach(var temp in wManager.wManagerSetting.GetListZoneBlackListed())
                    {
                        blackspots.Add(temp.GetPosition(), temp.Radius);
                    }
                }

                if(blackspots.Count &gt; wManager.wManagerSetting.GetListZoneBlackListed().Count)
                {
                    Logging.Write("[FNV_Quester]: Reaply default blackspots");
                    try
                    {
                        foreach(var temp in blackspots)
                        {
                            if (!wManager.wManagerSetting.GetListZoneBlackListed().Any(b =&gt; b.GetPosition().DistanceTo(temp.Key) &lt; 0.1 &amp;&amp; System.Math.Abs(b.Radius - temp.Value) &lt; 0.1))
                                wManager.wManagerSetting.AddBlackListZone(temp.Key, temp.Value, true);
                        }
                    }
                    catch(Exception e)
                    {
                    }
                }

                if(wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName.Equals(profileName))
                    break;

                counter++;
                Thread.Sleep(1000);
            }
        }
        _isStarted = false;
        Logging.Write("[FNV_Quester]: Blackspot validation disposed");

    });

        BlackspotValidation.Start();
    }
}

public class ProfileRestarter
{
    private static bool _IsAfk = false;
    private static Vector3 afkPosition = (Vector3)null;
    private static int timer = 0;
    private static bool _isSubscribed = false;
    private static void WatchForEvents()
    {
        if(!_isSubscribed)
        {
            _isSubscribed = true;

            EventsLuaWithArgs.OnEventsLuaWithArgs += (LuaEventsId id, List&lt;string&gt; args) =&gt;
            {
                if(id == wManager.Wow.Enums.LuaEventsId.CHAT_MSG_SYSTEM &amp;&amp; Conditions.ProductIsStartedNotInPause)
                {

                    if(args.FirstOrDefault().Contains("You are now AFK"))
                    {
                        _IsAfk = true;
                        timer = 0;
                        afkPosition = ObjectManager.Me.Position;
                    }
                }
            };
        }
    }

    public static void StartProfileRestarter()
    {

        Thread ProfileRestarterThread = new Thread(() =&gt;
        {
            Logging.Write("[FNV_Quester]: Profile Restarter initialized");

            string profileName = "FNV_V2\\#0 START_FNVLauncher_V2.xml";
            string currentProfileName = wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName;


            while((wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName.Equals(profileName) || !ObjectManager.Me.GetMove) &amp;&amp; Conditions.ProductIsStarted)
            {
                Thread.Sleep(1000);
            }

            if(!_isSubscribed)
            {
                Thread.Sleep(Usefuls.Latency + 500);
                WatchForEvents();
            }

            while(Conditions.ProductIsStarted || Conditions.ProductInPause)
            {

                if(wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName.Equals(profileName))
                    break;

                while(_IsAfk &amp;&amp; timer &lt; 600 &amp;&amp; !wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName.Equals(profileName))
                {
                    Thread.Sleep(1000);
                    timer++;
                }

                if(_IsAfk &amp;&amp; timer &gt;= 600 &amp;&amp; ObjectManager.Me.Position.DistanceTo(afkPosition) &lt; 25)
                {
                    Logging.Write("[FNV_Quester]: Bot seems to stopped / went AFK for too long. Restart of profile in process...");
                    wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName = profileName;
                    robotManager.Products.Products.ProductRestart();
                    break;
                }

                timer = 0;
                _IsAfk = false;
                Thread.Sleep(10000);
            }

            Logging.Write("[FNV_Quester]: Profile Restarter disposed");

        });

        ProfileRestarterThread.Start();
    }
}


class test
{


    public static void testen()
    {

    }
}
    </Script>
  <OffMeshConnections>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-14244.93" Y="327.715" Z="24.28872" />
        <Vector3 X="-14317.77" Y="444.1994" Z="23.11856" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Unidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>false</TryToUseEvenIfCanFindPathSuccess>
      <Name>Booty Bay Main Gate</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-14411.47" Y="469.2151" Z="-1.530911" Type="Swimming" />
        <Vector3 X="-14441.55" Y="454.6381" Z="3.752696" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Unidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>false</TryToUseEvenIfCanFindPathSuccess>
      <Name>Booty Bay Water Up</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-14360.01" Y="435.3736" Z="-1.490926" Type="Swimming" />
        <Vector3 X="-14429.51" Y="460.8226" Z="-1.490926" Type="Swimming" />
        <Vector3 X="-14442.21" Y="453.4467" Z="3.727707" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Unidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>false</TryToUseEvenIfCanFindPathSuccess>
      <Name>Booty Bay Water Up 2</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-14425.05" Y="413.9973" Z="-1.226124" />
        <Vector3 X="-14424.47" Y="464.1965" Z="-1.471671" Type="Swimming" />
        <Vector3 X="-14441.83" Y="453.6198" Z="3.736542" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Unidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>false</TryToUseEvenIfCanFindPathSuccess>
      <Name>Booty Bay Water Up 3</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-14457.73" Y="496.7309" Z="-1.48516" Type="Swimming" />
        <Vector3 X="-14422.56" Y="465.1627" Z="-1.48516" Type="Swimming" />
        <Vector3 X="-14441.73" Y="453.84" Z="3.740312" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Unidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>false</TryToUseEvenIfCanFindPathSuccess>
      <Name>Booty Bay Water Up 4</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-14244.93" Y="327.715" Z="24.28872" />
        <Vector3 X="-14317.77" Y="444.1994" Z="23.11856" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Unidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>false</TryToUseEvenIfCanFindPathSuccess>
      <Name>Booty Bay Main Gate</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-14271.14" Y="351.2808" Z="32.7274" />
        <Vector3 X="-14242.06" Y="326.3646" Z="24.54967" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Unidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>false</TryToUseEvenIfCanFindPathSuccess>
      <Name>BB Gate 2</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-14275.09" Y="357.4022" Z="33.0631" />
        <Vector3 X="-14246.13" Y="329.9129" Z="23.79554" />
        <Vector3 X="-14247.02" Y="316.2572" Z="25.93814" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Unidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>false</TryToUseEvenIfCanFindPathSuccess>
      <Name>BB Gate 3</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-14274.25" Y="355.2727" Z="32.87019" />
        <Vector3 X="-14245.84" Y="328.819" Z="24.01657" />
        <Vector3 X="-14235.18" Y="330.9093" Z="24.54806" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Unidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>false</TryToUseEvenIfCanFindPathSuccess>
      <Name>BB Gate 4</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-14425.64" Y="463.7922" Z="-1.606335" Type="Swimming" />
        <Vector3 X="-14431.39" Y="460.2731" Z="-1.456888" Type="Swimming" />
        <Vector3 X="-14433.83" Y="458.5316" Z="0.5814408" />
        <Vector3 X="-14436.53" Y="456.619" Z="2.858095" />
        <Vector3 X="-14439.67" Y="454.3906" Z="3.765711" />
        <Vector3 X="-14439.31" Y="448.6763" Z="3.710481" />
        <Vector3 X="-14432.97" Y="442.9715" Z="4.698968" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Unidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>false</TryToUseEvenIfCanFindPathSuccess>
      <Name>BB Water Main</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-14279.3" Y="569.8381" Z="-1.688138" Type="Swimming" />
        <Vector3 X="-14305.31" Y="507.944" Z="-1.617153" Type="Swimming" />
        <Vector3 X="-14330.67" Y="459.2877" Z="-1.617153" Type="Swimming" />
        <Vector3 X="-14358.99" Y="435.5913" Z="-1.508516" Type="Swimming" />
        <Vector3 X="-14388.62" Y="422.3743" Z="-1.481989" Type="Swimming" />
        <Vector3 X="-14420.43" Y="466.2162" Z="-1.481989" Type="Swimming" />
        <Vector3 X="-14430.28" Y="460.3832" Z="-1.481989" Type="Swimming" />
        <Vector3 X="-14433.07" Y="458.6328" Z="0.09396599" />
        <Vector3 X="-14435.31" Y="457.2666" Z="1.905465" />
        <Vector3 X="-14437.55" Y="455.9005" Z="3.717298" />
        <Vector3 X="-14440.98" Y="453.1783" Z="3.74304" />
        <Vector3 X="-14437.19" Y="446.6617" Z="3.7201" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Unidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>false</TryToUseEvenIfCanFindPathSuccess>
      <Name>BB Water 2</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-14384.42" Y="425.8085" Z="-1.502532" Type="Swimming" />
        <Vector3 X="-14418.26" Y="467.7067" Z="-1.502532" Type="Swimming" />
        <Vector3 X="-14428.45" Y="462.408" Z="-1.502218" Type="Swimming" />
        <Vector3 X="-14431.17" Y="460.2641" Z="-1.473022" Type="Swimming" />
        <Vector3 X="-14434.15" Y="458.2498" Z="0.8700668" />
        <Vector3 X="-14436.86" Y="456.4114" Z="3.128406" />
        <Vector3 X="-14441.83" Y="452.6115" Z="3.723111" />
        <Vector3 X="-14434.67" Y="443.6461" Z="4.282579" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Unidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>false</TryToUseEvenIfCanFindPathSuccess>
      <Name>BB Water 3</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-14323.12" Y="422.1133" Z="6.237457" />
        <Vector3 X="-14325.11" Y="425.9427" Z="6.637994" />
        <Vector3 X="-14325.71" Y="432.8257" Z="3.358105" />
        <Vector3 X="-14327.31" Y="439.9197" Z="0.4397011" />
        <Vector3 X="-14329.75" Y="446.718" Z="-1.62292" Type="Swimming" />
        <Vector3 X="-14384.54" Y="488.5334" Z="-1.483928" Type="Swimming" />
        <Vector3 X="-14430.26" Y="460.0857" Z="-1.483928" Type="Swimming" />
        <Vector3 X="-14432.46" Y="458.9464" Z="-0.3762381" />
        <Vector3 X="-14436.55" Y="456.627" Z="2.863849" />
        <Vector3 X="-14440.31" Y="454.1837" Z="3.769243" />
        <Vector3 X="-14437.9" Y="446.0244" Z="3.702394" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Unidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>false</TryToUseEvenIfCanFindPathSuccess>
      <Name>BB Water 4</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-14455.14" Y="536.5123" Z="4.969059" />
        <Vector3 X="-14454.4" Y="529.3094" Z="-1.230524" />
        <Vector3 X="-14456.29" Y="512.842" Z="-1.693045" Type="Swimming" />
        <Vector3 X="-14422.35" Y="472.9501" Z="-1.693045" Type="Swimming" />
        <Vector3 X="-14424.48" Y="465.3458" Z="-1.442437" Type="Swimming" />
        <Vector3 X="-14431.06" Y="460.3411" Z="-1.460652" Type="Swimming" />
        <Vector3 X="-14434.38" Y="458.1186" Z="1.049299" />
        <Vector3 X="-14437.02" Y="456.3524" Z="3.241428" />
        <Vector3 X="-14440.47" Y="453.151" Z="3.750416" />
        <Vector3 X="-14435.99" Y="446.2986" Z="3.705097" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Unidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>false</TryToUseEvenIfCanFindPathSuccess>
      <Name>BB Water 5</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-14447.21" Y="544.7219" Z="1.210045" />
        <Vector3 X="-14418.14" Y="559.3088" Z="-1.72597" Type="Swimming" />
        <Vector3 X="-14393.93" Y="560.4893" Z="-1.72597" Type="Swimming" />
        <Vector3 X="-14390.33" Y="498.7351" Z="-1.72597" Type="Swimming" />
        <Vector3 X="-14418.31" Y="468.2918" Z="-1.72597" Type="Swimming" />
        <Vector3 X="-14431.13" Y="460.1644" Z="-1.446082" Type="Swimming" />
        <Vector3 X="-14435.51" Y="457.3197" Z="2.008148" />
        <Vector3 X="-14440.72" Y="453.8929" Z="3.756521" />
        <Vector3 X="-14438.43" Y="447.7313" Z="3.712931" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Unidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>false</TryToUseEvenIfCanFindPathSuccess>
      <Name>BB Water 6</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-14410.45" Y="523.2744" Z="-1.435221" Type="Swimming" />
        <Vector3 X="-14409.81" Y="483.2413" Z="-1.435221" Type="Swimming" />
        <Vector3 X="-14421.64" Y="466.0511" Z="-1.435221" Type="Swimming" />
        <Vector3 X="-14430.36" Y="460.5377" Z="-1.435221" Type="Swimming" />
        <Vector3 X="-14432.16" Y="459.4077" Z="-0.7182272" />
        <Vector3 X="-14435.32" Y="457.4547" Z="1.846143" />
        <Vector3 X="-14438.86" Y="455.27" Z="3.743648" />
        <Vector3 X="-14441.29" Y="451.4636" Z="3.716125" />
        <Vector3 X="-14438.17" Y="447.5225" Z="3.714983" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Unidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>false</TryToUseEvenIfCanFindPathSuccess>
      <Name>BB Water 7</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-14424.9" Y="516.3093" Z="-1.434813" Type="Swimming" />
        <Vector3 X="-14404.28" Y="486.4814" Z="-1.434813" Type="Swimming" />
        <Vector3 X="-14417.04" Y="471.6717" Z="-1.434813" Type="Swimming" />
        <Vector3 X="-14431.42" Y="460.2012" Z="-1.434813" Type="Swimming" />
        <Vector3 X="-14432.79" Y="459.2489" Z="-0.2889981" />
        <Vector3 X="-14435.77" Y="457.1995" Z="2.201362" />
        <Vector3 X="-14437.12" Y="456.2701" Z="3.32969" />
        <Vector3 X="-14441.83" Y="452.895" Z="3.727232" />
        <Vector3 X="-14438" Y="447.8383" Z="3.721579" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Unidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>false</TryToUseEvenIfCanFindPathSuccess>
      <Name>BB Water 8</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-14427.18" Y="512.8558" Z="-1.435059" Type="Swimming" />
        <Vector3 X="-14432.24" Y="503.4329" Z="-1.435059" Type="Swimming" />
        <Vector3 X="-14421.2" Y="487.8127" Z="-1.435059" Type="Swimming" />
        <Vector3 X="-14413.56" Y="475.1851" Z="-1.435059" Type="Swimming" />
        <Vector3 X="-14421.03" Y="467.7734" Z="-1.51011" Type="Swimming" />
        <Vector3 X="-14429.71" Y="460.8976" Z="-1.51011" Type="Swimming" />
        <Vector3 X="-14432.78" Y="459.0173" Z="-0.2127914" />
        <Vector3 X="-14435.65" Y="457.2195" Z="2.122924" />
        <Vector3 X="-14438.5" Y="455.44" Z="3.737081" />
        <Vector3 X="-14442.64" Y="452.7779" Z="3.714164" />
        <Vector3 X="-14436.76" Y="446.3464" Z="3.721838" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Unidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>false</TryToUseEvenIfCanFindPathSuccess>
      <Name>BB Water 9</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-14338.26" Y="573.1155" Z="-1.526306" Type="Swimming" />
        <Vector3 X="-14369.42" Y="520.3903" Z="-1.526306" Type="Swimming" />
        <Vector3 X="-14407.85" Y="478.2805" Z="-1.526306" Type="Swimming" />
        <Vector3 X="-14427.58" Y="462.7321" Z="-1.526306" Type="Swimming" />
        <Vector3 X="-14431.14" Y="460.1789" Z="-1.440297" Type="Swimming" />
        <Vector3 X="-14432.16" Y="459.4822" Z="-0.7462963" />
        <Vector3 X="-14435.43" Y="457.2746" Z="1.974231" />
        <Vector3 X="-14437.06" Y="456.1738" Z="3.32958" />
        <Vector3 X="-14438.42" Y="455.2572" Z="3.733027" />
        <Vector3 X="-14441.68" Y="453.0557" Z="3.731149" />
        <Vector3 X="-14437.38" Y="446.5971" Z="3.71654" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Unidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>false</TryToUseEvenIfCanFindPathSuccess>
      <Name>BB Water 10</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-14378.28" Y="570.9839" Z="-1.477042" Type="Swimming" />
        <Vector3 X="-14386.84" Y="497.4027" Z="-1.477042" Type="Swimming" />
        <Vector3 X="-14410.62" Y="475.5461" Z="-1.477042" Type="Swimming" />
        <Vector3 X="-14429.65" Y="461.5752" Z="-1.477042" Type="Swimming" />
        <Vector3 X="-14432.2" Y="459.6073" Z="-0.7688227" />
        <Vector3 X="-14434.13" Y="458.3449" Z="0.8236718" />
        <Vector3 X="-14436.42" Y="456.8488" Z="2.71384" />
        <Vector3 X="-14438.06" Y="455.7815" Z="3.617111" />
        <Vector3 X="-14441.91" Y="453.2701" Z="3.730828" />
        <Vector3 X="-14438.15" Y="447.4764" Z="3.714783" />
      </Path>
      <ContinentId>0</ContinentId>
      <Type>Unidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>false</TryToUseEvenIfCanFindPathSuccess>
      <Name>BB Water 11</Name>
    </OffMeshConnection>
  </OffMeshConnections>
  <BlacklistNpc />
  <BlacklistNpcType />
  <Blackspots>
    <Blackspot X="-14217.3311" Y="543.014" Z="-1.44114518" Radius="50" Continent="None" Comment="" />
    <Blackspot X="-14225.2" Y="577.1572" Z="-1.44114518" Radius="50" Continent="None" Comment="" />
    <Blackspot X="-14233.4287" Y="613.1081" Z="-1.44114518" Radius="50" Continent="None" Comment="" />
    <Blackspot X="-14246.1631" Y="643.311646" Z="-1.44114518" Radius="50" Continent="None" Comment="" />
    <Blackspot X="-14269.4072" Y="669.9754" Z="-1.44114518" Radius="50" Continent="None" Comment="" />
    <Blackspot X="-14295.1777" Y="684.887634" Z="-1.44114518" Radius="50" Continent="None" Comment="" />
    <Blackspot X="-14327.0273" Y="685.8829" Z="-1.44114518" Radius="50" Continent="None" Comment="" />
    <Blackspot X="-14354.4766" Y="670.8962" Z="-1.44114518" Radius="50" Continent="None" Comment="" />
    <Blackspot X="-14380.6465" Y="654.9954" Z="-1.44114518" Radius="50" Continent="None" Comment="" />
    <Blackspot X="-14396.4961" Y="645.0067" Z="8.022679" Radius="50" Continent="None" Comment="" />
    <Blackspot X="-14610.8242" Y="330.5816" Z="2.72749519" Radius="35" Continent="None" Comment="" />
    <Blackspot X="-14693.8643" Y="501.3992" Z="2.15986872" Radius="50" Continent="None" Comment="" />
    <Blackspot X="-12535.832" Y="-725.9454" Z="38.9869347" Radius="70" Continent="None" Comment="" />
    <Blackspot X="-12682.7969" Y="-478.0315" Z="30.41658" Radius="70" Continent="None" Comment="" />
    <Blackspot X="-12974.66" Y="-723.6123" Z="54.58086" Radius="210" Continent="None" Comment="" />
    <Blackspot X="-13439.9375" Y="709.999" Z="6.60416842" Radius="125" Continent="None" Comment="" />
  </Blackspots>
</EasyQuestProfile>