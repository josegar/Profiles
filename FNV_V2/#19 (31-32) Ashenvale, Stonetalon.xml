<?xml version="1.0" encoding="utf-8"?>
<EasyQuestProfile xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <QuestsSorted>
    <QuestsSorted Action="RunCode" NameClass="FNVQuesterAuthSettings.Load();&#xD;&#xA;        if (false)&#xD;&#xA;        {&#xD;&#xA;            FNVQuesterAuthSettings.CurrentSetting.ToForm();&#xD;&#xA;        }&#xD;&#xA;        FNVQuesterAuthSettings.CurrentSetting.Save();&#xD;&#xA;        new Authentication(FNVQuesterAuthSettings.CurrentSetting.TransactionId, &quot;e8b609dcf76e&quot;); &#xD;&#xA;        ControlAuthentication.SetControl(5);&#xD;&#xA;&#xD;&#xA;NpcDB.AcceptOnlyProfileNpc = true;&#xD;&#xA;wManager.wManagerSetting.CurrentSetting.WallDistancePathFinder = 2;&#xD;&#xA;wManager.wManagerSetting.CurrentSetting.AttackBeforeBeingAttacked = true;&#xD;&#xA;wManager.wManagerSetting.CurrentSetting.TrainNewSkills = false;&#xD;&#xA;&#xD;&#xA;        int[] IdsToBlacklist = new int[] { 8150, 11103, 12960, 1322, };&#xD;&#xA;&#xD;&#xA;        foreach(int ele in IdsToBlacklist)&#xD;&#xA;        {&#xD;&#xA;            try&#xD;&#xA;            {&#xD;&#xA;                List&lt;WoWUnit&gt; temp = wManager.Wow.ObjectManager.ObjectManager.GetWoWUnitByEntry(ele);&#xD;&#xA;&#xD;&#xA;                wManager.wManagerSetting.AddBlackListNpcEntry(ele, false);&#xD;&#xA;                Logging.Write(&quot;[FNV_Quester]: Adding NPC &quot; + temp[0].Name + &quot; with id &quot; + ele + &quot; to blacklist&quot;);&#xD;&#xA;            }&#xD;&#xA;            catch(Exception e)&#xD;&#xA;            {&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;NpcDB.AcceptOnlyProfileNpc = true;&#xD;&#xA;wManager.wManagerSetting.CurrentSetting.AttackBeforeBeingAttacked = true;&#xD;&#xA;QuesterSettings.SettingsKalimdor();&#xD;&#xA;wManager.Wow.Forms.UserControlTabGeneralSettings.ReloadGeneralSettings();" />
    <QuestsSorted Action="RunCode" NameClass="wManager.wManagerSetting.CurrentSetting.AttackBeforeBeingAttacked = false;" />
    <QuestsSorted Action="If" NameClass="Usefuls.ContinentId == (int) ContinentId.Azeroth" />
    <QuestsSorted Action="Pulse" NameClass="BOATShipMenethilToAuberdine" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="RunCode" NameClass="NpcDB.AcceptOnlyProfileNpc = true;&#xD;&#xA;wManager.wManagerSetting.CurrentSetting.WallDistancePathFinder = 2;&#xD;&#xA;&#xD;&#xA;ProgressSettings.Initialize();&#xD;&#xA;if(ProgressSettings.CurrentSettings.ashenvaleZwei &gt; 2)&#xD;&#xA;{&#xD;&#xA;wManager.Wow.Helpers.Quest.QuesterCurrentContext.CurrentStep = ProgressSettings.CurrentSettings.ashenvaleZwei - 1;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;Logging.Write(&quot;[FNV_Quester]: Loading current Quester step &quot; + (ProgressSettings.CurrentSettings.duskwoodDrei));&#xD;&#xA;&#xD;&#xA;Thread p = new Thread(() =&gt;&#xD;&#xA;{    &#xD;&#xA;ProgressSettings.inProgress = true;&#xD;&#xA;Logging.Write(&quot;[FNV_Quester]: Progress saver initialized&quot;);&#xD;&#xA; &#xD;&#xA; while(robotManager.Products.Products.IsStarted)&#xD;&#xA; {&#xD;&#xA;if(!ProgressSettings.inProgress)&#xD;&#xA;{&#xD;&#xA;ProgressSettings.Dispose();&#xD;&#xA;Logging.Write(&quot;[FNV_Quester]: Progress saver disposed&quot;);&#xD;&#xA;break;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;  if (Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause)&#xD;&#xA;  {&#xD;&#xA; if(ProgressSettings.CurrentSettings.ashenvaleZwei &lt; wManager.Wow.Helpers.Quest.QuesterCurrentContext.CurrentStep)&#xD;&#xA;{&#xD;&#xA;ProgressSettings.CurrentSettings.ashenvaleZwei = wManager.Wow.Helpers.Quest.QuesterCurrentContext.CurrentStep;&#xD;&#xA;ProgressSettings.CurrentSettings.Save();&#xD;&#xA;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;  Thread.Sleep(1000);&#xD;&#xA; }&#xD;&#xA;&#xD;&#xA;});&#xD;&#xA;&#xD;&#xA;p.Start();" />
    <QuestsSorted Action="RunCode" NameClass="wManager.Wow.Forms.UserControlTabGeneralSettings.ReloadGeneralSettings();" />
    <QuestsSorted Action="RunCode" NameClass="FlightMaster.takeTaxi(&quot;Darkshore&quot;, &quot;Ashenvale&quot;);" />
    <QuestsSorted Action="PickUp" NameClass="KaynethStillwind" />
    <QuestsSorted Action="PickUp" NameClass="CullingtheThreat" />
    <QuestsSorted Action="Pulse" NameClass="ROUTEAstranaarToCullingtheThreat" />
    <QuestsSorted Action="Pulse" NameClass="CullingtheThreat" />
    <QuestsSorted Action="Pulse" NameClass="ROUTECullingTheThreatToAstranaar" />
    <QuestsSorted Action="RunCode" NameClass="wManager.Wow.Bot.States.ToTown.ForceToTown = true;" />
    <QuestsSorted Action="TurnIn" NameClass="CullingtheThreat" />
    <QuestsSorted Action="Pulse" NameClass="ROUTEAstranaarToElementalBracers" />
    <QuestsSorted Action="PickUp" NameClass="ElementalBracers" />
    <QuestsSorted Action="Pulse" NameClass="ElementalBracers" />
    <QuestsSorted Action="Pulse" NameClass="ElementalBracers2" />
    <QuestsSorted Action="Pulse" NameClass="ROUTEGoSomeStepsBack" />
    <QuestsSorted Action="TurnIn" NameClass="ElementalBracers2" />
    <QuestsSorted Action="PickUp" NameClass="MageSummoner" />
    <QuestsSorted Action="Pulse" NameClass="ROUTEVeleneStarstrikeToAstranaar" />
    <QuestsSorted Action="RunCode" NameClass="FlightMaster.takeTaxi(&quot;Ashenvale&quot;, &quot;Stonetalon&quot;);" />
    <QuestsSorted Action="PickUp" NameClass="ReclaimingtheCharredVale11" />
    <QuestsSorted Action="Pulse" NameClass="ReclaimingtheCharredVale12" />
    <QuestsSorted Action="Pulse" NameClass="ReclaimingtheCharredVale11" />
    <QuestsSorted Action="TurnIn" NameClass="ReclaimingtheCharredVale11" />
    <QuestsSorted Action="Pulse" NameClass="ROUTEStonetalonPeakToBarrensBorder" />
    <QuestsSorted Action="RunCode" NameClass="Logging.Write(&quot;[FNV_Quester]: Going to clean up the whole Horde outpost, enable Use Spirit Healer...&quot;);&#xD;&#xA;&#xD;&#xA;wManager.wManagerSetting.CurrentSetting.UseSpiritHealer = true;" />
    <QuestsSorted Action="RunCode" NameClass="Vector3 deathPosition = new Vector3(-387.5565f, -1369.425f, 91.70547f);&#xD;&#xA;&#xD;&#xA;while(ObjectManager.Me.IsAlive)&#xD;&#xA;{&#xD;&#xA;wManager.Wow.Bot.Tasks.GoToTask.ToPosition(deathPosition, 3.5f, false);&#xD;&#xA;Thread.Sleep(5000);&#xD;&#xA;}" />
    <QuestsSorted Action="RunCode" NameClass="Logging.Write(&quot;[FNV_Quester]: Disable Use Spirit Healer&quot;);&#xD;&#xA;&#xD;&#xA;wManager.wManagerSetting.CurrentSetting.UseSpiritHealer = false;" />
    <QuestsSorted Action="Pulse" NameClass="ROUTEGoToRatchet" />
    <QuestsSorted Action="RunCode" NameClass="FlightMaster.discoverTaxi(&quot;Barrens&quot;);" />
    <QuestsSorted Action="Pulse" NameClass="ROUTERatchetToMageSummoner" />
    <QuestsSorted Action="Pulse" NameClass="MageSummoner" />
    <QuestsSorted Action="Pulse" NameClass="ROUTEMageSummonerBackToRatchet" />
    <QuestsSorted Action="Pulse" NameClass="ROUTEGoToTheramore" />
    <QuestsSorted Action="RunCode" NameClass="FlightMaster.discoverTaxi(&quot;Dustwallow&quot;);" />
    <QuestsSorted Action="RunCode" NameClass="FlightMaster.takeTaxi(&quot;Dustwallow&quot;, &quot;Ashenvale&quot;);" />
    <QuestsSorted Action="TurnIn" NameClass="MageSummoner" />
    <QuestsSorted Action="RunCode" NameClass="wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;" />
    <QuestsSorted Action="While" NameClass="Usefuls.ContinentId == (int)ContinentId.Kalimdor" />
    <QuestsSorted Action="RunCode" NameClass="wManager.Wow.Helpers.ItemsManager.UseItem(6948);" />
    <QuestsSorted Action="Wait" NameClass="20000" />
    <QuestsSorted Action="EndWhile" NameClass="" />
    <QuestsSorted Action="RunCode" NameClass="wManager.wManagerSetting.ClearBlacklistOfCurrentProductSession();&#xD;&#xA;wManager.Wow.Helpers.NpcDB.ListNpc.Clear();&#xD;&#xA;&#xD;&#xA;ProgressSettings.Dispose();&#xD;&#xA;ProgressSettings.inProgress = false;&#xD;&#xA;&#xD;&#xA;FNVSettings.Initialize();&#xD;&#xA;FNVSettings.CurrentSettings.ashenvaleZwei = true;&#xD;&#xA;FNVSettings.Dispose();" />
    <QuestsSorted Action="LoadProfile" NameClass="FNV_V2\#0 START_FNVLauncher_V2.xml" />
  </QuestsSorted>
  <NpcQuest>
    <NPCQuest Id="3848" Name="Kayneth Stillwind" GameObject="false">
      <PickUpQuests />
      <TurnInQuests>
        <int>4581</int>
      </TurnInQuests>
      <Position X="2954.25" Y="-3215.41" Z="169.205" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="3994" Name="Keeper Albagorm" GameObject="false">
      <PickUpQuests>
        <int>1057</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>1057</int>
      </TurnInQuests>
      <Position X="2652.91" Y="1433.92" Z="226.689" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="3691" Name="Raene Wolfrunner" GameObject="false">
      <PickUpQuests>
        <int>1054</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>1054</int>
      </TurnInQuests>
      <Position X="2767.16" Y="-411.611" Z="111.466" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="3885" Name="Sentinel Velene Starstrike" GameObject="false">
      <PickUpQuests>
        <int>1016</int>
        <int>1017</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>1016</int>
        <int>1017</int>
      </TurnInQuests>
      <Position X="2089.5" Y="-1171.56" Z="101.7933" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="3845" Name="Shindrell Swiftfire" GameObject="false">
      <PickUpQuests>
        <int>4581</int>
      </PickUpQuests>
      <TurnInQuests />
      <Position X="2795.75" Y="-299.374" Z="107.0993" Type="Flying" />
    </NPCQuest>
  </NpcQuest>
  <Npc>
    <Npc>
      <Position X="2672.31" Y="-363.604" Z="110.728" Type="Flying" />
      <Entry>11137</Entry>
      <Name>Xai'ander</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>Repair</Type>
      <VendorItemClass>Food</VendorItemClass>
      <ContinentId>Kalimdor</ContinentId>
    </Npc>
    <Npc>
      <Position X="2781.16" Y="-432.997" Z="116.5816" Type="Flying" />
      <Entry>6738</Entry>
      <Name>Innkeeper Kimlya</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>Vendor</Type>
      <VendorItemClass>Food</VendorItemClass>
      <ContinentId>Kalimdor</ContinentId>
    </Npc>
    <Npc>
      <Position X="2087.08" Y="-1199.17" Z="101.7075" Type="Flying" />
      <Entry>3951</Entry>
      <Name>Bhaldaran Ravenshade</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>Repair</Type>
      <VendorItemClass>Food</VendorItemClass>
      <ContinentId>Kalimdor</ContinentId>
    </Npc>
    <Npc>
      <Position X="2061.15" Y="-1191.24" Z="100.97" Type="Flying" />
      <Entry>3963</Entry>
      <Name>Danlaar Nightstride</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>HunterTrainer</Type>
      <VendorItemClass>Food</VendorItemClass>
      <ContinentId>Kalimdor</ContinentId>
    </Npc>
    <Npc>
      <Position X="2111.36" Y="-1183.69" Z="101.7778" Type="Flying" />
      <Entry>3960</Entry>
      <Name>Ulthaan</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>Vendor</Type>
      <VendorItemClass>Food</VendorItemClass>
      <ContinentId>Kalimdor</ContinentId>
    </Npc>
    <Npc>
      <Position X="2691.34" Y="-3885.63" Z="109.1631" Type="Flying" />
      <Entry>14301</Entry>
      <Name>Brinna Valanaar</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>Repair</Type>
      <VendorItemClass>Food</VendorItemClass>
      <ContinentId>Kalimdor</ContinentId>
    </Npc>
    <Npc>
      <Position X="2729.88" Y="1498.14" Z="236.8259" Type="Flying" />
      <Entry>16458</Entry>
      <Name>Innkeeper Faralia</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>Vendor</Type>
      <VendorItemClass>Food</VendorItemClass>
      <ContinentId>Kalimdor</ContinentId>
    </Npc>
    <Npc>
      <Position X="2677.28" Y="1507.65" Z="234.8653" Type="Flying" />
      <Entry>4188</Entry>
      <Name>Illyanie</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>Repair</Type>
      <VendorItemClass>Food</VendorItemClass>
      <ContinentId>Kalimdor</ContinentId>
    </Npc>
    <Npc>
      <Position X="-1050.04" Y="-3664.8" Z="23.88534" Type="Flying" />
      <Entry>6791</Entry>
      <Name>Innkeeper Wiley</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>Vendor</Type>
      <VendorItemClass>Food</VendorItemClass>
      <ContinentId>Kalimdor</ContinentId>
    </Npc>
    <Npc>
      <Position X="-982.713" Y="-3680.53" Z="9.554736" />
      <Entry>3493</Entry>
      <Name>Grazlix</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>Repair</Type>
      <VendorItemClass>Food</VendorItemClass>
      <ContinentId>Kalimdor</ContinentId>
    </Npc>
  </Npc>
  <EasyQuests>
    <EasyQuest>
      <Name>Culling the Threat</Name>
      <QuestId>
        <int>1054</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="3337.85" Y="-476.5" Z="154.3659" />
        </HotSpots>
        <EntryTarget>
          <int>3987</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>true</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Elemental Bracers</Name>
      <QuestId>
        <int>1016</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="1997.382" Y="-1068.956" Z="95.1432" />
          <Vector3 X="1953.514" Y="-1050.776" Z="94.14989" />
          <Vector3 X="2051.561" Y="-1067.847" Z="92.78799" />
          <Vector3 X="2084.268" Y="-967.1829" Z="98.41877" />
        </HotSpots>
        <EntryTarget>
          <int>3917</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>true</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition>return ItemsManager.GetItemCountById(12220) &gt;= 5;</IsCompleteCondition>
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Elemental Bracers2</Name>
      <QuestId>
        <int>1016</int>
      </QuestId>
      <QuestType>InteractWithNpc</QuestType>
      <QuestClass xsi:type="InteractWithNpcEasyQuestClass">
        <HotSpots>
          <Vector3 X="2089.5" Y="-1171.56" Z="101.7932" />
        </HotSpots>
        <GossipOptionNpcInteractWith>1</GossipOptionNpcInteractWith>
        <Macro>for bag = 0,4,1 do for slot = 1, GetContainerNumSlots(bag), 1 do local name = GetContainerItemLink(bag,slot); if name and string.find(name,"Divining Scroll") then local st = GetContainerItemCooldown(bag, slot); if st == 0 then UseContainerItem(bag,slot); break; end; end; end; end</Macro>
        <IgnoreIfDead>false</IgnoreIfDead>
        <EntryIdTarget>
          <int>3885</int>
        </EntryIdTarget>
        <Range>4.5</Range>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>true</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition>return ItemsManager.GetItemCountById(12220) &gt;= 5;</CanCondition>
      <IsCompleteCondition>return ItemsManager.GetItemCountById(5455) &gt;= 1;</IsCompleteCondition>
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Kayneth Stillwind</Name>
      <QuestId>
        <int>4581</int>
      </QuestId>
      <QuestType>None</QuestType>
      <QuestClass />
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Reclaiming the Charred Vale 11</Name>
      <QuestId>
        <int>1057</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="941.1105" Y="1596.115" Z="-13.14136" />
          <Vector3 X="903.8388" Y="1751.083" Z="-10.18044" />
          <Vector3 X="764.0258" Y="1733.312" Z="-21.03719" />
        </HotSpots>
        <EntryTarget>
          <int>4022</int>
          <int>4025</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>true</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>true</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Reclaiming the Charred Vale12</Name>
      <QuestId>
        <int>1057</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="641.523" Y="1539.434" Z="-15.94273" />
          <Vector3 X="689.7864" Y="1772.212" Z="-16.6695" />
          <Vector3 X="705.9379" Y="1905.917" Z="1.62528" />
        </HotSpots>
        <EntryTarget>
          <int>4023</int>
          <int>4024</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>true</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>true</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTEAstranaarToCulling the Threat</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="2788.017" Y="-306.5563" Z="107.0935" />
          <Vector3 X="2792.055" Y="-295.2882" Z="107.0895" />
          <Vector3 X="2804.275" Y="-272.2396" Z="107.0967" />
          <Vector3 X="2822.258" Y="-253.117" Z="108.4916" />
          <Vector3 X="2844.276" Y="-227.3325" Z="105.6234" />
          <Vector3 X="2860.29" Y="-206.5331" Z="106.1283" />
          <Vector3 X="2869.104" Y="-194.0777" Z="105.2508" />
          <Vector3 X="2887.938" Y="-164.5778" Z="104.9701" />
          <Vector3 X="2901.006" Y="-147.0887" Z="107.0097" />
          <Vector3 X="2905.035" Y="-141.8864" Z="107.2497" />
          <Vector3 X="2908.648" Y="-128.1647" Z="105.7713" />
          <Vector3 X="2915.818" Y="-119.9653" Z="100.4878" />
          <Vector3 X="2928.224" Y="-110.9612" Z="96.97306" />
          <Vector3 X="2937.768" Y="-105.6682" Z="96.97306" />
          <Vector3 X="2948.625" Y="-106.4313" Z="97.12524" />
          <Vector3 X="2954.873" Y="-108.4953" Z="97.44325" />
          <Vector3 X="2958.699" Y="-110.6882" Z="98.06538" />
          <Vector3 X="2963.436" Y="-113.4032" Z="98.90363" />
          <Vector3 X="3008.065" Y="-138.9671" Z="100.132" />
          <Vector3 X="3029.345" Y="-147.4835" Z="99.93582" />
          <Vector3 X="3038.061" Y="-147.4397" Z="99.9752" />
          <Vector3 X="3072.657" Y="-151.2936" Z="102.1655" />
          <Vector3 X="3105.055" Y="-164.1813" Z="105.1559" />
          <Vector3 X="3135.593" Y="-178.9985" Z="108.3238" />
          <Vector3 X="3146.958" Y="-185.4879" Z="109.638" />
          <Vector3 X="3177.965" Y="-203.877" Z="112.8588" />
          <Vector3 X="3207.71" Y="-220.1567" Z="116.7112" />
          <Vector3 X="3239.598" Y="-236.9638" Z="119.6916" />
          <Vector3 X="3261.414" Y="-247.1559" Z="121.6573" />
          <Vector3 X="3269.505" Y="-250.4879" Z="122.8696" />
          <Vector3 X="3281.677" Y="-255.4908" Z="124.4711" />
          <Vector3 X="3299.79" Y="-262.9823" Z="125.8101" />
          <Vector3 X="3332.021" Y="-279.0709" Z="127.2608" />
          <Vector3 X="3355.148" Y="-295.6764" Z="130.4082" />
          <Vector3 X="3361.2" Y="-301.9951" Z="131.3365" />
          <Vector3 X="3382.88" Y="-329.257" Z="135.8554" />
          <Vector3 X="3384.351" Y="-337.7152" Z="137.2622" />
          <Vector3 X="3385.939" Y="-372.679" Z="142.598" />
          <Vector3 X="3384.589" Y="-399.7538" Z="144.9775" />
          <Vector3 X="3374.176" Y="-412.489" Z="148.3217" />
          <Vector3 X="3361.176" Y="-427.2341" Z="151.1615" />
          <Vector3 X="3349.277" Y="-428.9393" Z="151.6161" />
          <Vector3 X="3347.214" Y="-433.9943" Z="151.7378" />
          <Vector3 X="3343.906" Y="-442.0953" Z="151.5362" />
          <Vector3 X="3335.473" Y="-461.0347" Z="153.234" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition>return (Quest.GetQuestCompleted(1054)  || new Vector3(3335.473f, -461.0347f, 153.234f).DistanceTo(ObjectManager.Me.Position) &lt; 10);</IsCompleteCondition>
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTEAstranaarToElementalBracers</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="2661.596" Y="-433.2892" Z="107.1269" />
          <Vector3 X="2647.19" Y="-443.2244" Z="107.1406" />
          <Vector3 X="2636.25" Y="-448.2346" Z="106.9477" />
          <Vector3 X="2630.058" Y="-450.461" Z="106.6892" />
          <Vector3 X="2602.08" Y="-462.9846" Z="107.188" />
          <Vector3 X="2594.929" Y="-465.6448" Z="107.0898" />
          <Vector3 X="2559.148" Y="-469.9867" Z="109.2716" />
          <Vector3 X="2543.735" Y="-475.7354" Z="110.9968" />
          <Vector3 X="2536.647" Y="-478.3792" Z="111.9955" />
          <Vector3 X="2508.452" Y="-485.776" Z="114.9887" />
          <Vector3 X="2475.731" Y="-497.3045" Z="114.813" />
          <Vector3 X="2450.979" Y="-519.6848" Z="115.1586" />
          <Vector3 X="2447.001" Y="-555.0598" Z="115.0686" />
          <Vector3 X="2449.957" Y="-588.81" Z="113.8677" />
          <Vector3 X="2452.937" Y="-624.8069" Z="114.5469" />
          <Vector3 X="2457.975" Y="-659.3668" Z="116.4273" />
          <Vector3 X="2473.863" Y="-690.4544" Z="121.0766" />
          <Vector3 X="2480.057" Y="-723.2355" Z="125.9703" />
          <Vector3 X="2476.617" Y="-738.1025" Z="128.3663" />
          <Vector3 X="2454.184" Y="-746.8288" Z="127.8732" />
          <Vector3 X="2442.311" Y="-748.8059" Z="124.0314" />
          <Vector3 X="2407.465" Y="-752.0632" Z="120.1633" />
          <Vector3 X="2372.853" Y="-756.7601" Z="117.5481" />
          <Vector3 X="2341.335" Y="-769.1338" Z="115.6517" />
          <Vector3 X="2309.993" Y="-778.3602" Z="112.8972" />
          <Vector3 X="2295.717" Y="-783.9334" Z="111.1542" />
          <Vector3 X="2263.585" Y="-797.6201" Z="109.6327" />
          <Vector3 X="2231.641" Y="-802.0294" Z="106.9074" />
          <Vector3 X="2212.134" Y="-825.6834" Z="104.4156" />
          <Vector3 X="2195.045" Y="-845.5876" Z="101.7967" />
          <Vector3 X="2169.2" Y="-854.3748" Z="100.7552" />
          <Vector3 X="2142.769" Y="-876.3303" Z="98.04057" />
          <Vector3 X="2110.643" Y="-881.8325" Z="100.2195" />
          <Vector3 X="2090.644" Y="-879.1946" Z="101.905" />
          <Vector3 X="2068.855" Y="-881.4739" Z="99.93556" />
          <Vector3 X="2056.167" Y="-887.8708" Z="101.7704" />
          <Vector3 X="2052" Y="-895.5654" Z="101.2437" />
          <Vector3 X="2045.664" Y="-914.0777" Z="98.98203" />
          <Vector3 X="2045.179" Y="-924.9598" Z="97.2288" />
          <Vector3 X="2046.552" Y="-935.7933" Z="96.00291" />
          <Vector3 X="2052.797" Y="-981.3572" Z="93.65271" />
          <Vector3 X="2057.542" Y="-1015.973" Z="93.95158" />
          <Vector3 X="2062.294" Y="-1050.635" Z="94.64548" />
          <Vector3 X="2067.926" Y="-1084.961" Z="101.3783" />
          <Vector3 X="2083.086" Y="-1103.567" Z="98.45259" />
          <Vector3 X="2101.647" Y="-1117.075" Z="98.92171" />
          <Vector3 X="2123.875" Y="-1134.507" Z="100.3599" />
          <Vector3 X="2128.713" Y="-1152.415" Z="99.55063" />
          <Vector3 X="2136.17" Y="-1183.187" Z="98.69292" />
          <Vector3 X="2130.614" Y="-1188.502" Z="99.77388" />
          <Vector3 X="2106.673" Y="-1190.588" Z="101.7779" />
          <Vector3 X="2093.61" Y="-1191.437" Z="101.7811" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition>return (Quest.GetQuestCompleted(1016)  || new Vector3(2093.61f, -1191.437f, 101.7811f).DistanceTo(ObjectManager.Me.Position) &lt; 10);</IsCompleteCondition>
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTECullingTheThreatToAstranaar</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="3334.318" Y="-450.8126" Z="151.5696" />
          <Vector3 X="3320.858" Y="-466.6116" Z="152.7158" />
          <Vector3 X="3301.04" Y="-495.46" Z="153.6884" />
          <Vector3 X="3284.884" Y="-516.1308" Z="153.9662" />
          <Vector3 X="3279.929" Y="-522.0248" Z="154.8403" />
          <Vector3 X="3266.86" Y="-521.8416" Z="153.1809" />
          <Vector3 X="3257.055" Y="-520.7065" Z="150.3381" />
          <Vector3 X="3243.937" Y="-519.655" Z="149.662" />
          <Vector3 X="3218.742" Y="-512.3587" Z="145.4562" />
          <Vector3 X="3196.786" Y="-505.6452" Z="143.2714" />
          <Vector3 X="3186.135" Y="-503.0359" Z="142.6106" />
          <Vector3 X="3178.978" Y="-500.3919" Z="141.6073" />
          <Vector3 X="3172.752" Y="-489.555" Z="140.4758" />
          <Vector3 X="3166.14" Y="-465.2434" Z="137.3637" />
          <Vector3 X="3156.376" Y="-432.7287" Z="133.4895" />
          <Vector3 X="3151.768" Y="-411.3859" Z="131.9037" />
          <Vector3 X="3150.495" Y="-404.9302" Z="131.0266" />
          <Vector3 X="3143.636" Y="-370.6089" Z="129.0756" />
          <Vector3 X="3139.776" Y="-351.3214" Z="126.9319" />
          <Vector3 X="3133.226" Y="-318.0093" Z="122.795" />
          <Vector3 X="3126.352" Y="-282.6207" Z="119.0202" />
          <Vector3 X="3123.643" Y="-268.6714" Z="116.6476" />
          <Vector3 X="3122.602" Y="-263.3116" Z="117.2883" />
          <Vector3 X="3101.164" Y="-237.1101" Z="112.4059" />
          <Vector3 X="3091.476" Y="-222.4794" Z="109.932" />
          <Vector3 X="3077.256" Y="-201.9238" Z="107.8797" />
          <Vector3 X="3068.508" Y="-193.6602" Z="107.5539" />
          <Vector3 X="3062.554" Y="-188.7772" Z="106.7853" />
          <Vector3 X="3037.819" Y="-170.7853" Z="102.9869" />
          <Vector3 X="3010.754" Y="-148.604" Z="101.067" />
          <Vector3 X="2995.741" Y="-135.897" Z="100.948" />
          <Vector3 X="2966.49" Y="-116.8608" Z="100.0745" />
          <Vector3 X="2934.418" Y="-103.9855" Z="96.97316" />
          <Vector3 X="2921.422" Y="-106.0536" Z="97.57539" />
          <Vector3 X="2888.762" Y="-109.194" Z="101.0211" />
          <Vector3 X="2884.193" Y="-111.9287" Z="101.4144" />
          <Vector3 X="2878.231" Y="-120.5412" Z="101.6929" />
          <Vector3 X="2869.007" Y="-154.2986" Z="102.1209" />
          <Vector3 X="2859.338" Y="-187.8569" Z="103.9508" />
          <Vector3 X="2844.876" Y="-218.4892" Z="105.7783" />
          <Vector3 X="2825.338" Y="-248.6771" Z="106.7396" />
          <Vector3 X="2804.196" Y="-276.5417" Z="107.1337" />
          <Vector3 X="2786.021" Y="-306.4525" Z="107.0896" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition>return (Quest.GetQuestCompleted(1054)  || new Vector3(2786.021f, -306.4525f, 107.0896f).DistanceTo(ObjectManager.Me.Position) &lt; 10);</IsCompleteCondition>
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTEGoSomeStepsBack</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="2092.06" Y="-1175.527" Z="101.791" />
          <Vector3 X="2093.719" Y="-1179.323" Z="101.7854" />
          <Vector3 X="2096.43" Y="-1185.773" Z="101.7874" />
          <Vector3 X="2097.914" Y="-1188.943" Z="101.7859" />
          <Vector3 X="2099.406" Y="-1192.109" Z="101.7829" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>true</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition>return ObjectManager.Me.WowClass != WoWClass.Mage;</CanCondition>
      <IsCompleteCondition>return (Quest.GetQuestCompleted(1016)  || new Vector3(2099.406f, -1192.109f, 101.7829f).DistanceTo(ObjectManager.Me.Position) &lt; 2);</IsCompleteCondition>
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTEGoToRatchet</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="2624.228" Y="1411.846" Z="227.2639" />
          <Vector3 X="2617.562" Y="1409.457" Z="228.0916" />
          <Vector3 X="2600.538" Y="1403.505" Z="232.8028" />
          <Vector3 X="2584.189" Y="1399.082" Z="241.5027" />
          <Vector3 X="2571.388" Y="1396.186" Z="247.0743" />
          <Vector3 X="2556.128" Y="1394.755" Z="252.3057" />
          <Vector3 X="2539.51" Y="1389.607" Z="256.9838" />
          <Vector3 X="2529.194" Y="1384.571" Z="260.6556" />
          <Vector3 X="2515.248" Y="1370.334" Z="261.0109" />
          <Vector3 X="2504.489" Y="1355.828" Z="264.0652" />
          <Vector3 X="2495.05" Y="1341.775" Z="267.4521" />
          <Vector3 X="2485.171" Y="1326.668" Z="271.6746" />
          <Vector3 X="2474.205" Y="1313.803" Z="274.7855" />
          <Vector3 X="2459.905" Y="1302.839" Z="278.5458" />
          <Vector3 X="2445.946" Y="1293.248" Z="283.4702" />
          <Vector3 X="2432.755" Y="1280.98" Z="289.5169" />
          <Vector3 X="2421.055" Y="1268.73" Z="292.1648" />
          <Vector3 X="2410.157" Y="1254.39" Z="296.0184" />
          <Vector3 X="2405.36" Y="1233.128" Z="304.7207" />
          <Vector3 X="2398.104" Y="1198.903" Z="311.1798" />
          <Vector3 X="2392.973" Y="1165.416" Z="311.6582" />
          <Vector3 X="2387.501" Y="1129.714" Z="307.3244" />
          <Vector3 X="2371.706" Y="1101.074" Z="298.1118" />
          <Vector3 X="2341.285" Y="1081.711" Z="287.3623" />
          <Vector3 X="2307.938" Y="1076.65" Z="282.1549" />
          <Vector3 X="2273.003" Y="1074.834" Z="276.0785" />
          <Vector3 X="2242.116" Y="1067.825" Z="271.4406" />
          <Vector3 X="2226.529" Y="1062.581" Z="268.0452" />
          <Vector3 X="2195.024" Y="1050.119" Z="257.7299" />
          <Vector3 X="2160.087" Y="1042.425" Z="245.2824" />
          <Vector3 X="2126.418" Y="1046.107" Z="233.9978" />
          <Vector3 X="2091.123" Y="1053.677" Z="227.7046" />
          <Vector3 X="2062.951" Y="1041.861" Z="220.9461" />
          <Vector3 X="2045.515" Y="1010.261" Z="211.1952" />
          <Vector3 X="2025.957" Y="982.6346" Z="200.2956" />
          <Vector3 X="1993.412" Y="968.902" Z="188.6469" />
          <Vector3 X="1958.452" Y="967.2565" Z="180.3793" />
          <Vector3 X="1923.685" Y="963.4838" Z="170.0542" />
          <Vector3 X="1890.36" Y="957.423" Z="162.8316" />
          <Vector3 X="1868.399" Y="950.7679" Z="155.5683" />
          <Vector3 X="1835.731" Y="947.6317" Z="148.6595" />
          <Vector3 X="1802.061" Y="944.0615" Z="141.0239" />
          <Vector3 X="1766.273" Y="939.2626" Z="137.7664" />
          <Vector3 X="1748.993" Y="941.7807" Z="135.3271" />
          <Vector3 X="1731.802" Y="945.0406" Z="133.0371" />
          <Vector3 X="1701.414" Y="959.7344" Z="132.0726" />
          <Vector3 X="1671.662" Y="980.2162" Z="131.4618" />
          <Vector3 X="1643.763" Y="999.4372" Z="133.3501" />
          <Vector3 X="1612.556" Y="1017.515" Z="136.6682" />
          <Vector3 X="1580.916" Y="1029.276" Z="136.7532" />
          <Vector3 X="1545.93" Y="1027.051" Z="138.332" />
          <Vector3 X="1524.61" Y="1000.877" Z="138.332" />
          <Vector3 X="1502.105" Y="972.786" Z="138.332" />
          <Vector3 X="1474.837" Y="952.7391" Z="138.332" />
          <Vector3 X="1447.292" Y="929.8983" Z="138.332" />
          <Vector3 X="1435.817" Y="898.2437" Z="138.332" />
          <Vector3 X="1425.059" Y="863.843" Z="138.332" />
          <Vector3 X="1415.616" Y="831.3076" Z="140.4076" />
          <Vector3 X="1405.054" Y="796.8083" Z="143.5109" />
          <Vector3 X="1390.729" Y="766.1669" Z="147.3126" />
          <Vector3 X="1365.218" Y="741.3994" Z="155.8571" />
          <Vector3 X="1333.237" Y="730.8397" Z="169.6339" />
          <Vector3 X="1311.505" Y="728.3159" Z="177.0895" />
          <Vector3 X="1277.633" Y="727.6493" Z="178.4363" />
          <Vector3 X="1253.722" Y="725.072" Z="177.6906" />
          <Vector3 X="1220.953" Y="716.5708" Z="171.3807" />
          <Vector3 X="1209.315" Y="710.427" Z="167.765" />
          <Vector3 X="1191.345" Y="688.4352" Z="158.6329" />
          <Vector3 X="1165.848" Y="664.468" Z="146.3696" />
          <Vector3 X="1149.407" Y="664.156" Z="142.4186" />
          <Vector3 X="1116.097" Y="674.6535" Z="137.4326" />
          <Vector3 X="1082.833" Y="679.3036" Z="131.8589" />
          <Vector3 X="1066.732" Y="676.4715" Z="128.988" />
          <Vector3 X="1053.377" Y="671.6159" Z="125.966" />
          <Vector3 X="1039.518" Y="657.5871" Z="122.0392" />
          <Vector3 X="1020.9" Y="648.7713" Z="118.3954" />
          <Vector3 X="985.0557" Y="646.6406" Z="110.8251" />
          <Vector3 X="951.3605" Y="650.0693" Z="104.8452" />
          <Vector3 X="915.6129" Y="650.6071" Z="97.95472" />
          <Vector3 X="899.6957" Y="641.1911" Z="95.1244" />
          <Vector3 X="875.9754" Y="614.1265" Z="90.19791" />
          <Vector3 X="858.4036" Y="587.8642" Z="86.99209" />
          <Vector3 X="855.2915" Y="579.6864" Z="86.08322" />
          <Vector3 X="851.3152" Y="559.2804" Z="82.67133" />
          <Vector3 X="830.8124" Y="533.6653" Z="76.0601" />
          <Vector3 X="825.0999" Y="527.0375" Z="74.2875" />
          <Vector3 X="820.6001" Y="498.9052" Z="69.07104" />
          <Vector3 X="818.5173" Y="485.9821" Z="66.71518" />
          <Vector3 X="797.0341" Y="464.1961" Z="64.01944" />
          <Vector3 X="771.5948" Y="441.8204" Z="63.92294" />
          <Vector3 X="744.7637" Y="417.6389" Z="63.92294" />
          <Vector3 X="717.9115" Y="397.0522" Z="61.75958" />
          <Vector3 X="687.162" Y="380.4479" Z="57.96346" />
          <Vector3 X="659.7921" Y="372.8812" Z="53.96022" />
          <Vector3 X="640.7078" Y="368.1167" Z="53.22321" />
          <Vector3 X="631.1317" Y="365.7259" Z="52.28122" />
          <Vector3 X="606.5044" Y="345.7301" Z="50.19339" />
          <Vector3 X="596.0181" Y="331.8316" Z="47.28039" />
          <Vector3 X="584.8021" Y="325.0885" Z="47.21633" />
          <Vector3 X="577.4454" Y="322.8148" Z="47.90851" />
          <Vector3 X="540.8616" Y="324.1363" Z="52.11257" />
          <Vector3 X="506.6016" Y="331.2394" Z="52.00819" />
          <Vector3 X="473.0533" Y="341.1777" Z="49.80022" />
          <Vector3 X="438.3648" Y="344.6316" Z="47.75941" />
          <Vector3 X="426.1105" Y="340.8005" Z="47.01157" />
          <Vector3 X="397.8533" Y="320.22" Z="43.76252" />
          <Vector3 X="363.702" Y="313.9236" Z="40.71763" />
          <Vector3 X="328.8172" Y="316.3422" Z="36.54985" />
          <Vector3 X="293.9052" Y="318.4251" Z="37.09705" />
          <Vector3 X="264.5941" Y="305.4492" Z="44.2268" />
          <Vector3 X="252.0366" Y="288.9325" Z="47.78186" />
          <Vector3 X="231.8428" Y="260.3595" Z="52.96053" />
          <Vector3 X="216.2511" Y="229.1752" Z="55.03925" />
          <Vector3 X="197.3627" Y="198.7058" Z="52.32719" />
          <Vector3 X="189.6453" Y="167.5524" Z="49.60089" />
          <Vector3 X="185.5674" Y="145.374" Z="46.41547" />
          <Vector3 X="161.4055" Y="125.1" Z="39.45284" />
          <Vector3 X="155.0939" Y="112.6178" Z="36.98084" />
          <Vector3 X="154.5029" Y="77.63501" Z="31.7514" />
          <Vector3 X="153.7948" Y="42.69278" Z="30.13899" />
          <Vector3 X="139.5767" Y="10.89059" Z="28.82862" />
          <Vector3 X="125.7972" Y="-21.28276" Z="25.86049" />
          <Vector3 X="111.8001" Y="-45.80766" Z="22.84926" />
          <Vector3 X="98.21194" Y="-58.50798" Z="21.08815" />
          <Vector3 X="92.91702" Y="-79.76" Z="18.13751" />
          <Vector3 X="84.79734" Y="-113.7523" Z="12.4314" />
          <Vector3 X="72.04881" Y="-140.328" Z="10.36725" />
          <Vector3 X="58.70315" Y="-153.1444" Z="12.13955" />
          <Vector3 X="40.24946" Y="-159.9038" Z="16.19964" />
          <Vector3 X="26.32649" Y="-178.1557" Z="15.17046" />
          <Vector3 X="17.16172" Y="-190.4445" Z="15.41721" />
          <Vector3 X="13.35299" Y="-208.6498" Z="13.72077" />
          <Vector3 X="9.704664" Y="-233.5026" Z="8.853733" />
          <Vector3 X="1.197039" Y="-243.4302" Z="6.177624" />
          <Vector3 X="-16.59717" Y="-257.938" Z="1.668938" />
          <Vector3 X="-27.61046" Y="-268.592" Z="-1.285146" />
          <Vector3 X="-29.19275" Y="-272.6333" Z="-2.162511" />
          <Vector3 X="-29.73923" Y="-292.2932" Z="-5.799271" />
          <Vector3 X="-30.49486" Y="-327.2737" Z="-9.56261" />
          <Vector3 X="-32.40135" Y="-342.3773" Z="-11.66482" />
          <Vector3 X="-45.27494" Y="-374.9168" Z="-20.09466" />
          <Vector3 X="-54.0325" Y="-400.8364" Z="-27.73527" />
          <Vector3 X="-56.12931" Y="-408.1726" Z="-29.66007" />
          <Vector3 X="-60.27168" Y="-429.5797" Z="-34.15815" />
          <Vector3 X="-59.44772" Y="-447.0603" Z="-38.36048" />
          <Vector3 X="-55.44873" Y="-481.7447" Z="-45.70847" />
          <Vector3 X="-44.60756" Y="-515.0216" Z="-46.13284" />
          <Vector3 X="-33.19232" Y="-548.0786" Z="-46.31287" />
          <Vector3 X="-11.85841" Y="-575.7273" Z="-46.34437" />
          <Vector3 X="-0.5629095" Y="-594.1701" Z="-45.81322" />
          <Vector3 X="-7.685347" Y="-621.5266" Z="-41.57321" />
          <Vector3 X="-14.98456" Y="-636.2682" Z="-39.29843" />
          <Vector3 X="-27.96933" Y="-654.9258" Z="-30.7368" />
          <Vector3 X="-50.02537" Y="-666.9243" Z="-21.41709" />
          <Vector3 X="-65.89948" Y="-670.4875" Z="-15.48203" />
          <Vector3 X="-90.95026" Y="-671.9247" Z="-9.350007" />
          <Vector3 X="-101.2509" Y="-675.2558" Z="-7.101017" />
          <Vector3 X="-117.0175" Y="-685.0921" Z="-3.8961" />
          <Vector3 X="-144.2392" Y="-687.334" Z="-2.089116" />
          <Vector3 X="-169.3002" Y="-689.1886" Z="-0.1072775" />
          <Vector3 X="-194.4433" Y="-704.663" Z="0.7340364" />
          <Vector3 X="-212.5698" Y="-724.9047" Z="2.568927" />
          <Vector3 X="-217.7774" Y="-750.5745" Z="4.64584" />
          <Vector3 X="-231.7001" Y="-781.3817" Z="7.107751" />
          <Vector3 X="-242.5139" Y="-802.7274" Z="8.170041" />
          <Vector3 X="-248.8129" Y="-825.9622" Z="8.343326" />
          <Vector3 X="-250.8387" Y="-860.7501" Z="7.728387" />
          <Vector3 X="-248.5064" Y="-895.672" Z="7.216885" />
          <Vector3 X="-245.94" Y="-930.5225" Z="9.556" />
          <Vector3 X="-244.2778" Y="-965.4591" Z="14.92333" />
          <Vector3 X="-244.3074" Y="-1000.413" Z="19.40529" />
          <Vector3 X="-245.5469" Y="-1035.388" Z="25.98995" />
          <Vector3 X="-246.4548" Y="-1070.375" Z="33.73278" />
          <Vector3 X="-250.4853" Y="-1105.116" Z="42.93083" />
          <Vector3 X="-261.9125" Y="-1138.189" Z="51.44894" />
          <Vector3 X="-274.953" Y="-1170.661" Z="59.60986" />
          <Vector3 X="-288.6844" Y="-1202.737" Z="68.33868" />
          <Vector3 X="-309.5185" Y="-1230.818" Z="76.54513" />
          <Vector3 X="-315.6309" Y="-1238.568" Z="78.8931" />
          <Vector3 X="-348.1495" Y="-1277.083" Z="88.28326" />
          <Vector3 X="-353.7202" Y="-1282.297" Z="89.9493" />
          <Vector3 X="-361.2838" Y="-1288.615" Z="91.40074" />
          <Vector3 X="-371.5539" Y="-1292.959" Z="92.77762" />
          <Vector3 X="-381.577" Y="-1297.077" Z="96.24951" />
          <Vector3 X="-390.8367" Y="-1301.227" Z="98.88392" />
          <Vector3 X="-394.6899" Y="-1303.05" Z="99.83815" />
          <Vector3 X="-404.365" Y="-1307.082" Z="101.2814" />
          <Vector3 X="-410.6838" Y="-1308.814" Z="105.6497" />
          <Vector3 X="-417.0644" Y="-1313.324" Z="106.417" />
          <Vector3 X="-423.0916" Y="-1319.383" Z="101.5472" />
          <Vector3 X="-430.2922" Y="-1326.557" Z="98.26058" />
          <Vector3 X="-433.7773" Y="-1329.7" Z="97.38902" />
          <Vector3 X="-441.448" Y="-1336.354" Z="100.8462" />
          <Vector3 X="-444.2005" Y="-1340.825" Z="98.84626" />
          <Vector3 X="-449.3431" Y="-1349.591" Z="97.51064" />
          <Vector3 X="-455.1408" Y="-1358.722" Z="99.39801" />
          <Vector3 X="-460.5579" Y="-1367.322" Z="101.0069" />
          <Vector3 X="-465.4941" Y="-1376.961" Z="96.41151" />
          <Vector3 X="-468.9779" Y="-1386.492" Z="91.66675" />
          <Vector3 X="-471.7501" Y="-1396.965" Z="91.70122" />
          <Vector3 X="-472.9576" Y="-1407.053" Z="91.70157" />
          <Vector3 X="-472.983" Y="-1417.888" Z="91.70736" />
          <Vector3 X="-472.9944" Y="-1428.052" Z="91.7009" />
          <Vector3 X="-474.0721" Y="-1438.816" Z="91.7009" />
          <Vector3 X="-476.1924" Y="-1448.755" Z="91.7009" />
          <Vector3 X="-478.2474" Y="-1457.26" Z="91.7009" />
          <Vector3 X="-487.1244" Y="-1480.019" Z="91.66672" />
          <Vector3 X="-497.3911" Y="-1501.395" Z="91.66672" />
          <Vector3 X="-507.0308" Y="-1523.064" Z="91.66672" />
          <Vector3 X="-517.0538" Y="-1546.273" Z="91.66672" />
          <Vector3 X="-524.5143" Y="-1568.746" Z="91.66672" />
          <Vector3 X="-526.3226" Y="-1593.931" Z="91.66672" />
          <Vector3 X="-527.1362" Y="-1619.201" Z="91.66672" />
          <Vector3 X="-531.5148" Y="-1642.409" Z="91.66672" />
          <Vector3 X="-543.7162" Y="-1664.48" Z="92.88527" />
          <Vector3 X="-556.1059" Y="-1684.68" Z="92.31392" />
          <Vector3 X="-567.5482" Y="-1707.226" Z="94.72416" />
          <Vector3 X="-578.7234" Y="-1728.144" Z="95.36387" />
          <Vector3 X="-591.2499" Y="-1750.08" Z="95.92719" />
          <Vector3 X="-606.4839" Y="-1768.237" Z="94.92731" />
          <Vector3 X="-625.0698" Y="-1785.373" Z="92.02142" />
          <Vector3 X="-643.0732" Y="-1800.8" Z="91.66692" />
          <Vector3 X="-666.3078" Y="-1818.429" Z="92.86018" />
          <Vector3 X="-675.854" Y="-1825.651" Z="93.11707" />
          <Vector3 X="-712.9275" Y="-1834.875" Z="93.48505" />
          <Vector3 X="-746.641" Y="-1837.49" Z="91.66695" />
          <Vector3 X="-782.4224" Y="-1832.846" Z="92.82698" />
          <Vector3 X="-815.5512" Y="-1825.753" Z="92.64516" />
          <Vector3 X="-851.273" Y="-1821.5" Z="93.15271" />
          <Vector3 X="-884.5916" Y="-1827.475" Z="91.6718" />
          <Vector3 X="-911.2831" Y="-1833.531" Z="91.66663" />
          <Vector3 X="-916.6357" Y="-1834.608" Z="91.66828" />
          <Vector3 X="-952.5714" Y="-1835.884" Z="92.54998" />
          <Vector3 X="-986.405" Y="-1834.15" Z="95.46623" />
          <Vector3 X="-1020.322" Y="-1841.754" Z="95.1644" />
          <Vector3 X="-1052.846" Y="-1854.12" Z="95.70237" />
          <Vector3 X="-1068.396" Y="-1862.085" Z="96.54195" />
          <Vector3 X="-1072.05" Y="-1864.554" Z="96.5167" />
          <Vector3 X="-1096.447" Y="-1889.296" Z="95.05742" />
          <Vector3 X="-1117.654" Y="-1917.081" Z="91.66673" />
          <Vector3 X="-1144.677" Y="-1939.232" Z="90.97751" />
          <Vector3 X="-1174.27" Y="-1957.918" Z="90.73412" />
          <Vector3 X="-1203.17" Y="-1977.562" Z="89.78281" />
          <Vector3 X="-1229.757" Y="-2000.255" Z="91.66675" />
          <Vector3 X="-1252.568" Y="-2026.789" Z="92.26875" />
          <Vector3 X="-1258.857" Y="-2034.396" Z="92.48251" />
          <Vector3 X="-1267.445" Y="-2047.013" Z="92.63116" />
          <Vector3 X="-1280.395" Y="-2068.537" Z="93.06464" />
          <Vector3 X="-1285.855" Y="-2096.428" Z="91.67468" />
          <Vector3 X="-1285.972" Y="-2131.161" Z="91.66793" />
          <Vector3 X="-1278.857" Y="-2166.534" Z="91.68153" />
          <Vector3 X="-1274.857" Y="-2200.094" Z="93.04791" />
          <Vector3 X="-1276.416" Y="-2236.18" Z="91.79581" />
          <Vector3 X="-1276.109" Y="-2269.902" Z="91.70566" />
          <Vector3 X="-1266.687" Y="-2304.771" Z="94.45006" />
          <Vector3 X="-1259.874" Y="-2337.927" Z="94.58141" />
          <Vector3 X="-1258.226" Y="-2348.722" Z="94.71759" />
          <Vector3 X="-1253.928" Y="-2373.456" Z="93.56839" />
          <Vector3 X="-1251.844" Y="-2394.141" Z="91.66667" />
          <Vector3 X="-1231.196" Y="-2420.957" Z="93.10585" />
          <Vector3 X="-1201.329" Y="-2438.758" Z="93.24379" />
          <Vector3 X="-1167.824" Y="-2448.865" Z="94.71185" />
          <Vector3 X="-1134.692" Y="-2460.098" Z="95.24937" />
          <Vector3 X="-1102.549" Y="-2473.943" Z="94.82088" />
          <Vector3 X="-1072.159" Y="-2491.112" Z="93.79718" />
          <Vector3 X="-1043.548" Y="-2511.272" Z="93.92836" />
          <Vector3 X="-1015.232" Y="-2531.836" Z="94.1377" />
          <Vector3 X="-991.1139" Y="-2556.926" Z="92.59731" />
          <Vector3 X="-979.4965" Y="-2589.622" Z="92.281" />
          <Vector3 X="-979.5905" Y="-2624.569" Z="93.76366" />
          <Vector3 X="-981.8033" Y="-2659.499" Z="91.66692" />
          <Vector3 X="-982.9076" Y="-2678.023" Z="92.74754" />
          <Vector3 X="-982.2185" Y="-2686.745" Z="93.93633" />
          <Vector3 X="-980.6943" Y="-2721.673" Z="92.3194" />
          <Vector3 X="-982.5313" Y="-2756.548" Z="92.45718" />
          <Vector3 X="-984.942" Y="-2791.458" Z="96.79259" />
          <Vector3 X="-989.0482" Y="-2826.217" Z="93.44791" />
          <Vector3 X="-993.3115" Y="-2860.956" Z="91.66697" />
          <Vector3 X="-997.6273" Y="-2895.689" Z="91.66697" />
          <Vector3 X="-1002.069" Y="-2931.535" Z="94.03755" />
          <Vector3 X="-1005.364" Y="-2965.249" Z="91.8036" />
          <Vector3 X="-1006.736" Y="-3001.341" Z="93.66623" />
          <Vector3 X="-1006.969" Y="-3035.218" Z="91.6673" />
          <Vector3 X="-1006.921" Y="-3071.338" Z="91.6673" />
          <Vector3 X="-1007.386" Y="-3105.214" Z="91.66689" />
          <Vector3 X="-1007.941" Y="-3140.21" Z="91.66783" />
          <Vector3 X="-1008.976" Y="-3175.177" Z="91.66692" />
          <Vector3 X="-1011.908" Y="-3210.034" Z="92.44016" />
          <Vector3 X="-1023.238" Y="-3242.918" Z="91.6668" />
          <Vector3 X="-1039.554" Y="-3273.875" Z="91.84999" />
          <Vector3 X="-1056.63" Y="-3304.426" Z="90.24137" />
          <Vector3 X="-1071.994" Y="-3335.775" Z="88.438" />
          <Vector3 X="-1068.733" Y="-3369.804" Z="80.91454" />
          <Vector3 X="-1053.64" Y="-3401.373" Z="74.68496" />
          <Vector3 X="-1038.548" Y="-3432.95" Z="71.07694" />
          <Vector3 X="-1019.651" Y="-3462.327" Z="65.87309" />
          <Vector3 X="-997.1221" Y="-3489.107" Z="56.61592" />
          <Vector3 X="-978.8232" Y="-3518.85" Z="47.33905" />
          <Vector3 X="-966.3879" Y="-3551.558" Z="36.3584" />
          <Vector3 X="-953.5471" Y="-3585.303" Z="26.38423" />
          <Vector3 X="-950.0148" Y="-3618.906" Z="17.7671" />
          <Vector3 X="-950.8456" Y="-3653.893" Z="10.96834" />
          <Vector3 X="-953.4176" Y="-3688.75" Z="7.04305" />
          <Vector3 X="-957.7785" Y="-3723.002" Z="5.61151" />
          <Vector3 X="-954.0267" Y="-3732.093" Z="5.597394" />
          <Vector3 X="-933.4167" Y="-3742.193" Z="9.336723" />
          <Vector3 X="-917.212" Y="-3748.8" Z="10.12063" />
          <Vector3 X="-913.6725" Y="-3755.638" Z="10.32267" />
          <Vector3 X="-909.0858" Y="-3764.378" Z="11.1383" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Mage Summoner</Name>
      <QuestId>
        <int>1017</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="318.999" Y="-2263.799" Z="243.1195" />
        </HotSpots>
        <EntryTarget>
          <int>3986</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>true</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTEVeleneStarstrikeToAstranaar</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="2094.991" Y="-1172.018" Z="101.7916" />
          <Vector3 X="2094.775" Y="-1176.064" Z="101.7916" />
          <Vector3 X="2095.022" Y="-1182.827" Z="101.7916" />
          <Vector3 X="2096.525" Y="-1187.331" Z="101.7879" />
          <Vector3 X="2099.416" Y="-1190.014" Z="101.7832" />
          <Vector3 X="2105.223" Y="-1190.861" Z="101.7779" />
          <Vector3 X="2115.404" Y="-1190.546" Z="101.7779" />
          <Vector3 X="2119.329" Y="-1190.435" Z="101.2782" />
          <Vector3 X="2129.82" Y="-1190.024" Z="99.97209" />
          <Vector3 X="2134.746" Y="-1189.729" Z="98.97821" />
          <Vector3 X="2144.465" Y="-1188.263" Z="95.82082" />
          <Vector3 X="2154.155" Y="-1184.762" Z="94.32417" />
          <Vector3 X="2156.076" Y="-1174.937" Z="95.17528" />
          <Vector3 X="2153.958" Y="-1161.991" Z="97.01611" />
          <Vector3 X="2150.07" Y="-1141.066" Z="97.94286" />
          <Vector3 X="2145.587" Y="-1115.203" Z="100.4922" />
          <Vector3 X="2142.437" Y="-1089.153" Z="99.77686" />
          <Vector3 X="2141.575" Y="-1062.922" Z="99.45473" />
          <Vector3 X="2142.677" Y="-1036.705" Z="100.3901" />
          <Vector3 X="2145.987" Y="-1010.677" Z="98.91828" />
          <Vector3 X="2148.082" Y="-1001.033" Z="98.59938" />
          <Vector3 X="2156.948" Y="-977.22" Z="95.67459" />
          <Vector3 X="2161.845" Y="-965.0486" Z="95.22449" />
          <Vector3 X="2169.568" Y="-946.0898" Z="93.99251" />
          <Vector3 X="2171.372" Y="-940.6056" Z="93.7791" />
          <Vector3 X="2168.485" Y="-915.4645" Z="94.92171" />
          <Vector3 X="2167.16" Y="-903.1986" Z="96.08185" />
          <Vector3 X="2170.181" Y="-897.3726" Z="97.0519" />
          <Vector3 X="2183.389" Y="-874.6995" Z="100.1743" />
          <Vector3 X="2192.424" Y="-858.1022" Z="101.7197" />
          <Vector3 X="2202.369" Y="-839.2496" Z="102.2081" />
          <Vector3 X="2212.755" Y="-815.152" Z="105.7206" />
          <Vector3 X="2228.945" Y="-795.0972" Z="106.4198" />
          <Vector3 X="2252.804" Y="-784.4948" Z="108.6915" />
          <Vector3 X="2278.362" Y="-778.5284" Z="110.2494" />
          <Vector3 X="2304.05" Y="-773.1315" Z="111.7551" />
          <Vector3 X="2329.97" Y="-769.043" Z="114.4223" />
          <Vector3 X="2356.058" Y="-766.1358" Z="117.1469" />
          <Vector3 X="2382.049" Y="-762.472" Z="118.5159" />
          <Vector3 X="2407.868" Y="-758.0175" Z="120.2812" />
          <Vector3 X="2433.652" Y="-753.1022" Z="122.2117" />
          <Vector3 X="2458.48" Y="-744.8583" Z="129.3699" />
          <Vector3 X="2469.427" Y="-736.3234" Z="129.225" />
          <Vector3 X="2485.642" Y="-715.996" Z="124.442" />
          <Vector3 X="2480.489" Y="-690.882" Z="121.2911" />
          <Vector3 X="2464.507" Y="-670.089" Z="118.1416" />
          <Vector3 X="2457.596" Y="-645.1168" Z="115.5327" />
          <Vector3 X="2453.649" Y="-619.2078" Z="114.6158" />
          <Vector3 X="2448.913" Y="-593.3886" Z="113.6045" />
          <Vector3 X="2445.975" Y="-567.3361" Z="114.5369" />
          <Vector3 X="2447.521" Y="-541.1528" Z="115.3967" />
          <Vector3 X="2455.597" Y="-516.353" Z="114.9952" />
          <Vector3 X="2472.858" Y="-496.6072" Z="114.8129" />
          <Vector3 X="2494.34" Y="-481.804" Z="114.8129" />
          <Vector3 X="2519.639" Y="-475.2999" Z="114.1771" />
          <Vector3 X="2545.62" Y="-471.5557" Z="110.5625" />
          <Vector3 X="2571.684" Y="-468.4402" Z="107.8121" />
          <Vector3 X="2597.361" Y="-463.2702" Z="107.1276" />
          <Vector3 X="2621.715" Y="-453.4927" Z="109.3545" />
          <Vector3 X="2645.263" Y="-441.9183" Z="107.2168" />
          <Vector3 X="2666.608" Y="-426.6615" Z="107.0911" />
          <Vector3 X="2687.031" Y="-410.1791" Z="107.1153" />
          <Vector3 X="2706.479" Y="-392.5565" Z="107.1045" />
          <Vector3 X="2725.873" Y="-374.8682" Z="107.0894" />
          <Vector3 X="2744.012" Y="-355.9159" Z="107.1262" />
          <Vector3 X="2761.356" Y="-336.2119" Z="107.0909" />
          <Vector3 X="2777.79" Y="-315.7671" Z="107.0903" />
          <Vector3 X="2793.628" Y="-294.8398" Z="107.0903" />
          <Vector3 X="2796.756" Y="-291.2727" Z="107.0903" />
          <Vector3 X="2804.571" Y="-284.2755" Z="107.2235" />
          <Vector3 X="2814.555" Y="-282.2061" Z="107.543" />
          <Vector3 X="2824.811" Y="-284.4551" Z="107.1477" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTERatchetToMageSummoner</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="-956.5544" Y="-3720.657" Z="5.580569" />
          <Vector3 X="-957.2943" Y="-3712.501" Z="5.575787" />
          <Vector3 X="-956.359" Y="-3700.97" Z="6.150332" />
          <Vector3 X="-953.6109" Y="-3683.715" Z="7.601496" />
          <Vector3 X="-951.0645" Y="-3666.411" Z="9.57449" />
          <Vector3 X="-948.5165" Y="-3649.097" Z="11.68076" />
          <Vector3 X="-946.6786" Y="-3631.718" Z="15.14938" />
          <Vector3 X="-946.7624" Y="-3614.219" Z="18.58711" />
          <Vector3 X="-947.6254" Y="-3596.77" Z="22.742" />
          <Vector3 X="-952.101" Y="-3579.938" Z="27.70709" />
          <Vector3 X="-963.0602" Y="-3562.299" Z="33.10861" />
          <Vector3 X="-974.8491" Y="-3538.927" Z="40.95872" />
          <Vector3 X="-982.4089" Y="-3513.807" Z="48.99556" />
          <Vector3 X="-995.0282" Y="-3491.286" Z="56.10764" />
          <Vector3 X="-1009.56" Y="-3476.798" Z="60.97992" />
          <Vector3 X="-1010.082" Y="-3463.736" Z="64.79689" />
          <Vector3 X="-1011.174" Y="-3437.536" Z="70.86084" />
          <Vector3 X="-1014.174" Y="-3411.519" Z="76.67931" />
          <Vector3 X="-1013.956" Y="-3385.335" Z="82.83674" />
          <Vector3 X="-1008.074" Y="-3359.854" Z="88.49707" />
          <Vector3 X="-996.16" Y="-3336.595" Z="93.01347" />
          <Vector3 X="-983.149" Y="-3314.179" Z="95.11446" />
          <Vector3 X="-976.0427" Y="-3288.915" Z="95.7877" />
          <Vector3 X="-961.9595" Y="-3266.904" Z="95.78775" />
          <Vector3 X="-949.3647" Y="-3243.883" Z="94.47824" />
          <Vector3 X="-931.7528" Y="-3224.464" Z="91.6909" />
          <Vector3 X="-914.0844" Y="-3205.083" Z="91.66693" />
          <Vector3 X="-899.7681" Y="-3183.092" Z="91.66693" />
          <Vector3 X="-889.5757" Y="-3158.976" Z="92.49551" />
          <Vector3 X="-885.8027" Y="-3133.021" Z="93.67219" />
          <Vector3 X="-879.788" Y="-3107.54" Z="94.97776" />
          <Vector3 X="-864.8306" Y="-3086.277" Z="95.42102" />
          <Vector3 X="-841.7869" Y="-3074.16" Z="96.69187" />
          <Vector3 X="-817.766" Y="-3064.067" Z="96.81155" />
          <Vector3 X="-797.0169" Y="-3047.994" Z="95.95613" />
          <Vector3 X="-779.0986" Y="-3028.846" Z="94.16248" />
          <Vector3 X="-761.5533" Y="-3009.349" Z="92.79168" />
          <Vector3 X="-741.9412" Y="-2991.914" Z="92.64379" />
          <Vector3 X="-720.5225" Y="-2976.835" Z="93.79193" />
          <Vector3 X="-702.4221" Y="-2957.886" Z="95.42314" />
          <Vector3 X="-678.8383" Y="-2946.584" Z="95.78817" />
          <Vector3 X="-665.1608" Y="-2940.919" Z="95.78817" />
          <Vector3 X="-644.3682" Y="-2925.246" Z="95.78817" />
          <Vector3 X="-625.4309" Y="-2907.068" Z="95.78127" />
          <Vector3 X="-622.4388" Y="-2904.196" Z="95.74912" />
          <Vector3 X="-605.9255" Y="-2890.851" Z="94.93238" />
          <Vector3 X="-580.9111" Y="-2883.437" Z="92.61996" />
          <Vector3 X="-554.7114" Y="-2882.448" Z="92.58009" />
          <Vector3 X="-528.4618" Y="-2882.531" Z="94.68805" />
          <Vector3 X="-502.2538" Y="-2881.154" Z="91.8491" />
          <Vector3 X="-476.0681" Y="-2879.319" Z="91.66738" />
          <Vector3 X="-449.9012" Y="-2877.232" Z="91.7008" />
          <Vector3 X="-423.7236" Y="-2875.285" Z="91.71426" />
          <Vector3 X="-398.076" Y="-2870.16" Z="91.79315" />
          <Vector3 X="-373.1361" Y="-2861.971" Z="93.28896" />
          <Vector3 X="-348.3088" Y="-2853.45" Z="93.80251" />
          <Vector3 X="-324.6973" Y="-2842.004" Z="93.85145" />
          <Vector3 X="-301.8979" Y="-2829.018" Z="93.59203" />
          <Vector3 X="-279.1368" Y="-2815.941" Z="93.46603" />
          <Vector3 X="-256.3758" Y="-2802.864" Z="91.66773" />
          <Vector3 X="-237.1703" Y="-2791.831" Z="92.63014" />
          <Vector3 X="-218.0166" Y="-2784.596" Z="93.70227" />
          <Vector3 X="-193.9743" Y="-2774.06" Z="94.59249" />
          <Vector3 X="-169.6267" Y="-2764.269" Z="94.64313" />
          <Vector3 X="-145.4571" Y="-2754.029" Z="93.50569" />
          <Vector3 X="-121.3954" Y="-2743.538" Z="93.08949" />
          <Vector3 X="-98.94957" Y="-2730.025" Z="92.53192" />
          <Vector3 X="-86.12463" Y="-2719.833" Z="96.6805" />
          <Vector3 X="-112.6013" Y="-2775.131" Z="93.16026" />
          <Vector3 X="-90.36207" Y="-2791.875" Z="94.62347" />
          <Vector3 X="-68.18452" Y="-2805.913" Z="94.41561" />
          <Vector3 X="-44.769" Y="-2819.468" Z="92.18797" />
          <Vector3 X="-20.59481" Y="-2827.023" Z="94.05878" />
          <Vector3 X="5.387648" Y="-2830.361" Z="92.6164" />
          <Vector3 X="31.3794" Y="-2827.179" Z="93.84712" />
          <Vector3 X="55.47945" Y="-2817.134" Z="97.28232" />
          <Vector3 X="60.11264" Y="-2813.688" Z="97.59798" />
          <Vector3 X="65.81169" Y="-2806.685" Z="96.75301" />
          <Vector3 X="83.15106" Y="-2788.115" Z="96.73807" />
          <Vector3 X="101.6726" Y="-2769.514" Z="96.46707" />
          <Vector3 X="119.8764" Y="-2750.604" Z="95.5041" />
          <Vector3 X="135.5965" Y="-2729.607" Z="92.47702" />
          <Vector3 X="144.788" Y="-2705.166" Z="91.66724" />
          <Vector3 X="147.8505" Y="-2679.098" Z="91.67628" />
          <Vector3 X="148.6811" Y="-2670.898" Z="91.70781" />
          <Vector3 X="157.6774" Y="-2581.225" Z="91.66685" />
          <Vector3 X="157.1318" Y="-2576.997" Z="91.66685" />
          <Vector3 X="156.4361" Y="-2568.278" Z="91.98383" />
          <Vector3 X="156.009" Y="-2557.786" Z="98.12369" />
          <Vector3 X="155.5709" Y="-2546.959" Z="102.351" />
          <Vector3 X="155.1465" Y="-2536.468" Z="105.8391" />
          <Vector3 X="155.0108" Y="-2526.308" Z="109.1372" />
          <Vector3 X="155.4184" Y="-2515.832" Z="114.676" />
          <Vector3 X="154.9375" Y="-2505.349" Z="120.4418" />
          <Vector3 X="153.1395" Y="-2495.009" Z="128.8457" />
          <Vector3 X="149.8463" Y="-2485.052" Z="134.1732" />
          <Vector3 X="146.2935" Y="-2474.818" Z="140.4851" />
          <Vector3 X="145.529" Y="-2469.968" Z="142.1244" />
          <Vector3 X="149.0475" Y="-2462.926" Z="144.5492" />
          <Vector3 X="155.026" Y="-2454.308" Z="149.4416" />
          <Vector3 X="161.7738" Y="-2446.263" Z="156.7594" />
          <Vector3 X="168.1833" Y="-2437.949" Z="163.1059" />
          <Vector3 X="174.4103" Y="-2429.495" Z="170.2856" />
          <Vector3 X="181.3519" Y="-2421.633" Z="174.6293" />
          <Vector3 X="188.5442" Y="-2414.013" Z="176.396" />
          <Vector3 X="195.6032" Y="-2405.799" Z="178.6059" />
          <Vector3 X="201.6272" Y="-2397.615" Z="185.0733" />
          <Vector3 X="207.4558" Y="-2388.881" Z="189.6572" />
          <Vector3 X="213.7167" Y="-2380.46" Z="198.4631" />
          <Vector3 X="221.0215" Y="-2372.928" Z="203.4575" />
          <Vector3 X="229.0861" Y="-2366.206" Z="208.4414" />
          <Vector3 X="236.9779" Y="-2359.284" Z="210.9937" />
          <Vector3 X="244.4953" Y="-2351.954" Z="212.3366" />
          <Vector3 X="251.1947" Y="-2344.288" Z="214.0863" />
          <Vector3 X="255.0092" Y="-2339.354" Z="214.5973" />
          <Vector3 X="260.0528" Y="-2335.171" Z="214.5991" />
          <Vector3 X="264.4192" Y="-2332.917" Z="214.3591" />
          <Vector3 X="274.1435" Y="-2328.995" Z="213.8405" />
          <Vector3 X="284.4377" Y="-2326.985" Z="213.4667" />
          <Vector3 X="294.8979" Y="-2326.273" Z="212.5864" />
          <Vector3 X="305.2492" Y="-2327.582" Z="212.0257" />
          <Vector3 X="314.8712" Y="-2331.747" Z="213.0975" />
          <Vector3 X="324.7271" Y="-2336.203" Z="214.6201" />
          <Vector3 X="333.7771" Y="-2340.084" Z="214.9937" />
          <Vector3 X="344.5967" Y="-2342.237" Z="214.5044" />
          <Vector3 X="352.1777" Y="-2336.399" Z="214.9738" />
          <Vector3 X="357.1663" Y="-2329.883" Z="215.661" />
          <Vector3 X="363.8488" Y="-2321.784" Z="216.4305" />
          <Vector3 X="370.9158" Y="-2313.158" Z="216.1589" />
          <Vector3 X="376.5141" Y="-2304.71" Z="216.5542" />
          <Vector3 X="320.581" Y="-2330.568" Z="213.6527" />
          <Vector3 X="312.5568" Y="-2325.519" Z="212.4931" />
          <Vector3 X="305.0938" Y="-2317.665" Z="211.9048" />
          <Vector3 X="298.0407" Y="-2310.346" Z="211.9239" />
          <Vector3 X="290.7544" Y="-2302.786" Z="212.0916" />
          <Vector3 X="283.2368" Y="-2294.985" Z="211.9075" />
          <Vector3 X="275.9506" Y="-2287.425" Z="211.9406" />
          <Vector3 X="268.8975" Y="-2280.106" Z="212.4063" />
          <Vector3 X="265.7061" Y="-2276.795" Z="212.5383" />
          <Vector3 X="269.0475" Y="-2270.414" Z="212.8673" />
          <Vector3 X="274.3352" Y="-2261.353" Z="215.8871" />
          <Vector3 X="281.9886" Y="-2254.407" Z="223.2747" />
          <Vector3 X="290.7112" Y="-2246.945" Z="225.4966" />
          <Vector3 X="293.992" Y="-2243.303" Z="225.7829" />
          <Vector3 X="299.6107" Y="-2240.265" Z="227.7206" />
          <Vector3 X="307.7039" Y="-2239.075" Z="230.7353" />
          <Vector3 X="309.9714" Y="-2240.398" Z="233.0541" />
          <Vector3 X="313.951" Y="-2242.703" Z="237.7555" />
          <Vector3 X="315.4181" Y="-2246.363" Z="241.4582" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTEMageSummonerBackToRatchet</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="315.4181" Y="-2246.363" Z="241.4582" />
          <Vector3 X="315.8172" Y="-2240.841" Z="238.0949" />
          <Vector3 X="314.9957" Y="-2237.439" Z="235.3004" />
          <Vector3 X="312.7846" Y="-2235.151" Z="232.7005" />
          <Vector3 X="309.3284" Y="-2235.504" Z="230.4652" />
          <Vector3 X="301.6087" Y="-2238.797" Z="227.5883" />
          <Vector3 X="292.2668" Y="-2242.839" Z="224.8126" />
          <Vector3 X="282.1786" Y="-2245.743" Z="221.3714" />
          <Vector3 X="273.1088" Y="-2250.582" Z="218.6892" />
          <Vector3 X="269.0768" Y="-2260.052" Z="215.0779" />
          <Vector3 X="269.7873" Y="-2270.525" Z="212.9451" />
          <Vector3 X="270.8576" Y="-2281.286" Z="212.2892" />
          <Vector3 X="271.6481" Y="-2291.44" Z="211.9757" />
          <Vector3 X="272.2704" Y="-2301.921" Z="211.8099" />
          <Vector3 X="272.285" Y="-2312.405" Z="212.1299" />
          <Vector3 X="269.3895" Y="-2322.387" Z="213.0304" />
          <Vector3 X="264.3766" Y="-2331.612" Z="214.1599" />
          <Vector3 X="259.3655" Y="-2340.821" Z="215.092" />
          <Vector3 X="252.5717" Y="-2348.817" Z="213.9315" />
          <Vector3 X="244.879" Y="-2355.952" Z="212.0663" />
          <Vector3 X="236.8761" Y="-2362.749" Z="210.7316" />
          <Vector3 X="229.1318" Y="-2369.332" Z="207.4054" />
          <Vector3 X="221.3926" Y="-2376.898" Z="202.1285" />
          <Vector3 X="214.3564" Y="-2385.11" Z="196.0566" />
          <Vector3 X="207.952" Y="-2393.028" Z="187.5921" />
          <Vector3 X="201.4685" Y="-2401.287" Z="183.0064" />
          <Vector3 X="194.8949" Y="-2409.875" Z="176.7132" />
          <Vector3 X="187.8544" Y="-2417.648" Z="176.2328" />
          <Vector3 X="181.0074" Y="-2425.176" Z="173.4247" />
          <Vector3 X="174.6512" Y="-2433.533" Z="167.1752" />
          <Vector3 X="163.9545" Y="-2446.267" Z="157.5353" />
          <Vector3 X="153.2175" Y="-2460.084" Z="146.6345" />
          <Vector3 X="147.6001" Y="-2470.822" Z="141.8815" />
          <Vector3 X="148.5607" Y="-2481.241" Z="136.3999" />
          <Vector3 X="151.5137" Y="-2490.964" Z="131.495" />
          <Vector3 X="153.867" Y="-2501.863" Z="122.6261" />
          <Vector3 X="154.8251" Y="-2511.98" Z="117.4648" />
          <Vector3 X="154.7862" Y="-2522.479" Z="110.5079" />
          <Vector3 X="155.1916" Y="-2532.971" Z="107.5447" />
          <Vector3 X="155.7451" Y="-2543.455" Z="102.9227" />
          <Vector3 X="156.5813" Y="-2553.921" Z="100.5986" />
          <Vector3 X="157.3789" Y="-2564.391" Z="93.23499" />
          <Vector3 X="157.7675" Y="-2578.175" Z="91.6669" />
          <Vector3 X="158.329" Y="-2600.865" Z="91.6669" />
          <Vector3 X="158.0049" Y="-2627.105" Z="92.66053" />
          <Vector3 X="156.4933" Y="-2653.307" Z="92.75388" />
          <Vector3 X="155.7955" Y="-2662.31" Z="91.85308" />
          <Vector3 X="155.4165" Y="-2683.584" Z="91.66682" />
          <Vector3 X="151.9332" Y="-2709.602" Z="91.66682" />
          <Vector3 X="145.5015" Y="-2734.172" Z="93.29868" />
          <Vector3 X="136.3084" Y="-2759.608" Z="92.35918" />
          <Vector3 X="122.9631" Y="-2782.153" Z="92.33621" />
          <Vector3 X="104.6745" Y="-2800.813" Z="95.94844" />
          <Vector3 X="89.68789" Y="-2809.253" Z="96.23636" />
          <Vector3 X="73.99913" Y="-2813.934" Z="95.92905" />
          <Vector3 X="48.02412" Y="-2817.29" Z="97.03196" />
          <Vector3 X="21.82924" Y="-2815.894" Z="94.49184" />
          <Vector3 X="-4.186702" Y="-2812.408" Z="93.9022" />
          <Vector3 X="-29.98229" Y="-2807.735" Z="95.40858" />
          <Vector3 X="-55.89403" Y="-2803.638" Z="92.67171" />
          <Vector3 X="-82.02534" Y="-2801.613" Z="95.05339" />
          <Vector3 X="-113.9197" Y="-2799.141" Z="91.8873" />
          <Vector3 X="-148.8676" Y="-2797.697" Z="93.65926" />
          <Vector3 X="-184.8519" Y="-2799.506" Z="93.04225" />
          <Vector3 X="-218.604" Y="-2803.165" Z="92.72599" />
          <Vector3 X="-253.1809" Y="-2808.555" Z="91.6674" />
          <Vector3 X="-286.4651" Y="-2814.881" Z="93.06055" />
          <Vector3 X="-321.9372" Y="-2821.691" Z="91.67509" />
          <Vector3 X="-356.3093" Y="-2828.291" Z="93.68446" />
          <Vector3 X="-390.6815" Y="-2834.89" Z="92.07615" />
          <Vector3 X="-424.8982" Y="-2842.178" Z="94.68517" />
          <Vector3 X="-457.28" Y="-2852.138" Z="94.06001" />
          <Vector3 X="-491.3697" Y="-2864.073" Z="91.66689" />
          <Vector3 X="-524.6263" Y="-2874.968" Z="94.13478" />
          <Vector3 X="-558.0667" Y="-2885.299" Z="92.12608" />
          <Vector3 X="-591.4498" Y="-2895.613" Z="94.14104" />
          <Vector3 X="-623.012" Y="-2910.436" Z="95.78614" />
          <Vector3 X="-652.1268" Y="-2929.859" Z="95.78614" />
          <Vector3 X="-681.4088" Y="-2948.905" Z="95.78614" />
          <Vector3 X="-708.8386" Y="-2969.648" Z="94.92773" />
          <Vector3 X="-714.3047" Y="-2976.48" Z="94.1831" />
          <Vector3 X="-737.1742" Y="-2991.444" Z="92.83173" />
          <Vector3 X="-764.575" Y="-3012.834" Z="92.88102" />
          <Vector3 X="-788.0571" Y="-3038.717" Z="95.21873" />
          <Vector3 X="-814.2312" Y="-3063.423" Z="96.6469" />
          <Vector3 X="-843.9553" Y="-3079.634" Z="96.40153" />
          <Vector3 X="-873.0734" Y="-3100.219" Z="95.10811" />
          <Vector3 X="-883.7868" Y="-3132.264" Z="93.6674" />
          <Vector3 X="-894.3432" Y="-3166.714" Z="91.8508" />
          <Vector3 X="-913.2969" Y="-3196.033" Z="91.66566" />
          <Vector3 X="-934.5392" Y="-3223.81" Z="91.70657" />
          <Vector3 X="-953.2947" Y="-3253.29" Z="95.47997" />
          <Vector3 X="-968.2342" Y="-3283.772" Z="95.78674" />
          <Vector3 X="-983.6127" Y="-3315.208" Z="95.10762" />
          <Vector3 X="-999.72" Y="-3346.278" Z="91.505" />
          <Vector3 X="-1011.44" Y="-3379.075" Z="84.35566" />
          <Vector3 X="-1014.922" Y="-3413.878" Z="76.0873" />
          <Vector3 X="-1013.882" Y="-3448.783" Z="68.68567" />
          <Vector3 X="-1000.873" Y="-3480.889" Z="58.9964" />
          <Vector3 X="-981.6857" Y="-3509.952" Z="50.20758" />
          <Vector3 X="-970.387" Y="-3543.045" Z="39.2985" />
          <Vector3 X="-954.2224" Y="-3574.03" Z="29.2599" />
          <Vector3 X="-949.773" Y="-3608.668" Z="19.99034" />
          <Vector3 X="-949.8314" Y="-3643.665" Z="12.82501" />
          <Vector3 X="-952.3131" Y="-3678.535" Z="8.271207" />
          <Vector3 X="-958.6355" Y="-3712.926" Z="5.450872" />
          <Vector3 X="-956.7042" Y="-3726.201" Z="5.66121" />
          <Vector3 X="-954.7361" Y="-3729.997" Z="5.604343" />
          <Vector3 X="-947.2436" Y="-3737.157" Z="6.254935" />
          <Vector3 X="-937.3181" Y="-3740.547" Z="8.769534" />
          <Vector3 X="-927.2786" Y="-3743.622" Z="9.783189" />
          <Vector3 X="-917.5398" Y="-3747.457" Z="10.10001" />
          <Vector3 X="-911.7662" Y="-3756.008" Z="10.46044" />
          <Vector3 X="-908.6475" Y="-3766.324" Z="11.3574" />
          <Vector3 X="-902.0654" Y="-3772.967" Z="12.03321" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>BOATShipMenethilToAuberdine</Name>
      <QuestId />
      <QuestType>OverridePulseCSharpCode</QuestType>
      <QuestClass xsi:type="OverridePulseCSharpCodeEasyQuestClass">
        <Code>/* Quest settings:
    * Can condition: "return Usefuls.ContinentId == (int) ContinentId.Kalimdor;"
    * Is complete condition: "return Usefuls.ContinentId == (int) ContinentId.Kalimdor &amp;&amp; !ObjectManager.Me.InTransport;"
    * Not required in quest log: "True"
    * Quest type: "OverridePulseCSharpCode"
*/

// You can get zeppelin/ship/player positions and entry ID in tab "Tools" &gt; "Development Tools" &gt; "Dump all informations" (or "Memory information").

// Settings:
var zeppelinEntryId = 176310; // Zeppelin/Ship EntryId
// From
var fromZeppelinWaitPosition = new Vector3(-3709.475, -575.0988, 0); // Position where Zeppelin/Ship waits players (from)
var fromPlayerWaitPosition = new Vector3(-3727.4, -581.3, 6.2); // Position where the player waits Zeppelin/Ship (from)
var fromPlayerInZeppelinPosition = new Vector3(-3713.333, -571.7416, 6.098111); // Position where the player waits in the Zeppelin/Ship (from)
// To
var toZeppelinWaitPosition = new Vector3(6406.216, 823.0809, 0); // Position where Zeppelin/Ship waits players (to)
var toPlayerLeavePosition = new Vector3(6461.408, 806.1595, 6.770809); // Position to go out the Zeppelin/Ship (to)
//Pos1
var enterPos1 = new Vector3(-3724.827, -581.0698, 6.191196);
//Pos2
var enterPos2 = new Vector3( -3723.727, -580.3727, 6.184784);

// Change WRobot settings:
wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;
wManager.wManagerSetting.CurrentSetting.Repair = false;
wManager.wManagerSetting.CurrentSetting.Selling = false;

// Code:
if (!Conditions.InGameAndConnectedAndProductStartedNotInPause)
    return true;

if (Usefuls.ContinentId != (int)ContinentId.Kalimdor)
{
    if (!ObjectManager.Me.InTransport)
    {
        if (GoToTask.ToPosition(fromPlayerWaitPosition))
        {
            var zeppelin = ObjectManager.GetWoWGameObjectByEntry(zeppelinEntryId).OrderBy(o =&gt; o.GetDistance).FirstOrDefault();
            if (zeppelin != null &amp;&amp; zeppelin.Position.DistanceTo(fromZeppelinWaitPosition) &lt; 1)
            {

 GoToTask.ToPosition(enterPos1);
if(GoToTask.ToPosition(enterPos1))
GoToTask.ToPosition(enterPos2);

Lua.LuaDoString("ClearTarget()");

wManager.Wow.Helpers.MovementManager.Face(new Vector3(-3713.333, -571.7416, 6.098111));

while(fromPlayerInZeppelinPosition.DistanceTo(ObjectManager.Me.Position) &gt; 3)
{
wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 250);
      Thread.Sleep(robotManager.Helpful.Others.Random(25, 50));
}
               GoToTask.ToPosition(fromPlayerInZeppelinPosition);
            }
        }
    }
}
else if (Usefuls.ContinentId == (int)ContinentId.Kalimdor)
{
    if (ObjectManager.Me.InTransport)
    {
        var zeppelin = ObjectManager.GetWoWGameObjectByEntry(zeppelinEntryId).OrderBy(o =&gt; o.GetDistance).FirstOrDefault();
        if (zeppelin != null &amp;&amp; zeppelin.Position.DistanceTo(toZeppelinWaitPosition) &lt; 1)
        {
            wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 1500);
            wManager.Wow.Helpers.Move.StrafeRight(Move.MoveAction.PressKey, 1000);
            wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 1200);

            GoToTask.ToPosition(toPlayerLeavePosition);

        }
    }
}
return true;</Code>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition>return (new Vector3(6461.408f, 806.1595f, 6.770809f).DistanceTo(ObjectManager.Me.Position) &lt; 10 &amp;&amp; Usefuls.ContinentId == (int) ContinentId.Kalimdor &amp;&amp; !ObjectManager.Me.InTransport);</IsCompleteCondition>
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTEGoToTheramore</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="-946.6447" Y="-3750.739" Z="6.318685" />
          <Vector3 X="-950.7269" Y="-3754.04" Z="5.647218" />
          <Vector3 X="-958.4254" Y="-3761.172" Z="5.373498" />
          <Vector3 X="-965.4172" Y="-3768.108" Z="5.246855" />
          <Vector3 X="-978.5208" Y="-3772.348" Z="3.549934" />
          <Vector3 X="-989.0114" Y="-3775.062" Z="-1.347538" />
          <Vector3 X="-994.561" Y="-3776.451" Z="-1.737076" Type="Swimming" />
          <Vector3 X="-999.1199" Y="-3777.342" Z="-1.737076" Type="Swimming" />
          <Vector3 X="-1002.752" Y="-3777.98" Z="-1.737076" Type="Swimming" />
          <Vector3 X="-1013.683" Y="-3779.898" Z="-1.737076" Type="Swimming" />
          <Vector3 X="-1036.938" Y="-3783.98" Z="-1.737076" Type="Swimming" />
          <Vector3 X="-1059.439" Y="-3790.874" Z="-1.737076" Type="Swimming" />
          <Vector3 X="-1080.85" Y="-3798.872" Z="-1.737076" Type="Swimming" />
          <Vector3 X="-1100.238" Y="-3811.827" Z="-1.737076" Type="Swimming" />
          <Vector3 X="-1117.872" Y="-3827.528" Z="-1.737076" Type="Swimming" />
          <Vector3 X="-1134.895" Y="-3844.877" Z="-1.737076" Type="Swimming" />
          <Vector3 X="-1149.53" Y="-3862.432" Z="-1.737076" Type="Swimming" />
          <Vector3 X="-1162.847" Y="-3882.735" Z="-1.737076" Type="Swimming" />
          <Vector3 X="-1174.027" Y="-3902.669" Z="-1.737076" Type="Swimming" />
          <Vector3 X="-1185.946" Y="-3923.922" Z="-1.737076" Type="Swimming" />
          <Vector3 X="-1197.496" Y="-3944.515" Z="-1.737076" Type="Swimming" />
          <Vector3 X="-1208.676" Y="-3964.45" Z="-1.737076" Type="Swimming" />
          <Vector3 X="-1220.226" Y="-3985.043" Z="-1.737076" Type="Swimming" />
          <Vector3 X="-1232.145" Y="-4006.296" Z="-1.737076" Type="Swimming" />
          <Vector3 X="-1243.325" Y="-4026.23" Z="-1.737076" Type="Swimming" />
          <Vector3 X="-1255.244" Y="-4047.483" Z="-1.737076" Type="Swimming" />
          <Vector3 X="-1267.723" Y="-4066.442" Z="-1.737076" Type="Swimming" />
          <Vector3 X="-1286.484" Y="-4081.992" Z="-1.737076" Type="Swimming" />
          <Vector3 X="-1307.144" Y="-4091.604" Z="-1.737076" Type="Swimming" />
          <Vector3 X="-1329.61" Y="-4101.038" Z="-1.737076" Type="Swimming" />
          <Vector3 X="-1351.335" Y="-4107.274" Z="-1.737076" Type="Swimming" />
          <Vector3 X="-1375.338" Y="-4104.145" Z="-1.737076" Type="Swimming" />
          <Vector3 X="-1396.231" Y="-4095.514" Z="-1.737076" Type="Swimming" />
          <Vector3 X="-1416.918" Y="-4082.639" Z="-1.737076" Type="Swimming" />
          <Vector3 X="-1436.323" Y="-4070.563" Z="-1.737076" Type="Swimming" />
          <Vector3 X="-1458.628" Y="-4060.891" Z="-1.737076" Type="Swimming" />
          <Vector3 X="-1479.913" Y="-4052.564" Z="-1.737076" Type="Swimming" />
          <Vector3 X="-1502.605" Y="-4043.687" Z="-1.737076" Type="Swimming" />
          <Vector3 X="-1523.89" Y="-4035.361" Z="-1.737076" Type="Swimming" />
          <Vector3 X="-1546.582" Y="-4026.483" Z="-1.737076" Type="Swimming" />
          <Vector3 X="-1551.375" Y="-4024.608" Z="-1.737076" Type="Swimming" />
          <Vector3 X="-1557.202" Y="-4028.299" Z="-4.323521" Type="Swimming" />
          <Vector3 X="-1576.603" Y="-4040.968" Z="-6.178933" Type="Swimming" />
          <Vector3 X="-1595.427" Y="-4052.241" Z="-1.43478" Type="Swimming" />
          <Vector3 X="-1617.577" Y="-4062.051" Z="-1.43478" Type="Swimming" />
          <Vector3 X="-1632.153" Y="-4064.1" Z="-1.43478" Type="Swimming" />
          <Vector3 X="-1659.48" Y="-4061.393" Z="-1.937129" Type="Swimming" />
          <Vector3 X="-1678.627" Y="-4049.759" Z="-4.008771" Type="Swimming" />
          <Vector3 X="-1696.367" Y="-4033.485" Z="-1.486614" Type="Swimming" />
          <Vector3 X="-1713.251" Y="-4018.08" Z="-1.486614" Type="Swimming" />
          <Vector3 X="-1731.251" Y="-4001.656" Z="-1.486614" Type="Swimming" />
          <Vector3 X="-1748.134" Y="-3986.251" Z="-1.486614" Type="Swimming" />
          <Vector3 X="-1765.576" Y="-3970.336" Z="-1.486614" Type="Swimming" />
          <Vector3 X="-1784.248" Y="-3955.957" Z="-1.486614" Type="Swimming" />
          <Vector3 X="-1805.147" Y="-3943.431" Z="-1.486614" Type="Swimming" />
          <Vector3 X="-1825.24" Y="-3932.547" Z="-1.486614" Type="Swimming" />
          <Vector3 X="-1846.465" Y="-3922.206" Z="-1.486614" Type="Swimming" />
          <Vector3 X="-1867.835" Y="-3912.166" Z="-1.486614" Type="Swimming" />
          <Vector3 X="-1889.891" Y="-3901.809" Z="-1.486614" Type="Swimming" />
          <Vector3 X="-1910.58" Y="-3892.094" Z="-1.486614" Type="Swimming" />
          <Vector3 X="-1932.677" Y="-3881.827" Z="-1.486614" Type="Swimming" />
          <Vector3 X="-1953.927" Y="-3873.422" Z="-1.486614" Type="Swimming" />
          <Vector3 X="-1976.231" Y="-3865.73" Z="-1.486614" Type="Swimming" />
          <Vector3 X="-1999.643" Y="-3863.395" Z="-1.486614" Type="Swimming" />
          <Vector3 X="-2023.932" Y="-3865.121" Z="-1.486614" Type="Swimming" />
          <Vector3 X="-2045.989" Y="-3871.041" Z="-1.486614" Type="Swimming" />
          <Vector3 X="-2068.645" Y="-3879.982" Z="-1.486614" Type="Swimming" />
          <Vector3 X="-2089.003" Y="-3890.364" Z="-1.486614" Type="Swimming" />
          <Vector3 X="-2110.458" Y="-3901.913" Z="-1.486614" Type="Swimming" />
          <Vector3 X="-2130.724" Y="-3912.476" Z="-1.486614" Type="Swimming" />
          <Vector3 X="-2152.902" Y="-3920.386" Z="-1.486614" Type="Swimming" />
          <Vector3 X="-2175.899" Y="-3925.731" Z="-1.486614" Type="Swimming" />
          <Vector3 X="-2199.284" Y="-3928.97" Z="-1.486614" Type="Swimming" />
          <Vector3 X="-2222.759" Y="-3931.155" Z="-1.486614" Type="Swimming" />
          <Vector3 X="-2247.032" Y="-3929.022" Z="-1.486614" Type="Swimming" />
          <Vector3 X="-2254.368" Y="-3928.358" Z="-1.486614" Type="Swimming" />
          <Vector3 X="-2271.252" Y="-3926.832" Z="-1.486614" Type="Swimming" />
          <Vector3 X="-2295.52" Y="-3924.638" Z="-1.486614" Type="Swimming" />
          <Vector3 X="-2317.571" Y="-3919.305" Z="-1.486614" Type="Swimming" />
          <Vector3 X="-2339.481" Y="-3910.506" Z="-1.486614" Type="Swimming" />
          <Vector3 X="-2353.835" Y="-3904.688" Z="-1.486614" Type="Swimming" />
          <Vector3 X="-2375.717" Y="-3895.818" Z="-1.486614" Type="Swimming" />
          <Vector3 X="-2383.288" Y="-3892.749" Z="-1.486614" Type="Swimming" />
          <Vector3 X="-2404.512" Y="-3884.278" Z="-1.486614" Type="Swimming" />
          <Vector3 X="-2428.025" Y="-3882.881" Z="-1.486614" Type="Swimming" />
          <Vector3 X="-2450.872" Y="-3888.398" Z="-1.486614" Type="Swimming" />
          <Vector3 X="-2471.23" Y="-3899.772" Z="-1.486614" Type="Swimming" />
          <Vector3 X="-2473.809" Y="-3902.402" Z="-1.486614" Type="Swimming" />
          <Vector3 X="-2482.073" Y="-3910.832" Z="-1.486614" Type="Swimming" />
          <Vector3 X="-2490.444" Y="-3927.36" Z="-1.458267" Type="Swimming" />
          <Vector3 X="-2498.033" Y="-3952.82" Z="-1.458267" Type="Swimming" />
          <Vector3 X="-2495.376" Y="-3973.459" Z="-5.623404" Type="Swimming" />
          <Vector3 X="-2490.997" Y="-3996.811" Z="-2.60873" Type="Swimming" />
          <Vector3 X="-2486.544" Y="-4019.074" Z="-1.465664" Type="Swimming" />
          <Vector3 X="-2484.105" Y="-4042.515" Z="-1.465664" Type="Swimming" />
          <Vector3 X="-2485.539" Y="-4066.069" Z="-1.465664" Type="Swimming" />
          <Vector3 X="-2493.236" Y="-4088.975" Z="-1.465664" Type="Swimming" />
          <Vector3 X="-2508.131" Y="-4106.287" Z="-1.465664" Type="Swimming" />
          <Vector3 X="-2525.291" Y="-4122.429" Z="-1.465664" Type="Swimming" />
          <Vector3 X="-2542.383" Y="-4136.496" Z="-1.465664" Type="Swimming" />
          <Vector3 X="-2546.792" Y="-4140.42" Z="-1.465664" Type="Swimming" />
          <Vector3 X="-2551.102" Y="-4157.59" Z="-1.465664" Type="Swimming" />
          <Vector3 X="-2553.756" Y="-4175.095" Z="-1.465664" Type="Swimming" />
          <Vector3 X="-2553.775" Y="-4180.289" Z="-1.465664" Type="Swimming" />
          <Vector3 X="-2555.396" Y="-4203.085" Z="-1.465664" Type="Swimming" />
          <Vector3 X="-2557.575" Y="-4227.353" Z="-1.465664" Type="Swimming" />
          <Vector3 X="-2560.765" Y="-4249.973" Z="-1.465664" Type="Swimming" />
          <Vector3 X="-2566.17" Y="-4273.728" Z="-1.465664" Type="Swimming" />
          <Vector3 X="-2573.554" Y="-4296.142" Z="-1.465664" Type="Swimming" />
          <Vector3 X="-2578.765" Y="-4309.164" Z="-1.465664" Type="Swimming" />
          <Vector3 X="-2588.965" Y="-4325.026" Z="-1.465664" Type="Swimming" />
          <Vector3 X="-2606.341" Y="-4341.013" Z="-1.465664" Type="Swimming" />
          <Vector3 X="-2624.112" Y="-4356.523" Z="-1.465664" Type="Swimming" />
          <Vector3 X="-2645.618" Y="-4365.877" Z="-1.465664" Type="Swimming" />
          <Vector3 X="-2669.054" Y="-4368.486" Z="-1.465664" Type="Swimming" />
          <Vector3 X="-2693.406" Y="-4369.332" Z="-1.465664" Type="Swimming" />
          <Vector3 X="-2716.25" Y="-4370.033" Z="-1.465664" Type="Swimming" />
          <Vector3 X="-2739.524" Y="-4373.392" Z="-1.465664" Type="Swimming" />
          <Vector3 X="-2757.426" Y="-4377.914" Z="-1.465664" Type="Swimming" />
          <Vector3 X="-2781.592" Y="-4384.675" Z="-1.465664" Type="Swimming" />
          <Vector3 X="-2804.205" Y="-4387.986" Z="-1.465664" Type="Swimming" />
          <Vector3 X="-2827.985" Y="-4393.273" Z="-1.465664" Type="Swimming" />
          <Vector3 X="-2849.924" Y="-4399.678" Z="-1.465664" Type="Swimming" />
          <Vector3 X="-2872.629" Y="-4406.152" Z="-1.465664" Type="Swimming" />
          <Vector3 X="-2895.718" Y="-4411.058" Z="-1.465664" Type="Swimming" />
          <Vector3 X="-2919.681" Y="-4415.473" Z="-1.465664" Type="Swimming" />
          <Vector3 X="-2942.18" Y="-4419.493" Z="-1.465664" Type="Swimming" />
          <Vector3 X="-2965.607" Y="-4422.412" Z="-1.465664" Type="Swimming" />
          <Vector3 X="-2989.154" Y="-4424.034" Z="-1.465664" Type="Swimming" />
          <Vector3 X="-3012.563" Y="-4421.188" Z="-1.465664" Type="Swimming" />
          <Vector3 X="-3035.202" Y="-4414.56" Z="-1.465664" Type="Swimming" />
          <Vector3 X="-3057.461" Y="-4406.684" Z="-1.465664" Type="Swimming" />
          <Vector3 X="-3079.697" Y="-4398.744" Z="-1.465664" Type="Swimming" />
          <Vector3 X="-3101.992" Y="-4390.979" Z="-1.465664" Type="Swimming" />
          <Vector3 X="-3109.856" Y="-4388.955" Z="-1.465664" Type="Swimming" />
          <Vector3 X="-3114.276" Y="-4388.556" Z="-1.465664" Type="Swimming" />
          <Vector3 X="-3138.633" Y="-4388.686" Z="-1.465664" Type="Swimming" />
          <Vector3 X="-3161.479" Y="-4389.355" Z="-1.465664" Type="Swimming" />
          <Vector3 X="-3185.826" Y="-4390.322" Z="-1.465664" Type="Swimming" />
          <Vector3 X="-3208.663" Y="-4391.245" Z="-1.465664" Type="Swimming" />
          <Vector3 X="-3233" Y="-4392.426" Z="-1.465664" Type="Swimming" />
          <Vector3 X="-3255.809" Y="-4393.881" Z="-1.465664" Type="Swimming" />
          <Vector3 X="-3279.24" Y="-4396.655" Z="-1.465664" Type="Swimming" />
          <Vector3 X="-3302.275" Y="-4401.834" Z="-1.465664" Type="Swimming" />
          <Vector3 X="-3326.029" Y="-4407.265" Z="-1.465664" Type="Swimming" />
          <Vector3 X="-3348.31" Y="-4412.358" Z="-1.465664" Type="Swimming" />
          <Vector3 X="-3354.064" Y="-4413.673" Z="-1.465664" Type="Swimming" />
          <Vector3 X="-3375.381" Y="-4419.674" Z="-1.465664" Type="Swimming" />
          <Vector3 X="-3398.137" Y="-4425.958" Z="-1.465664" Type="Swimming" />
          <Vector3 X="-3422.049" Y="-4430.551" Z="-1.465664" Type="Swimming" />
          <Vector3 X="-3444.832" Y="-4431.11" Z="-1.465664" Type="Swimming" />
          <Vector3 X="-3468.152" Y="-4427.449" Z="-1.465664" Type="Swimming" />
          <Vector3 X="-3491.069" Y="-4421.993" Z="-1.465664" Type="Swimming" />
          <Vector3 X="-3513.093" Y="-4411.624" Z="-1.465664" Type="Swimming" />
          <Vector3 X="-3523.778" Y="-4405.165" Z="-1.465664" Type="Swimming" />
          <Vector3 X="-3527.624" Y="-4397.163" Z="-1.465664" Type="Swimming" />
          <Vector3 X="-3536.525" Y="-4376.144" Z="-1.465664" Type="Swimming" />
          <Vector3 X="-3540.301" Y="-4364.793" Z="1.568857" />
          <Vector3 X="-3542.723" Y="-4354.579" Z="2.926293" />
          <Vector3 X="-3544.941" Y="-4344.316" Z="5.791932" />
          <Vector3 X="-3548.052" Y="-4334.301" Z="7.50458" />
          <Vector3 X="-3552.214" Y="-4324.663" Z="8.316122" />
          <Vector3 X="-3557.985" Y="-4315.951" Z="8.165137" />
          <Vector3 X="-3566.998" Y="-4310.102" Z="6.890588" />
          <Vector3 X="-3576.979" Y="-4309.488" Z="5.90443" />
          <Vector3 X="-3586.299" Y="-4314.871" Z="5.959299" />
          <Vector3 X="-3598.822" Y="-4324.943" Z="8.509353" />
          <Vector3 X="-3612.337" Y="-4336.059" Z="9.401567" />
          <Vector3 X="-3625.791" Y="-4347.244" Z="7.241743" />
          <Vector3 X="-3639.569" Y="-4358.034" Z="8.032106" />
          <Vector3 X="-3653.434" Y="-4368.711" Z="9.355768" />
          <Vector3 X="-3664.248" Y="-4377.923" Z="9.355768" />
          <Vector3 X="-3669.04" Y="-4382.382" Z="9.639574" />
          <Vector3 X="-3671.917" Y="-4387.477" Z="10.15664" />
          <Vector3 X="-3672.529" Y="-4404.926" Z="10.65892" />
          <Vector3 X="-3672.472" Y="-4422.985" Z="11.16337" />
          <Vector3 X="-3672.336" Y="-4439.924" Z="11.32985" />
          <Vector3 X="-3674.344" Y="-4457.769" Z="11.39659" />
          <Vector3 X="-3682.555" Y="-4472.463" Z="11.68245" />
          <Vector3 X="-3695.83" Y="-4483.805" Z="12.15681" />
          <Vector3 X="-3711.341" Y="-4491.854" Z="12.62739" />
          <Vector3 X="-3727.599" Y="-4498.32" Z="12.90804" />
          <Vector3 X="-3744.241" Y="-4503.711" Z="12.91265" />
          <Vector3 X="-3761.08" Y="-4508.472" Z="12.60749" />
          <Vector3 X="-3778.435" Y="-4510.609" Z="12.17545" />
          <Vector3 X="-3796.357" Y="-4512.834" Z="11.54157" />
          <Vector3 X="-3805.552" Y="-4514.047" Z="10.94024" />
          <Vector3 X="-3809.33" Y="-4514.578" Z="10.5243" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTEStonetalonPeakToBarrensBorder</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="2673.995" Y="1492.775" Z="233.1036" />
          <Vector3 X="2667.847" Y="1486.868" Z="231.9976" />
          <Vector3 X="2658.764" Y="1481.915" Z="231.3528" />
          <Vector3 X="2648.438" Y="1480.239" Z="232.0377" />
          <Vector3 X="2638.01" Y="1481.348" Z="234.0329" />
          <Vector3 X="2626.986" Y="1483.076" Z="235.3309" />
          <Vector3 X="2609.7" Y="1485.8" Z="239.7305" />
          <Vector3 X="2592.424" Y="1488.59" Z="246.5016" />
          <Vector3 X="2574.116" Y="1491.782" Z="256.6757" />
          <Vector3 X="2562.802" Y="1488.595" Z="260.9005" />
          <Vector3 X="2553.109" Y="1484.603" Z="265.0556" />
          <Vector3 X="2543.364" Y="1480.692" Z="264.1304" />
          <Vector3 X="2533.593" Y="1476.85" Z="263.0109" />
          <Vector3 X="2527.399" Y="1474.649" Z="262.9991" />
          <Vector3 X="2518.911" Y="1472.104" Z="262.6608" />
          <Vector3 X="2508.851" Y="1469.094" Z="262.6889" />
          <Vector3 X="2498.73" Y="1466.303" Z="262.7225" />
          <Vector3 X="2488.605" Y="1463.521" Z="263.0681" />
          <Vector3 X="2479.697" Y="1458.543" Z="263.5169" />
          <Vector3 X="2476.069" Y="1449.461" Z="264.6822" />
          <Vector3 X="2475.364" Y="1438.356" Z="263.5633" />
          <Vector3 X="2473.729" Y="1428.029" Z="263.114" />
          <Vector3 X="2467.537" Y="1414.521" Z="264.3643" />
          <Vector3 X="2459.912" Y="1398.77" Z="267.2968" />
          <Vector3 X="2452.759" Y="1383.995" Z="270.4087" />
          <Vector3 X="2442.918" Y="1368.286" Z="271.8819" />
          <Vector3 X="2432.454" Y="1355.648" Z="272.7583" />
          <Vector3 X="2419.55" Y="1342.312" Z="274.2904" />
          <Vector3 X="2407.703" Y="1329.445" Z="276.5947" />
          <Vector3 X="2398.068" Y="1314.877" Z="278.4376" />
          <Vector3 X="2392.242" Y="1298.557" Z="282.9506" />
          <Vector3 X="2393.948" Y="1281.244" Z="287.6012" />
          <Vector3 X="2400.978" Y="1265.278" Z="292.2463" />
          <Vector3 X="2405.464" Y="1248.567" Z="298.5697" />
          <Vector3 X="2401.587" Y="1232.689" Z="304.5403" />
          <Vector3 X="2398.376" Y="1215.536" Z="310.0089" />
          <Vector3 X="2397.06" Y="1197.016" Z="311.1062" />
          <Vector3 X="2394.818" Y="1179.66" Z="311.6014" />
          <Vector3 X="2393.214" Y="1162.238" Z="311.4494" />
          <Vector3 X="2390.934" Y="1144.895" Z="310.1619" />
          <Vector3 X="2386.783" Y="1127.903" Z="306.8675" />
          <Vector3 X="2378.413" Y="1112.644" Z="301.9913" />
          <Vector3 X="2366.581" Y="1099.811" Z="296.7156" />
          <Vector3 X="2352.432" Y="1089.522" Z="291.2177" />
          <Vector3 X="2336.985" Y="1081.42" Z="286.3221" />
          <Vector3 X="2319.969" Y="1077.422" Z="283.0503" />
          <Vector3 X="2302.516" Y="1076.563" Z="280.6626" />
          <Vector3 X="2285.052" Y="1075.785" Z="277.3236" />
          <Vector3 X="2268.973" Y="1072.515" Z="275.6991" />
          <Vector3 X="2251.495" Y="1066.221" Z="272.9747" />
          <Vector3 X="2235.43" Y="1059.282" Z="270.342" />
          <Vector3 X="2219.357" Y="1052.361" Z="266.0468" />
          <Vector3 X="2203.301" Y="1045.399" Z="260.9897" />
          <Vector3 X="2187.246" Y="1038.437" Z="254.9405" />
          <Vector3 X="2171.822" Y="1032.836" Z="250.0786" />
          <Vector3 X="2154.244" Y="1026.802" Z="244.3965" />
          <Vector3 X="2137.779" Y="1020.877" Z="238.9857" />
          <Vector3 X="2122.667" Y="1012.346" Z="233.6874" />
          <Vector3 X="2111.013" Y="999.301" Z="232.9369" />
          <Vector3 X="2097.426" Y="988.3118" Z="229.0776" />
          <Vector3 X="2081.295" Y="981.9485" Z="220.2218" />
          <Vector3 X="2063.872" Y="980.8417" Z="214.2328" />
          <Vector3 X="2046.402" Y="981.1515" Z="208.0271" />
          <Vector3 X="2029.269" Y="977.6608" Z="200.4147" />
          <Vector3 X="2012.255" Y="973.5626" Z="194.6692" />
          <Vector3 X="1995.261" Y="969.3873" Z="189.317" />
          <Vector3 X="1978.504" Y="964.3467" Z="183.1703" />
          <Vector3 X="1961.683" Y="959.5282" Z="179.9647" />
          <Vector3 X="1944.38" Y="957.3568" Z="175.7433" />
          <Vector3 X="1926.915" Y="958.4354" Z="171.4185" />
          <Vector3 X="1909.464" Y="958.0504" Z="166.7" />
          <Vector3 X="1892.085" Y="955.9908" Z="163.2354" />
          <Vector3 X="1875.166" Y="955.8357" Z="157.8427" />
          <Vector3 X="1858.853" Y="960.4551" Z="153.9906" />
          <Vector3 X="1841.747" Y="966.1363" Z="150.3402" />
          <Vector3 X="1823.971" Y="969.2094" Z="145.643" />
          <Vector3 X="1806.502" Y="969.5726" Z="144.3557" />
          <Vector3 X="1795.426" Y="967.9758" Z="142.2111" />
          <Vector3 X="1786.03" Y="963.2971" Z="140.7955" />
          <Vector3 X="1776.483" Y="958.9277" Z="139.1514" />
          <Vector3 X="1766.75" Y="954.9902" Z="138.3055" />
          <Vector3 X="1761.306" Y="952.6628" Z="137.2957" />
          <Vector3 X="1756.589" Y="948.085" Z="136.2359" />
          <Vector3 X="1751.141" Y="943.9375" Z="135.3626" />
          <Vector3 X="1746.903" Y="944.3995" Z="134.6309" />
          <Vector3 X="1742.725" Y="943.5532" Z="134.2135" />
          <Vector3 X="1732.893" Y="944.6476" Z="133.1329" />
          <Vector3 X="1724.742" Y="951.239" Z="132.9695" />
          <Vector3 X="1717.455" Y="959.2176" Z="133.3281" />
          <Vector3 X="1709.656" Y="968.9351" Z="134.9986" />
          <Vector3 X="1698.194" Y="982.1524" Z="136.0807" />
          <Vector3 X="1685.121" Y="993.7236" Z="136.6682" />
          <Vector3 X="1670.075" Y="1001.557" Z="136.6682" />
          <Vector3 X="1653.155" Y="1007.75" Z="136.6682" />
          <Vector3 X="1636.529" Y="1013.211" Z="136.6682" />
          <Vector3 X="1619.902" Y="1018.671" Z="136.6682" />
          <Vector3 X="1603.74" Y="1023.859" Z="136.6682" />
          <Vector3 X="1586.296" Y="1028.375" Z="136.6682" />
          <Vector3 X="1569.641" Y="1031.186" Z="138.0994" />
          <Vector3 X="1553.472" Y="1025" Z="138.3313" />
          <Vector3 X="1539.695" Y="1013.492" Z="138.3313" />
          <Vector3 X="1528.683" Y="999.8947" Z="138.3313" />
          <Vector3 X="1517.697" Y="986.9614" Z="138.3313" />
          <Vector3 X="1504.281" Y="974.9444" Z="138.3313" />
          <Vector3 X="1490.142" Y="964.6426" Z="138.3313" />
          <Vector3 X="1475.135" Y="955.6558" Z="138.3313" />
          <Vector3 X="1461.801" Y="945.1774" Z="138.3313" />
          <Vector3 X="1449.972" Y="932.3115" Z="138.3313" />
          <Vector3 X="1443.701" Y="915.6378" Z="138.3313" />
          <Vector3 X="1439.526" Y="899.1993" Z="138.3886" />
          <Vector3 X="1433.681" Y="882.7048" Z="138.332" />
          <Vector3 X="1427.273" Y="866.4216" Z="138.332" />
          <Vector3 X="1420.772" Y="849.61" Z="138.8531" />
          <Vector3 X="1414.712" Y="833.2418" Z="140.3236" />
          <Vector3 X="1409.743" Y="817.0175" Z="141.7858" />
          <Vector3 X="1405.456" Y="800.0508" Z="143.2327" />
          <Vector3 X="1399.198" Y="783.2391" Z="144.8702" />
          <Vector3 X="1391.28" Y="767.6347" Z="147.0781" />
          <Vector3 X="1380.098" Y="754.2549" Z="150.5888" />
          <Vector3 X="1372.806" Y="746.848" Z="152.6103" />
          <Vector3 X="1361.852" Y="741.9366" Z="157.2675" />
          <Vector3 X="1357.866" Y="740.1331" Z="159.2029" />
          <Vector3 X="1341.607" Y="733.7691" Z="167.0486" />
          <Vector3 X="1324.513" Y="730.0709" Z="172.623" />
          <Vector3 X="1307.062" Y="728.9109" Z="177.5166" />
          <Vector3 X="1289.575" Y="728.2731" Z="177.721" />
          <Vector3 X="1272.103" Y="727.4918" Z="178.5014" />
          <Vector3 X="1254.721" Y="725.5612" Z="177.7238" />
          <Vector3 X="1237.768" Y="721.2245" Z="175.4761" />
          <Vector3 X="1221.219" Y="715.6424" Z="171.3535" />
          <Vector3 X="1216.229" Y="713.34" Z="169.7219" />
          <Vector3 X="1210.176" Y="709.6265" Z="167.7949" />
          <Vector3 X="1198.135" Y="696.9819" Z="162.2253" />
          <Vector3 X="1186.659" Y="683.7715" Z="156.1332" />
          <Vector3 X="1174.242" Y="671.4737" Z="149.7735" />
          <Vector3 X="1165.643" Y="666.7495" Z="146.5275" />
          <Vector3 X="1148.617" Y="664.6042" Z="142.2552" />
          <Vector3 X="1131.829" Y="669.5242" Z="139.3038" />
          <Vector3 X="1115.137" Y="674.7763" Z="137.2837" />
          <Vector3 X="1098.127" Y="678.8242" Z="135.0009" />
          <Vector3 X="1081.219" Y="679.0117" Z="131.5244" />
          <Vector3 X="1063.931" Y="674.1921" Z="128.3601" />
          <Vector3 X="1049.251" Y="664.7575" Z="124.2518" />
          <Vector3 X="1035.048" Y="654.5789" Z="121.2122" />
          <Vector3 X="1018.54" Y="649.0002" Z="117.8503" />
          <Vector3 X="1001.147" Y="647.151" Z="114.4191" />
          <Vector3 X="983.6722" Y="647.8312" Z="110.5074" />
          <Vector3 X="966.7435" Y="649.0836" Z="107.5659" />
          <Vector3 X="949.2911" Y="650.3748" Z="104.4895" />
          <Vector3 X="931.8197" Y="651.316" Z="101.1352" />
          <Vector3 X="914.4376" Y="649.8085" Z="97.73218" />
          <Vector3 X="900.2989" Y="639.9989" Z="95.10278" />
          <Vector3 X="888.73" Y="626.1772" Z="92.88146" />
          <Vector3 X="877.7452" Y="613.236" Z="90.36044" />
          <Vector3 X="866.5036" Y="599.8279" Z="87.671" />
          <Vector3 X="858.9213" Y="583.6309" Z="86.72965" />
          <Vector3 X="854.6091" Y="566.7079" Z="83.93374" />
          <Vector3 X="845.7927" Y="551.6631" Z="81.05228" />
          <Vector3 X="834.9645" Y="537.9213" Z="77.40066" />
          <Vector3 X="825.7507" Y="523.2727" Z="73.66091" />
          <Vector3 X="824.7469" Y="505.8161" Z="70.0401" />
          <Vector3 X="819.9656" Y="489.0695" Z="67.33484" />
          <Vector3 X="809.4791" Y="475.1673" Z="65.15086" />
          <Vector3 X="796.8667" Y="463.0363" Z="63.97517" />
          <Vector3 X="784.2136" Y="450.9471" Z="63.92299" />
          <Vector3 X="771.7023" Y="438.7115" Z="63.92299" />
          <Vector3 X="758.8937" Y="426.7903" Z="63.92299" />
          <Vector3 X="744.7631" Y="415.5503" Z="63.92335" />
          <Vector3 X="730.5165" Y="405.3897" Z="63.8124" />
          <Vector3 X="716.1672" Y="395.3723" Z="61.53128" />
          <Vector3 X="701.0476" Y="385.53" Z="59.62956" />
          <Vector3 X="684.6067" Y="379.6559" Z="57.68155" />
          <Vector3 X="667.6318" Y="375.4011" Z="54.73486" />
          <Vector3 X="650.7784" Y="370.6892" Z="53.746" />
          <Vector3 X="634.4324" Y="364.4982" Z="52.606" />
          <Vector3 X="619.4181" Y="355.563" Z="50.86612" />
          <Vector3 X="605.6377" Y="344.7822" Z="50.07167" />
          <Vector3 X="593.5786" Y="331.4251" Z="47.27002" />
          <Vector3 X="578.9133" Y="323.1518" Z="47.75199" />
          <Vector3 X="561.7468" Y="320.0066" Z="49.24715" />
          <Vector3 X="544.3127" Y="320.9235" Z="51.78558" />
          <Vector3 X="527.576" Y="325.7817" Z="52.28664" />
          <Vector3 X="511.318" Y="332.2239" Z="52.07069" />
          <Vector3 X="494.6605" Y="337.583" Z="51.27437" />
          <Vector3 X="477.5949" Y="341.4334" Z="50.05989" />
          <Vector3 X="460.2319" Y="343.5126" Z="48.89316" />
          <Vector3 X="442.7365" Y="343.5045" Z="47.72381" />
          <Vector3 X="425.6761" Y="340.5961" Z="46.95742" />
          <Vector3 X="411.3105" Y="330.6861" Z="44.95718" />
          <Vector3 X="397.1246" Y="320.5261" Z="43.74894" />
          <Vector3 X="380.1874" Y="316.5568" Z="42.03257" />
          <Vector3 X="362.7099" Y="315.7177" Z="40.63807" />
          <Vector3 X="345.2101" Y="315.7346" Z="38.23155" />
          <Vector3 X="327.715" Y="316.0435" Z="36.4547" />
          <Vector3 X="310.24" Y="316.9726" Z="35.73714" />
          <Vector3 X="292.7537" Y="317.0695" Z="37.29446" />
          <Vector3 X="276.2621" Y="312.075" Z="40.80661" />
          <Vector3 X="263.5723" Y="300.1032" Z="45.10205" />
          <Vector3 X="252.4593" Y="286.5899" Z="48.01443" />
          <Vector3 X="241.6481" Y="272.8543" Z="50.53705" />
          <Vector3 X="230.8417" Y="259.0896" Z="53.15451" />
          <Vector3 X="222.8108" Y="243.6193" Z="54.58241" />
          <Vector3 X="216.7083" Y="227.2215" Z="54.91681" />
          <Vector3 X="206.2718" Y="213.2899" Z="53.9953" />
          <Vector3 X="194.1913" Y="199.921" Z="52.34373" />
          <Vector3 X="187.8971" Y="183.2375" Z="51.15803" />
          <Vector3 X="186.6136" Y="166.3466" Z="49.53393" />
          <Vector3 X="179.9567" Y="150.3817" Z="46.53287" />
          <Vector3 X="169.3966" Y="136.4496" Z="42.48581" />
          <Vector3 X="159.3492" Y="122.2396" Z="38.96699" />
          <Vector3 X="156.3509" Y="104.529" Z="35.66882" />
          <Vector3 X="156.5092" Y="87.60137" Z="33.59737" />
          <Vector3 X="157.1069" Y="70.11282" Z="31.20627" />
          <Vector3 X="156.7138" Y="52.62766" Z="30.35494" />
          <Vector3 X="152.8707" Y="35.06659" Z="29.9594" />
          <Vector3 X="145.0651" Y="19.41143" Z="29.6904" />
          <Vector3 X="138.7216" Y="3.726322" Z="28.2797" />
          <Vector3 X="132.8308" Y="-12.75213" Z="26.42435" />
          <Vector3 X="125.817" Y="-29.38036" Z="25.20568" />
          <Vector3 X="114.7698" Y="-42.82572" Z="23.24902" />
          <Vector3 X="103.1211" Y="-53.58136" Z="21.63646" />
          <Vector3 X="97.34375" Y="-64.07935" Z="20.76588" />
          <Vector3 X="92.48087" Y="-80.86836" Z="17.89525" />
          <Vector3 X="89.15161" Y="-98.04771" Z="14.33287" />
          <Vector3 X="85.10294" Y="-115.0662" Z="12.30991" />
          <Vector3 X="77.71954" Y="-131.522" Z="10.64163" />
          <Vector3 X="66.92142" Y="-145.1362" Z="10.77271" />
          <Vector3 X="53.19584" Y="-155.0609" Z="13.61152" />
          <Vector3 X="39.12517" Y="-165.4086" Z="15.66507" />
          <Vector3 X="27.6071" Y="-178.5734" Z="15.17479" />
          <Vector3 X="17.5549" Y="-192.8431" Z="15.55876" />
          <Vector3 X="12.04611" Y="-209.3689" Z="13.50727" />
          <Vector3 X="11.1479" Y="-222.4616" Z="11.82915" />
          <Vector3 X="9.418971" Y="-232.7016" Z="9.118363" />
          <Vector3 X="3.079539" Y="-242.0362" Z="6.553802" />
          <Vector3 X="-11.64768" Y="-252.4726" Z="3.433982" />
          <Vector3 X="-23.1246" Y="-264.8973" Z="-0.2703933" />
          <Vector3 X="-31.40655" Y="-280.7312" Z="-3.861612" />
          <Vector3 X="-31.05278" Y="-298.1151" Z="-6.769413" />
          <Vector3 X="-29.26965" Y="-315.5159" Z="-8.543078" />
          <Vector3 X="-30.96813" Y="-332.3461" Z="-9.71871" />
          <Vector3 X="-33.93562" Y="-349.5917" Z="-13.91622" />
          <Vector3 X="-39.0568" Y="-366.2907" Z="-17.75344" />
          <Vector3 X="-46.7188" Y="-382.6421" Z="-21.9847" />
          <Vector3 X="-50.27847" Y="-390.5939" Z="-24.55217" />
          <Vector3 X="-55.67094" Y="-407.8251" Z="-29.5586" />
          <Vector3 X="-59.13398" Y="-424.3434" Z="-33.1571" />
          <Vector3 X="-59.4517" Y="-441.8396" Z="-36.89843" />
          <Vector3 X="-59.28564" Y="-459.8925" Z="-41.55494" />
          <Vector3 X="-56.37616" Y="-476.5443" Z="-44.9376" />
          <Vector3 X="-49.94253" Y="-492.8119" Z="-46.13447" />
          <Vector3 X="-44.36935" Y="-509.3889" Z="-46.12606" />
          <Vector3 X="-40.4434" Y="-526.436" Z="-46.13284" />
          <Vector3 X="-35.37032" Y="-543.127" Z="-46.27731" />
          <Vector3 X="-24.10324" Y="-556.3753" Z="-46.34441" />
          <Vector3 X="-12.77329" Y="-569.645" Z="-46.34441" />
          <Vector3 X="-5.934439" Y="-585.7177" Z="-46.34441" />
          <Vector3 X="-2.480831" Y="-602.7629" Z="-44.09988" />
          <Vector3 X="-7.047589" Y="-619.4746" Z="-41.82995" />
          <Vector3 X="-15.64098" Y="-634.7194" Z="-39.42782" />
          <Vector3 X="-25.40204" Y="-649.1774" Z="-33.53884" />
          <Vector3 X="-39.28952" Y="-659.7681" Z="-26.20142" />
          <Vector3 X="-54.90629" Y="-667.4207" Z="-19.66086" />
          <Vector3 X="-72.15942" Y="-669.6666" Z="-13.37239" />
          <Vector3 X="-89.52819" Y="-671.0167" Z="-9.720838" />
          <Vector3 X="-106.0359" Y="-677.9918" Z="-5.964255" />
          <Vector3 X="-121.6369" Y="-685.8596" Z="-3.228502" />
          <Vector3 X="-138.917" Y="-687.9038" Z="-2.282798" />
          <Vector3 X="-156.412" Y="-687.5182" Z="-0.875098" />
          <Vector3 X="-173.1769" Y="-691.7193" Z="-0.02267464" />
          <Vector3 X="-188.1268" Y="-700.7934" Z="0.5625852" />
          <Vector3 X="-201.6107" Y="-711.7827" Z="1.142688" />
          <Vector3 X="-209.1158" Y="-727.4937" Z="2.700507" />
          <Vector3 X="-214.4743" Y="-744.1402" Z="4.178428" />
          <Vector3 X="-222.0418" Y="-759.9057" Z="5.452202" />
          <Vector3 X="-229.086" Y="-775.8472" Z="7.170966" />
          <Vector3 X="-234.79" Y="-792.3427" Z="7.372615" />
          <Vector3 X="-242.4139" Y="-808.063" Z="8.652045" />
          <Vector3 X="-248.5743" Y="-824.3727" Z="8.395871" />
          <Vector3 X="-248.9256" Y="-841.79" Z="7.947815" />
          <Vector3 X="-246.8811" Y="-859.1692" Z="7.609115" />
          <Vector3 X="-245.2656" Y="-876.5943" Z="7.982069" />
          <Vector3 X="-243.693" Y="-894.0234" Z="7.220264" />
          <Vector3 X="-243.1247" Y="-911.4761" Z="7.796226" />
          <Vector3 X="-242.7252" Y="-927.8862" Z="9.331128" />
          <Vector3 X="-242.5492" Y="-944.3001" Z="11.55762" />
          <Vector3 X="-242.2053" Y="-961.7845" Z="14.35606" />
          <Vector3 X="-242.1917" Y="-979.2843" Z="16.38198" />
          <Vector3 X="-242.2598" Y="-996.7841" Z="18.69799" />
          <Vector3 X="-242.8257" Y="-1014.272" Z="22.27588" />
          <Vector3 X="-244.3179" Y="-1031.708" Z="25.41429" />
          <Vector3 X="-245.6515" Y="-1049.708" Z="28.48353" />
          <Vector3 X="-246.8045" Y="-1067.157" Z="32.83519" />
          <Vector3 X="-247.9582" Y="-1084.617" Z="37.67671" />
          <Vector3 X="-248.973" Y="-1102.613" Z="42.22481" />
          <Vector3 X="-249.4785" Y="-1107.521" Z="43.38458" />
          <Vector3 X="-252.496" Y="-1124.744" Z="47.5028" />
          <Vector3 X="-257.8827" Y="-1141.351" Z="51.72788" />
          <Vector3 X="-266.7294" Y="-1157.053" Z="55.57472" />
          <Vector3 X="-273.6742" Y="-1172.529" Z="59.91509" />
          <Vector3 X="-280.1216" Y="-1188.798" Z="64.37355" />
          <Vector3 X="-287.9977" Y="-1204.394" Z="68.70412" />
          <Vector3 X="-298.781" Y="-1218.131" Z="72.61584" />
          <Vector3 X="-311.2503" Y="-1230.366" Z="76.69366" />
          <Vector3 X="-322.7319" Y="-1243.565" Z="80.61085" />
          <Vector3 X="-326.4903" Y="-1248.223" Z="81.95641" />
          <Vector3 X="-332.7905" Y="-1256.489" Z="83.87498" />
          <Vector3 X="-339.6228" Y="-1265.714" Z="85.95168" />
          <Vector3 X="-348.7139" Y="-1279.344" Z="88.71293" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
  </EasyQuests>
  <Script>using robotManager.Helpful;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Threading;
using wManager.Events;
using wManager.Wow.Bot.Tasks;
using wManager.Wow.Enums;
using wManager.Wow.Helpers;
using wManager.Wow.ObjectManager;
using System.ComponentModel;
using System.Configuration;
using System.Net;
using System.Windows.Forms;
using robotManager.Products;
using System.Threading.Tasks;



//FlightMaster
public class FlightMaster
{

    private int priority;

    public FlightMaster(int priority)
    {
        this.priority = priority;
    }

    public static void main(String[] args)
    {
        FlightMaster temp = new FlightMaster(1);
        Logging.Write("Stuff");
    }


    public static int timer = 0;
    public static Vector3 myPositionAtStart = new Vector3(0, 0, 0);
    public static bool _deleteOldPath = false;
    public static bool _isLaunched ;
    static bool longMoveState = false;
    static Vector3 checkDistanceToDestination;
    private static int travelDistance = 1250;
    private static float saveDistance;
    public static Vector3 destinationVector = new Vector3(0, 0, 0);

    //public static MovementEvents.MovementCancelableHandler MovementEventsOnOnMovementPulse { get; private set; }

    // public static List&lt;FlightMasterDB&gt; FML = fillDB();

    public void startFlightMaster()
    {
        Logging.Write("[FNV_Quester]: Flight Master initialized");
        _isLaunched = true;
        FNVQuesterFlightMaster.Load();
        //flightMasterLoop();
    }

    public void start()
    {
        //Logging.Write("Subscribing to event");
       // SubscribeToEvent();
       // watchForEvents();
    }

    public void stop()
    {
        //Logging.Write("Unsubscribing to event");
        //UnSubscribeEvents();
    }

    public static void disposeFlightMaster()
    {
        _isLaunched = false;
        FNVQuesterFlightMaster.CurrentSettings.Save();
        //clearOldPath();
        //_deleteOldPath = true;
        //UnSubscribeEvents();
        //MovementEvents.OnMovementPulse -= new MovementEvents.MovementCancelableHandler(FlightMaster.MovementEventsOnOnMovementPulse);
        //Logging.Write("[FNV_Quester]: Flight Master disposed");
    }

    public static void disposeFlightMaster(int wert)
    {
        _isLaunched = false;
        if(wert == 1)
        {
            Logging.Write("Flight Master stopped, dead");
        }
        else
        {
            Logging.Write("Flight Master stopped, combat");
        }
    }


    private void SubscribeToEvent()
    {
         MovementEvents.OnMovementPulse += MovementEventsOnOnMovementPulse;
    }

    public void UnSubscribeEvents()
    {
        MovementEvents.OnMovementPulse -= MovementEventsOnOnMovementPulse;
    }

    private void watchForEvents()
    {

        EventsLuaWithArgs.OnEventsLuaWithArgs += (LuaEventsId id, List&lt;string&gt; args) =&gt;
        {


            if (id == wManager.Wow.Enums.LuaEventsId.PLAYER_DEAD)
            {
                Logging.Write("[FNV_Quester]: Player died, stop Flight Master");
                disposeFlightMaster(1);
            }
            if (id == wManager.Wow.Enums.LuaEventsId.PLAYER_ENTER_COMBAT)
            {
                disposeFlightMaster(2);
          		  Logging.Write("[FNV_Quester]: Player entered combat, stop Flight Master");
            }

        };

    }


    private void MovementEventsOnOnMovementPulse(List&lt;Vector3&gt; path, CancelEventArgs cancelEventArgs)
    {
        if(timer &lt; 1)
        {
            checkDistanceToDestination = path.Last&lt;Vector3&gt;();
            longMove(path.Last&lt;Vector3&gt;());
            destinationVector = path.Last&lt;Vector3&gt;();
            if(ObjectManager.Me.Position.DistanceTo(destinationVector) &gt; 1000 &amp;&amp; !_isLaunched)
                startFlightMaster();
        }
        else
        {
            Logging.Write("[FNV_Quester]: Taxi in Pause");
        }
    }

    public bool longMove(Vector3 destination)
    {
        saveDistance = new Vector3(destination).DistanceTo(ObjectManager.Me.Position);
        if(new Vector3(destination).DistanceTo(ObjectManager.Me.Position) &lt; travelDistance)
        {
            longMoveState = false;
            return false;
        }
        else
        {
            longMoveState = true;
            return true;
        }
    }


    public static FlightMasterDB getClosestFlightMasterFrom()
    {
        List&lt;FlightMasterDB&gt; FMLnfmd = fillDB();
        float tempDistance = 99999;
        FlightMasterDB returnObject = new FlightMasterDB("null", 0, new Vector3(0, 0, 0), false);

        foreach(var a in FMLnfmd)
        {
            if(a.alreadyDiscovered &amp;&amp; a.position.DistanceTo(ObjectManager.Me.Position) &lt; tempDistance &amp;&amp; (a.continent == checkContinent()))
            {
                tempDistance = a.position.DistanceTo(ObjectManager.Me.Position);
                returnObject = a;
            }
        }
        return returnObject;
    }

    public static FlightMasterDB getClosestFlightMasterTo()
    {
        List&lt;FlightMasterDB&gt; FMLgcfmt = fillDB();
        float tempDistance = 99999;
        FlightMasterDB returnObject = new FlightMasterDB("null", 0, new Vector3(0, 0, 0), false);

        foreach(var a in FMLgcfmt)
        {
            if(a.alreadyDiscovered &amp;&amp; a.position.DistanceTo(destinationVector) &lt; tempDistance &amp;&amp; (a.continent == checkContinent()))
            {
                tempDistance = a.position.DistanceTo(destinationVector);
                returnObject = a;
            }
        }
        return returnObject;
    }

    public static bool checkContinent()
    {
        if(Usefuls.ContinentId == (int)ContinentId.Kalimdor)
        {
            return true;
        }
        else
        {
            return false;
        }
        
    }

    public static void waitFlying()
    {

        while(ObjectManager.Me.IsOnTaxi)
        {
            Logging.Write("[FNV_Quester]: On taxi, waiting");
            Thread.Sleep(30000);
        }

        Logging.Write("[FNV_Quester]: Arrived at destination Flight Master, finished waiting");
    }

    public static List&lt;FlightMasterDB&gt; fillDB()
    {
        //True = Kalimdor ; False = Eastern Kingdoms
        List&lt;FlightMasterDB&gt; FMListe = new List&lt;FlightMasterDB&gt;();
        FlightMasterDB Stormwind = new FlightMasterDB("Stormwind", 352, new Vector3(-8835.76f, 490.084f, 109.6157f), false);
        FMListe.Add(Stormwind);
        FlightMasterDB ArathiHighlands = new FlightMasterDB("Arathi", 2835, new Vector3(-1240.03f, -2513.96f, 21.92969f), false);
        FMListe.Add(ArathiHighlands);
        FlightMasterDB Ashenvale = new FlightMasterDB("Ashenvale", 4267, new Vector3(2828.4f, -284.3f, 106.7f), true);
        FMListe.Add(Ashenvale);
        FlightMasterDB Darkshore = new FlightMasterDB("Darkshore", 3841, new Vector3(6343.2f, 561.651f, 15.79876f), true);
        FMListe.Add(Darkshore);
        FlightMasterDB Stranglethorn = new FlightMasterDB("Stranglethorn", 2859, new Vector3(-14477.9f, 464.101f, 36.38163f), false);
        FMListe.Add(Stranglethorn);
        FlightMasterDB Duskwood = new FlightMasterDB("Duskwood", 2409, new Vector3(-10513.8f, -1258.79f, 41.43174f), false);
        FMListe.Add(Duskwood);
        FlightMasterDB FeralasFeathermoon = new FlightMasterDB("Feralas, Feathermoon", 8019, new Vector3(-4370.5f, 3340f, 12f), true);
        FMListe.Add(FeralasFeathermoon);
        FlightMasterDB FeralasThalanaar = new FlightMasterDB("Feralas, Thalanaar", 4319, new Vector3(-4491f, -781f, -40f), true);
        FMListe.Add(FeralasThalanaar);
        FlightMasterDB Tanaris = new FlightMasterDB("Tanaris", 7823, new Vector3(-7224.9f, -3738.2f, 8.4f), true);
        FMListe.Add(Tanaris);
        FlightMasterDB Hinterlands = new FlightMasterDB("The Hinterlands", 8018, new Vector3(282.1f, -2001.3f, 194.1f), false);
        FMListe.Add(Hinterlands);
        FlightMasterDB Ironforge = new FlightMasterDB("Ironforge", 1573, new Vector3(-4821.13f, -1152.4f, 502.2116f), false);
        FMListe.Add(Ironforge);
        FlightMasterDB Menethil = new FlightMasterDB("Wetlands", 1571, new Vector3(-3793.2f, -782.052f, 9.014864f), false);
        FMListe.Add(Menethil);
        FlightMasterDB TheBarrens = new FlightMasterDB("The Barrens", 16227, new Vector3(-898.246f, -3769.65f, 11.71021f), true);
        FMListe.Add(TheBarrens);
        FlightMasterDB Redridge = new FlightMasterDB("Redridge Mountains", 931, new Vector3(-9435.8f, -2234.79f, 69.43174f), false);
        FMListe.Add(Redridge);
        FlightMasterDB Teldrassil = new FlightMasterDB("Teldrassil", 3838, new Vector3(8640.58f, 841.118f, 23.26363f), true);
        FMListe.Add(Teldrassil);
        FlightMasterDB Southshore = new FlightMasterDB("Hillsbrad Foothiils", 2432, new Vector3(-715.146f, -512.134f, 26.54455f), false);
        FMListe.Add(Southshore);
        FlightMasterDB Stonetalon = new FlightMasterDB("Stonetalon Mountains", 4407, new Vector3(2682.83f, 1466.45f, 233.6483f), true);
        FMListe.Add(Stonetalon);
        FlightMasterDB Thelsamar = new FlightMasterDB("Loch Modan", 1572, new Vector3(-5424.85f, -2929.87f, 347.5623f), false);
        FMListe.Add(Thelsamar);
        FlightMasterDB Theramore = new FlightMasterDB("Dustwallow Marsh", 4321, new Vector3(-3828.88f, -4517.51f, 10.66067f), true);
        FMListe.Add(Theramore);
        FlightMasterDB WesternP = new FlightMasterDB("Western Pleaguelands", 12596, new Vector3(928.3f, -1429.1f, 64.8f), false);
        FMListe.Add(WesternP);
        FlightMasterDB Westfall = new FlightMasterDB("Westfall", 523, new Vector3(-10628.8f, 1037.79f, 34.43174f), false);
        FMListe.Add(Westfall);
        FlightMasterDB EasternP = new FlightMasterDB("Eastern Pleaguelands", 12617, new Vector3(2269.9f, -5345.4f, 86.9f), false);
        FMListe.Add(EasternP);
        FlightMasterDB SearingGorge = new FlightMasterDB("Searing Gorge", 2941, new Vector3(-6559.1f, -1169.4f, 309.8f), false);
        FMListe.Add(SearingGorge);
        FlightMasterDB BurningSteppes = new FlightMasterDB("Burning Steppes", 2299, new Vector3(-8365.1f, -2758.5f, 185.6f), false);
        FMListe.Add(BurningSteppes);
        FlightMasterDB Azshara = new FlightMasterDB("Azshara", 12577, new Vector3(2718.2f, -3880.8f, 101.4f), true);
        FMListe.Add(Azshara);
        FlightMasterDB Felwood = new FlightMasterDB("Felwood", 12578, new Vector3(6204.2f, -1951.4f, 571.3f), true);
        FMListe.Add(Felwood);
        FlightMasterDB Winterspring = new FlightMasterDB("Winterspring", 11138, new Vector3(6800.5f, -4742.4f, 701.5f), true);
        FMListe.Add(Winterspring);
        FlightMasterDB UngoroCreater = new FlightMasterDB("Ungoro Crater", 10583, new Vector3(-6110.5f, -1140.4f, -186.9f), true);
        FMListe.Add(UngoroCreater);
        FlightMasterDB Silithus = new FlightMasterDB("Silithus", 15177, new Vector3(-6758.6f, 775.6f, 89f), true);
        FMListe.Add(Silithus);
        FlightMasterDB Desolace = new FlightMasterDB("Desolace", 6706, new Vector3(136f, 1326f, 193f), true);
        FMListe.Add(Desolace);
        return FMListe;
    }

    public static bool validFlight(String from, String to)
    {
        bool von = false;
        bool zu = false;
        List&lt;FlightMasterDB&gt; FMLvf = fillDB();

        for(int i = 0; i &lt; FMLvf.Count; i++)
        {
            if(FMLvf[i].name.Contains(from))
            {
                von = FMLvf[i].continent;
            }
            if(FMLvf[i].name.Contains(to))
            {
                zu = FMLvf[i].continent;
            }
        }
        return von != zu;
    }

    public static bool discoveredTaxiNodes(String from, String to)
    {

        List&lt;FlightMasterDB&gt; FMLDTN = fillDB();

        foreach(var ele in FMLDTN)
        {
            if(ele.name.Contains(from))
            {
                if(!ele.alreadyDiscovered)
                {
                    Logging.Write("[FNV_Quester]: Taxi node from " + ele.name + " has not been discovered so far. Abort taking taxi.");
                    return false;
                }
            }
        }

        foreach(var ele in FMLDTN)
        {
            if(ele.name.Contains(to))
            {
                if(!ele.alreadyDiscovered)
                {
                    Logging.Write("[FNV_Quester]: Taxi node to " + ele.name + " has not been discovered so far. Abort taking taxi.");
                    return false;
                }
            }
        }
        return true;
    }

    public static void takeTaxi(String from, String to)
    {

        List&lt;FlightMasterDB&gt; FMLtt = fillDB();
        bool canProceed = true;
        try
        {
            FMLtt = fillDB();
        }
        catch(Exception e)
        {
            Logging.Write("Error: " + e);
        }


        Vector3 myPos = ObjectManager.Me.Position;

        if(Usefuls.MapZoneName.Contains(to))
        {
            canProceed = false;
            Logging.Write("[FNV_Quester]: Already in the zone we are going to travel to. Skip flying");
        }

        if(canProceed)
        {

            if(validFlight(from, to))
            {
                Logging.Write("[FNV_Quester]: Unable to fly between Kalimdor and Eastern Kingdoms");
            }

            var position = new Vector3();
            int npcEntryId = 0;

            for(int i = 0; i &lt; FMLtt.Count; i++)
            {
                if(FMLtt[i].name.Contains(from))
                {
                    position = FMLtt[i].position;
                    npcEntryId = FMLtt[i].NPCId;
                    FMLtt[i].name.Contains(from);
                }
            }


            if(!ObjectManager.Me.IsOnTaxi)
            {
                wManager.wManagerSetting.ClearBlacklistOfCurrentProductSession();

                while(!wManager.Wow.Bot.Tasks.GoToTask.ToPositionAndIntecractWithNpc(position, npcEntryId, -1, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore) &amp;&amp; !Fight.InFight)
                {
                    wManager.wManagerSetting.ClearBlacklistOfCurrentProductSession();
                    wManager.Wow.Bot.Tasks.GoToTask.ToPositionAndIntecractWithNpc(position, npcEntryId, -1, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore);
                }
                if(wManager.Wow.Bot.Tasks.GoToTask.ToPositionAndIntecractWithNpc(position, npcEntryId, -1, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore))
                {
                    while(!ObjectManager.Me.IsOnTaxi)
                    {
                        Usefuls.SelectGossipOption(GossipOptionsType.taxi);

                        int node = Lua.LuaDoString&lt;int&gt;("for i=0,30 do if string.find(TaxiNodeName(i),'" + to + "') then return i end end");
                        Lua.LuaDoString("TakeTaxiNode(" + node + ")");
                        Logging.Write("[FNV_Quester]: Taking Taxi from " + from + " to " + to);
                        Thread.Sleep(Usefuls.Latency + 2500);
                    }
                }
            }
            waitFlying();
            return;
        }
    }

    public static void discoverTaxi(String discoverName)
    {
        FNVQuesterFlightMaster.Load();
        List&lt;FlightMasterDB&gt; FMLdt = fillDB();

        var position = new Vector3();
        int npcEntryId = 0;
        int j = 0;
        bool alreadyDiscoveredFlightMaster = false;

        for(int i = 0; i &lt; FMLdt.Count; i++)
        {
            if(FMLdt[i].name.Contains(discoverName))
            {
                if(FMLdt[i].alreadyDiscovered)
                {
                    Logging.Write("[FNV_Quester]: Flight Master of " + FMLdt[i].name + " already discovered. Skip it.");
                    alreadyDiscoveredFlightMaster = true;
                    break;
                }

                position = FMLdt[i].position;
                npcEntryId = FMLdt[i].NPCId;
                j = i;
            }
        }

        if(!alreadyDiscoveredFlightMaster)
        {

            if(!ObjectManager.Me.IsOnTaxi)
            {
                wManager.wManagerSetting.ClearBlacklistOfCurrentProductSession();

                while(!wManager.Wow.Bot.Tasks.GoToTask.ToPositionAndIntecractWithNpc(position, npcEntryId, -1, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore))
                {
                   // wManager.Wow.Helpers.Conditions.ForceIgnoreIsAttacked = true;
                    wManager.wManagerSetting.ClearBlacklistOfCurrentProductSession();
                    wManager.Wow.Bot.Tasks.GoToTask.ToPositionAndIntecractWithNpc(position, npcEntryId, -1, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore);
                }
                if(wManager.Wow.Bot.Tasks.GoToTask.ToPositionAndIntecractWithNpc(position, npcEntryId, -1, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore))
                {
                    Usefuls.SelectGossipOption(GossipOptionsType.taxi);
                    Thread.Sleep(Usefuls.Latency + 250);
                    //wManager.Wow.Helpers.Conditions.ForceIgnoreIsAttacked = true;
                }
            }
            Logging.Write("[FNV_Quester]: Flight Master " + FMLdt[j].name + " discovered");
            FMLdt[j].alreadyDiscovered = true;
            FNVQuesterFlightMaster.flightMasterSaveChanges(FMLdt[j]);
            //wManager.Wow.Helpers.Conditions.ForceIgnoreIsAttacked = false;
            
        }
        timer = 0;
        return;
    }

    }

    public class FlightMasterDB
    {
        public FlightMasterDB(String name, int NPCId, Vector3 position, bool continent, bool alreadyDiscovered)
        {
            this.name = name;
            this.NPCId = NPCId;
            this.position = position;
            this.continent = continent;
            this.alreadyDiscovered = alreadyDiscovered;
        }

        public FlightMasterDB(String name, int NPCId, Vector3 position, bool continent)
        {
            this.name = name;
            this.NPCId = NPCId;
            this.position = position;
            this.continent = continent;
            
        }

        public int NPCId { get; set; }
        public Vector3 position { get; set; }
        public String name { get; set; }
        public bool continent { get; set; }
        public bool alreadyDiscovered { get; set; }

    }

//Tram
public class Tram
{

    //Stormwind to Ironforge
    static Vector3 positionTramInIronforge = new Vector3(4.58065, 28.2097, 6.90526);
    static Vector3 positionTramInStormwind = new Vector3(4.581913, 2511.531, 7.091796);

    static Vector3 positionWaitTramIronforge = new Vector3(19.1, 28, -4.3);
    static Vector3 positionOnTramIronforge = new Vector3(4.8, 28.1, -4.3);

    static Vector3 positionWaitTramStormwind = new Vector3(15.3, 2510.4, -4.3);
    static Vector3 positionOnTramStormwind = new Vector3(4.3, 2510.6, -4.3);

    static Vector3 enterStormwindInside = new Vector3(67, 2490.7, -4.3);
    static Vector3 enterIronforgeInside = new Vector3(64.5, 10.2, -4.3);

    static Vector3 enterStormwindOutside = new Vector3(-8365, 536.9, 91.8);
    static Vector3 enterIronforgeOutside = new Vector3(-4836.7, -1304.6, 501.9);

    static Vector3 leavePosIronforge = new Vector3(-10.6, 30.2, -4.3);
    static Vector3 leavePosStormwind = new Vector3(-10.6, 2510.9, -4.3);

    static Vector3 playerFellDownIronforge = new Vector3(4.5, 28, -13.9);

    static int[] tramEntryArray = new int[6] { 176080, 176082, 176083, 176084, 176085, 176081 };

    //Ironforge to Stormwind
    static Vector3 waitPosPlayerInStormwindToIronforge = new Vector3(-32.8, 2512.1, -4.3);

    //Pos where upper Tram arrives and waits in Stormwind
    static Vector3 waitPosTramSwTramStormwind = new Vector3(-45.4007, 2512.15, 6.90526);
    //Pos where player waits on upper tram in Stormwind
    static Vector3 waitPosPlayerSwTramStormwind = new Vector3(-45.20206, 2512.266, -3.562748);

    static Vector3 waitPosSwTramIronforge = new Vector3(-45.399, 30.38013, 5.877773);

    static Vector3 leavePosSwTramIronforge = new Vector3(-61.8, 30.3, -4.3);
    static Vector3 waitPlayerOnTramPosSwTramIronforge = new Vector3(-34.49804, 2511.917, -4.3);
    static Vector3 posPlayerOnTramSwToIfInIronforge = new Vector3(-20.9837, 2459.93, -4.297);

    static Vector3 playerFellDownStormwind = new Vector3(-45, 2512.6, -13.9);

    static bool isRestarted = false;
    static Process[] pname = Process.GetProcessesByName(AppDomain.CurrentDomain.FriendlyName.Remove(AppDomain.CurrentDomain.FriendlyName.Length - 4));
    static Vector3 nullVector = new Vector3(0, 0, 0);


    public static void restartTram(String from)
    {
        switch(from)
        {
            case ("Stormwind"):
                takeTramStormwind();
                break;
            case ("Ironforge"):
                takeTramIronforge();
                break;
            default:
                Logging.Write("Something failed");
                break;
        }
    }

    public static void end()
    {
        Logging.Write("[FNV_Quester]: Ending Tream");
    }



    public static void takeTramStormwind()
    {
        Logging.Write("[FNV_Quester]: Taking Tram from Stormwind to Ironforge");

        if(!Usefuls.MapZoneName.Contains("Deep"))
        {
            while(!GoToTask.ToPosition(enterStormwindOutside))
            {
                GoToTask.ToPosition(enterStormwindOutside);
                Thread.Sleep(250);
            }

            wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;
            Logging.Write("[FNV_Quester]: Disable teleport during Tram");
            wManager.Wow.Helpers.MovementManager.Face(new Vector3(-8353.4, 521.4, 91.8));

            while(!Usefuls.MapZoneName.Contains("Deep"))
            {
                wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 250);
                Thread.Sleep(robotManager.Helpful.Others.Random(25, 50));
            }

        }

        if(Usefuls.MapZoneName.Contains("Deep"))
        {
            if(!GoToTask.ToPosition(enterStormwindInside))
            {
                GoToTask.ToPosition(enterStormwindInside);
                Thread.Sleep(250);
            }
            while(!GoToTask.ToPosition(waitPosPlayerInStormwindToIronforge))
            {
                GoToTask.ToPosition(waitPosPlayerInStormwindToIronforge);
                Thread.Sleep(250);
            }

            wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;
            var tram = (WoWGameObject)null;

            try
            {
                tram = chooseTramStormwind();
            }
            catch
            {

            }


            if(tram != null &amp;&amp; ObjectManager.Me.Position.DistanceTo(tram.Position) &lt; 200 &amp;&amp; !tram.Position.Equals(nullVector))
            {
                Logging.Write("[FNV_Quester]: Bad circle, restart... .");
                isRestarted = true;
                takeTramStormwind();
                end();
            }

            if(!isRestarted)
            {

                if(tram != null &amp;&amp; tram.Position.DistanceTo(nullVector) &gt; 1)
                {
                    while(tram.Position.DistanceTo(waitPosTramSwTramStormwind) &gt;= 5 || ObjectManager.Me.Position.DistanceTo(waitPosPlayerInStormwindToIronforge) &gt;= 5)
                    {
                        Thread.Sleep(500);
                    }

                    if(tram.Position.DistanceTo(waitPosTramSwTramStormwind) &lt; 5)
                    {
                        Lua.LuaDoString("ClearTarget()");
                        wManager.Wow.Helpers.MovementManager.Face(waitPosPlayerSwTramStormwind);

                        while(ObjectManager.Me.Position.DistanceTo(waitPosPlayerSwTramStormwind) &gt; 1)
                        {
                            MovementManager.MoveTo(waitPosPlayerSwTramStormwind);
                            Thread.Sleep(1000);

                            if(ObjectManager.Me.Position.DistanceTo(playerFellDownStormwind) &lt; 4)
                            {
                                Logging.Write("[FNV_Quester]: Fell down, while trying to take tram. Restart...");
                                restartTram("Stormwind");
                            }
                        }

                        GoToTask.ToPosition(waitPosPlayerSwTramStormwind);
                    }

                    while(tram.Position.DistanceTo(waitPosSwTramIronforge) &gt; 5)
                    {
                        Thread.Sleep(3000);
                    }

                    if(ObjectManager.Me.HaveBuff("Stealth"))
                    {
                        Lua.LuaDoString("CastSpellByName('Stealth')");
                    }

                    wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 1500);

                    if(ObjectManager.Me.Position.DistanceTo(posPlayerOnTramSwToIfInIronforge) &lt; 5)
                    {
                        MovementManager.MoveTo(leavePosSwTramIronforge);
                        Thread.Sleep(1000);

                        while(ObjectManager.Me.Position.DistanceTo(leavePosSwTramIronforge) &gt; 4)
                        {
                            MovementManager.MoveTo(leavePosSwTramIronforge);
                            Thread.Sleep(1000);
                        }
                    }

                    if(Usefuls.MapZoneName.Contains("Deep"))
                    {
                        if(!GoToTask.ToPosition(enterIronforgeInside))
                        {
                            GoToTask.ToPosition(enterIronforgeInside);
                            Thread.Sleep(250);
                        }
                    }

                    while(Usefuls.MapZoneName.Contains("Deep"))
                    {
                        wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 250);
                        Thread.Sleep(robotManager.Helpful.Others.Random(25, 50));
                    }

                    Logging.Write("[FNV_Quester]: Re enable teleport ");
                    wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = true;


                    while(!GoToTask.ToPosition(enterIronforgeOutside))
                    {
                        wManager.Wow.Helpers.MovementManager.Face(enterIronforgeOutside);
                        GoToTask.ToPosition(enterIronforgeOutside);
                        Thread.Sleep(250);
                    }

                }
                else if(Usefuls.MapZoneName.Contains("Tram") || Usefuls.MapZoneName.Contains("Stormwind"))
                {
                    Logging.Write("[FNV_Quester]: Unable to find tram, restart... .");
                    isRestarted = true;
                    restartTram("Stormwind");
                }

            }
        }

        isRestarted = false;
    }

    public static WoWGameObject chooseTramIronforge()
    {
        List&lt;WoWGameObject&gt; tramList = new List&lt;WoWGameObject&gt;();
        var tramTemp = (WoWGameObject)null;

        foreach(int ele in tramEntryArray)
        {
            tramTemp = null;
            try
            {
                tramTemp = ObjectManager.GetWoWGameObjectByEntry(ele).OrderBy(o =&gt; o.GetDistance).FirstOrDefault();
            }
            catch
            {
            }

            if(tramTemp != null &amp;&amp; tramTemp.IsValid &amp;&amp; !tramTemp.Equals((WoWGameObject)null) &amp;&amp; tramTemp.ToString().Contains("Subway"))
            {
                tramList.Add(tramTemp);
            }
            else
            {

            }
        }

        float distance = 0;
        float entryDistance = 0;
        foreach(var ele in tramList)
        {
            if(ObjectManager.Me.Position.DistanceTo(ele.Position) &gt;= distance)
            {
                distance = ObjectManager.Me.Position.DistanceTo(ele.Position);
                entryDistance = ele.Entry;
            }
        }

        foreach(var ele in tramList)
        {
            if(ele.Entry == entryDistance &amp;&amp; ele != null &amp;&amp; !ele.Position.Equals(nullVector))
            {
                if(ObjectManager.Me.Position.DistanceTo(ele.Position) &lt; 200)
                {
                    Logging.Write("[FNV_Quester]: Bad circle, restart... .");
                    restartTram("Ironforge");
                }

                Logging.Write("[FNV_Quester]: Choosing tram id: " + ele.Entry + " with a current position of " + ele.Position);
                return ele;
            }
        }
        return null;
    }

    public static WoWGameObject chooseTramStormwind()
    {
        List&lt;WoWGameObject&gt; tramList = new List&lt;WoWGameObject&gt;();
        var tramTemp = (WoWGameObject)null;

        foreach(int ele in tramEntryArray)
        {
            tramTemp = null;
            try
            {
                tramTemp = ObjectManager.GetWoWGameObjectByEntry(ele).OrderBy(o =&gt; o.GetDistance).FirstOrDefault();
            }
            catch
            {
            }

            if(tramTemp != null &amp;&amp; tramTemp.IsValid &amp;&amp; !tramTemp.Equals((WoWGameObject)null) &amp;&amp; tramTemp.ToString().Contains("Subway"))
            {
                tramList.Add(tramTemp);
            }
            else
            {

            }
        }

        float distance = 99999;
        float entryDistance = 0;
        foreach(var ele in tramList)
        {
            if(ObjectManager.Me.Position.DistanceTo(ele.Position) &lt;= distance)
            {
                distance = ObjectManager.Me.Position.DistanceTo(ele.Position);
                entryDistance = ele.Entry;
            }
        }

        foreach(var ele in tramList)
        {
            if(ele.Entry == entryDistance &amp;&amp; ele != null &amp;&amp; !ele.Position.Equals(nullVector))
            {
                if(ObjectManager.Me.Position.DistanceTo(ele.Position) &lt; 200)
                {
                    Logging.Write("[FNV_Quester]: Bad circle, restart... .");
                    restartTram("Stormwind");
                }

                Logging.Write("[FNV_Quester]: Choosing tram id: " + ele.Entry + " with a current position of " + ele.Position);
                return ele;
            }
        }

        return null;
    }

    public static void takeTramIronforge()
    {
        Logging.Write("[FNV_Quester]: Taking Tram from Ironforge to Stormwind");

        if(!Usefuls.MapZoneName.Contains("Deep"))
        {
            while(!GoToTask.ToPosition(enterIronforgeOutside))
            {
                GoToTask.ToPosition(enterIronforgeOutside);
                Thread.Sleep(250);
            }

            wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;
            Logging.Write("[FNV_Quester]: Disable teleport during Tram");
            wManager.Wow.Helpers.MovementManager.Face(new Vector3(-4839.4, -1320.9, 501.9));

            while(!Usefuls.MapZoneName.Contains("Deep"))
            {
                wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 250);
                Thread.Sleep(robotManager.Helpful.Others.Random(25, 50));
            }
        }

        if(Usefuls.MapZoneName.Contains("Deep"))
        {
            if(!GoToTask.ToPosition(enterIronforgeInside))
            {
                GoToTask.ToPosition(enterIronforgeInside);
                Thread.Sleep(250);
            }

            var pathEins = new List&lt;Vector3&gt;() {
new Vector3(42.56478f, 10.32987f, -4.29664f, "None"),
new Vector3(36.11083f, 10.30502f, -4.29664f, "None"),
new Vector3(29.11088f, 10.27806f, -4.29664f, "None"),
new Vector3(25.49891f, 10.26415f, -4.29664f, "None"),
new Vector3(20.57794f, 10.2452f, -4.29664f, "None"),
new Vector3(16.61328f, 11.97739f, -4.29664f, "None"),
new Vector3(17.03823f, 18.79025f, -4.29664f, "None"),
new Vector3(19.41723f, 25.35655f, -4.29664f, "None"),
};


                        while(ObjectManager.Me.Position.DistanceTo2D(pathEins.Last&lt;Vector3&gt;()) &gt; 5)
                        {
                            MovementManager.Go(pathEins); // or MovementManager.GoLoop(path);
                        }

            while(!GoToTask.ToPosition(positionWaitTramIronforge))
            {
                GoToTask.ToPosition(positionWaitTramIronforge);
                Thread.Sleep(250);
            }

            wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;

            var tram = (WoWGameObject)null;

            try
            {
                tram = chooseTramIronforge();
            }
            catch
            {

            }

            if(ObjectManager.Me.Position.DistanceTo(tram.Position) &lt; 200 &amp;&amp; tram != null &amp;&amp; !tram.Position.Equals(nullVector))
            {
                Logging.Write("[FNV_Quester]: Bad circle, restart... .");
                isRestarted = true;
                restartTram("Ironforge");
                end();
            }

            if(!isRestarted)
            {

                if(tram != null &amp;&amp; tram.Position.DistanceTo(nullVector) &gt; 1)
                {


                    while(tram.Position.DistanceTo(positionTramInIronforge) &gt;= 5 &amp;&amp; Usefuls.MapZoneName.Contains("Deep") &amp;&amp; !tram.Position.Equals(nullVector))
                    {
                        Thread.Sleep(1000);
                    }


                    if(tram.Position.DistanceTo(positionTramInIronforge) &lt; 5 &amp;&amp; Usefuls.MapZoneName.Contains("Deep"))
                    {
                        Lua.LuaDoString("ClearTarget()");
                        wManager.Wow.Helpers.MovementManager.Face(positionOnTramIronforge);

                        while(ObjectManager.Me.Position.DistanceTo(positionOnTramIronforge) &gt; 2)
                        {
                            MovementManager.MoveTo(positionOnTramIronforge);
                            Thread.Sleep(1000);

                            if(ObjectManager.Me.Position.DistanceTo(playerFellDownIronforge) &lt; 4)
                            {
                                Logging.Write("[FNV_Quester]: Fell down, while trying to take tram. Restart");
                                restartTram("Ironforge");
                            }
                        }

                        GoToTask.ToPosition(positionOnTramIronforge);
                    }


                    while(tram.Position.DistanceTo(positionTramInStormwind) &gt; 5 &amp;&amp; Usefuls.MapZoneName.Contains("Deep"))
                    {
                        Thread.Sleep(3000);
                    }

                    if(ObjectManager.Me.Position.DistanceTo(positionOnTramStormwind) &lt; 5 &amp;&amp; Usefuls.MapZoneName.Contains("Deep"))
                    {

                        Vector3 leavingTramPos = new Vector3(-4.500117, 2510.398, -4.18221, "None");
                        Vector3 leavingTramPosZwei = new Vector3(-8.363175, 2510.536, -4.291304, "None");

                        MovementManager.MoveTo(leavingTramPos);
                        Thread.Sleep(1000);
                        MovementManager.MoveTo(leavingTramPosZwei);
                        Thread.Sleep(1000);

                        var pathZwei = new List&lt;Vector3&gt;() {
new Vector3(-8.722651f, 2521.781f, -4.296569f, "None"),
new Vector3(-8.406331f, 2528.227f, -4.296569f, "None"),
new Vector3(-5.509378f, 2534.194f, -4.296569f, "None"),
new Vector3(1.102043f, 2536.338f, -4.296569f, "None"),
new Vector3(8.024714f, 2535.66f, -4.296569f, "None"),
new Vector3(13.7771f, 2531.926f, -4.296569f, "None"),
new Vector3(15.53208f, 2525.218f, -4.296569f, "None"),
new Vector3(19.39666f, 2520.334f, -4.296569f, "None"),
new Vector3(26.3053f, 2519.244f, -4.296569f, "None"),
new Vector3(31.07252f, 2514.534f, -4.296569f, "None"),
new Vector3(32.08603f, 2507.629f, -4.296569f, "None"),
new Vector3(32.20792f, 2500.735f, -4.296569f, "None"),
new Vector3(32.69915f, 2493.784f, -4.296569f, "None"),
new Vector3(38.39471f, 2490.469f, -4.296569f, "None"),
new Vector3(45.39016f, 2490.699f, -4.296569f, "None"),
new Vector3(52.39009f, 2490.728f, -4.296569f, "None"),
new Vector3(55.99506f, 2490.741f, -4.296569f, "None"),
new Vector3(62.99502f, 2490.766f, -4.296569f, "None"),
};


                        while(ObjectManager.Me.Position.DistanceTo2D(pathZwei.Last&lt;Vector3&gt;()) &gt; 5)
                        {
                            MovementManager.Go(pathZwei); // or MovementManager.GoLoop(path);

                            if(ObjectManager.Me.Position.DistanceTo2D(pathZwei.Last&lt;Vector3&gt;()) &lt;= 5)
                                break;
                        }


                        //MovementManager.MoveTo(leavePosStormwind);
                        /*
                        while(ObjectManager.Me.Position.DistanceTo(leavePosStormwind) &gt; 4)
                        {
                            MovementManager.MoveTo(leavePosStormwind);
                            Thread.Sleep(1000);

                        } */

                    }

                    if(Usefuls.MapZoneName.Contains("Deep"))
                    {
                        if(!GoToTask.ToPosition(enterStormwindInside))
                        {
                            GoToTask.ToPosition(enterStormwindInside);
                            Thread.Sleep(250);
                        }
                    }

                    while(Usefuls.MapZoneName.Contains("Deep"))
                    {
                        wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 250);
                        Thread.Sleep(robotManager.Helpful.Others.Random(25, 50));
                    }

                    Logging.Write("Re enable teleport ");
                    wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = true;


                    while(!GoToTask.ToPosition(enterStormwindOutside))
                    {
                        wManager.Wow.Helpers.MovementManager.Face(enterStormwindOutside);
                        GoToTask.ToPosition(enterStormwindOutside);
                        Thread.Sleep(250);
                    }

                }
                else if(Usefuls.MapZoneName.Contains("Tram") || Usefuls.MapZoneName.Contains("Ironforge"))
                {
                    Logging.Write("[FNV_Quester]: Unable to find tram, restart... .");
                    isRestarted = true;
                    restartTram("Ironforge");
                }

            }
        }
        isRestarted = false;
    }

    /*
    public static void takeTramIronforge()
    {
        Logging.Write("[FNV_Quester]: Taking Tram from Ironforge to Stormwind");

        if(!Usefuls.MapZoneName.Contains("Deep"))
        {
            while(!GoToTask.ToPosition(enterIronforgeOutside))
            {
                GoToTask.ToPosition(enterIronforgeOutside);
                Thread.Sleep(250);
            }

            wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;
            Logging.Write("[FNV_Quester]: Disable teleport during Tram");
            wManager.Wow.Helpers.MovementManager.Face(new Vector3(-4839.4, -1320.9, 501.9));

            while(!Usefuls.MapZoneName.Contains("Deep"))
            {
                wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 250);
                Thread.Sleep(robotManager.Helpful.Others.Random(25, 50));
            }
        }

        if(Usefuls.MapZoneName.Contains("Deep"))
        {
            if(!GoToTask.ToPosition(enterIronforgeInside))
            {
                GoToTask.ToPosition(enterIronforgeInside);
                Thread.Sleep(250);
            }

            GoToTask.ToPosition(new Vector3(26.31003, 9.936551, -4.29664));
            Thread.Sleep(250);
            GoToTask.ToPosition(new Vector3(17.09965, 12.71437, -4.29664));
            Thread.Sleep(250);
            GoToTask.ToPosition(new Vector3(18.14983, 22.89955, -4.29664));
            Thread.Sleep(250);

            while(!GoToTask.ToPosition(positionWaitTramIronforge))
            {
                GoToTask.ToPosition(positionWaitTramIronforge);
                Thread.Sleep(250);
            }

            wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;

            var tram = (WoWGameObject)null;

            try
            {
                tram = chooseTramIronforge();
            }
            catch
            {

            }

            if(ObjectManager.Me.Position.DistanceTo(tram.Position) &lt; 200 &amp;&amp; tram != null &amp;&amp; !tram.Position.Equals(nullVector))
            {
                Logging.Write("[FNV_Quester]: Bad circle, restart... .");
                isRestarted = true;
                restartTram("Ironforge");
                end();
            }

            if(!isRestarted)
            {

                if(tram != null &amp;&amp; tram.Position.DistanceTo(nullVector) &gt; 1)
                {


                    while(tram.Position.DistanceTo(positionTramInIronforge) &gt;= 5 &amp;&amp; Usefuls.MapZoneName.Contains("Deep") &amp;&amp; !tram.Position.Equals(nullVector))
                    {
                        Thread.Sleep(1000);
                    }


                    if(tram.Position.DistanceTo(positionTramInIronforge) &lt; 5 &amp;&amp; Usefuls.MapZoneName.Contains("Deep"))
                    {
                        Lua.LuaDoString("ClearTarget()");
                        wManager.Wow.Helpers.MovementManager.Face(positionOnTramIronforge);

                        while(ObjectManager.Me.Position.DistanceTo(positionOnTramIronforge) &gt; 2)
                        {
                            wManager.Wow.Helpers.MovementManager.Face(positionOnTramIronforge);
                            wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 125);
                            Thread.Sleep(robotManager.Helpful.Others.Random(10, 25));

                            if(ObjectManager.Me.Position.DistanceTo(playerFellDownIronforge) &lt; 4)
                            {
                                Logging.Write("[FNV_Quester]: Fell down, while trying to take tram. Restart");
                                restartTram("Ironforge");
                            }
                        }

                        GoToTask.ToPosition(positionOnTramIronforge);
                    }


                    while(tram.Position.DistanceTo(positionTramInStormwind) &gt; 5 &amp;&amp; Usefuls.MapZoneName.Contains("Deep"))
                    {
                        Thread.Sleep(3000);
                    }

                    if(ObjectManager.Me.Position.DistanceTo(positionOnTramStormwind) &lt; 5 &amp;&amp; Usefuls.MapZoneName.Contains("Deep"))
                    {

                        wManager.Wow.Helpers.Move.StrafeLeft(Move.MoveAction.PressKey, 350);

                        while(ObjectManager.Me.Position.DistanceTo(leavePosStormwind) &gt; 4)
                        {
                            wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 125);
                            Thread.Sleep(robotManager.Helpful.Others.Random(10, 25));

                        }

                    }

                    if(Usefuls.MapZoneName.Contains("Deep"))
                    {
                        if(!GoToTask.ToPosition(enterStormwindInside))
                        {
                            GoToTask.ToPosition(enterStormwindInside);
                            Thread.Sleep(250);
                        }
                    }

                    while(Usefuls.MapZoneName.Contains("Deep"))
                    {
                        wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 250);
                        Thread.Sleep(robotManager.Helpful.Others.Random(25, 50));
                    }

                    Logging.Write("Re enable teleport ");
                    wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = true;


                    while(!GoToTask.ToPosition(enterStormwindOutside))
                    {
                        wManager.Wow.Helpers.MovementManager.Face(enterStormwindOutside);
                        GoToTask.ToPosition(enterStormwindOutside);
                        Thread.Sleep(250);
                    }

                }
                else if(Usefuls.MapZoneName.Contains("Tram") || Usefuls.MapZoneName.Contains("Ironforge"))
                {
                    Logging.Write("[FNV_Quester]: Unable to find tram, restart... .");
                    isRestarted = true;
                    restartTram("Ironforge");
                }

            }
        }
        isRestarted = false;
    }
    */
}

//Additional functions for quests
public class Quests
{
    public static void abandon(string questName)
    {
        wManager.Wow.Helpers.Lua.LuaDoString("local name = '" + questName + "' for i=1,GetNumQuestLogEntries() do local questTitle, level, questTag, suggestedGroup, isHeader, isCollapsed, isComplete = GetQuestLogTitle(i) if string.find(questTitle, name) then SelectQuestLogEntry(i) SetAbandonQuest() AbandonQuest() end end");

    }

    public static bool hasFailed(string questName)
    {
        int temp = 0;
        temp = wManager.Wow.Helpers.Lua.LuaDoString&lt;int&gt;("local name = '" + questName + "'  for i=1,GetNumQuestLogEntries() do local questTitle, level, questTag, suggestedGroup, isHeader, isCollapsed, isComplete = GetQuestLogTitle(i) if string.find(questTitle, name) then SelectQuestLogEntry(i) local questTimer = GetQuestLogTimeLeft() return questTimer end end");

        if(temp &gt; 8)
        {
            return false;
        }
        else
        {
            return true;
        }
    }

    public static bool isComplete(string questName)
    {
        int temp;
        temp = wManager.Wow.Helpers.Lua.LuaDoString&lt;int&gt;("local name = '" + questName + "'  for i=1,GetNumQuestLogEntries() do local questTitle, level, questTag, isHeader, isCollapsed, isComplete = GetQuestLogTitle(i) if string.find(questTitle, name) then local questTitleZ, levelZ, questTagZ, isHeaderZ, isCollapsedZ, isCompleteZ = GetQuestLogTitle(i) return isCompleteZ end end");

        if(temp == 1)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    public static bool isFailed(string questName)
    {
        int temp;
        temp = wManager.Wow.Helpers.Lua.LuaDoString&lt;int&gt;("local name = '" + questName + "'  for i=1,GetNumQuestLogEntries() do local questTitle, level, questTag, isHeader, isCollapsed, isComplete = GetQuestLogTitle(i) if string.find(questTitle, name) then local questTitleZ, levelZ, questTagZ, isHeaderZ, isCollapsedZ, isCompleteZ = GetQuestLogTitle(i) return isCompleteZ end end");

        if(temp == -1)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
}


public class ProgressSettings : Settings
{
    public static bool inProgress = false;
        public static void Initialize()
        {
            ProgressSettings.Load();
        }

        public static void Dispose()
        {
            ProgressSettings.CurrentSettings.Save();
            //isLaunched = false;
        }

        public void Settings()
        {
            ProgressSettings.Load();
            ProgressSettings.CurrentSettings.ToForm();
            ProgressSettings.CurrentSettings.Save();
        }

    public ProgressSettings()
    {
        this.launcher = 2;
        this.dwarfStart = 1 + 1;
        this.humanStart = 1 + 1;
        this.nightelfStart = 1 + 1;
        this.dwarfHunter = 1 + 1;
        this.nightelfHunter = 1 + 1;
        this.nightelfDruid = 1 + 1;
        this.warlock = 1 + 1;
        this.kharanos = 1 + 1;
        this.elwynn = 1 + 1;
        this.westfallEins = 1 + 1;
        this.lochModanEins = 1 + 1;
        this.darkshoreEins = 10 + 1;
        this.westfallZwei = 1 + 1;
        this.lochModanZwei = 1 + 1;
        this.darkshoreZwei = 6 + 1;
        this.westfallDrei = 1 + 1;
        this.redridge = 1 + 1;
        this.duskwoodEins = 1 + 1;
        this.stonetalon = 14 + 1;
        this.darkshoreDrei = 1 + 1;
        this.duskwoodZwei = 1 + 1;
        this.wetlandsEins = 1 + 1;
        this.ashenvaleEins = 7 + 1;
        this.wetlandsZwei = 1 + 1;
        this.duskwoodDrei = 2 + 1;
        this.ashenvaleZwei = 7 + 1;
        this.duskwoodVier = 2 + 1;
        this.ashenvaleDrei = 6 + 1;
        this.thousandNeedles = 7 + 1;
        this.desolaceEins = 7 + 1;
        this.hillsbradEins = 2 + 1;
        this.stranglethornEins = 2 + 1;
        this.stranglethornZwei = 2 + 1;
        this.hillsbradZwei = 2 + 1;
        this.arathiEins = 2 + 1;
        this.stranglethornDrei = 2 + 1;
        this.dustwallowEins = 10 + 1;
        this.desolaceZwei = 9 + 1;
        this.swampOfSorrowsEins = 2 + 1;
        this.stranglethornVier = 2 + 1;
        this.badlandsEins = 2 + 1;
        this.alteracMountain = 2 + 1;
        this.badlandsZwei = 2 + 1;
        this.tanarisEins = 7 + 1;
        this.stranglethornFünf  = 2 + 1;
        this.hinterlandsEins = 2 + 1;
        this.feralasEins = 7 + 1;
        this.hinterlandsZwei = 2 + 1;

                //48+

        this.hinterlandsDrei = 2 + 1;
        this.blastedLandsEins = 2 + 1;
        this.blastedLandsZwei = 2 + 1;
        this.blastedLandsDrei = 2 + 1;
        this.burningSteppesEins = 2 + 1;
        this.burningSteppesZwei = 2 + 1;
        this.burningSteppesDrei = 2 + 1;
        this.easternPleaguelandsEins = 2 + 1;
        this.easternPleaguelandsZwei = 2 + 1;
        this.easternPleaguelandsDrei = 2 + 1;
        this.searingGorgeEins = 2 + 1;
        this.searingGorgeZwei = 2 + 1;
        this.searingGorgeDrei = 2 + 1;
        this.swampOfSorrowsZwei = 2 + 1;
        this.westernPleaguelandsEins = 2 + 1;
        this.westernPleaguelandsZwei = 2 + 1;
        this.westernPleaguelandsDrei = 2 + 1;

        //48+ Kalimdor

        this.azsharaEins = 7 + 1;
        this.azsharaZwei = 7 + 1;
        this.azsharaDrei = 7 + 1;
        this.felwoodEins = 7 + 1;
        this.felwoodZwei = 7 + 1;
        this.felwoodDrei = 7 + 1;
        this.silithusEins = 7 + 1;
        this.silithusZwei = 7 + 1;
        this.silithusDrei = 7 + 1;
        this.feralasZwei = 7 + 1;
        this.feralasDrei = 7 + 1;
        this.feralasVier = 7 + 1;
        this.tanarisZwei = 7 + 1;
        this.tanarisDrei = 7 + 1;
        this.ungoroEins = 7 + 1;
        this.ungoroZwei = 7 + 1;
        this.ungoroDrei = 7 + 1;
        this.winterspringEins = 7 + 1; 
        this.winterspringZwei = 7 + 1;
        this.winterspringDrei = 7 + 1;
        this.winterspringVier = 7 + 1;
    }
    

      public static ProgressSettings CurrentSettings { get; set; }

        public bool Save()
        {
            try
            {
                return Save(AdviserFilePathAndName("FNV_Progress", ObjectManager.Me.Name + "." + Usefuls.RealmName));
            }
            catch(Exception e)
            {
                Logging.WriteDebug("FNV_Progress =&gt; Save(): " + e);
                return false;
            }
        }

        public static bool Load()
        {
            try
            {
                if(File.Exists(AdviserFilePathAndName("FNV_Progress", ObjectManager.Me.Name + "." + Usefuls.RealmName)))
                {
                    CurrentSettings = Load&lt;ProgressSettings&gt;(AdviserFilePathAndName("FNV_Progress", ObjectManager.Me.Name + "." + Usefuls.RealmName));
                    return true;
                }

                ProgressSettings.CurrentSettings = new ProgressSettings();
            }
            catch(Exception e)
            {
                Logging.WriteDebug("FNV_Progress =&gt; Load(): " + e);
            }
            return false;
        }

    public static bool ResetCurrentCharactersProgressSaver()
    {
        try
        {
            if(File.Exists(AdviserFilePathAndName("FNV_Progress", ObjectManager.Me.Name + "." + Usefuls.RealmName)))
            {
                File.Delete(AdviserFilePathAndName("FNV_Progress", ObjectManager.Me.Name + "." + Usefuls.RealmName));
                ProgressSettings.CurrentSettings = new ProgressSettings();
                Logging.Write("[FNV_Quester]: FNV_Progress file of " + ObjectManager.Me.Name + " on server " + Usefuls.RealmName + " successfully deleted");
                return true;
            }
            else
            {
                Logging.Write("[FNV_Quester]: No FNV_Progress file found for " + ObjectManager.Me.Name + " on server " + Usefuls.RealmName);
                return false;
            }
        }
        catch(Exception e)
        {
            Logging.WriteDebug("FNV_Progress =&gt; Load(): " + e);
        }
         return false;
    }

        public int launcher { get; set; }
        public int dwarfStart { get; set; }
        public int dwarfHunter { get; set; }
        public int nightelfHunter { get; set; }
        public int nightelfDruid { get; set; }
        public int warlock { get; set; }
        public int nightelfStart { get; set; }
        public int humanStart { get; set; }
        public int kharanos { get; set; }
        public int elwynn { get; set; }
        public int westfallEins { get; set; }
        public int lochModanEins { get; set; }
        public int darkshoreEins { get; set; }
        public int westfallZwei { get; set; }
        public int lochModanZwei { get; set; }
        public int darkshoreZwei { get; set; }
        public int westfallDrei { get; set; }
        public int redridge { get; set; }
        public int duskwoodEins { get; set; }
        public int darkshoreDrei { get; set; }
        public int stonetalon { get; set; }
        public int duskwoodZwei { get; set; }
        public int wetlandsEins { get; set; }
        public int ashenvaleEins { get; set; }
        public int wetlandsZwei { get; set; }
        public int duskwoodDrei { get; set; }
        public int ashenvaleZwei { get; set; }
        public int duskwoodVier { get; set; }
        public int ashenvaleDrei { get; set; }
        public int thousandNeedles { get; set; }
        public int desolaceEins { get; set; }
        public int hillsbradEins { get; set; }
        public int stranglethornEins { get; set; }
        public int stranglethornZwei{ get; set; }
        public int hillsbradZwei { get; set; }
        public int arathiEins { get; set; }
        public int stranglethornDrei { get; set; }
        public int dustwallowEins { get; set; }
        public int desolaceZwei { get; set; }
        public int badlandsEins { get; set; }
        public int swampOfSorrowsEins { get; set; }
        public int stranglethornVier { get; set; }
        public int alteracMountain { get; set; }
        public int badlandsZwei { get; set; }
        public int tanarisEins { get; set; }
        public int stranglethornFünf { get; set; }
        public int hinterlandsEins { get; set; }
        public int feralasEins { get; set; }
        public int hinterlandsZwei { get; set; }

        //48+ Eastern Kingdoms
        public int hinterlandsDrei { get; set; }
        public int blastedLandsEins { get; set; }
        public int blastedLandsZwei { get; set; }
        public int blastedLandsDrei { get; set; }
        public int burningSteppesEins { get; set; }
        public int burningSteppesZwei { get; set; }
        public int burningSteppesDrei { get; set; }
        public int easternPleaguelandsEins { get; set; }
        public int easternPleaguelandsZwei { get; set; }
        public int easternPleaguelandsDrei { get; set; }
        public int searingGorgeEins { get; set; }
        public int searingGorgeZwei { get; set; }
        public int searingGorgeDrei { get; set; }
        public int swampOfSorrowsZwei { get; set; }
        public int westernPleaguelandsEins { get; set; }
        public int westernPleaguelandsZwei { get; set; }
        public int westernPleaguelandsDrei { get; set; }

        //48+ Kalimdor

        public int azsharaEins { get; set; }
        public int azsharaZwei { get; set; }
        public int azsharaDrei { get; set; }
        public int felwoodEins { get; set; }
        public int felwoodZwei { get; set; }
        public int felwoodDrei { get; set; }
        public int silithusEins { get; set; }
        public int silithusZwei { get; set; }
        public int silithusDrei { get; set; }
        public int feralasZwei { get; set; }
        public int feralasDrei { get; set; }
        public int feralasVier { get; set; }
        public int tanarisZwei { get; set; }
        public int tanarisDrei { get; set; }
        public int ungoroEins { get; set; }
        public int ungoroZwei { get; set; }
        public int ungoroDrei { get; set; }
        public int winterspringEins { get; set; }
        public int winterspringZwei { get; set; }
        public int winterspringDrei { get; set; }
        public int winterspringVier { get; set; }





}


/*
    //Settings   
    public class QuesterSettings
    {
        private static bool isLaunched;

        public static void Initialize()
        {
            isLaunched = true;
            FNVSettings.Load();

            while(isLaunched &amp; Products.IsStarted)
            {
                Thread.Sleep(500);
                Dispose();
            }
        }

        public static void Dispose()
        {
            FNVSettings.CurrentSettings.Save();
            //isLaunched = false;
        }

        public void Settings()
        {
            FNVSettings.Load();
            FNVSettings.CurrentSettings.ToForm();
            FNVSettings.CurrentSettings.Save();
        }
    }

    */

    [Serializable]
    public class FNVSettings : Settings
    {

        public static bool inProgress = false;
        public static void Initialize()
        {
            FNVSettings.Load();
        }

        public static void Dispose()
        {
            FNVSettings.CurrentSettings.Save();
            //isLaunched = false;
        }

        public void Settings()
        {
            FNVSettings.Load();
            FNVSettings.CurrentSettings.ToForm();
            FNVSettings.CurrentSettings.Save();
        }

        public FNVSettings()
        {
        //Completed profiles -&gt; True == completed
        this.launcher = false;
        this.dwarfStart = false;
        this.humanStart = false;
        this.nightelfStart = false;
        this.dwarfHunter = false;
        this.nightelfHunter = false;
        this.nightelfDruid = false;
        this.warlock = false;
        this.kharanos = false;
        this.elwynn = false;
        this.westfallEins = false;
        this.lochModanEins = false;
        this.darkshoreEins = false;
        this.westfallZwei = false;
        this.lochModanZwei = false;
        this.darkshoreZwei = false;
        this.westfallDrei = false;
        this.redridge = false;
        this.duskwoodEins = false;
        this.darkshoreDrei = false;
        this.stonetalon = false;
        this.duskwoodZwei = false;
        this.wetlandsEins = false;
        this.ashenvaleEins = false;
        this.wetlandsZwei = false;
        this.duskwoodDrei = false;
        this.ashenvaleZwei = false;
        this.duskwoodVier = false;
        this.ashenvaleDrei = false;
        this.thousandNeedles = false;
        this.desolaceEins = false; 
        this.hillsbradEins = false; 
        this.stranglethornEins = false;
        this.stranglethornZwei = false;
        this.hillsbradZwei = false;
        this.arathiEins = false;
        this.stranglethornDrei = false;
        this.dustwallowEins = false; 
        this.desolaceZwei = false; 
        this.swampOfSorrowsEins = false; 
        this.stranglethornVier = false; 
        this.badlandsEins = false; 
        this.alteracMountain = false;
        this.badlandsZwei = false;
        this.tanarisEins = false;
        this.stranglethornFünf  = false;
        this.hinterlandsEins = false;
        this.feralasEins = false; 
        this.hinterlandsZwei = false; 

        //48+

        this.hinterlandsDrei = false; 
        this.blastedLandsEins = false; 
        this.blastedLandsZwei = false; 
        this.blastedLandsDrei = false; 
        this.burningSteppesEins = false; 
        this.burningSteppesZwei = false; 
        this.burningSteppesDrei = false; 
        this.easternPleaguelandsEins = false; 
        this.easternPleaguelandsZwei = false; 
        this.easternPleaguelandsDrei = false; 
        this.searingGorgeEins = false; 
        this.searingGorgeZwei = false; 
        this.searingGorgeDrei = false; 
        this.swampOfSorrowsZwei = false; 
        this.westernPleaguelandsEins = false; 
        this.westernPleaguelandsZwei = false; 
        this.westernPleaguelandsDrei = false; 

        //48+ Kalimdor

        this.azsharaEins = false; 
        this.azsharaZwei = false; 
        this.azsharaDrei = false; 
        this.felwoodEins = false; 
        this.felwoodZwei = false; 
        this.felwoodDrei = false; 
        this.silithusEins = false; 
        this.silithusZwei = false; 
        this.silithusDrei = false; 
        this.feralasZwei = false; 
        this.feralasDrei = false; 
        this.feralasVier = false; 
        this.tanarisZwei = false; 
        this.tanarisDrei = false; 
        this.ungoroEins = false; 
        this.ungoroZwei = false; 
        this.ungoroDrei = false; 
        this.winterspringEins = false; 
        this.winterspringZwei = false; 
        this.winterspringDrei = false; 
        this.winterspringVier = false; 

            //FlightMaster discovered
            //Eastern Kingdoms
            this.ArathiHighlands = false;
            this.Wetlands = false;
            this.WesternPlaguelands = false;
            this.EasternPlaguelands = false;
            this.HillsbradFoothills = false;
            this.TheHinterlands = false;
            this.LochModan = false;
            this.Ironforge = false;
            this.SearingGorge = false;
            this.BurningSteppes = false;
            this.RedridgeMountains = false;
            this.Stormwind = false;
            this.Westfall = false;
            this.Duskwood = false;
            this.StranglethornValley = false;

            //Kalimdor
            this.Teldrassil = false;
            this.Darkshore = false;
            this.Winterspring = false;
            this.Azshara = false;
            this.Ashenvale = false;
            this.StonetalonMountains = false;
            this.Desolace = false;
            this.TheBarrens = false;
            this.Tanaris = false;
            this.FeralasFeathermoon = false;
            this.FeralasThalanaar = false;
            this.UngoroCrater = false;
            this.DustwallowMarsh = false;
            this.Silithus = false;
            this.Moonglade = false;
            this.Felwood = false;

        }

    public static void flightMasterSaveChanges(FlightMasterDB needToChange)
    {

        if(needToChange.name.Contains("Arathi"))
            CurrentSettings.ArathiHighlands = true;

        if(needToChange.name.Contains("Wetlands"))
            CurrentSettings.Wetlands = true;

        if(needToChange.name.Contains("Western"))
            CurrentSettings.WesternPlaguelands = true;

        if(needToChange.name.Contains("Eastern"))
            CurrentSettings.EasternPlaguelands = true;

        if(needToChange.name.Contains("Hillsbrad"))
            CurrentSettings.HillsbradFoothills = true;

        if(needToChange.name.Contains("Hinterlands"))
            CurrentSettings.TheHinterlands = true;

        if(needToChange.name.Contains("Modan"))
            CurrentSettings.LochModan = true;

        if(needToChange.name.Contains("Ironforge"))
            CurrentSettings.Ironforge = true;

        if(needToChange.name.Contains("Searing"))
            CurrentSettings.SearingGorge = true;

        if(needToChange.name.Contains("Burning"))
            CurrentSettings.BurningSteppes = true;

        if(needToChange.name.Contains("Redridge"))
            CurrentSettings.RedridgeMountains = true;

        if(needToChange.name.Contains("Stormwind"))
            CurrentSettings.Stormwind = true;

        if(needToChange.name.Contains("Westfall"))
            CurrentSettings.Westfall = true;

        if(needToChange.name.Contains("Duskwood"))
            CurrentSettings.Duskwood = true;

        if(needToChange.name.Contains("Stranglethorn"))
            CurrentSettings.StranglethornValley = true;


        if(needToChange.name.Contains("Teldrassil"))
            CurrentSettings.Teldrassil = true;

        if(needToChange.name.Contains("Darkshore"))
            CurrentSettings.Darkshore = true;

        if(needToChange.name.Contains("Winterspring"))
            CurrentSettings.Winterspring = true;

        if(needToChange.name.Contains("Azshara"))
            CurrentSettings.Azshara = true;

        if(needToChange.name.Contains("Ashenvale"))
            CurrentSettings.Ashenvale = true;

        if(needToChange.name.Contains("Stonetalon"))
            CurrentSettings.StonetalonMountains = true;

        if(needToChange.name.Contains("Desolace"))
            CurrentSettings.Desolace = true;

        if(needToChange.name.Contains("TheBarrens"))
            CurrentSettings.TheBarrens = true;

        if(needToChange.name.Contains("Tanaris"))
            CurrentSettings.Tanaris = true;

        if(needToChange.name.Contains("TheBarrens"))
            CurrentSettings.TheBarrens = true;

        if(needToChange.name.Contains("Feathermoon"))
            CurrentSettings.FeralasFeathermoon = true;

        if(needToChange.name.Contains("Thalanaar"))
            CurrentSettings.FeralasThalanaar = true;

        if(needToChange.name.Contains("ro Crater"))
            CurrentSettings.UngoroCrater = true;

        if(needToChange.name.Contains("Dustwallow"))
            CurrentSettings.DustwallowMarsh = true;

        if(needToChange.name.Contains("Silithus"))
            CurrentSettings.Silithus = true;

        if(needToChange.name.Contains("Felwood"))
            CurrentSettings.Felwood = true;
            
            FNVSettings.CurrentSettings.Save();
            Logging.Write("[FNV_Quester]: Settings saved of Flight Master " + needToChange.name);
            return;
    }

        public static void flightMasterSaveChanges(String needToChange)
    {

        if(needToChange.Contains("Arathi"))
            CurrentSettings.ArathiHighlands = true;

        if(needToChange.Contains("Wetlands"))
            CurrentSettings.Wetlands = true;

        if(needToChange.Contains("Western"))
            CurrentSettings.WesternPlaguelands = true;

        if(needToChange.Contains("Eastern"))
            CurrentSettings.EasternPlaguelands = true;

        if(needToChange.Contains("Hillsbrad"))
            CurrentSettings.HillsbradFoothills = true;

        if(needToChange.Contains("Hinterlands"))
            CurrentSettings.TheHinterlands = true;

        if(needToChange.Contains("Modan"))
            CurrentSettings.LochModan = true;

        if(needToChange.Contains("Ironforge"))
            CurrentSettings.Ironforge = true;

        if(needToChange.Contains("Searing"))
            CurrentSettings.SearingGorge = true;

        if(needToChange.Contains("Burning"))
            CurrentSettings.BurningSteppes = true;

        if(needToChange.Contains("Redridge"))
            CurrentSettings.RedridgeMountains = true;

        if(needToChange.Contains("Stormwind"))
            CurrentSettings.Stormwind = true;

        if(needToChange.Contains("Westfall"))
            CurrentSettings.Westfall = true;

        if(needToChange.Contains("Duskwood"))
            CurrentSettings.Duskwood = true;

        if(needToChange.Contains("Stranglethorn"))
            CurrentSettings.StranglethornValley = true;

        if(needToChange.Contains("Blasted"))

        if(needToChange.Contains("Teldrassil"))
            CurrentSettings.Teldrassil = true;

        if(needToChange.Contains("Darkshore"))
            CurrentSettings.Darkshore = true;

        if(needToChange.Contains("Winterspring"))
            CurrentSettings.Winterspring = true;

        if(needToChange.Contains("Azshara"))
            CurrentSettings.Azshara = true;

        if(needToChange.Contains("Ashenvale"))
            CurrentSettings.Ashenvale = true;

        if(needToChange.Contains("Stonetalon"))
            CurrentSettings.StonetalonMountains = true;

        if(needToChange.Contains("Desolace"))
            CurrentSettings.Desolace = true;

        if(needToChange.Contains("TheBarrens"))
            CurrentSettings.TheBarrens = true;

        if(needToChange.Contains("Tanaris"))
            CurrentSettings.Tanaris = true;

        if(needToChange.Contains("TheBarrens"))
            CurrentSettings.TheBarrens = true;

        if(needToChange.Contains("Feathermoon"))
            CurrentSettings.FeralasFeathermoon = true;

        if(needToChange.Contains("Thalanaar"))
            CurrentSettings.FeralasThalanaar = true;

        if(needToChange.Contains("ro Crater"))
            CurrentSettings.UngoroCrater = true;

        if(needToChange.Contains("Dustwallow"))
            CurrentSettings.DustwallowMarsh = true;

        if(needToChange.Contains("Silithus"))
            CurrentSettings.Silithus = true;

        if(needToChange.Contains("Felwood"))
            CurrentSettings.Felwood = true;
            
            FNVSettings.CurrentSettings.Save();
            Logging.Write("[FNV_Quester]: Settings saved of Flight Master " + needToChange);
            return;
    }

        public static FNVSettings CurrentSettings { get; set; }

        public bool Save()
        {
            try
            {
                return Save(AdviserFilePathAndName("FNV_Quester", ObjectManager.Me.Name + "." + Usefuls.RealmName));
            }
            catch(Exception e)
            {
                Logging.WriteDebug("FNV_Quester =&gt; Save(): " + e);
                return false;
            }
        }

        public static bool Load()
        {
            try
            {
                if(File.Exists(AdviserFilePathAndName("FNV_Quester", ObjectManager.Me.Name + "." + Usefuls.RealmName)))
                {
                    CurrentSettings = Load&lt;FNVSettings&gt;(AdviserFilePathAndName("FNV_Quester", ObjectManager.Me.Name + "." + Usefuls.RealmName));
                    return true;
                }

                FNVSettings.CurrentSettings = new FNVSettings();
            }
            catch(Exception e)
            {
                Logging.WriteDebug("FNV_Quester =&gt; Load(): " + e);
            }
            return false;
        }

        //Finished profiles -&gt; True == completed
        public bool launcher { get; set; }
        public bool dwarfStart { get; set; }
        public bool dwarfHunter { get; set; }
        public bool nightelfHunter { get; set; }
        public bool nightelfDruid { get; set; }
        public bool warlock { get; set; }
        public bool nightelfStart { get; set; }
        public bool humanStart { get; set; }
        public bool kharanos { get; set; }
        public bool elwynn { get; set; }
        public bool westfallEins { get; set; }
        public bool lochModanEins { get; set; }
        public bool darkshoreEins { get; set; }
        public bool westfallZwei { get; set; }
        public bool lochModanZwei { get; set; }
        public bool darkshoreZwei { get; set; }
        public bool westfallDrei { get; set; }
        public bool redridge { get; set; }
        public bool duskwoodEins { get; set; }
        public bool darkshoreDrei { get; set; }
        public bool stonetalon { get; set; }
        public bool duskwoodZwei { get; set; }
        public bool wetlandsEins { get; set; }
        public bool ashenvaleEins { get; set; }
        public bool wetlandsZwei { get; set; }
        public bool duskwoodDrei { get; set; }
        public bool ashenvaleZwei { get; set; }
        public bool duskwoodVier { get; set; }
        public bool ashenvaleDrei { get; set; }
        public bool thousandNeedles { get; set; }
        public bool desolaceEins { get; set; }
        public bool hillsbradEins { get; set; }
        public bool stranglethornEins { get; set; }
        public bool stranglethornZwei{ get; set; }
        public bool hillsbradZwei { get; set; }
        public bool arathiEins { get; set; }
        public bool stranglethornDrei { get; set; }
        public bool dustwallowEins { get; set; }
        public bool desolaceZwei { get; set; }
        public bool swampOfSorrowsEins { get; set; }
        public bool stranglethornVier { get; set; }
        public bool badlandsEins { get; set; }
        public bool alteracMountain { get; set; }
        public bool badlandsZwei { get; set; }
        public bool tanarisEins { get; set; }
        public bool stranglethornFünf { get; set; }
        public bool hinterlandsEins { get; set; }
        public bool feralasEins { get; set; }
        public bool hinterlandsZwei { get; set; }

                //48+ Eastern Kingdoms
        public bool hinterlandsDrei { get; set; }
        public bool blastedLandsEins { get; set; }
        public bool blastedLandsZwei { get; set; }
        public bool blastedLandsDrei { get; set; }
        public bool burningSteppesEins { get; set; }
        public bool burningSteppesZwei { get; set; }
        public bool burningSteppesDrei { get; set; }
        public bool easternPleaguelandsEins { get; set; }
        public bool easternPleaguelandsZwei { get; set; }
        public bool easternPleaguelandsDrei { get; set; }
        public bool searingGorgeEins { get; set; }
        public bool searingGorgeZwei { get; set; }
        public bool searingGorgeDrei { get; set; }
        public bool swampOfSorrowsZwei { get; set; }
        public bool westernPleaguelandsEins { get; set; }
        public bool westernPleaguelandsZwei { get; set; }
        public bool westernPleaguelandsDrei { get; set; }

        //48+ Kalimdor

        public bool azsharaEins { get; set; }
        public bool azsharaZwei { get; set; }
        public bool azsharaDrei { get; set; }
        public bool felwoodEins { get; set; }
        public bool felwoodZwei { get; set; }
        public bool felwoodDrei { get; set; }
        public bool silithusEins { get; set; }
        public bool silithusZwei { get; set; }
        public bool silithusDrei { get; set; }
        public bool feralasZwei { get; set; }
        public bool feralasDrei { get; set; }
        public bool feralasVier { get; set; }
        public bool tanarisZwei { get; set; }
        public bool tanarisDrei { get; set; }
        public bool ungoroEins { get; set; }
        public bool ungoroZwei { get; set; }
        public bool ungoroDrei { get; set; }
        public bool winterspringEins { get; set; }
        public bool winterspringZwei { get; set; }
        public bool winterspringDrei { get; set; }
        public bool winterspringVier { get; set; }



       // public bool hinterlandsZwei { get; set; }

        public bool defaultSettings { get; set; }
       // public bool dwarfStart { get; set; }
       // public bool nightelfStart { get; set; }
        //public bool humanStart { get; set; }
      //  public bool westfallEins { get; set; }
        public bool lochModan { get; set; }
        public bool auberdine { get; set; }
       // public bool westfallZwei { get; set; }
        public bool lakeshire { get; set; }
        public bool wetlands { get; set; }
        public bool ashenvale { get; set; }
       // public bool thousandNeedles { get; set; }
        public bool dustwallow { get; set; }
        public bool badlands { get; set; }
        public bool alterac { get; set; }
        public bool swampOfSorrows { get; set; }
        public bool tanaris { get; set; }
        public bool stranglethorn { get; set; }
        //public bool hinterlandsEins { get; set; }
        public bool feralas { get; set; }
       // public bool hinterlandsZwei { get; set; }

        //FlightMaster
        //Eastern Kingdoms
        public bool Stormwind { get; set; }
        public bool Westfall { get; set; }
        public bool RedridgeMountains { get; set; }
        public bool Duskwood { get; set; }
        public bool StranglethornValley { get; set; }
        public bool Ironforge { get; set; }
        public bool BurningSteppes { get; set; }
        public bool SearingGorge { get; set; }
        public bool LochModan { get; set; }
        public bool Wetlands { get; set; }
        public bool ArathiHighlands { get; set; }
        public bool HillsbradFoothills { get; set; }
        public bool WesternPlaguelands { get; set; }
        public bool EasternPlaguelands { get; set; }
        public bool TheHinterlands { get; set; }

        //Kalimdor
        public bool Ashenvale { get; set; }
        public bool Azshara { get; set; }
        public bool Darkshore { get; set; }
        public bool Teldrassil { get; set; }
        public bool Desolace { get; set; }
        public bool DustwallowMarsh { get; set; }
        public bool Felwood { get; set; }
        public bool FeralasFeathermoon { get; set; }
        public bool FeralasThalanaar { get; set; }
        public bool Moonglade { get; set; }
        public bool Silithus { get; set; }
        public bool StonetalonMountains { get; set; }
        public bool Tanaris { get; set; }
        public bool TheBarrens { get; set; }
        public bool UngoroCrater { get; set; }
        public bool Winterspring { get; set; }

    }

    //Buy and check bags
    public class bags
    {
        public static bool bagsStarted = false;

        public static int bagsEquipped()
        {
            int returnValue = 0;
            string empty = "";

            for(int i = 20; i &lt;= 23; i++)
            {
                empty = wManager.Wow.Helpers.Lua.LuaDoString&lt;string&gt;("return GetInventoryItemLink('player', " + i + ")");

                if(empty.Contains("o"))
                    returnValue++;
            }

            return returnValue;
        }

        public static string checkMoney()
        {
            string returnVariableNameZ = "";

            returnVariableNameZ = wManager.Wow.Helpers.Lua.LuaDoString("returnVariableNameZ = GetMoney() return returnVariableNameZ", returnVariableNameZ);

            return returnVariableNameZ;
        }

        public static bool canEquip()
        {
            string returnVariableName = "";

            returnVariableName = wManager.Wow.Helpers.Lua.LuaDoString("returnVariableName = GetInventoryItemLink('player', 23 ) return returnVariableName", returnVariableName);


            if(returnVariableName.Equals(""))
            {
                return true;
            }
            else
            {
                return false;
            }

        }

    }


    //Abandon Quests
    public class abandonQuest
    {

        public static void abandon(string questName)
        {

            string name = questName;

            wManager.Wow.Helpers.Lua.LuaDoString("local name = '" + name + "' for i=1,GetNumQuestLogEntries() do local questTitle, level, questTag, suggestedGroup, isHeader, isCollapsed, isComplete = GetQuestLogTitle(i) if string.find(questTitle, name) then SelectQuestLogEntry(i) SetAbandonQuest() AbandonQuest() end end");


        }

    }



    //Throw away items - by Reapler
    public class throwAway
    {
        public static int GetItemQuantity(string itemName)
        {
            var execute =
                "local itemCount = 0; " +
                "for b=0,4 do " +
                    "if GetBagName(b) then " +
                        "for s=1, GetContainerNumSlots(b) do " +
                            "local itemLink = GetContainerItemLink(b, s) " +
                            "if itemLink then " +
                                "local _, stackCount = GetContainerItemInfo(b, s)\t " +
                                "if string.find(itemLink, \"" + itemName + "\") then " +
                                    "itemCount = itemCount + stackCount; " +
                                "end " +
                            "end " +
                        "end " +
                    "end " +
                "end; " +
                "return itemCount; ";
            return Lua.LuaDoString&lt;int&gt;(execute);
        }

        /// &lt;summary&gt;
        /// Used to delete all items by name.
        /// &lt;/summary&gt;
        /// &lt;param name="itemName"&gt;The item to delete.&lt;/param&gt;
        /// &lt;param name="leaveAmount"&gt;The amount of items which remain in the bag.&lt;/param&gt;
        /// &lt;remarks&gt;Bug at links with "-"&lt;/remarks&gt;
        public static void DeleteItems(string itemName, int leaveAmount)
        {
            var itemQuantity = GetItemQuantity(itemName) - leaveAmount;
            if(string.IsNullOrWhiteSpace(itemName) || itemQuantity &lt;= 0)
                return;
            var execute =
                "local itemCount = " + itemQuantity + "; " +
                "local deleted = 0; " +
                "for b=0,4 do " +
                    "if GetBagName(b) then " +
                        "for s=1, GetContainerNumSlots(b) do " +
                            "local itemLink = GetContainerItemLink(b, s) " +
                            "if itemLink then " +
                                "local _, stackCount = GetContainerItemInfo(b, s)\t " +
                                "local leftItems = itemCount - deleted; " +
                                "if string.find(itemLink, \"" + itemName + "\") and leftItems &gt; 0 then " +
                                    "if stackCount &lt;= 1 then " +
                                        "PickupContainerItem(b, s); " +
                                        "DeleteCursorItem(); " +
                                        "deleted = deleted + 1; " +
                                    "else " +
                                        "if (leftItems &gt; stackCount) then " +
                                            "SplitContainerItem(b, s, stackCount); " +
                                            "DeleteCursorItem(); " +
                                            "deleted = deleted + stackCount; " +
                                        "else " +
                                            "SplitContainerItem(b, s, leftItems); " +
                                            "DeleteCursorItem(); " +
                                            "deleted = deleted + leftItems; " +
                                        "end " +
                                    "end " +
                                "end " +
                            "end " +
                        "end " +
                    "end " +
                "end; ";
            Lua.LuaDoString(execute);
        }
    }


public class Darnassus
{
    private static Vector3 darnassusEnterPos = new Vector3(8775.104, 962.8825, 30.33067);
    private static Vector3 darnassusLeavePos = new Vector3(9945.827, 2598.705, 1316.187);

    public static void enter()
    {
        Logging.Write("[FNV_Quester]: Moving to position to enter Darnassus portal...");

        GoToTask.ToPosition(darnassusEnterPos);

        Logging.Write("[FNV_Quester]: Enter Darnassus, disable teleport...");

        wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;

        Vector3 pos = new Vector3(8812.807f, 972.6884f, 32.50122f);

        while(ObjectManager.Me.Position.DistanceTo(pos) &gt; 1 &amp;&amp; Usefuls.SubMapZoneName.Contains("theran Village"))
        {
            wManager.Wow.Helpers.MovementManager.Face(pos);
            wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 125);
            Thread.Sleep(robotManager.Helpful.Others.Random(10, 25));
        }

        Logging.Write("[FNV_Quester]: Reenable teleport");

        wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = true;
    }

    public static void leave()
    {
        Logging.Write("[FNV_Quester]: Moving to position to leave Darnassus portal...");

        GoToTask.ToPosition(darnassusLeavePos);

        Logging.Write("[FNV_Quester]: Leave Darnassus, disable teleport...");

        wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;

        Vector3 pos = new Vector3(9946.378f, 2642.551f, 1316.749f);

        while(ObjectManager.Me.Position.DistanceTo(pos) &gt; 1 &amp;&amp; Usefuls.MapZoneName.Contains("Darnassus"))
        {
            wManager.Wow.Helpers.MovementManager.Face(pos);
            wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 125);
            Thread.Sleep(robotManager.Helpful.Others.Random(10, 25));
        }

        Logging.Write("[FNV_Quester]: Reenable teleport");
        wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = true;
    }
}

    [Serializable]
    public class FNVQuesterFlightMaster : Settings
    {
        public FNVQuesterFlightMaster()
        {
            //FlightMaster discovered
            //Eastern Kingdoms
            this.ArathiHighlands = false;
            this.Wetlands = false;
            this.WesternPlaguelands = false;
            this.EasternPlaguelands = false;
            this.HillsbradFoothills = false;
            this.TheHinterlands = false;
            this.LochModan = false;
            this.Ironforge = false;
            this.SearingGorge = false;
            this.BurningSteppes = false;
            this.RedridgeMountains = false;
            this.Stormwind = false;
            this.Westfall = false;
            this.Duskwood = false;
            this.StranglethornValley = false;

            //Kalimdor
            this.Teldrassil = false;
            this.Darkshore = false;
            this.Winterspring = false;
            this.Azshara = false;
            this.Ashenvale = false;
            this.StonetalonMountains = false;
            this.Desolace = false;
            this.TheBarrens = false;
            this.Tanaris = false;
            this.FeralasFeathermoon = false;
            this.FeralasThalanaar = false;
            this.UngoroCrater = false;
            this.DustwallowMarsh = false;
            this.Silithus = false;
            this.Moonglade = false;
            this.Felwood = false;

        }

    public static void flightMasterSaveChanges(FlightMasterDB needToChange)
    {

        if(needToChange.name.Contains("Arathi"))
            CurrentSettings.ArathiHighlands = true;

        if(needToChange.name.Contains("Wetlands"))
            CurrentSettings.Wetlands = true;

        if(needToChange.name.Contains("Western"))
            CurrentSettings.WesternPlaguelands = true;

        if(needToChange.name.Contains("Eastern"))
            CurrentSettings.EasternPlaguelands = true;

        if(needToChange.name.Contains("Hillsbrad"))
            CurrentSettings.HillsbradFoothills = true;

        if(needToChange.name.Contains("Hinterlands"))
            CurrentSettings.TheHinterlands = true;

        if(needToChange.name.Contains("Modan"))
            CurrentSettings.LochModan = true;

        if(needToChange.name.Contains("Ironforge"))
            CurrentSettings.Ironforge = true;

        if(needToChange.name.Contains("Searing"))
            CurrentSettings.SearingGorge = true;

        if(needToChange.name.Contains("Burning"))
            CurrentSettings.BurningSteppes = true;

        if(needToChange.name.Contains("Redridge"))
            CurrentSettings.RedridgeMountains = true;

        if(needToChange.name.Contains("Stormwind"))
            CurrentSettings.Stormwind = true;

        if(needToChange.name.Contains("Westfall"))
            CurrentSettings.Westfall = true;

        if(needToChange.name.Contains("Duskwood"))
            CurrentSettings.Duskwood = true;

        if(needToChange.name.Contains("Stranglethorn"))
            CurrentSettings.StranglethornValley = true;


        if(needToChange.name.Contains("Teldrassil"))
            CurrentSettings.Teldrassil = true;

        if(needToChange.name.Contains("Darkshore"))
            CurrentSettings.Darkshore = true;

        if(needToChange.name.Contains("Winterspring"))
            CurrentSettings.Winterspring = true;

        if(needToChange.name.Contains("Azshara"))
            CurrentSettings.Azshara = true;

        if(needToChange.name.Contains("Ashenvale"))
            CurrentSettings.Ashenvale = true;

        if(needToChange.name.Contains("Stonetalon"))
            CurrentSettings.StonetalonMountains = true;

        if(needToChange.name.Contains("Desolace"))
            CurrentSettings.Desolace = true;

        if(needToChange.name.Contains("Tanaris"))
            CurrentSettings.Tanaris = true;

        if(needToChange.name.Contains("The Barrens"))
            CurrentSettings.TheBarrens = true;

        if(needToChange.name.Contains("Feathermoon"))
            CurrentSettings.FeralasFeathermoon = true;

        if(needToChange.name.Contains("Thalanaar"))
            CurrentSettings.FeralasThalanaar = true;

        if(needToChange.name.Contains("ro Crater"))
            CurrentSettings.UngoroCrater = true;

        if(needToChange.name.Contains("Dustwallow"))
            CurrentSettings.DustwallowMarsh = true;

        if(needToChange.name.Contains("Silithus"))
            CurrentSettings.Silithus = true;

        if(needToChange.name.Contains("Felwood"))
            CurrentSettings.Felwood = true;

        FNVQuesterFlightMaster.CurrentSettings.Save();
        Logging.Write("[FNV_FlightMaster]: Settings saved of Flight Master " + needToChange.name);
        return;
    }

        public static FNVQuesterFlightMaster CurrentSettings { get; set; }

        public bool Save()
        {
            try
            {
                return Save(AdviserFilePathAndName("FNVQuesterFlightMaster", ObjectManager.Me.Name + "." + Usefuls.RealmName));
            }
            catch(Exception e)
            {
                Logging.WriteDebug("FNVQuesterFlightMaster =&gt; Save(): " + e);
                return false;
            }
        }

        public static bool Load()
        {
            try
            {
                if(File.Exists(AdviserFilePathAndName("FNVQuesterFlightMaster", ObjectManager.Me.Name + "." + Usefuls.RealmName)))
                {
                    CurrentSettings = Load&lt;FNVQuesterFlightMaster&gt;(AdviserFilePathAndName("FNVQuesterFlightMaster", ObjectManager.Me.Name + "." + Usefuls.RealmName));
                    return true;
                }

                FNVQuesterFlightMaster.CurrentSettings = new FNVQuesterFlightMaster();
            }
            catch(Exception e)
            {
                Logging.WriteDebug("FNVQuesterFlightMaster =&gt; Load(): " + e);
            }
            return false;
        }


        //FlightMaster
        //Eastern Kingdoms
        public bool Stormwind { get; set; }
        public bool Westfall { get; set; }
        public bool RedridgeMountains { get; set; }
        public bool Duskwood { get; set; }
        public bool StranglethornValley { get; set; }
        public bool Ironforge { get; set; }
        public bool BurningSteppes { get; set; }
        public bool SearingGorge { get; set; }
        public bool LochModan { get; set; }
        public bool Wetlands { get; set; }
        public bool ArathiHighlands { get; set; }
        public bool HillsbradFoothills { get; set; }
        public bool WesternPlaguelands { get; set; }
        public bool EasternPlaguelands { get; set; }
        public bool TheHinterlands { get; set; }

        //Kalimdor

        public bool Ashenvale { get; set; }
        public bool Azshara { get; set; }
        public bool Darkshore { get; set; }
        public bool Teldrassil { get; set; }
        public bool Desolace { get; set; }
        public bool DustwallowMarsh { get; set; }
        public bool Felwood { get; set; }
        public bool FeralasFeathermoon { get; set; }
        public bool FeralasThalanaar { get; set; }
        public bool Moonglade { get; set; }
        public bool Silithus { get; set; }
        public bool StonetalonMountains { get; set; }
        public bool Tanaris { get; set; }
        public bool TheBarrens { get; set; }
        public bool UngoroCrater { get; set; }
        public bool Winterspring { get; set; }

    }

public class Boat
{
    private static bool _boatTaken = false;

    public static void menethilToAuberdine()
    {

        // Settings
        var zeppelinEntryId = 176310; // Zeppelin/Ship EntryId
                                      // From
        var fromZeppelinWaitPosition = new Vector3(-3709.475, -575.0988, 0); // Position where Zeppelin/Ship waits players (from)
        var fromPlayerWaitPosition = new Vector3(-3727.4, -581.3, 6.2); // Position where the player waits Zeppelin/Ship (from)
        var fromPlayerInZeppelinPosition = new Vector3(-3713.333, -571.7416, 6.098111); // Position where the player waits in the Zeppelin/Ship (from)
                                                                                        // To
        var toZeppelinWaitPosition = new Vector3(6406.216, 823.0809, 0); // Position where Zeppelin/Ship waits players (to)
        var toPlayerLeavePosition = new Vector3(6461.408, 806.1595, 6.770809); // Position to go out the Zeppelin/Ship (to)
                                                                               //Pos1
        var enterPos1 = new Vector3(-3724.827, -581.0698, 6.191196);
        //Pos2
        var enterPos2 = new Vector3(-3723.727, -580.3727, 6.184784);
        _boatTaken = false;

        if(!_boatTaken)
        {
            // Change WRobot settings:
            Logging.Write("[FNV_Quester]: Taking boat from Menethil to Auberdine");
            wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;
            wManager.wManagerSetting.CurrentSetting.Repair = false;
            wManager.wManagerSetting.CurrentSetting.Selling = false;
            wManager.wManagerSetting.CurrentSetting.UsePathsFinder = false;

            // Code:
            if(!Conditions.InGameAndConnectedAndProductStartedNotInPause)
                return;

            while(Products.IsStarted &amp;&amp; !_boatTaken)
            {
                while(Usefuls.ContinentId != (int)ContinentId.Kalimdor)
                {
                    if(!ObjectManager.Me.InTransport)
                    {
                        if(GoToTask.ToPosition(fromPlayerWaitPosition))
                        {
                            var zeppelin = ObjectManager.GetWoWGameObjectByEntry(zeppelinEntryId).OrderBy(o =&gt; o.GetDistance).FirstOrDefault();
                            if(zeppelin != null &amp;&amp; zeppelin.Position.DistanceTo(fromZeppelinWaitPosition) &lt; 1)
                            {

                                MovementManager.MoveTo(enterPos1);
                                if(GoToTask.ToPosition(enterPos1))
                                    MovementManager.MoveTo(enterPos2);

                                Lua.LuaDoString("ClearTarget()");

                                //wManager.Wow.Helpers.MovementManager.Face(new Vector3(-3713.333, -571.7416, 6.098111));

                                MovementManager.MoveTo(fromPlayerInZeppelinPosition);
                            }
                        }
                    }
                }
                while(Usefuls.ContinentId == (int)ContinentId.Kalimdor)
                {
                    if(ObjectManager.Me.InTransport)
                    {
                        var zeppelin = ObjectManager.GetWoWGameObjectByEntry(zeppelinEntryId).OrderBy(o =&gt; o.GetDistance).FirstOrDefault();
                        if(zeppelin != null &amp;&amp; zeppelin.Position.DistanceTo(toZeppelinWaitPosition) &lt; 1)
                        {
                            MovementManager.MoveTo(toPlayerLeavePosition);
                            break;
                        }
                    }
                }

                Logging.Write("[FNV_Quester]: Boat taken from Menethil to Auberdine");

                wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = true;
                wManager.wManagerSetting.CurrentSetting.Repair = true;
                wManager.wManagerSetting.CurrentSetting.Selling = true;
                wManager.wManagerSetting.CurrentSetting.UsePathsFinder = true;
                _boatTaken = true;
            }
            return;
        }
        return;
    }
}

public class Key
{
    public static bool haveKey(int keyId)
    {
        bool haveKey = Lua.LuaDoString&lt;bool&gt;("local itemIdSearch = " + keyId + "; local bag = KEYRING_CONTAINER; for slot = 1,MAX_CONTAINER_ITEMS do local itemLink = GetContainerItemLink(bag,slot); local _, itemCount = GetContainerItemInfo(bag,slot); if itemLink and itemCount then local _,_,itemId = string.find(itemLink, '.*|Hitem:(%d+):.*'); if itemId and tonumber(itemId) == itemIdSearch then return true end end end return false");
        return haveKey;
    }
}




public class Authentication
{
    
    private readonly string orderId;
    private readonly string productId;
    private readonly string wRobotAuthKey;

    private readonly BackgroundWorker _validationThread = new BackgroundWorker();
    private bool _isRunning = false;
    private string authUrl;

    public Authentication(string orderId, string productId)
    {
    
        return;  if (orderId == null)
        {
            MessageBox.Show("You need to enter your transaction id (from your Rocketr email) into the plugin settings to use this!");
        }

        this.orderId = orderId;
        this.productId = productId;

        this.wRobotAuthKey = robotManager.Helpful.Others.StringBetween(authManager.LoginServer.GetSubcriptionInfoThread(), robotManager.Translate.Get("License Key") + ": ", "...  - " + robotManager.Translate.Get("Subscription time expire"));
            authUrl = "http://51.38.127.249:8080/authenticate?orderId=" + orderId.Trim() + "&amp;productId=" + productId + "&amp;wRobotAuthKey=" + wRobotAuthKey;
        


        _isRunning = true;
        _validationThread.DoWork += CheckValidiation;
        _validationThread.RunWorkerAsync();
    }
    
    ~Authentication()
    {
        _isRunning = false;
        _validationThread.DoWork -= CheckValidiation;
        _validationThread.Dispose();
    }

    private void CheckValidiation(object sender, DoWorkEventArgs e)
    {
        while (Products.IsStarted &amp;&amp; _isRunning)
        {
            try
            {
                bool timedOut = false;
                HttpWebResponse content = null;
                try
                {
                    var request = (HttpWebRequest)WebRequest.Create(authUrl);
                    request.Timeout = 30000;
                    request.ReadWriteTimeout = 30000;
                    content = (HttpWebResponse)request.GetResponse();
                }
                catch (Exception ex)
                {
                    timedOut = true;
                }
                
                //give it another try
                if ((content != null &amp;&amp; content.StatusCode != HttpStatusCode.OK) || timedOut)
                {
                    Thread.Sleep(60 * 1000);
                    try
                    {
                        var request = (HttpWebRequest)WebRequest.Create(authUrl);
                        request.Timeout = 30000;
                        request.ReadWriteTimeout = 30000;
                        content = (HttpWebResponse)request.GetResponse();
                        timedOut = false;
                    }
                    catch (Exception ex)
                    {
                        timedOut = true;
                    }
                }

                string result = content != null ? new StreamReader(content.GetResponseStream()).ReadToEnd() : "false";

                if (!bool.Parse(result) || (content != null &amp;&amp; content.StatusCode != HttpStatusCode.OK) || timedOut)
                {
                    Products.ProductStop();
                    _isRunning = false;
                    _validationThread.DoWork -= CheckValidiation;
                    _validationThread.Dispose();
                    MessageBox.Show("You are trying to use a different wRobot key with the same order Id or your wRobot key is used by more than 10 IPs. \n\nBot name: " + ObjectManager.Me.Name + "\n\nIf your wRobot key has changed recently (f.e. after purchasing a new one), please contact FNV316");
                    return;
                }

                Thread.Sleep(60 * 1000);
            }
            catch (Exception exp)
            {
                Logging.WriteError("" + exp);
            }
        }
    }
}

    /*
    static ControlAuthentication()
    {
        new Thread(() =&gt;
        {
            while (!Conditions.InGameAndConnectedAndAliveAndProductStarted)
            {
                Thread.Sleep(500);
            }
            Thread.Sleep(30000);
            string status = Logging.Status;
            if (_controlVariable != 5 &amp;&amp; !status.Contains("To Town") &amp;&amp; !status.Contains("Regeneration") &amp;&amp; !status.Contains("Attacked") &amp;&amp; !status.Contains("Trainers") &amp;&amp; !status.Contains("Ressurect") &amp;&amp; !status.Contains("Started"))
            {
                Products.ProductStop();
                MessageBox.Show("Please enter your ID faster, restart the Bot now.");
            }
            Logging.Write("[FNV_Quester]: Launcher authentication sucessful");
        }).Start();
    }
    */

public class ControlAuthentication
{
    private static volatile int _controlVariable = 0;
    private static int _timeout = 0;
    private static bool _isRunning = true;
    private static bool disposeAuthThread = false;
    private static string profileName = "";

    public static void SetControl(int control)
    {
        _controlVariable = control;
    }

    static ControlAuthentication()
    {
        new Thread(() =&gt;
        {
            profileName = wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName;

            while(_isRunning &amp;&amp; !disposeAuthThread &amp;&amp; (wManager.Wow.Helpers.Conditions.ProductIsStarted || wManager.Wow.Helpers.Conditions.ProductInPause))
            {
                if(!wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName.Equals(profileName))
                {
                    disposeAuthThread = true;
                    break;
                }

                if(!wManager.Wow.Helpers.Conditions.ProductIsStarted)
                {
                    disposeAuthThread = true;
                    break;
                }

                while(wManager.Wow.Helpers.Quest.QuesterCurrentContext.CurrentStep &lt; 2)
                {
                    Thread.Sleep(500);

                    if(_controlVariable == 5 || !wManager.Wow.Helpers.Conditions.ProductIsStarted)
                        break;

                    _timeout += 500;

                    if(_timeout &gt;= 910000)
                    {
                        Products.ProductStop();
                        MessageBox.Show("[FNV_Quester]: Timeout error. Unable to authenticate for more than 15 minutes. \n\nBot name: " + ObjectManager.Me.Name);
                        break;
                    }
                }

                _isRunning = false;

                if(wManager.Wow.Helpers.Conditions.ProductIsStarted || wManager.Wow.Helpers.Conditions.ProductInPause)
                {
                    Thread.Sleep(60000);

                    if(_controlVariable != 5)
                    {
                        Products.ProductStop();
                        MessageBox.Show("[FNV_Quester]: Please enter your ID faster or make sure the authentication step is enabled (#0 START_FNVLauncher_V2 -&gt; Step [1], any other profile -&gt; Step [0]). \nRestart the Bot now. \n\nBot name: " + ObjectManager.Me.Name);
                    }
                    /*
                    else
                    {
                        if(!disposeAuthThread &amp;&amp; wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName.Equals(profileName) &amp;&amp; Conditions.ProductIsStarted)
                            Logging.Write("[FNV_Quester]: Authentication sucessful");
                    }
                    */
                    _timeout = 0;
                    _isRunning = true;
                }
            }

        }).Start();
    }
    
}

[Serializable]
public class FNVQuesterAuthSettings : robotManager.Helpful.Settings
{
    [Setting]
    [Category("__IMPORTANT__")]
    [DisplayName("Rocketr Order id")]
    [Description("This is your tracking number for when you purchased this product, it is required to use this consistently. You can find it within your product delivery e-mail")]
    public string TransactionId { get { return "free"; } set { } }

    public FNVQuesterAuthSettings()
    {
        TransactionId = null;
    }
    
    public static FNVQuesterAuthSettings CurrentSetting { get; set; }

    public bool Save()
    {
        try
        {
            return Save(AdviserFilePathAndName("FNVQuester_AuthSettings", "Vanilla_Alliance"));
        }
        catch (Exception e)
        {
            robotManager.Helpful.Logging.Write("FNVQuester_AuthSettings &gt; Save(): " + e);
            return false;
        }
    }

    public static bool Load()
    {
        try
        {
            if (File.Exists(AdviserFilePathAndName("FNVQuester_AuthSettings", "Vanilla_Alliance")))
            {
                CurrentSetting =
                    Load&lt;FNVQuesterAuthSettings&gt;(AdviserFilePathAndName("FNVQuester_AuthSettings", "Vanilla_Alliance"));
                return true;
            }
            CurrentSetting = new FNVQuesterAuthSettings();
        }
        catch (Exception e)
        {
            robotManager.Helpful.Logging.Write("FNVQuester_AuthSettings &gt; Load(): " + e);
        }
        return false;
    }
}

public class SearingGorge
{
     private static bool _isStarted = false;
     private static bool _inPause = false;
     private static int gateId = 161536;
     private static Vector3 gatePosition = new Vector3(-6756, -1166, 187);

    public static void initializeGateDetection()
    {
        if(!_isStarted)
        {
            Logging.Write("[FNV_Quester]: Searing Gorge gate detection initialized");
            _isStarted = true;
            MovementEvents.OnSeemStuck += MovementEventsOnOnSeemStuck;
        }
    }

    private static void pause()
    {
        for(int i = 0; i &lt; 15000; i += 1000)
        {
            Thread.Sleep(1000);
        }
        _inPause = false;
        return;
    }

    public static void disposeGateDetection()
    {
        if(_isStarted)
        {
            Logging.Write("[FNV_Quester]: Searing Gorge gate detection disposed");
            _isStarted = false;
            MovementEvents.OnSeemStuck -= MovementEventsOnOnSeemStuck;
        }
    }

    private static void MovementEventsOnOnSeemStuck()
    {
        Logging.Write("SeemStuck detected");

        if(ObjectManager.Me.Position.DistanceTo(gatePosition) &lt;= 10 &amp;&amp; !_inPause)
        {
            Logging.Write("[FNV_Quester]: Stuck at Quarry Gate, trying to open it...");

            GoToTask.ToPositionAndIntecractWithGameObject(gatePosition, gateId, -1, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore);
            
            if(GoToTask.ToPositionAndIntecractWithGameObject(gatePosition, gateId, -1, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore))
            {
               // _inPause = true;
               // pause();
            }
        }
    }
}

public class SearingGorgeFixedPathfinding
{
    private static List&lt;Vector3&gt; brokenLocationNodes = new List&lt;Vector3&gt;();
    private static bool _inProcessing;
    private static Vector3 currentDestination = new Vector3(0, 0, 0);
    private static string status = "";

    private static void ApplyNodes()
    {
        Vector3 thoriumPoint = new Vector3(-6514, -1162, 308);
        brokenLocationNodes.Add(thoriumPoint);
    }

    public static void Initialize()
    {
        Logging.Write("[FNV_Quester]: Thorium Point pathfinder workaround started");
        MovementEvents.OnMovementPulse += MovementEventsOnOnMovementPulse;
        MovementEvents.OnSeemStuck += MovementEventsOnOnSeemStuck;
        Logging.OnChanged += LoggingEvents_OnChangedStatus;
        ApplyNodes();
        _inProcessing = false;
    }

    public static void Dispose()
    {
        MovementEvents.OnMovementPulse -= MovementEventsOnOnMovementPulse;
        MovementEvents.OnSeemStuck -= MovementEventsOnOnSeemStuck;
        Logging.OnChanged -= LoggingEvents_OnChangedStatus;
    }

    private static void MovementEventsOnOnSeemStuck()
    {
        _inProcessing = false;
    }

    private static void MovementEventsOnOnMovementPulse(List&lt;Vector3&gt; points, CancelEventArgs cancelable)
    {  
        //status = Logging.Status;
        if(CheckDestination(points.LastOrDefault&lt;Vector3&gt;()) &amp;&amp; !_inProcessing &amp;&amp; ObjectManager.Me.Position.DistanceTo(points.Last&lt;Vector3&gt;()) &gt; 50 &amp;&amp; !status.Contains("Follow Path"))
        {
            _inProcessing = true;
            Logging.Write("[FNV_Quester]: Destination vector within broken path finder range. Using custom path for movement to enter instead");
            cancelable.Cancel = true;
            UseCustomPathIn(points.LastOrDefault&lt;Vector3&gt;());
            cancelable.Cancel = false;
            _inProcessing = false;
        }

        if(CheckDestination(ObjectManager.Me.Position) &amp;&amp; !_inProcessing &amp;&amp; ObjectManager.Me.Position.DistanceTo(points.Last&lt;Vector3&gt;()) &gt; 50 &amp;&amp; !status.Contains("Follow Path"))
        {
            _inProcessing = true;
            Logging.Write("[FNV_Quester]: Starting vector within broken path finder range. Using custom path for movement to leave instead");
            cancelable.Cancel = true;
            UseCustomPathOut(points.LastOrDefault&lt;Vector3&gt;());
            cancelable.Cancel = false;
            _inProcessing = false;
        }

        if(CheckDestination(ObjectManager.Me.Position) &amp;&amp; !_inProcessing &amp;&amp; CheckDestination(points.Last&lt;Vector3&gt;()) &amp;&amp; ObjectManager.Me.Position.DistanceTo(points.Last&lt;Vector3&gt;()) &gt; 10 &amp;&amp; !status.Contains("Follow Path"))
        {
            _inProcessing = true;
            currentDestination = points.Last&lt;Vector3&gt;();
            Logging.Write("[FNV_Quester]: Starting and destination vector within broken path finder range. Using custom path for movement instead");
            cancelable.Cancel = true;
            UseCustomPathLoop(points.LastOrDefault&lt;Vector3&gt;());
            cancelable.Cancel = false;
            _inProcessing = false;
        }
    }

    
    private static void LoggingEvents_OnChangedStatus(object sender, Logging.LoggingChangeEventArgs e)
    {
        status = Logging.Status;
    }
    

    private static bool CheckDestination(Vector3 destination)
    {
        foreach(var ele in brokenLocationNodes)
        {
            //Logging.Write("Distance is: " + destination.DistanceTo(ele)); 
            if(destination.DistanceTo(ele) &lt;= 60)
                return true;
        }
        return false;
    }

    private static void UseCustomPathIn(Vector3 destination)
    {

        Vector3 currentDestination = new Vector3(0, 0, 0);

        var path = new List&lt;Vector3&gt;() {
new Vector3(-6605.966f, -1023.291f, 244.5074f, "None"),
new Vector3(-6601.826f, -1023.744f, 244.9385f, "None"),
new Vector3(-6597.218f, -1026.855f, 248.186f, "None"),
new Vector3(-6593.908f, -1031.353f, 252.414f, "None"),
new Vector3(-6591.3f, -1036.307f, 255.8175f, "None"),
new Vector3(-6588.852f, -1041.541f, 258.5742f, "None"),
new Vector3(-6586.07f, -1046.571f, 260.5392f, "None"),
new Vector3(-6582.013f, -1050.151f, 262.3918f, "None"),
new Vector3(-6577.125f, -1052.881f, 264.4617f, "None"),
new Vector3(-6572.03f, -1055.201f, 266.5196f, "None"),
new Vector3(-6566.89f, -1057.423f, 268.521f, "None"),
new Vector3(-6561.761f, -1059.671f, 270.6708f, "None"),
new Vector3(-6556.499f, -1062.034f, 272.971f, "None"),
new Vector3(-6551.548f, -1064.268f, 275.2576f, "None"),
new Vector3(-6546.625f, -1066.932f, 277.3527f, "None"),
new Vector3(-6541.8f, -1069.774f, 279.032f, "None"),
new Vector3(-6536.636f, -1071.892f, 280.7285f, "None"),
new Vector3(-6531.107f, -1072.746f, 282.576f, "None"),
new Vector3(-6525.543f, -1073.38f, 284.4381f, "None"),
new Vector3(-6519.98f, -1074.023f, 286.3544f, "None"),
new Vector3(-6514.447f, -1074.884f, 288.3375f, "None"),
new Vector3(-6508.975f, -1076.073f, 290.369f, "None"),
new Vector3(-6503.632f, -1077.715f, 292.0928f, "None"),
new Vector3(-6498.638f, -1080.577f, 293.695f, "None"),
new Vector3(-6494.001f, -1083.713f, 295.3442f, "None"),
new Vector3(-6490.028f, -1087.634f, 296.9394f, "None"),
new Vector3(-6486.872f, -1092.256f, 298.4525f, "None"),
new Vector3(-6484.295f, -1097.215f, 300.1746f, "None"),
new Vector3(-6483.278f, -1102.701f, 301.5711f, "None"),
new Vector3(-6483.816f, -1108.252f, 302.851f, "None"),
new Vector3(-6485.005f, -1113.707f, 304.0922f, "None"),
new Vector3(-6487.139f, -1118.884f, 305.0337f, "None"),
new Vector3(-6489.344f, -1124.032f, 305.7626f, "None"),
new Vector3(-6491.585f, -1129.163f, 306.1504f, "None"),
new Vector3(-6494.281f, -1134.475f, 306.4971f, "None"),
new Vector3(-6497.214f, -1139.442f, 306.8915f, "None"),
new Vector3(-6500.032f, -1144.085f, 307.3696f, "None"),
new Vector3(-6503.025f, -1149.016f, 307.632f, "None"),
new Vector3(-6505.93f, -1153.804f, 307.8793f, "None"),
new Vector3(-6508.76f, -1158.441f, 307.9853f, "None"),
new Vector3(-6512.148f, -1162.893f, 308.3222f, "None"),
new Vector3(-6517.508f, -1163.161f, 308.5844f, "None"),
            };

        foreach(var ele in path)
        {
            if(ele.DistanceTo(destination) &lt; ele.DistanceTo(currentDestination))
                currentDestination = ele;
        }

        if(wManager.Wow.Bot.Tasks.GoToTask.ToPosition(path.First&lt;Vector3&gt;(), 3.5f, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore))
        {
            wManager.Wow.Bot.Tasks.GoToTask.ToPosition(path.First&lt;Vector3&gt;(), 3.5f, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore);
        }

        while(ObjectManager.Me.Position.DistanceTo(currentDestination) &gt; 5 &amp;&amp; !currentDestination.Equals((Vector3)null) &amp;&amp; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore)
        {
            MovementManager.Go(path);
            Thread.Sleep(100);
        }

        //Logging.Write("Finished takeCustomPath");
        //Reenable();
        _inProcessing = false;
        return;
    }

    private static void UseCustomPathOut(Vector3 destination)
    {

        Vector3 currentDestination = new Vector3(0, 0, 0);

        var path = new List&lt;Vector3&gt;() {
new Vector3(-6520.889f, -1186.334f, 309.2557f, "None"),
new Vector3(-6511.543f, -1163.732f, 308.3743f, "None"),
new Vector3(-6508.988f, -1161.179f, 308.1429f, "None"),
new Vector3(-6504.05f, -1156.218f, 308.0315f, "None"),
new Vector3(-6501.398f, -1153.294f, 308.1518f, "None"),
new Vector3(-6495.091f, -1144.908f, 307.875f, "None"),
new Vector3(-6489.66f, -1136.319f, 307.1272f, "None"),
new Vector3(-6484.931f, -1126.579f, 306.6054f, "None"),
new Vector3(-6481.782f, -1116.925f, 305.3705f, "None"),
new Vector3(-6480.768f, -1106.506f, 302.6744f, "None"),
new Vector3(-6483.211f, -1096.021f, 299.9566f, "None"),
new Vector3(-6488.722f, -1087.545f, 297.2002f, "None"),
new Vector3(-6496.905f, -1080.999f, 294.2147f, "None"),
new Vector3(-6506.868f, -1076.894f, 291.0374f, "None"),
new Vector3(-6516.972f, -1075.943f, 287.6053f, "None"),
new Vector3(-6527.435f, -1075.096f, 283.8497f, "None"),
new Vector3(-6537.802f, -1073.449f, 280.6175f, "None"),
new Vector3(-6548.082f, -1070.127f, 276.9659f, "None"),
new Vector3(-6556.992f, -1065.242f, 273.4804f, "None"),
new Vector3(-6566.444f, -1059.943f, 269.1368f, "None"),
new Vector3(-6575.575f, -1055.484f, 265.3927f, "None"),
new Vector3(-6585.064f, -1050.99f, 261.5944f, "None"),
new Vector3(-6592.596f, -1046.345f, 258.3036f, "None"),
new Vector3(-6594.945f, -1035.768f, 253.8222f, "None"),
new Vector3(-6598.657f, -1026.457f, 247.278f, "None"),
new Vector3(-6605.125f, -1027.011f, 244.9202f, "None"),
new Vector3(-6614.792f, -1030.953f, 244.2407f, "None"),
};

        foreach(var ele in path)
        {
            if(ele.DistanceTo(destination) &lt; ele.DistanceTo(currentDestination))
                currentDestination = ele;
        }

        if(wManager.Wow.Bot.Tasks.GoToTask.ToPosition(path.First&lt;Vector3&gt;(), 3.5f, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore))
        {
            wManager.Wow.Bot.Tasks.GoToTask.ToPosition(path.First&lt;Vector3&gt;(), 3.5f, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore);
        }

        while(ObjectManager.Me.Position.DistanceTo(currentDestination) &gt; 5 &amp;&amp; !currentDestination.Equals((Vector3)null) &amp;&amp; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore)
        {
            MovementManager.Go(path);
            Thread.Sleep(100);
        }

       // Logging.Write("Finished takeCustomPathOut");
        //Reenable();
        _inProcessing = false;
        return;
    }

    private static void UseCustomPathLoop(Vector3 destination)
    {

var path = new List&lt;Vector3&gt;() {
new Vector3(-6511.968f, -1178.022f, 309.2499f, "None"),
new Vector3(-6514.226f, -1180.391f, 309.2652f, "None"),
new Vector3(-6514.92f, -1183.646f, 309.2562f, "None"),
new Vector3(-6512.791f, -1186.548f, 309.2562f, "None"),
new Vector3(-6510.783f, -1189.414f, 309.2562f, "None"),
new Vector3(-6509.006f, -1192.427f, 309.2562f, "None"),
new Vector3(-6512.155f, -1191.501f, 309.2562f, "None"),
new Vector3(-6515.301f, -1190.243f, 309.2562f, "None"),
new Vector3(-6518.614f, -1189.136f, 309.2562f, "None"),
new Vector3(-6522.209f, -1188.875f, 309.2562f, "None"),
new Vector3(-6524.712f, -1188.661f, 309.2562f, "None"),
new Vector3(-6522.414f, -1187.187f, 309.2562f, "None"),
new Vector3(-6521.051f, -1184.315f, 309.2562f, "None"),
new Vector3(-6522.533f, -1181.164f, 309.5719f, "None"),
new Vector3(-6525.171f, -1178.908f, 310.5407f, "None"),
new Vector3(-6528.434f, -1177.668f, 311.458f, "None"),
new Vector3(-6531.906f, -1176.674f, 311.5628f, "None"),
new Vector3(-6535.271f, -1175.711f, 311.0577f, "None"),
new Vector3(-6538.62f, -1174.692f, 310.2652f, "None"),
new Vector3(-6541.887f, -1173.795f, 309.7975f, "None"),
new Vector3(-6545.396f, -1172.942f, 309.3479f, "None"),
new Vector3(-6548.806f, -1172.151f, 309.2578f, "None"),
new Vector3(-6552.216f, -1171.361f, 309.2927f, "None"),
new Vector3(-6555.617f, -1170.538f, 309.4913f, "None"),
new Vector3(-6558.993f, -1169.615f, 309.787f, "None"),
new Vector3(-6559.922f, -1167.805f, 309.8352f, "None"),
new Vector3(-6556.908f, -1165.864f, 310.0252f, "None"),
new Vector3(-6553.557f, -1164.877f, 310.0215f, "None"),
new Vector3(-6550.08f, -1164.484f, 309.926f, "None"),
new Vector3(-6544.97f, -1163.94f, 309.7741f, "None"),
new Vector3(-6534.195f, -1162.793f, 309.3187f, "None"),
new Vector3(-6523.741f, -1161.811f, 309.0215f, "None"),
new Vector3(-6513.615f, -1160.933f, 308.2635f, "None"),
new Vector3(-6506.418f, -1160.309f, 308.1041f, "None"),
new Vector3(-6502.819f, -1159.997f, 308.3569f, "None"),
new Vector3(-6499.444f, -1159.705f, 308.7631f, "None"),
new Vector3(-6496.717f, -1159.744f, 309.0773f, "None"),
new Vector3(-6495.118f, -1161.894f, 309.1303f, "None"),
new Vector3(-6493f, -1162.4f, 309.2f, "None"),
new Vector3(-6495.47f, -1165.365f, 309.19f, "None"),
new Vector3(-6496.578f, -1168.801f, 309.2209f, "None"),
new Vector3(-6497.424f, -1172.189f, 309.2521f, "None"),
new Vector3(-6496.599f, -1175.496f, 311.4286f, "None"),
new Vector3(-6494.471f, -1178.274f, 314.4402f, "None"),
new Vector3(-6492.365f, -1181.069f, 316.9778f, "None"),
new Vector3(-6490.402f, -1183.967f, 319.4284f, "None"),
new Vector3(-6488.469f, -1186.885f, 322.0103f, "None"),
new Vector3(-6486.568f, -1189.69f, 324.5566f, "None"),
new Vector3(-6484.392f, -1192.128f, 325.7157f, "None"),
new Vector3(-6479.565f, -1189.753f, 325.8502f, "None"),
new Vector3(-6477.512f, -1187.101f, 325.9147f, "None"),
new Vector3(-6478.307f, -1183.857f, 325.7819f, "None"),
new Vector3(-6480.627f, -1181.089f, 325.6377f, "None"),
new Vector3(-6482.864f, -1178.397f, 325.7611f, "None"),
new Vector3(-6485f, -1175.625f, 325.7878f, "None"),
new Vector3(-6487.067f, -1172.94f, 325.5157f, "None"),
new Vector3(-6489.333f, -1170.127f, 325.4131f, "None"),
new Vector3(-6492.227f, -1171.737f, 325.9383f, "None"),
new Vector3(-6495.255f, -1173.477f, 326.5012f, "None"),
new Vector3(-6498.819f, -1173.806f, 326.2171f, "None"),
new Vector3(-6501.867f, -1173.776f, 325.811f, "None"),
new Vector3(-6504.835f, -1175.808f, 325.9436f, "None"),
new Vector3(-6507.222f, -1178.351f, 326.3931f, "None"),
new Vector3(-6507.92f, -1181.704f, 326.9203f, "None"),
new Vector3(-6506.445f, -1184.833f, 327.1803f, "None"),
new Vector3(-6504.251f, -1187.702f, 326.8068f, "None"),
new Vector3(-6502.15f, -1190.501f, 326.4582f, "None"),
new Vector3(-6500.116f, -1193.21f, 326.1217f, "None"),
new Vector3(-6498.121f, -1196.085f, 325.64f, "None"),
new Vector3(-6496.097f, -1199.072f, 325.2523f, "None"),
new Vector3(-6493.148f, -1199.734f, 325.4391f, "None"),
new Vector3(-6490.279f, -1197.56f, 325.5786f, "None"),
new Vector3(-6488.075f, -1194.888f, 325.6983f, "None"),
new Vector3(-6489.056f, -1191.798f, 324.8035f, "None"),
new Vector3(-6491.162f, -1189.002f, 322.1753f, "None"),
new Vector3(-6493.301f, -1186.232f, 319.5414f, "None"),
new Vector3(-6495.447f, -1183.467f, 316.7057f, "None"),
new Vector3(-6497.518f, -1180.777f, 313.957f, "None"),
new Vector3(-6499.785f, -1177.831f, 311.3158f, "None"),
new Vector3(-6501.965f, -1175.094f, 309.255f, "None"),
new Vector3(-6504.853f, -1173.284f, 309.1891f, "None"),
new Vector3(-6507.97f, -1174.138f, 309.1942f, "None"),
new Vector3(-6511.066f, -1175.981f, 309.2368f, "None"),
new Vector3(-6513.179f, -1177.529f, 309.2469f, "None"),
};


        foreach(var ele in path)
        {
            if(ele.DistanceTo(destination) &lt; ele.DistanceTo(currentDestination))
                currentDestination = ele;
        }

        if(wManager.Wow.Bot.Tasks.GoToTask.ToPosition(path.First&lt;Vector3&gt;(), 3.5f, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore))
        {
            wManager.Wow.Bot.Tasks.GoToTask.ToPosition(path.First&lt;Vector3&gt;(), 3.5f, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore);
        }
        

        while(ObjectManager.Me.Position.DistanceTo(currentDestination) &gt; 2 &amp;&amp; !currentDestination.Equals((Vector3)null) &amp;&amp; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore)
        {
            if(ObjectManager.Me.Position.DistanceTo(currentDestination) &lt;= 2)
            {
                break;
            }
            
            MovementManager.Go(path);
            Thread.Sleep(100);
        }

        MovementManager.MoveTo(currentDestination);

        //Logging.Write("Finished takeCustomPathLoop");
        currentDestination = new Vector3(0, 0, 0);
        //Reenable();
        _inProcessing = false;
        return;
    }

    //By Matenia
    private static async void Reenable()
    {
        //Logging.Write("Enter reenable");
        await Task.Run(() =&gt;
        {
            Products.InPause = true;
            if(ObjectManager.Me.WowClass == WoWClass.Hunter)
                Lua.LuaDoString("RotaOn = false");
            MovementManager.StopMove();
            MovementManager.CurrentPath.Clear();
            MovementManager.CurrentPathOrigine.Clear();
            Thread.Sleep(5000);
            Products.InPause = false;
            if(ObjectManager.Me.WowClass == WoWClass.Hunter)
                Lua.LuaDoString("RotaOn = true");
            Logging.Write("[VanillaFlightMaster]: Resetting pathing");
        });
    }

}

public class QuesterSettings
{

    public static void ClassSettings()
    {
        if(ObjectManager.Me.WowClass == WoWClass.Warlock)
        {
            switch(ObjectManager.Me.Level / 10)
            {
                case (1):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (2):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (3):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (4):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 45;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 45;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (5):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 50;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 50;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (6):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 50;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 50;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                default:
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;
            }

            if(wManager.wManagerSetting.CurrentSetting.DrinkName.Length &lt; 2)
            {
                wManager.wManagerSetting.CurrentSetting.DrinkIsSpell = false;
                wManager.wManagerSetting.CurrentSetting.DrinkName = "Refreshing Spring Water";
            }


            if(wManager.wManagerSetting.CurrentSetting.FoodName.Length &lt; 2)
            {
                wManager.wManagerSetting.CurrentSetting.FoodIsSpell = false;
                wManager.wManagerSetting.CurrentSetting.FoodName = "Tough Hunk of Bread";
            }

            Logging.Write("[FNV_Quester]: Using default food / drink settings for Warlock");
        }

        if(ObjectManager.Me.WowClass == WoWClass.Warrior)
        {
            switch(ObjectManager.Me.Level / 10)
            {

                case (1):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;

                case (2):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;

                case (3):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 60;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 70;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;

                case (4):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 80;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;

                case (5):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 100;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 80;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;

                case (6):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 120;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 80;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;

                default:
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;
            }

            if(wManager.wManagerSetting.CurrentSetting.FoodName.Length &lt; 2)
            {
                wManager.wManagerSetting.CurrentSetting.FoodIsSpell = false;
                wManager.wManagerSetting.CurrentSetting.FoodName = "Tough Hunk of Bread";
            }

            Logging.Write("[FNV_Quester]: Using default food / drink settings for Warrior");
        }

        if(ObjectManager.Me.WowClass == WoWClass.Rogue)
        {
            switch(ObjectManager.Me.Level / 10)
            {
                case (1):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;

                case (2):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;

                case (3):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;

                case (4):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 75;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;

                case (5):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 100;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 80;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;

                case (6):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 120;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 80;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;

                default:
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;
            }


            if(wManager.wManagerSetting.CurrentSetting.FoodName.Length &lt; 2)
            {
                wManager.wManagerSetting.CurrentSetting.FoodIsSpell = false;
                wManager.wManagerSetting.CurrentSetting.FoodName = "Tough Hunk of Bread";
            }

            Logging.Write("[FNV_Quester]: Using default food / drink settings for Rogue");
        }

        if(ObjectManager.Me.WowClass == WoWClass.Mage)
        {
            switch(ObjectManager.Me.Level / 10)
            {
                case (1):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 50;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (2):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 50;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (3):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 50;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (4):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 60;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 70;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (5):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 60;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 75;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (6):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 60;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 75;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                default:
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 50;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;
            }

            if(wManager.wManagerSetting.CurrentSetting.DrinkName.Length &lt; 2)
            {
                wManager.wManagerSetting.CurrentSetting.DrinkIsSpell = false;
                wManager.wManagerSetting.CurrentSetting.DrinkName = "Refreshing Spring Water";
            }


            if(wManager.wManagerSetting.CurrentSetting.FoodName.Length &lt; 2)
            {
                wManager.wManagerSetting.CurrentSetting.FoodIsSpell = false;
                wManager.wManagerSetting.CurrentSetting.FoodName = "Tough Hunk of Bread";
            }

            Logging.Write("[FNV_Quester]: Using default food / drink settings for Mage");
        }

        if(ObjectManager.Me.WowClass == WoWClass.Druid)
        {
            switch(ObjectManager.Me.Level / 10)
            {
                case (1):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (2):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (3):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (4):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 45;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (5):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 50;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (6):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                default:
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;
            }

            if(wManager.wManagerSetting.CurrentSetting.DrinkName.Length &lt; 2)
            {
                wManager.wManagerSetting.CurrentSetting.DrinkIsSpell = false;
                wManager.wManagerSetting.CurrentSetting.DrinkName = "Refreshing Spring Water";
            }

            if(wManager.wManagerSetting.CurrentSetting.FoodName.Length &lt; 2)
            {
                wManager.wManagerSetting.CurrentSetting.FoodName = "Healing Touch";
                wManager.wManagerSetting.CurrentSetting.FoodIsSpell = true;
            }

            Logging.Write("[FNV_Quester]: Using default food / drink settings for Druid");
        }

        if(ObjectManager.Me.WowClass == WoWClass.Paladin)
        {

            switch(ObjectManager.Me.Level / 10)
            {
                case (1):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (2):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (3):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 60;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (4):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 45;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (5):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 50;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (6):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 100;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 55;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                default:
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;
            }

            if(wManager.wManagerSetting.CurrentSetting.DrinkName.Length &lt; 2)
            {
                wManager.wManagerSetting.CurrentSetting.DrinkIsSpell = false;
                wManager.wManagerSetting.CurrentSetting.DrinkName = "Refreshing Spring Water";
            }

            if(wManager.wManagerSetting.CurrentSetting.FoodName.Length &lt; 2)
            {
                wManager.wManagerSetting.CurrentSetting.FoodName = "Holy Light";
                wManager.wManagerSetting.CurrentSetting.FoodIsSpell = true;
            }


            Logging.Write("[FNV_Quester]: Using default food / drink settings for Paladin");
        }

        if(ObjectManager.Me.WowClass == WoWClass.Hunter)
        {
            switch(ObjectManager.Me.Level / 10)
            {
                case (1):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    Lua.LuaDoString("DEFAULT_CHAT_FRAME:AddMessage('[FNV_Quester]: Do not forget that wRobot counts empty bag slots of ammo bags as free bag space!')");
                    break;

                case (2):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (3):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (4):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 60;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 60;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (5):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (6):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                default:
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    Lua.LuaDoString("DEFAULT_CHAT_FRAME:AddMessage('[FNV_Quester]: Do not forget that wRobot counts empty bag slots of ammo bags as free bag space!')");
                    break;
            }

            if(wManager.wManagerSetting.CurrentSetting.DrinkName.Length &lt; 2)
            {
                wManager.wManagerSetting.CurrentSetting.DrinkIsSpell = false;
                wManager.wManagerSetting.CurrentSetting.DrinkName = "Refreshing Spring Water";
            }

            if(wManager.wManagerSetting.CurrentSetting.FoodName.Length &lt; 2)
            {
                wManager.wManagerSetting.CurrentSetting.FoodIsSpell = false;
                wManager.wManagerSetting.CurrentSetting.FoodName = "Tough Hunk of Bread";
            }

            Logging.Write("[FNV_Quester]: Using default food / drink settings for Hunter");

        }
    }

    public static void SettingsEasternKingdoms()
    {
        //Eastern Kingdoms only
        wManager.wManagerSetting.CurrentSetting.TrainNewSkills = true;

        wManager.wManagerSetting.CurrentSetting.DontStartFighting = false;
        wManager.wManagerSetting.CurrentSetting.DetectNodesStuck = true;
        wManager.wManagerSetting.CurrentSetting.CanAttackUnitsAlreadyInFight = false;
        wManager.wManagerSetting.CurrentSetting.AvoidBlacklistedZonesPathFinder = true;
        wManager.wManagerSetting.CurrentSetting.AttackElite = false;
        wManager.wManagerSetting.CurrentSetting.AttackBeforeBeingAttacked = true;
        wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = true;
        wManager.wManagerSetting.CurrentSetting.FlightMasterTaxiUse = true;
        wManager.wManagerSetting.CurrentSetting.IgnoreFightWhenInMove = false;

        wManager.wManagerSetting.CurrentSetting.Repair = true;
        wManager.wManagerSetting.CurrentSetting.SellGray = true;
        wManager.wManagerSetting.CurrentSetting.SellGreen = true;
        wManager.wManagerSetting.CurrentSetting.Selling = true;
        wManager.wManagerSetting.CurrentSetting.SellWhite = true;
        wManager.wManagerSetting.CurrentSetting.MinFreeBagSlotsToGoToTown = 4;

        wManager.wManagerSetting.CurrentSetting.SearchRadius = 100;
        wManager.wManagerSetting.CurrentSetting.MaxUnitsNear = 100;

        wManager.wManagerSetting.CurrentSetting.WallDistancePathFinder = 2;
        wManager.wManagerSetting.CurrentSetting.AddToNpcDb = false;
        wManager.wManagerSetting.CurrentSetting.BlackListIfNotCompletePath = false;
        wManager.wManagerSetting.CurrentSetting.UseCTM = true;
        wManager.wManagerSetting.CurrentSetting.UseLuaToMove = true;

        wManager.wManagerSetting.CurrentSetting.NpcScanAuctioneer = false;
        wManager.wManagerSetting.CurrentSetting.NpcScanMailboxes = false;
        wManager.wManagerSetting.CurrentSetting.NpcScanRepair = false;
        wManager.wManagerSetting.CurrentSetting.NpcScanVendor = false;

        wManager.wManagerSetting.CurrentSetting.HarvestHerbs = false;
        wManager.wManagerSetting.CurrentSetting.HarvestMinerals = false;

        wManager.wManagerSetting.CurrentSetting.AvoidBlacklistedZonesPathFinder = true;
        wManager.wManagerSetting.CurrentSetting.AvoidWallWithRays = true;
        wManager.wManagerSetting.CurrentSetting.BlackListTrainingDummy = true;
        wManager.wManagerSetting.CurrentSetting.BlackListZoneWhereDead = false;
        wManager.wManagerSetting.CurrentSetting.CalcuCombatRange = false;
        wManager.wManagerSetting.CurrentSetting.CanAttackUnitsAlreadyInFight = false;
        wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;
        wManager.wManagerSetting.CurrentSetting.DetectNodesStuck = true;
        wManager.wManagerSetting.CurrentSetting.DontStartFighting = false;
        wManager.wManagerSetting.CurrentSetting.FlightMasterDiscoverRange = 50;
        wManager.wManagerSetting.CurrentSetting.FlightMasterTaxiUse = true;
        wManager.wManagerSetting.CurrentSetting.HarvestAvoidPlayersRadius = 1;
        wManager.wManagerSetting.CurrentSetting.HarvestDuringLongMove = false;
        wManager.wManagerSetting.CurrentSetting.HarvestTimber = false;
        wManager.wManagerSetting.CurrentSetting.HelpingGroupMembers = true;
        wManager.wManagerSetting.CurrentSetting.IgnoreCombatWithPet = false;
        wManager.wManagerSetting.CurrentSetting.IgnoreFightDuringFarmIfDruidForm = false;
        wManager.wManagerSetting.CurrentSetting.IgnoreFightGoundMount = true;
        wManager.wManagerSetting.CurrentSetting.LootChests = false;
        wManager.wManagerSetting.CurrentSetting.LootMobs = true;
        wManager.wManagerSetting.CurrentSetting.MountDistance = 100;
        wManager.wManagerSetting.CurrentSetting.Relogger = true;
        wManager.wManagerSetting.CurrentSetting.SecurityPauseBotIfNerbyPlayer = false;
        wManager.wManagerSetting.CurrentSetting.RecordChatInLog = true;
        wManager.wManagerSetting.CurrentSetting.SecurityShutdownComputer = false;
        wManager.wManagerSetting.CurrentSetting.UsePathsFinder = true;
        wManager.wManagerSetting.CurrentSetting.UseSpiritHealer = false;
        wManager.wManagerSetting.CurrentSetting.WaitResurrectionSickness = true;
        wManager.wManagerSetting.CurrentSetting.WallDistancePathFinder = 2;

        ClassSettings();

        if(Conditions.ForceIgnoreIsAttacked)
        {
            Logging.Write("[FNV_Quester]: Force ignore attack is enabled, going to disable it...");
            Conditions.ForceIgnoreIsAttacked = false;
        }

         wManager.wManagerSetting.CurrentSetting.Save();
         Thread.Sleep(500);
         wManager.wManagerSetting.CurrentSetting.Save();

        wManager.Wow.Forms.UserControlTabGeneralSettings.ReloadGeneralSettings();

        Logging.Write("[FNV_Quester]: Applied default settings for Eastern Kingdoms");

        return;
    }

    public static void SettingsKalimdor()
    {
        //Kalimdor only
        wManager.wManagerSetting.CurrentSetting.TrainNewSkills = false;

        wManager.wManagerSetting.CurrentSetting.DontStartFighting = false;
        wManager.wManagerSetting.CurrentSetting.DetectNodesStuck = true;
        wManager.wManagerSetting.CurrentSetting.CanAttackUnitsAlreadyInFight = false;
        wManager.wManagerSetting.CurrentSetting.AvoidBlacklistedZonesPathFinder = true;
        wManager.wManagerSetting.CurrentSetting.AttackElite = false;
        wManager.wManagerSetting.CurrentSetting.AttackBeforeBeingAttacked = true;
        wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = true;
        wManager.wManagerSetting.CurrentSetting.FlightMasterTaxiUse = true;
        wManager.wManagerSetting.CurrentSetting.IgnoreFightWhenInMove = false;

        wManager.wManagerSetting.CurrentSetting.Repair = true;
        wManager.wManagerSetting.CurrentSetting.SellGray = true;
        wManager.wManagerSetting.CurrentSetting.SellGreen = true;
        wManager.wManagerSetting.CurrentSetting.Selling = true;
        wManager.wManagerSetting.CurrentSetting.SellWhite = true;
        wManager.wManagerSetting.CurrentSetting.MinFreeBagSlotsToGoToTown = 4;

        wManager.wManagerSetting.CurrentSetting.SearchRadius = 100;
        wManager.wManagerSetting.CurrentSetting.MaxUnitsNear = 100;

        wManager.wManagerSetting.CurrentSetting.WallDistancePathFinder = 2;
        wManager.wManagerSetting.CurrentSetting.AddToNpcDb = false;
        wManager.wManagerSetting.CurrentSetting.BlackListIfNotCompletePath = false;
        wManager.wManagerSetting.CurrentSetting.UseCTM = true;
        wManager.wManagerSetting.CurrentSetting.UseLuaToMove = true;

        wManager.wManagerSetting.CurrentSetting.NpcScanAuctioneer = false;
        wManager.wManagerSetting.CurrentSetting.NpcScanMailboxes = false;
        wManager.wManagerSetting.CurrentSetting.NpcScanRepair = false;
        wManager.wManagerSetting.CurrentSetting.NpcScanVendor = false;

        wManager.wManagerSetting.CurrentSetting.HarvestHerbs = false;
        wManager.wManagerSetting.CurrentSetting.HarvestMinerals = false;

        wManager.wManagerSetting.CurrentSetting.AvoidBlacklistedZonesPathFinder = true;
        wManager.wManagerSetting.CurrentSetting.AvoidWallWithRays = true;
        wManager.wManagerSetting.CurrentSetting.BlackListTrainingDummy = true;
        wManager.wManagerSetting.CurrentSetting.BlackListZoneWhereDead = false;
        wManager.wManagerSetting.CurrentSetting.CalcuCombatRange = false;
        wManager.wManagerSetting.CurrentSetting.CanAttackUnitsAlreadyInFight = false;
        wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;
        wManager.wManagerSetting.CurrentSetting.DetectNodesStuck = true;
        wManager.wManagerSetting.CurrentSetting.DontStartFighting = false;
        wManager.wManagerSetting.CurrentSetting.FlightMasterDiscoverRange = 50;
        wManager.wManagerSetting.CurrentSetting.FlightMasterTaxiUse = true;
        wManager.wManagerSetting.CurrentSetting.HarvestAvoidPlayersRadius = 1;
        wManager.wManagerSetting.CurrentSetting.HarvestDuringLongMove = false;
        wManager.wManagerSetting.CurrentSetting.HarvestTimber = false;
        wManager.wManagerSetting.CurrentSetting.HelpingGroupMembers = true;
        wManager.wManagerSetting.CurrentSetting.IgnoreCombatWithPet = false;
        wManager.wManagerSetting.CurrentSetting.IgnoreFightDuringFarmIfDruidForm = false;
        wManager.wManagerSetting.CurrentSetting.IgnoreFightGoundMount = true;
        wManager.wManagerSetting.CurrentSetting.LootChests = false;
        wManager.wManagerSetting.CurrentSetting.LootMobs = true;
        wManager.wManagerSetting.CurrentSetting.MountDistance = 100;
        wManager.wManagerSetting.CurrentSetting.Relogger = true;
        wManager.wManagerSetting.CurrentSetting.SecurityPauseBotIfNerbyPlayer = false;
        wManager.wManagerSetting.CurrentSetting.RecordChatInLog = true;
        wManager.wManagerSetting.CurrentSetting.SecurityShutdownComputer = false;
        wManager.wManagerSetting.CurrentSetting.UsePathsFinder = true;
        wManager.wManagerSetting.CurrentSetting.UseSpiritHealer = false;
        wManager.wManagerSetting.CurrentSetting.WaitResurrectionSickness = true;
        wManager.wManagerSetting.CurrentSetting.WallDistancePathFinder = 2;

        ClassSettings();

        if(Conditions.ForceIgnoreIsAttacked)
        {
            Logging.Write("[FNV_Quester]: Force ignore attack is enabled, going to disable it...");
            Conditions.ForceIgnoreIsAttacked = false;
        }

         wManager.wManagerSetting.CurrentSetting.Save();
         Thread.Sleep(500);
         wManager.wManagerSetting.CurrentSetting.Save();

        wManager.Wow.Forms.UserControlTabGeneralSettings.ReloadGeneralSettings();

        Logging.Write("[FNV_Quester]: Applied default settings for Kalimdor");

        return;
    }

}


public class Blackspots
{
   

    public static void StartThread()
    {

    Thread BlackspotValidation = new Thread(() =&gt;
    {
        Logging.Write("[FNV_Quester]: Blackspot validation started");
        Dictionary&lt;Vector3, float&gt; blackspots = new Dictionary&lt;Vector3, float&gt;();
        bool _isStarted = false;

        string profileName = "FNV_V2\\#0 START_FNVLauncher_V2.xml";
        string currentProfileName = wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName;
        int counter = 0;

        if(!_isStarted)
        {
            _isStarted = true;

            while(wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName.Equals(profileName) &amp;&amp; Conditions.ProductIsStarted)
            {
                Thread.Sleep(1000);
            }

            while(Conditions.ProductIsStarted || Conditions.ProductInPause)
            {

                if(wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName.Equals(profileName))
                    break;

                if(counter &gt; 300)
                {
                    Logging.Write("[FNV_Quester]: Clear blacklist of current product session");
                    wManager.wManagerSetting.ClearBlacklistOfCurrentProductSession();
                    counter = 0;
                }

                if(wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported)
                    wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;

                if(!wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName.Equals(currentProfileName))
                {
                    Logging.Write("[FNV_Quester]: Profile has been changed. Reset current blackspots and save blackspots of loaded profile...");
                    currentProfileName = wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName;

                    blackspots.Clear();

                    foreach(var temp in wManager.wManagerSetting.GetListZoneBlackListed())
                    {
                        blackspots.Add(temp.GetPosition(), temp.Radius);
                    }
                }

                if(blackspots.Count &gt; wManager.wManagerSetting.GetListZoneBlackListed().Count)
                {
                    Logging.Write("[FNV_Quester]: Reaply default blackspots");
                    try
                    {
                        foreach(var temp in blackspots)
                        {
                            if (!wManager.wManagerSetting.GetListZoneBlackListed().Any(b =&gt; b.GetPosition().DistanceTo(temp.Key) &lt; 0.1 &amp;&amp; System.Math.Abs(b.Radius - temp.Value) &lt; 0.1))
                                wManager.wManagerSetting.AddBlackListZone(temp.Key, temp.Value, true);
                        }
                    }
                    catch(Exception e)
                    {
                    }
                }

                if(wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName.Equals(profileName))
                    break;

                counter++;
                Thread.Sleep(1000);
            }
        }
        _isStarted = false;
        Logging.Write("[FNV_Quester]: Blackspot validation disposed");

    });

        BlackspotValidation.Start();
    }
}

public class ProfileRestarter
{
    private static bool _IsAfk = false;
    private static Vector3 afkPosition = (Vector3)null;
    private static int timer = 0;
    private static bool _isSubscribed = false;
    private static void WatchForEvents()
    {
        if(!_isSubscribed)
        {
            _isSubscribed = true;

            EventsLuaWithArgs.OnEventsLuaWithArgs += (LuaEventsId id, List&lt;string&gt; args) =&gt;
            {
                if(id == wManager.Wow.Enums.LuaEventsId.CHAT_MSG_SYSTEM &amp;&amp; Conditions.ProductIsStartedNotInPause)
                {

                    if(args.FirstOrDefault().Contains("You are now AFK"))
                    {
                        _IsAfk = true;
                        timer = 0;
                        afkPosition = ObjectManager.Me.Position;
                    }
                }
            };
        }
    }

    public static void StartProfileRestarter()
    {

        Thread ProfileRestarterThread = new Thread(() =&gt;
        {
            Logging.Write("[FNV_Quester]: Profile Restarter initialized");

            string profileName = "FNV_V2\\#0 START_FNVLauncher_V2.xml";
            string currentProfileName = wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName;


            while((wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName.Equals(profileName) || !ObjectManager.Me.GetMove) &amp;&amp; Conditions.ProductIsStarted)
            {
                Thread.Sleep(1000);
            }

            if(!_isSubscribed)
            {
                Thread.Sleep(Usefuls.Latency + 500);
                WatchForEvents();
            }

            while(Conditions.ProductIsStarted || Conditions.ProductInPause)
            {

                if(wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName.Equals(profileName))
                    break;

                while(_IsAfk &amp;&amp; timer &lt; 600 &amp;&amp; !wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName.Equals(profileName))
                {
                    Thread.Sleep(1000);
                    timer++;
                }

                if(_IsAfk &amp;&amp; timer &gt;= 600 &amp;&amp; ObjectManager.Me.Position.DistanceTo(afkPosition) &lt; 25)
                {
                    Logging.Write("[FNV_Quester]: Bot seems to stopped / went AFK for too long. Restart of profile in process...");
                    wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName = profileName;
                    robotManager.Products.Products.ProductRestart();
                    break;
                }

                timer = 0;
                _IsAfk = false;
                Thread.Sleep(10000);
            }

            Logging.Write("[FNV_Quester]: Profile Restarter disposed");

        });

        ProfileRestarterThread.Start();
    }
}


class test
{


    public static void testen()
    {

    }
}
    </Script>
  <OffMeshConnections>
    <OffMeshConnection>
      <Path>
        <Vector3 X="2673.749" Y="1500.853" Z="234.2008" />
        <Vector3 X="2729.026" Y="1507.32" Z="236.8342" />
        <Vector3 X="2729.693" Y="1500.577" Z="236.834" />
      </Path>
      <ContinentId>1</ContinentId>
      <Type>Unidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>false</TryToUseEvenIfCanFindPathSuccess>
      <Name>Stonetalon Peak - Innkeeper</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="2758.576" Y="1506.824" Z="235.204" />
        <Vector3 X="2729.341" Y="1504.715" Z="236.8437" />
        <Vector3 X="2729.728" Y="1500.575" Z="236.8334" />
      </Path>
      <ContinentId>1</ContinentId>
      <Type>Unidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>false</TryToUseEvenIfCanFindPathSuccess>
      <Name>Stonetalon Peak - Innkeeper 2</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="2714.637" Y="1477.041" Z="236.7758" />
        <Vector3 X="2738.125" Y="1479.577" Z="235.2378" />
        <Vector3 X="2759.576" Y="1498.716" Z="235.3905" />
        <Vector3 X="2758.367" Y="1507.135" Z="235.1389" />
        <Vector3 X="2730.042" Y="1503.646" Z="236.8418" />
        <Vector3 X="2730.173" Y="1500.037" Z="236.8321" />
      </Path>
      <ContinentId>1</ContinentId>
      <Type>Unidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>false</TryToUseEvenIfCanFindPathSuccess>
      <Name>Stonetalon Peak - Innkeeper 3</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="2701.688" Y="1471.742" Z="235.8253" />
        <Vector3 X="2679.172" Y="1476.478" Z="233.3912" />
        <Vector3 X="2676.956" Y="1498.336" Z="233.8315" />
        <Vector3 X="2702.328" Y="1501.661" Z="236.8436" />
        <Vector3 X="2727.859" Y="1503.695" Z="236.8422" />
        <Vector3 X="2729.316" Y="1499.782" Z="236.8306" />
      </Path>
      <ContinentId>1</ContinentId>
      <Type>Unidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>false</TryToUseEvenIfCanFindPathSuccess>
      <Name>Stonetalon Peak - Innkeeper 4</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="2729.093" Y="1505.363" Z="236.8424" />
        <Vector3 X="2676.915" Y="1499.71" Z="233.9615" />
        <Vector3 X="2677.092" Y="1503.969" Z="234.6228" />
      </Path>
      <ContinentId>1</ContinentId>
      <Type>Unidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>false</TryToUseEvenIfCanFindPathSuccess>
      <Name>Stonetalon Peak - Innkeeper to Repair</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="2697.422" Y="1526.811" Z="236.5822" />
        <Vector3 X="2700.776" Y="1507.417" Z="236.8257" />
        <Vector3 X="2728.286" Y="1508.681" Z="236.8301" />
        <Vector3 X="2729.617" Y="1499.92" Z="236.8318" />
      </Path>
      <ContinentId>1</ContinentId>
      <Type>Unidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>false</TryToUseEvenIfCanFindPathSuccess>
      <Name>Stonetalon Peak - Innkeeper 5</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="2730.255" Y="1529.084" Z="237.1491" />
        <Vector3 X="2731.193" Y="1512.423" Z="236.8214" />
        <Vector3 X="2730.08" Y="1500.653" Z="236.8338" />
      </Path>
      <ContinentId>1</ContinentId>
      <Type>Unidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>false</TryToUseEvenIfCanFindPathSuccess>
      <Name>Stonetalon Peak - Innkeeper 6</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="2729.88" Y="1505.886" Z="236.8413" />
        <Vector3 X="2702.917" Y="1502.07" Z="236.8409" />
        <Vector3 X="2680.19" Y="1498.707" Z="234.128" />
        <Vector3 X="2671.975" Y="1472.461" Z="231.4183" />
      </Path>
      <ContinentId>1</ContinentId>
      <Type>Unidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>false</TryToUseEvenIfCanFindPathSuccess>
      <Name>Stonetalon Peak - Innkeeper Out</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="2718.306" Y="1484.81" Z="235.4392" />
        <Vector3 X="2738.466" Y="1488.266" Z="234.8896" />
        <Vector3 X="2756.489" Y="1494.558" Z="235.1658" />
        <Vector3 X="2757.146" Y="1503.601" Z="235.0367" />
        <Vector3 X="2729.472" Y="1501.185" Z="236.8354" />
        <Vector3 X="2729.601" Y="1499.657" Z="236.8308" />
      </Path>
      <ContinentId>1</ContinentId>
      <Type>Unidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>false</TryToUseEvenIfCanFindPathSuccess>
      <Name>Stonetalon Peak - Innkeeper 7</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="2729.763" Y="1506.08" Z="236.8393" />
        <Vector3 X="2747.237" Y="1506.609" Z="236.1654" />
        <Vector3 X="2760.853" Y="1497.327" Z="236.2201" />
        <Vector3 X="2743.12" Y="1487.151" Z="234.9195" />
        <Vector3 X="2719.422" Y="1475.973" Z="236.5694" />
        <Vector3 X="2691.386" Y="1468.178" Z="233.9402" />
      </Path>
      <ContinentId>1</ContinentId>
      <Type>Unidirectional</Type>
      <TryToUseEvenIfCanFindPathSuccess>false</TryToUseEvenIfCanFindPathSuccess>
      <Name>Stonetalon Peak - Innkeeper Out 2</Name>
    </OffMeshConnection>
  </OffMeshConnections>
  <BlacklistNpc>
    <BlackNpc UniqueId="F130000965003CB9" Name="" />
    <BlackNpc UniqueId="F130000A9A0039B4" Name="" />
    <BlackNpc UniqueId="F130000AA10039B5" Name="" />
    <BlackNpc UniqueId="F130000AA10039B8" Name="" />
    <BlackNpc UniqueId="F130000AA10039B7" Name="" />
    <BlackNpc UniqueId="F130000AA10039B6" Name="" />
    <BlackNpc UniqueId="F13000324000CC7C" Name="" />
    <BlackNpc UniqueId="F130001680007186" Name="" />
    <BlackNpc UniqueId="F130000A4B00059A" Name="" />
    <BlackNpc UniqueId="F130001EBF00021C" Name="" />
    <BlackNpc UniqueId="F130002DE4000851" Name="" />
  </BlacklistNpc>
  <BlacklistNpcType />
  <Blackspots>
    <Blackspot X="1776.99353" Y="-2241.78076" Z="107.282211" Radius="25" Continent="None" Comment="" />
    <Blackspot X="1907.18079" Y="-2342.52441" Z="92.89732" Radius="35" Continent="None" Comment="" />
    <Blackspot X="2069.078" Y="-2397.40332" Z="89.1145" Radius="35" Continent="None" Comment="" />
    <Blackspot X="2319.54028" Y="-2534.04077" Z="100.677216" Radius="65" Continent="None" Comment="" />
    <Blackspot X="1466.32532" Y="-1866.71606" Z="121.55262" Radius="65" Continent="None" Comment="" />
    <Blackspot X="2039.63965" Y="-3092.57031" Z="101.546944" Radius="65" Continent="None" Comment="" />
    <Blackspot X="2249.736" Y="-3396.1875" Z="95.24604" Radius="65" Continent="None" Comment="" />
    <Blackspot X="2440.93" Y="-3483.77734" Z="92.3482056" Radius="65" Continent="None" Comment="" />
    <Blackspot X="2762.95654" Y="-2948.88452" Z="143.160049" Radius="10" Continent="None" Comment="" />
    <Blackspot X="2740.30127" Y="-2986.24683" Z="140.795273" Radius="10" Continent="None" Comment="" />
    <Blackspot X="2780.585" Y="-3012.97144" Z="154.0806" Radius="10" Continent="None" Comment="" />
    <Blackspot X="2803.386" Y="-2957.2085" Z="151.6598" Radius="10" Continent="None" Comment="" />
    <Blackspot X="2844.36768" Y="-3135.83984" Z="176.295624" Radius="35" Continent="None" Comment="" />
    <Blackspot X="2785.843" Y="-2980.81958" Z="150.773956" Radius="20" Continent="None" Comment="" />
    <Blackspot X="3234.98071" Y="-3669.78442" Z="123.456314" Radius="100" Continent="None" Comment="" />
    <Blackspot X="942.4201" Y="1036.97754" Z="100.821014" Radius="100" Continent="None" Comment="" />
    <Blackspot X="655.693" Y="1798.58" Z="-13.7681913" Radius="45" Continent="None" Comment="" />
    <Blackspot X="699.81" Y="1758.93" Z="-17.8566" Radius="45" Continent="None" Comment="" />
  </Blackspots>
</EasyQuestProfile>