<?xml version="1.0" encoding="utf-8"?>
<EasyQuestProfile xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <QuestsSorted>
    <QuestsSorted Action="RunCode" NameClass="wManager.wManagerSetting.ClearBlacklistOfCurrentProductSession();&#xD;&#xA;ProgressSettings.Initialize();&#xD;&#xA;wManager.Wow.Helpers.Quest.QuesterCurrentContext.CurrentStep = ProgressSettings.CurrentSettings.nightelfDruid - 1;&#xD;&#xA;&#xD;&#xA;Logging.Write(&quot;[FNV_Quester]: Loading current Quester step &quot; + (ProgressSettings.CurrentSettings.nightelfDruid));&#xD;&#xA;&#xD;&#xA;Thread p = new Thread(() =&gt;&#xD;&#xA;{    &#xD;&#xA;ProgressSettings.inProgress = true;&#xD;&#xA;Logging.Write(&quot;[FNV_Quester]: Progress saver initialized&quot;);&#xD;&#xA; &#xD;&#xA; while(robotManager.Products.Products.IsStarted)&#xD;&#xA; {&#xD;&#xA;if(!ProgressSettings.inProgress)&#xD;&#xA;{&#xD;&#xA;ProgressSettings.Dispose();&#xD;&#xA;Logging.Write(&quot;[FNV_Quester]: Progress saver disposed&quot;);&#xD;&#xA;break;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;  if (Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause)&#xD;&#xA;  {&#xD;&#xA; if(ProgressSettings.CurrentSettings.nightelfDruid != wManager.Wow.Helpers.Quest.QuesterCurrentContext.CurrentStep)&#xD;&#xA;{&#xD;&#xA;ProgressSettings.CurrentSettings.nightelfDruid = wManager.Wow.Helpers.Quest.QuesterCurrentContext.CurrentStep;&#xD;&#xA;ProgressSettings.CurrentSettings.Save();&#xD;&#xA;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;  Thread.Sleep(1000);&#xD;&#xA; }&#xD;&#xA;&#xD;&#xA;});&#xD;&#xA;&#xD;&#xA;p.Start();" />
    <QuestsSorted Action="Wait" NameClass="1" />
    <QuestsSorted Action="Wait" NameClass="1" />
    <QuestsSorted Action="Wait" NameClass="1" />
    <QuestsSorted Action="Wait" NameClass="1" />
    <QuestsSorted Action="RunCode" NameClass="FlightMaster.takeTaxi(&quot;Darkshore&quot;, &quot;Teldrassil&quot;);" />
    <QuestsSorted Action="Pulse" NameClass="ROUTEGoToDarnassusPortal" />
    <QuestsSorted Action="RunCode" NameClass="wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;&#xD;&#xA;&#xD;&#xA;Vector3 pos = new Vector3(8812.807f, 972.6884f, 32.50122f);&#xD;&#xA;&#xD;&#xA;while(ObjectManager.Me.Position.DistanceTo(pos) &gt; 1 &amp;&amp; Usefuls.SubMapZoneName.Contains(&quot;theran Village&quot;))&#xD;&#xA;                        {&#xD;&#xA;                            wManager.Wow.Helpers.MovementManager.Face(pos);&#xD;&#xA;                            wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 125);&#xD;&#xA;                            Thread.Sleep(robotManager.Helpful.Others.Random(10, 25));&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = true;" />
    <QuestsSorted Action="Pulse" NameClass="ROUTEGoToCenarionEnclave" />
    <QuestsSorted Action="PickUp" NameClass="HeedingtheCall" />
    <QuestsSorted Action="Pulse" NameClass="ROUTEGoUpCenarionEnclave" />
    <QuestsSorted Action="TurnIn" NameClass="HeedingtheCall" />
    <QuestsSorted Action="PickUp" NameClass="Moonglade" />
    <QuestsSorted Action="IfHasQuest" NameClass="5921" />
    <QuestsSorted Action="RunCode" NameClass="wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;&#xD;&#xA;&#xD;&#xA;while(Usefuls.SubMapZoneName.Contains(&quot;Enclave&quot;))&#xD;&#xA;{&#xD;&#xA;Logging.Write(&quot;[FNV_Quester]: Trying to teleport to Moonglade, hold on&quot;);&#xD;&#xA;System.Threading.Thread.Sleep(1000 * 5);&#xD;&#xA;Lua.LuaDoString(&quot;CastSpellByName('Teleport: Moonglade')&quot;);&#xD;&#xA;System.Threading.Thread.Sleep(1000 * 20);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = true;" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="TurnIn" NameClass="Moonglade" />
    <QuestsSorted Action="PickUp" NameClass="GreatBearSpirit" />
    <QuestsSorted Action="IfHasQuest" NameClass="5929" />
    <QuestsSorted Action="While" NameClass="ObjectManager.Me.Position.DistanceTo2D(new Vector3(8068.29f, -2284.12f, 496.9191f)) &gt; 10 &amp;&amp; !Quest.IsObjectiveComplete(1, 5929)" />
    <QuestsSorted Action="RunCode" NameClass="var position = new Vector3(8068.29f, -2284.12f, 496.9191f);&#xD;&#xA;int npcEntryId = 11956;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;wManager.Wow.Bot.Tasks.GoToTask.ToPositionAndIntecractWithNpc(position, npcEntryId);&#xD;&#xA;System.Threading.Thread.Sleep(1000 * 2);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;" />
    <QuestsSorted Action="EndWhile" NameClass="" />
    <QuestsSorted Action="RunCode" NameClass="System.Threading.Thread.Sleep(1000 * 2);&#xD;&#xA;&#xD;&#xA;Usefuls.SelectGossipOption(1);&#xD;&#xA;System.Threading.Thread.Sleep(1000 * 2);&#xD;&#xA;&#xD;&#xA;Usefuls.SelectGossipOption(1);&#xD;&#xA;System.Threading.Thread.Sleep(1000 * 2);&#xD;&#xA;&#xD;&#xA;Usefuls.SelectGossipOption(1);&#xD;&#xA;System.Threading.Thread.Sleep(1000 * 2);&#xD;&#xA;&#xD;&#xA;Usefuls.SelectGossipOption(1);&#xD;&#xA;System.Threading.Thread.Sleep(1000 * 2);" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="TurnIn" NameClass="GreatBearSpirit" />
    <QuestsSorted Action="PickUp" NameClass="BacktoDarnassus" />
    <QuestsSorted Action="IfHasQuest" NameClass="5931" />
    <QuestsSorted Action="RunCode" NameClass="var position = new Vector3(7795f, -2400.4f, 489.4f);&#xD;&#xA;int npcEntryId = 11800;&#xD;&#xA;&#xD;&#xA;wManager.Wow.Bot.Tasks.GoToTask.ToPositionAndIntecractWithNpc(position, npcEntryId);&#xD;&#xA;&#xD;&#xA; if (wManager.Wow.Bot.Tasks.GoToTask.ToPositionAndIntecractWithNpc(position, npcEntryId))&#xD;&#xA;    {&#xD;&#xA;     Usefuls.SelectGossipOption(1);&#xD;&#xA;     System.Threading.Thread.Sleep(2000);&#xD;&#xA;&#xD;&#xA;}" />
    <QuestsSorted Action="If" NameClass="ObjectManager.Me.IsOnTaxi" />
    <QuestsSorted Action="RunCode" NameClass="MovementManager.StopMove();" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="While" NameClass="ObjectManager.Me.IsOnTaxi" />
    <QuestsSorted Action="Wait" NameClass="5000" />
    <QuestsSorted Action="EndWhile" NameClass="" />
    <QuestsSorted Action="Pulse" NameClass="ROUTEGoToDarnassusPortal" />
    <QuestsSorted Action="RunCode" NameClass="wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;&#xD;&#xA;&#xD;&#xA;Vector3 pos = new Vector3(8812.807f, 972.6884f, 32.50122f);&#xD;&#xA;&#xD;&#xA;while(ObjectManager.Me.Position.DistanceTo(pos) &gt; 1 &amp;&amp; Usefuls.SubMapZoneName.Contains(&quot;theran Village&quot;))&#xD;&#xA;                        {&#xD;&#xA;                            wManager.Wow.Helpers.MovementManager.Face(pos);&#xD;&#xA;                            wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 125);&#xD;&#xA;                            Thread.Sleep(robotManager.Helpful.Others.Random(10, 25));&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = true;" />
    <QuestsSorted Action="Pulse" NameClass="ROUTEGoToCenarionEnclave" />
    <QuestsSorted Action="Pulse" NameClass="ROUTEGoUpCenarionEnclave" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="TurnIn" NameClass="BacktoDarnassus" />
    <QuestsSorted Action="PickUp" NameClass="BodyandHeart" />
    <QuestsSorted Action="IfHasQuest" NameClass="6001" />
    <QuestsSorted Action="Pulse" NameClass="ROUTEDownCenarionEnclave" />
    <QuestsSorted Action="Pulse" NameClass="ROUTEGoToDarnassusPortalInside" />
    <QuestsSorted Action="RunCode" NameClass="wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;&#xD;&#xA;&#xD;&#xA;Vector3 pos = new Vector3(9946.378f, 2642.551f, 1316.749f);&#xD;&#xA;&#xD;&#xA;while(ObjectManager.Me.Position.DistanceTo(pos) &gt; 1 &amp;&amp; Usefuls.MapZoneName.Contains(&quot;Darnassus&quot;))&#xD;&#xA;                        {&#xD;&#xA;                            wManager.Wow.Helpers.MovementManager.Face(pos);&#xD;&#xA;                            wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 125);&#xD;&#xA;                            Thread.Sleep(robotManager.Helpful.Others.Random(10, 25));&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = true;" />
    <QuestsSorted Action="Pulse" NameClass="ROUTEGoToFlightMaster" />
    <QuestsSorted Action="RunCode" NameClass="FlightMaster.takeTaxi(&quot;Teldrassil&quot;, &quot;Darkshore&quot;);" />
    <QuestsSorted Action="Pulse" NameClass="ROUTEGoToMoonkinStone" />
    <QuestsSorted Action="Pulse" NameClass="BodyandHeartSummonKill" />
    <QuestsSorted Action="Pulse" NameClass="BodyandHeart" />
    <QuestsSorted Action="Pulse" NameClass="ROUTELunaclawBackToAuberdine" />
    <QuestsSorted Action="RunCode" NameClass="FlightMaster.takeTaxi(&quot;Darkshore&quot;, &quot;Teldrassil&quot;);" />
    <QuestsSorted Action="Pulse" NameClass="ROUTEGoToDarnassusPortal" />
    <QuestsSorted Action="RunCode" NameClass="wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;&#xD;&#xA;&#xD;&#xA;Vector3 pos = new Vector3(8812.807f, 972.6884f, 32.50122f);&#xD;&#xA;&#xD;&#xA;while(ObjectManager.Me.Position.DistanceTo(pos) &gt; 1 &amp;&amp; Usefuls.SubMapZoneName.Contains(&quot;theran Village&quot;))&#xD;&#xA;                        {&#xD;&#xA;                            wManager.Wow.Helpers.MovementManager.Face(pos);&#xD;&#xA;                            wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 125);&#xD;&#xA;                            Thread.Sleep(robotManager.Helpful.Others.Random(10, 25));&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = true;" />
    <QuestsSorted Action="Pulse" NameClass="ROUTEGoToCenarionEnclave" />
    <QuestsSorted Action="Pulse" NameClass="ROUTEGoUpCenarionEnclave" />
    <QuestsSorted Action="TurnIn" NameClass="BodyandHeart" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="Pulse" NameClass="ROUTEDownCenarionEnclave" />
    <QuestsSorted Action="Pulse" NameClass="ROUTEGoToDarnassusPortalInside" />
    <QuestsSorted Action="RunCode" NameClass="wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;&#xD;&#xA;&#xD;&#xA;Vector3 pos = new Vector3(9946.378f, 2642.551f, 1316.749f);&#xD;&#xA;&#xD;&#xA;while(ObjectManager.Me.Position.DistanceTo(pos) &gt; 1 &amp;&amp; Usefuls.MapZoneName.Contains(&quot;Darnassus&quot;))&#xD;&#xA;                        {&#xD;&#xA;                            wManager.Wow.Helpers.MovementManager.Face(pos);&#xD;&#xA;                            wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 125);&#xD;&#xA;                            Thread.Sleep(robotManager.Helpful.Others.Random(10, 25));&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = true;" />
    <QuestsSorted Action="Pulse" NameClass="ROUTEGoToFlightMaster" />
    <QuestsSorted Action="RunCode" NameClass="FlightMaster.takeTaxi(&quot;Teldrassil&quot;, &quot;Darkshore&quot;);" />
    <QuestsSorted Action="RunCode" NameClass="ProgressSettings.CurrentSettings.darkshoreEins = 13;&#xD;&#xA;ProgressSettings.CurrentSettings.Save();&#xD;&#xA;ProgressSettings.inProgress = false;&#xD;&#xA;ProgressSettings.Dispose();&#xD;&#xA;" />
    <QuestsSorted Action="LoadProfile" NameClass="FNV_V2\#6 (14-16) Auberdine p1.xml" />
  </QuestsSorted>
  <NpcQuest>
    <NPCQuest Id="3602" Name="Kal" GameObject="false">
      <PickUpQuests>
        <int>5923</int>
      </PickUpQuests>
      <TurnInQuests />
      <Position X="9741.91" Y="966" Z="1293.695" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="4217" Name="Mathrengyl Bearwalker" GameObject="false">
      <PickUpQuests>
        <int>27</int>
        <int>6001</int>
        <int>6121</int>
        <int>5921</int>
        <int>3785</int>
        <int>6762</int>
        <int>9063</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>5061</int>
        <int>5931</int>
        <int>6001</int>
        <int>4986</int>
        <int>5923</int>
        <int>5924</int>
        <int>5925</int>
        <int>3370</int>
        <int>3781</int>
        <int>3785</int>
        <int>3803</int>
        <int>6125</int>
        <int>6761</int>
      </TurnInQuests>
      <Position X="10179" Y="2563.98" Z="1340.047" />
    </NPCQuest>
    <NPCQuest Id="11802" Name="Dendrite Starblaze" GameObject="false">
      <PickUpQuests>
        <int>5929</int>
        <int>5931</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>5921</int>
        <int>5929</int>
      </TurnInQuests>
      <Position X="8020" Y="-2678.74" Z="524.4499" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="4219" Name="Fylerian Nightwing" GameObject="false">
      <PickUpQuests>
        <int>5924</int>
      </PickUpQuests>
      <TurnInQuests />
      <Position X="10179.4" Y="2583.69" Z="1325.967" />
    </NPCQuest>
  </NpcQuest>
  <Npc />
  <EasyQuests>
    <EasyQuest>
      <Name>Heeding the Call</Name>
      <QuestId>
        <int>5924</int>
      </QuestId>
      <QuestType>None</QuestType>
      <QuestClass />
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTEDruidGoToDarnassus</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="9850.092" Y="974.7205" Z="1305.407" />
          <Vector3 X="9847.293" Y="1012.677" Z="1305.562" />
          <Vector3 X="9851.958" Y="1047.312" Z="1305.163" />
          <Vector3 X="9866.566" Y="1078.793" Z="1307.992" />
          <Vector3 X="9884.607" Y="1107.343" Z="1308.014" />
          <Vector3 X="9906.01" Y="1136.163" Z="1308.134" />
          <Vector3 X="9915.017" Y="1168.266" Z="1308.003" />
          <Vector3 X="9911.172" Y="1199.582" Z="1308.485" />
          <Vector3 X="9912.674" Y="1210.398" Z="1308.021" />
          <Vector3 X="9919.825" Y="1228.718" Z="1307.823" />
          <Vector3 X="9932.257" Y="1241.035" Z="1307.882" />
          <Vector3 X="9940.207" Y="1244.68" Z="1307.842" />
          <Vector3 X="9971.962" Y="1243.873" Z="1307.857" />
          <Vector3 X="9986.13" Y="1243.967" Z="1307.859" />
          <Vector3 X="10000.31" Y="1254.218" Z="1307.857" />
          <Vector3 X="10009.14" Y="1265.443" Z="1307.932" />
          <Vector3 X="10027.62" Y="1296.367" Z="1307.322" />
          <Vector3 X="10052.5" Y="1320.156" Z="1307.33" />
          <Vector3 X="10078.96" Y="1340.993" Z="1307.517" />
          <Vector3 X="10105.25" Y="1365.6" Z="1307.991" />
          <Vector3 X="10130.81" Y="1387.913" Z="1312.572" />
          <Vector3 X="10150.01" Y="1417.231" Z="1320.085" />
          <Vector3 X="10153.5" Y="1451.795" Z="1325.559" />
          <Vector3 X="10147.13" Y="1486.074" Z="1327.373" />
          <Vector3 X="10146.81" Y="1519.874" Z="1325.548" />
          <Vector3 X="10125.94" Y="1547.472" Z="1321.33" />
          <Vector3 X="10100.98" Y="1569.538" Z="1321.342" />
          <Vector3 X="10083.16" Y="1600.365" Z="1320.181" />
          <Vector3 X="10078.96" Y="1635.059" Z="1321.283" />
          <Vector3 X="10086.94" Y="1668.845" Z="1325.194" />
          <Vector3 X="10101.09" Y="1699.704" Z="1329.026" />
          <Vector3 X="10109.26" Y="1734.659" Z="1333.039" />
          <Vector3 X="10104.49" Y="1769.066" Z="1334.497" />
          <Vector3 X="10082.85" Y="1795.948" Z="1328.729" />
          <Vector3 X="10053.78" Y="1813.176" Z="1324.228" />
          <Vector3 X="10021.69" Y="1829.184" Z="1319.496" />
          <Vector3 X="10000.24" Y="1855.442" Z="1317.865" />
          <Vector3 X="9979.328" Y="1883.07" Z="1320.161" />
          <Vector3 X="9980.419" Y="1917.832" Z="1322.78" />
          <Vector3 X="9984.212" Y="1953.678" Z="1325.718" />
          <Vector3 X="9985.945" Y="1987.567" Z="1327.467" />
          <Vector3 X="9983.524" Y="2021.213" Z="1328.062" />
          <Vector3 X="9981.589" Y="2026.314" Z="1328.037" />
          <Vector3 X="9960.669" Y="2054.308" Z="1328.196" />
          <Vector3 X="9952.138" Y="2086.634" Z="1327.699" />
          <Vector3 X="9952.579" Y="2122.68" Z="1327.645" />
          <Vector3 X="9954.271" Y="2157.639" Z="1327.559" />
          <Vector3 X="9955.851" Y="2192.593" Z="1327.78" />
          <Vector3 X="9956.091" Y="2207.92" Z="1328.958" />
          <Vector3 X="9954.379" Y="2243.88" Z="1333.974" />
          <Vector3 X="9952.309" Y="2277.767" Z="1341.394" />
          <Vector3 X="9950.748" Y="2312.729" Z="1336.552" />
          <Vector3 X="9950.598" Y="2348.778" Z="1330.752" />
          <Vector3 X="9950.761" Y="2383.777" Z="1329.516" />
          <Vector3 X="9949.608" Y="2417.704" Z="1326.718" />
          <Vector3 X="9947.896" Y="2452.662" Z="1321.278" />
          <Vector3 X="9950.229" Y="2481.715" Z="1316.197" />
          <Vector3 X="9953.22" Y="2487.059" Z="1316.355" />
          <Vector3 X="9963.844" Y="2502.046" Z="1317.028" />
          <Vector3 X="9972.332" Y="2511.037" Z="1317.36" />
          <Vector3 X="10006.26" Y="2509.114" Z="1317.696" />
          <Vector3 X="10021.89" Y="2504.115" Z="1318.391" />
          <Vector3 X="10033.51" Y="2501.05" Z="1318.426" />
          <Vector3 X="10050.49" Y="2509.869" Z="1318.382" />
          <Vector3 X="10066.27" Y="2518.581" Z="1319.926" />
          <Vector3 X="10081.15" Y="2526.75" Z="1317.426" />
          <Vector3 X="10096.85" Y="2535.608" Z="1318.958" />
          <Vector3 X="10112.69" Y="2541.485" Z="1320.944" />
          <Vector3 X="10130.34" Y="2545.155" Z="1321.803" />
          <Vector3 X="10146.5" Y="2550.277" Z="1321.824" />
          <Vector3 X="10155.21" Y="2555.853" Z="1323.127" />
          <Vector3 X="10163.9" Y="2563.411" Z="1326.023" />
          <Vector3 X="10166.86" Y="2565.871" Z="1325.966" />
          <Vector3 X="10172.23" Y="2566.875" Z="1325.966" />
          <Vector3 X="10174.72" Y="2567.246" Z="1325.966" />
          <Vector3 X="10178.01" Y="2568.058" Z="1325.966" />
          <Vector3 X="10180.31" Y="2569.05" Z="1325.966" />
          <Vector3 X="10182.53" Y="2570.651" Z="1325.966" />
          <Vector3 X="10184.19" Y="2571.894" Z="1325.966" />
          <Vector3 X="10186.9" Y="2573.933" Z="1325.966" />
          <Vector3 X="10188.38" Y="2575.047" Z="1326.377" />
          <Vector3 X="10189.19" Y="2576.194" Z="1326.998" />
          <Vector3 X="10189.51" Y="2578.013" Z="1327.593" />
          <Vector3 X="10189.22" Y="2579.514" Z="1328.23" />
          <Vector3 X="10188.71" Y="2580.722" Z="1328.752" />
          <Vector3 X="10187.73" Y="2581.741" Z="1329.21" />
          <Vector3 X="10186.81" Y="2582.317" Z="1329.568" />
          <Vector3 X="10184.57" Y="2582.539" Z="1330.38" />
          <Vector3 X="10183.04" Y="2581.953" Z="1331.034" />
          <Vector3 X="10181.87" Y="2580.988" Z="1331.631" />
          <Vector3 X="10181.37" Y="2579.427" Z="1332.15" />
          <Vector3 X="10181.31" Y="2578.021" Z="1332.718" />
          <Vector3 X="10181.83" Y="2576.581" Z="1333.284" />
          <Vector3 X="10183" Y="2574.736" Z="1334.059" />
          <Vector3 X="10184.3" Y="2573.963" Z="1334.693" />
          <Vector3 X="10185.68" Y="2573.693" Z="1335.265" />
          <Vector3 X="10187.78" Y="2574.595" Z="1336.18" />
          <Vector3 X="10188.62" Y="2575.727" Z="1337.556" />
          <Vector3 X="10188.82" Y="2576.875" Z="1337.138" />
          <Vector3 X="10188.78" Y="2577.858" Z="1337.385" />
          <Vector3 X="10188.38" Y="2580.346" Z="1338.344" />
          <Vector3 X="10188.04" Y="2581.38" Z="1338.71" />
          <Vector3 X="10186.87" Y="2582.497" Z="1339.463" />
          <Vector3 X="10185.27" Y="2582.753" Z="1340.061" />
          <Vector3 X="10184.31" Y="2582.373" Z="1340.229" />
          <Vector3 X="10183.18" Y="2581.342" Z="1340.324" />
          <Vector3 X="10181.74" Y="2579.865" Z="1340.49" />
          <Vector3 X="10181.48" Y="2578.354" Z="1340.649" />
          <Vector3 X="10181.57" Y="2576.181" Z="1340.66" />
          <Vector3 X="10181.93" Y="2574.354" Z="1340.645" />
          <Vector3 X="10182.45" Y="2573.384" Z="1340.64" />
          <Vector3 X="10183.52" Y="2572.454" Z="1340.646" />
          <Vector3 X="10185.45" Y="2570.856" Z="1340.546" />
          <Vector3 X="10186.13" Y="2570.007" Z="1340.516" />
          <Vector3 X="10185.43" Y="2568.703" Z="1340.502" />
          <Vector3 X="10184.42" Y="2567.867" Z="1340.5" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Moonglade</Name>
      <QuestId>
        <int>5921</int>
      </QuestId>
      <QuestType>None</QuestType>
      <QuestClass />
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Great Bear Spirit</Name>
      <QuestId>
        <int>5929</int>
      </QuestId>
      <QuestType>None</QuestType>
      <QuestClass />
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>true</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Back to Darnassus</Name>
      <QuestId>
        <int>5931</int>
      </QuestId>
      <QuestType>None</QuestType>
      <QuestClass />
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTERutheranToDarnassus</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="8646.394" Y="857.7673" Z="22.3152" />
          <Vector3 X="8648.826" Y="867.3323" Z="22.94985" />
          <Vector3 X="8661.824" Y="876.5432" Z="22.23542" />
          <Vector3 X="8677.71" Y="883.3645" Z="22.66246" />
          <Vector3 X="8685.516" Y="898.704" Z="22.22197" />
          <Vector3 X="8687.56" Y="916.6474" Z="18.28825" />
          <Vector3 X="8690.415" Y="933.2442" Z="15.21253" />
          <Vector3 X="8698.55" Y="938.3927" Z="14.27953" />
          <Vector3 X="8715.26" Y="940.1537" Z="14.74874" />
          <Vector3 X="8732.885" Y="944.0529" Z="19.18339" />
          <Vector3 X="8749.216" Y="948.4758" Z="24.56856" />
          <Vector3 X="8761.548" Y="954.3123" Z="28.14117" />
          <Vector3 X="8771.773" Y="959.5283" Z="30.07917" />
          <Vector3 X="8796.214" Y="969.134" Z="30.19494" />
          <Vector3 X="8800.214" Y="975.134" Z="30.19494" />
          <Vector3 X="9945.13" Y="2616.89" Z="1316.46" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTEDarnassusToNPC</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="9945.609" Y="2610.893" Z="1316.259" />
          <Vector3 X="9946.168" Y="2596.366" Z="1316.187" />
          <Vector3 X="9946.395" Y="2572.653" Z="1318.307" />
          <Vector3 X="9946.809" Y="2563.465" Z="1316.767" />
          <Vector3 X="9947.725" Y="2558.203" Z="1316.269" />
          <Vector3 X="9962.352" Y="2545.913" Z="1316.851" />
          <Vector3 X="9980.888" Y="2529.954" Z="1316.286" />
          <Vector3 X="9998.715" Y="2514.431" Z="1315.174" />
          <Vector3 X="10006.26" Y="2509.114" Z="1317.696" />
          <Vector3 X="10021.89" Y="2504.115" Z="1318.391" />
          <Vector3 X="10033.51" Y="2501.05" Z="1318.426" />
          <Vector3 X="10050.49" Y="2509.869" Z="1318.382" />
          <Vector3 X="10066.27" Y="2518.581" Z="1319.926" />
          <Vector3 X="10081.15" Y="2526.75" Z="1317.426" />
          <Vector3 X="10096.85" Y="2535.608" Z="1318.958" />
          <Vector3 X="10112.69" Y="2541.485" Z="1320.944" />
          <Vector3 X="10130.34" Y="2545.155" Z="1321.803" />
          <Vector3 X="10146.5" Y="2550.277" Z="1321.824" />
          <Vector3 X="10155.21" Y="2555.853" Z="1323.127" />
          <Vector3 X="10163.9" Y="2563.411" Z="1326.023" />
          <Vector3 X="10166.86" Y="2565.871" Z="1325.966" />
          <Vector3 X="10172.23" Y="2566.875" Z="1325.966" />
          <Vector3 X="10174.72" Y="2567.246" Z="1325.966" />
          <Vector3 X="10178.01" Y="2568.058" Z="1325.966" />
          <Vector3 X="10180.31" Y="2569.05" Z="1325.966" />
          <Vector3 X="10182.53" Y="2570.651" Z="1325.966" />
          <Vector3 X="10184.19" Y="2571.894" Z="1325.966" />
          <Vector3 X="10186.9" Y="2573.933" Z="1325.966" />
          <Vector3 X="10188.38" Y="2575.047" Z="1326.377" />
          <Vector3 X="10189.19" Y="2576.194" Z="1326.998" />
          <Vector3 X="10189.51" Y="2578.013" Z="1327.593" />
          <Vector3 X="10189.22" Y="2579.514" Z="1328.23" />
          <Vector3 X="10188.71" Y="2580.722" Z="1328.752" />
          <Vector3 X="10187.73" Y="2581.741" Z="1329.21" />
          <Vector3 X="10186.81" Y="2582.317" Z="1329.568" />
          <Vector3 X="10184.57" Y="2582.539" Z="1330.38" />
          <Vector3 X="10183.04" Y="2581.953" Z="1331.034" />
          <Vector3 X="10181.87" Y="2580.988" Z="1331.631" />
          <Vector3 X="10181.37" Y="2579.427" Z="1332.15" />
          <Vector3 X="10181.31" Y="2578.021" Z="1332.718" />
          <Vector3 X="10181.83" Y="2576.581" Z="1333.284" />
          <Vector3 X="10183" Y="2574.736" Z="1334.059" />
          <Vector3 X="10184.3" Y="2573.963" Z="1334.693" />
          <Vector3 X="10185.68" Y="2573.693" Z="1335.265" />
          <Vector3 X="10187.78" Y="2574.595" Z="1336.18" />
          <Vector3 X="10188.62" Y="2575.727" Z="1337.556" />
          <Vector3 X="10188.82" Y="2576.875" Z="1337.138" />
          <Vector3 X="10188.78" Y="2577.858" Z="1337.385" />
          <Vector3 X="10188.38" Y="2580.346" Z="1338.344" />
          <Vector3 X="10188.04" Y="2581.38" Z="1338.71" />
          <Vector3 X="10186.87" Y="2582.497" Z="1339.463" />
          <Vector3 X="10185.27" Y="2582.753" Z="1340.061" />
          <Vector3 X="10184.31" Y="2582.373" Z="1340.229" />
          <Vector3 X="10183.18" Y="2581.342" Z="1340.324" />
          <Vector3 X="10181.74" Y="2579.865" Z="1340.49" />
          <Vector3 X="10181.48" Y="2578.354" Z="1340.649" />
          <Vector3 X="10181.57" Y="2576.181" Z="1340.66" />
          <Vector3 X="10181.93" Y="2574.354" Z="1340.645" />
          <Vector3 X="10182.45" Y="2573.384" Z="1340.64" />
          <Vector3 X="10183.52" Y="2572.454" Z="1340.646" />
          <Vector3 X="10185.45" Y="2570.856" Z="1340.546" />
          <Vector3 X="10186.13" Y="2570.007" Z="1340.516" />
          <Vector3 X="10185.43" Y="2568.703" Z="1340.502" />
          <Vector3 X="10184.42" Y="2567.867" Z="1340.5" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Body and Heart</Name>
      <QuestId>
        <int>6001</int>
      </QuestId>
      <QuestType>InteractWithNpc</QuestType>
      <QuestClass xsi:type="InteractWithNpcEasyQuestClass">
        <HotSpots>
          <Vector3 X="6331.9" Y="93.3575" Z="21.4216" />
        </HotSpots>
        <GossipOptionNpcInteractWith>1</GossipOptionNpcInteractWith>
        <Macro />
        <IgnoreIfDead>false</IgnoreIfDead>
        <EntryIdTarget>
          <int>12144</int>
        </EntryIdTarget>
        <Range>4.5</Range>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>true</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTELeaveDarnassus</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="10147.07" Y="2551.354" Z="1321.798" />
          <Vector3 X="10135.19" Y="2546.659" Z="1321.787" />
          <Vector3 X="10113.35" Y="2538.505" Z="1321.094" />
          <Vector3 X="10090.69" Y="2529.238" Z="1317.558" />
          <Vector3 X="10070.04" Y="2517.665" Z="1319.813" />
          <Vector3 X="10047.9" Y="2505.454" Z="1318.398" />
          <Vector3 X="10024.67" Y="2503.252" Z="1318.401" />
          <Vector3 X="10001.96" Y="2512.245" Z="1316.04" />
          <Vector3 X="9983.175" Y="2527.508" Z="1316.237" />
          <Vector3 X="9964.185" Y="2543.951" Z="1316.936" />
          <Vector3 X="9947.361" Y="2559.763" Z="1315.867" />
          <Vector3 X="9946.354" Y="2569.608" Z="1318.286" />
          <Vector3 X="9946.391" Y="2576.517" Z="1318.33" />
          <Vector3 X="9946.353" Y="2597.195" Z="1316.187" />
          <Vector3 X="9946.68" Y="2621.689" Z="1317.579" />
          <Vector3 X="9946.68" Y="2630.689" Z="1317.579" />
          <Vector3 X="8774.506" Y="964.3582" Z="30.34785" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTEGoToFlightMaster</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="8774.506" Y="964.3582" Z="30.34785" />
          <Vector3 X="8762.869" Y="953.2875" Z="28.41916" />
          <Vector3 X="8746.362" Y="945.9365" Z="23.52377" />
          <Vector3 X="8723.056" Y="942.7894" Z="16.34731" />
          <Vector3 X="8702.429" Y="942.8641" Z="13.59583" />
          <Vector3 X="8698.897" Y="941.2781" Z="13.84284" />
          <Vector3 X="8692.17" Y="933.1571" Z="15.21885" />
          <Vector3 X="8687.269" Y="909.4539" Z="20.27567" />
          <Vector3 X="8684.807" Y="888.9237" Z="22.48429" />
          <Vector3 X="8677.577" Y="881.174" Z="22.72689" />
          <Vector3 X="8664.614" Y="877.5828" Z="22.22262" />
          <Vector3 X="8651.417" Y="871.9987" Z="23.26222" />
          <Vector3 X="8645.62" Y="854.5952" Z="22.18823" />
          <Vector3 X="8644.353" Y="849.3626" Z="22.85338" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTEGoToMoonkinStone</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="6351.816" Y="544.3712" Z="15.6494" />
          <Vector3 X="6355.99" Y="542.4326" Z="15.41718" />
          <Vector3 X="6359.604" Y="541.1907" Z="13.81206" />
          <Vector3 X="6368.19" Y="537.8527" Z="8.522152" />
          <Vector3 X="6372.837" Y="535.8732" Z="8.552594" />
          <Vector3 X="6370.481" Y="527.8114" Z="8.951351" />
          <Vector3 X="6370.583" Y="522.4289" Z="9.372115" />
          <Vector3 X="6373.842" Y="518.2157" Z="8.977741" />
          <Vector3 X="6384.246" Y="506.0087" Z="7.935705" />
          <Vector3 X="6390.172" Y="502.4573" Z="7.702288" />
          <Vector3 X="6398.352" Y="500.4262" Z="7.431735" />
          <Vector3 X="6410.098" Y="496.9537" Z="7.877209" />
          <Vector3 X="6425.667" Y="490.6432" Z="7.711603" />
          <Vector3 X="6431.92" Y="485.0881" Z="7.127979" />
          <Vector3 X="6432.928" Y="474.4254" Z="7.049804" />
          <Vector3 X="6433.167" Y="449.2065" Z="8.218243" />
          <Vector3 X="6437.076" Y="425.7805" Z="10.82063" />
          <Vector3 X="6439" Y="416.0216" Z="11.07163" />
          <Vector3 X="6430.854" Y="406.8731" Z="11.03491" />
          <Vector3 X="6414.612" Y="388.5559" Z="12.6927" />
          <Vector3 X="6400.349" Y="369.5486" Z="16.44776" />
          <Vector3 X="6393.577" Y="362.2736" Z="18.01093" />
          <Vector3 X="6370.155" Y="358.4942" Z="21.41039" />
          <Vector3 X="6350.63" Y="352.6604" Z="22.58889" />
          <Vector3 X="6341.135" Y="343.7314" Z="24.13776" />
          <Vector3 X="6322.168" Y="327.0916" Z="25.35058" />
          <Vector3 X="6311.082" Y="317.6642" Z="24.13874" />
          <Vector3 X="6308.709" Y="309.5771" Z="24.36281" />
          <Vector3 X="6307.341" Y="304.4174" Z="24.63913" />
          <Vector3 X="6315.321" Y="292.2479" Z="26.0643" />
          <Vector3 X="6321.635" Y="281.7505" Z="26.86969" />
          <Vector3 X="6329.821" Y="267.0717" Z="27.65444" />
          <Vector3 X="6332.058" Y="263.0457" Z="27.69575" />
          <Vector3 X="6335.457" Y="240.5827" Z="33.90017" />
          <Vector3 X="6331.718" Y="219.499" Z="35.6772" />
          <Vector3 X="6326.968" Y="197.0215" Z="33.79466" />
          <Vector3 X="6322.988" Y="179.1044" Z="28.23698" />
          <Vector3 X="6323.537" Y="166.8667" Z="24.06585" />
          <Vector3 X="6325.968" Y="158.7973" Z="23.93768" />
          <Vector3 X="6332.343" Y="152.231" Z="24.18571" />
          <Vector3 X="6343.681" Y="141.9034" Z="23.26527" />
          <Vector3 X="6347.718" Y="137.3135" Z="22.37743" />
          <Vector3 X="6351.069" Y="132.1868" Z="21.76548" />
          <Vector3 X="6347.639" Y="126.2461" Z="22.32702" />
          <Vector3 X="6341.136" Y="115.0066" Z="21.77124" />
          <Vector3 X="6335.083" Y="105.2734" Z="21.80398" />
          <Vector3 X="6328.769" Y="96.60087" Z="21.39696" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTEInnkeeperToNPC</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="10122.05" Y="2238.968" Z="1327.564" />
          <Vector3 X="10124.26" Y="2242.475" Z="1327.633" />
          <Vector3 X="10135.69" Y="2255.013" Z="1327.787" />
          <Vector3 X="10152.19" Y="2273.115" Z="1328.387" />
          <Vector3 X="10166.57" Y="2290.979" Z="1328.412" />
          <Vector3 X="10179.3" Y="2313.588" Z="1327.647" />
          <Vector3 X="10183.07" Y="2329.125" Z="1327.6" />
          <Vector3 X="10177.45" Y="2354.329" Z="1328.233" />
          <Vector3 X="10175.27" Y="2379.47" Z="1324.09" />
          <Vector3 X="10171.62" Y="2404.466" Z="1322.959" />
          <Vector3 X="10163.45" Y="2427.51" Z="1321.211" />
          <Vector3 X="10146.69" Y="2444.102" Z="1321.834" />
          <Vector3 X="10127.94" Y="2459.871" Z="1320.321" />
          <Vector3 X="10109.7" Y="2477.253" Z="1317.222" />
          <Vector3 X="10100.75" Y="2499.104" Z="1317.558" />
          <Vector3 X="10098.87" Y="2508.919" Z="1317.593" />
          <Vector3 X="10092.13" Y="2526.012" Z="1317.56" />
          <Vector3 X="10091.17" Y="2531.266" Z="1317.797" />
          <Vector3 X="10101.46" Y="2537.911" Z="1319.587" />
          <Vector3 X="10123.57" Y="2543.654" Z="1321.67" />
          <Vector3 X="10142.31" Y="2550.326" Z="1321.724" />
          <Vector3 X="10146.49" Y="2552.198" Z="1321.763" />
          <Vector3 X="10155.75" Y="2557.141" Z="1323.739" />
          <Vector3 X="10161.84" Y="2561.609" Z="1325.881" />
          <Vector3 X="10168.32" Y="2564.667" Z="1325.965" />
          <Vector3 X="10178.5" Y="2568.316" Z="1325.965" />
          <Vector3 X="10186.78" Y="2574.182" Z="1325.965" />
          <Vector3 X="10188.84" Y="2580.285" Z="1328.489" />
          <Vector3 X="10184.02" Y="2582.654" Z="1331.502" />
          <Vector3 X="10181.29" Y="2577.966" Z="1332.737" />
          <Vector3 X="10183.24" Y="2575.114" Z="1334.009" />
          <Vector3 X="10186.79" Y="2574.548" Z="1335.708" />
          <Vector3 X="10188.95" Y="2577.361" Z="1337.276" />
          <Vector3 X="10187.68" Y="2581.453" Z="1338.993" />
          <Vector3 X="10182.44" Y="2580.072" Z="1340.457" />
          <Vector3 X="10181.91" Y="2575.901" Z="1340.672" />
          <Vector3 X="10184.97" Y="2571.26" Z="1340.561" />
          <Vector3 X="10184.3" Y="2566.949" Z="1340.48" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTEDownCenarionEnclave</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="10182.6" Y="2564.978" Z="1340.454" />
          <Vector3 X="10184.08" Y="2566.064" Z="1340.46" />
          <Vector3 X="10185.11" Y="2566.833" Z="1340.46" />
          <Vector3 X="10186.06" Y="2567.59" Z="1340.461" />
          <Vector3 X="10186.94" Y="2568.469" Z="1340.466" />
          <Vector3 X="10187.52" Y="2569.62" Z="1340.474" />
          <Vector3 X="10187.54" Y="2570.779" Z="1340.505" />
          <Vector3 X="10186.67" Y="2571.701" Z="1340.529" />
          <Vector3 X="10185.58" Y="2572.222" Z="1340.562" />
          <Vector3 X="10184.45" Y="2572.76" Z="1340.659" />
          <Vector3 X="10183.35" Y="2573.357" Z="1340.676" />
          <Vector3 X="10182.52" Y="2574.285" Z="1340.668" />
          <Vector3 X="10181.83" Y="2575.328" Z="1340.664" />
          <Vector3 X="10181.21" Y="2576.41" Z="1340.643" />
          <Vector3 X="10180.85" Y="2577.604" Z="1340.632" />
          <Vector3 X="10181.01" Y="2578.828" Z="1340.619" />
          <Vector3 X="10181.59" Y="2579.93" Z="1340.501" />
          <Vector3 X="10182.33" Y="2580.938" Z="1340.514" />
          <Vector3 X="10183.17" Y="2581.863" Z="1340.383" />
          <Vector3 X="10184.16" Y="2582.629" Z="1340.286" />
          <Vector3 X="10185.28" Y="2583.153" Z="1340.1" />
          <Vector3 X="10186.5" Y="2583.136" Z="1339.662" />
          <Vector3 X="10187.43" Y="2582.308" Z="1339.242" />
          <Vector3 X="10188.27" Y="2581.329" Z="1338.665" />
          <Vector3 X="10188.9" Y="2580.3" Z="1338.262" />
          <Vector3 X="10189.29" Y="2579.117" Z="1337.763" />
          <Vector3 X="10189.24" Y="2577.873" Z="1337.438" />
          <Vector3 X="10188.81" Y="2576.708" Z="1337.093" />
          <Vector3 X="10188.1" Y="2575.68" Z="1336.519" />
          <Vector3 X="10187.21" Y="2574.811" Z="1335.94" />
          <Vector3 X="10186.11" Y="2574.216" Z="1335.444" />
          <Vector3 X="10184.89" Y="2574.021" Z="1334.87" />
          <Vector3 X="10183.68" Y="2574.312" Z="1334.444" />
          <Vector3 X="10182.59" Y="2574.906" Z="1333.948" />
          <Vector3 X="10181.82" Y="2575.887" Z="1333.537" />
          <Vector3 X="10181.35" Y="2577.032" Z="1333.049" />
          <Vector3 X="10181.34" Y="2578.281" Z="1332.631" />
          <Vector3 X="10181.6" Y="2579.496" Z="1332.077" />
          <Vector3 X="10182.13" Y="2580.628" Z="1331.658" />
          <Vector3 X="10182.89" Y="2581.612" Z="1331.12" />
          <Vector3 X="10183.95" Y="2582.273" Z="1330.697" />
          <Vector3 X="10185.18" Y="2582.392" Z="1330.167" />
          <Vector3 X="10186.43" Y="2582.098" Z="1329.732" />
          <Vector3 X="10187.51" Y="2581.557" Z="1329.207" />
          <Vector3 X="10188.52" Y="2580.755" Z="1328.799" />
          <Vector3 X="10189.11" Y="2579.71" Z="1328.297" />
          <Vector3 X="10189.31" Y="2578.48" Z="1327.886" />
          <Vector3 X="10189.28" Y="2577.232" Z="1327.32" />
          <Vector3 X="10189" Y="2576.018" Z="1326.909" />
          <Vector3 X="10188.31" Y="2574.981" Z="1326.345" />
          <Vector3 X="10187.34" Y="2574.196" Z="1325.966" />
          <Vector3 X="10186.36" Y="2573.416" Z="1325.966" />
          <Vector3 X="10184.83" Y="2572.351" Z="1325.966" />
          <Vector3 X="10183.82" Y="2571.693" Z="1325.966" />
          <Vector3 X="10181.71" Y="2570.54" Z="1325.966" />
          <Vector3 X="10178.6" Y="2569.184" Z="1325.966" />
          <Vector3 X="10175.26" Y="2568.164" Z="1325.966" />
          <Vector3 X="10171.71" Y="2567.512" Z="1325.966" />
          <Vector3 X="10168.51" Y="2566.429" Z="1325.966" />
          <Vector3 X="10165.55" Y="2564.571" Z="1326.018" />
          <Vector3 X="10162.75" Y="2562.292" Z="1326.024" />
          <Vector3 X="10160.84" Y="2560.659" Z="1325.692" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>true</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTEGoToDarnassusPortal</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="8643.341" Y="850.9753" Z="22.64132" />
          <Vector3 X="8644.754" Y="857.4913" Z="22.3141" />
          <Vector3 X="8646.909" Y="866.9528" Z="22.95561" />
          <Vector3 X="8654.056" Y="873.7498" Z="22.86438" />
          <Vector3 X="8664.097" Y="876.5355" Z="22.22475" />
          <Vector3 X="8674.464" Y="878.0984" Z="22.39569" />
          <Vector3 X="8682.726" Y="883.9395" Z="23.11674" />
          <Vector3 X="8685.69" Y="894.3078" Z="22.19834" />
          <Vector3 X="8686.584" Y="904.769" Z="21.30937" />
          <Vector3 X="8687.483" Y="914.5767" Z="18.99204" />
          <Vector3 X="8688.756" Y="925.654" Z="15.47828" />
          <Vector3 X="8692.272" Y="935.4019" Z="14.9126" />
          <Vector3 X="8700.701" Y="941.2656" Z="13.78675" />
          <Vector3 X="8710.801" Y="941.2046" Z="14.1574" />
          <Vector3 X="8721.279" Y="940.7078" Z="15.86134" />
          <Vector3 X="8731.902" Y="942.533" Z="18.75525" />
          <Vector3 X="8741.148" Y="946.7112" Z="21.98418" />
          <Vector3 X="8750.656" Y="951.1334" Z="25.15724" />
          <Vector3 X="8759.755" Y="956.3705" Z="27.7964" />
          <Vector3 X="8769.304" Y="960.7198" Z="29.81736" />
          <Vector3 X="8779.298" Y="963.9138" Z="30.27552" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTEGoToCenarionEnclave</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="9946.434" Y="2608.285" Z="1316.23" />
          <Vector3 X="9946.482" Y="2601.497" Z="1316.188" />
          <Vector3 X="9945.998" Y="2587.619" Z="1316.189" />
          <Vector3 X="9945.683" Y="2570.127" Z="1318.29" />
          <Vector3 X="9951.652" Y="2554.198" Z="1316.362" />
          <Vector3 X="9965.061" Y="2542.108" Z="1317.056" />
          <Vector3 X="9978.222" Y="2530.574" Z="1316.44" />
          <Vector3 X="9991.561" Y="2519.26" Z="1316.001" />
          <Vector3 X="10006.6" Y="2510.313" Z="1317.656" />
          <Vector3 X="10022.7" Y="2503.556" Z="1318.399" />
          <Vector3 X="10039.99" Y="2502.535" Z="1318.422" />
          <Vector3 X="10055.15" Y="2511.193" Z="1318.988" />
          <Vector3 X="10070.43" Y="2519.719" Z="1319.772" />
          <Vector3 X="10085.78" Y="2528.118" Z="1317.558" />
          <Vector3 X="10101.22" Y="2536.343" Z="1319.519" />
          <Vector3 X="10117.88" Y="2541.562" Z="1321.393" />
          <Vector3 X="10134.79" Y="2545.944" Z="1321.793" />
          <Vector3 X="10147.38" Y="2550.944" Z="1321.831" />
          <Vector3 X="10156.27" Y="2556.41" Z="1323.696" />
          <Vector3 X="10163.7" Y="2563.346" Z="1326.023" />
          <Vector3 X="10166.17" Y="2565.952" Z="1325.966" />
          <Vector3 X="10169.68" Y="2572.631" Z="1325.966" />
          <Vector3 X="10169.78" Y="2577.098" Z="1325.965" />
          <Vector3 X="10172.85" Y="2579.574" Z="1325.965" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTEGoUpCenarionEnclave</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="10178.15" Y="2582.923" Z="1325.966" />
          <Vector3 X="10180.33" Y="2580.483" Z="1325.966" />
          <Vector3 X="10182.28" Y="2577.572" Z="1325.966" />
          <Vector3 X="10183.24" Y="2576.114" Z="1325.966" />
          <Vector3 X="10183.97" Y="2575.093" Z="1325.966" />
          <Vector3 X="10184.98" Y="2574.392" Z="1325.966" />
          <Vector3 X="10186.15" Y="2574.093" Z="1325.966" />
          <Vector3 X="10187.44" Y="2574.054" Z="1325.966" />
          <Vector3 X="10188.47" Y="2574.521" Z="1326.44" />
          <Vector3 X="10189.22" Y="2575.506" Z="1326.725" />
          <Vector3 X="10189.44" Y="2576.729" Z="1327.202" />
          <Vector3 X="10189.42" Y="2578.057" Z="1327.621" />
          <Vector3 X="10189.27" Y="2579.295" Z="1328.157" />
          <Vector3 X="10188.78" Y="2580.437" Z="1328.54" />
          <Vector3 X="10187.99" Y="2581.297" Z="1329.043" />
          <Vector3 X="10186.87" Y="2582.004" Z="1329.45" />
          <Vector3 X="10185.67" Y="2582.305" Z="1329.999" />
          <Vector3 X="10184.42" Y="2582.38" Z="1330.433" />
          <Vector3 X="10183.29" Y="2582.109" Z="1330.937" />
          <Vector3 X="10182.34" Y="2581.304" Z="1331.335" />
          <Vector3 X="10181.74" Y="2580.211" Z="1331.859" />
          <Vector3 X="10181.36" Y="2578.945" Z="1332.361" />
          <Vector3 X="10181.41" Y="2577.778" Z="1332.793" />
          <Vector3 X="10181.78" Y="2576.508" Z="1333.32" />
          <Vector3 X="10182.45" Y="2575.457" Z="1333.759" />
          <Vector3 X="10183.38" Y="2574.631" Z="1334.3" />
          <Vector3 X="10184.48" Y="2574.135" Z="1334.722" />
          <Vector3 X="10185.75" Y="2574.169" Z="1335.306" />
          <Vector3 X="10186.92" Y="2574.603" Z="1335.757" />
          <Vector3 X="10187.94" Y="2575.15" Z="1336.352" />
          <Vector3 X="10188.7" Y="2576.231" Z="1336.827" />
          <Vector3 X="10188.95" Y="2577.375" Z="1337.278" />
          <Vector3 X="10189.08" Y="2578.617" Z="1337.612" />
          <Vector3 X="10189.01" Y="2579.941" Z="1338.134" />
          <Vector3 X="10188.69" Y="2581.066" Z="1338.615" />
          <Vector3 X="10187.73" Y="2581.931" Z="1339.094" />
          <Vector3 X="10186.72" Y="2582.525" Z="1339.517" />
          <Vector3 X="10185.64" Y="2583.154" Z="1339.971" />
          <Vector3 X="10183.65" Y="2584.417" Z="1340.512" />
          <Vector3 X="10180.7" Y="2585.826" Z="1340.507" />
          <Vector3 X="10177.22" Y="2586.031" Z="1340.072" />
          <Vector3 X="10173.65" Y="2585.615" Z="1340.112" />
          <Vector3 X="10170.39" Y="2584.13" Z="1340.072" />
          <Vector3 X="10168.19" Y="2581.718" Z="1340.074" />
          <Vector3 X="10166.93" Y="2578.251" Z="1339.653" />
          <Vector3 X="10166.57" Y="2574.774" Z="1339.645" />
          <Vector3 X="10167.11" Y="2571.547" Z="1339.634" />
          <Vector3 X="10168.68" Y="2568.202" Z="1339.659" />
          <Vector3 X="10171.16" Y="2566.086" Z="1339.938" />
          <Vector3 X="10174.56" Y="2564.626" Z="1340.111" />
          <Vector3 X="10176.16" Y="2564.299" Z="1340.079" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>true</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTEGoToDarnassusPortalInside</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="10160.84" Y="2560.659" Z="1325.692" />
          <Vector3 X="10157.92" Y="2558.186" Z="1324.731" />
          <Vector3 X="10151.82" Y="2553.172" Z="1321.844" />
          <Vector3 X="10136.28" Y="2546.223" Z="1321.798" />
          <Vector3 X="10126.1" Y="2544.35" Z="1321.744" />
          <Vector3 X="10120.96" Y="2542.414" Z="1321.577" />
          <Vector3 X="10104.77" Y="2535.77" Z="1320.042" />
          <Vector3 X="10089.67" Y="2528.836" Z="1317.558" />
          <Vector3 X="10080.34" Y="2524.029" Z="1317.987" />
          <Vector3 X="10065.24" Y="2516.079" Z="1319.99" />
          <Vector3 X="10049.78" Y="2507.93" Z="1318.381" />
          <Vector3 X="10033.82" Y="2500.785" Z="1318.425" />
          <Vector3 X="10027.36" Y="2500.407" Z="1318.41" />
          <Vector3 X="10011.03" Y="2506.625" Z="1318.877" />
          <Vector3 X="9995.839" Y="2515.239" Z="1315.794" />
          <Vector3 X="9982.706" Y="2526.773" Z="1316.302" />
          <Vector3 X="9969.849" Y="2538.641" Z="1316.918" />
          <Vector3 X="9955.578" Y="2548.744" Z="1316.724" />
          <Vector3 X="9947.631" Y="2556.816" Z="1316.227" />
          <Vector3 X="9945.661" Y="2566.964" Z="1317.898" />
          <Vector3 X="9945.558" Y="2584.444" Z="1316.078" />
          <Vector3 X="9946.039" Y="2601.935" Z="1316.187" />
          <Vector3 X="9946.107" Y="2607.92" Z="1316.23" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTELunaclawBackToAuberdine</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="6339.423" Y="111.9866" Z="21.07787" />
          <Vector3 X="6344.038" Y="119.3041" Z="22.42788" />
          <Vector3 X="6349.633" Y="128.1886" Z="21.30884" />
          <Vector3 X="6353.979" Y="137.733" Z="22.56155" />
          <Vector3 X="6360.545" Y="145.917" Z="24.18345" />
          <Vector3 X="6366.647" Y="154.4277" Z="27.23205" />
          <Vector3 X="6370.637" Y="164.1363" Z="30.56857" />
          <Vector3 X="6372.375" Y="174.4342" Z="28.87295" />
          <Vector3 X="6370.224" Y="184.6512" Z="25.4344" />
          <Vector3 X="6366.092" Y="194.2994" Z="25.79759" />
          <Vector3 X="6361.417" Y="203.6913" Z="29.46727" />
          <Vector3 X="6354.612" Y="215.0287" Z="32.88975" />
          <Vector3 X="6346.455" Y="229.2718" Z="34.41327" />
          <Vector3 X="6337.692" Y="245.0638" Z="31.78907" />
          <Vector3 X="6329.202" Y="260.3662" Z="27.66083" />
          <Vector3 X="6320.619" Y="276.216" Z="26.93634" />
          <Vector3 X="6312.895" Y="291.9153" Z="25.62533" />
          <Vector3 X="6308.855" Y="301.8483" Z="24.95327" />
          <Vector3 X="6306.648" Y="309.7279" Z="24.00431" />
          <Vector3 X="6314.862" Y="319.9638" Z="24.52404" />
          <Vector3 X="6327.115" Y="332.4381" Z="25.42456" />
          <Vector3 X="6339.851" Y="343.6534" Z="24.14367" />
          <Vector3 X="6354.807" Y="352.6454" Z="22.66437" />
          <Vector3 X="6371.909" Y="358.2352" Z="21.20729" />
          <Vector3 X="6388.691" Y="360.7692" Z="18.78777" />
          <Vector3 X="6402.653" Y="370.3421" Z="15.94536" />
          <Vector3 X="6412.661" Y="384.6917" Z="13.23334" />
          <Vector3 X="6424.623" Y="397.4373" Z="11.11827" />
          <Vector3 X="6437.088" Y="409.6736" Z="10.87304" />
          <Vector3 X="6439.263" Y="415.8109" Z="11.06258" />
          <Vector3 X="6438.934" Y="422.8387" Z="11.26101" />
          <Vector3 X="6436.361" Y="437.9393" Z="12.37995" />
          <Vector3 X="6432.63" Y="455.0369" Z="7.986838" />
          <Vector3 X="6430.03" Y="472.3251" Z="7.691407" />
          <Vector3 X="6428.848" Y="484.8344" Z="7.573046" />
          <Vector3 X="6411.982" Y="493.8598" Z="7.911962" />
          <Vector3 X="6395.596" Y="501.4075" Z="7.473035" />
          <Vector3 X="6390.925" Y="504.2287" Z="7.830121" />
          <Vector3 X="6389.257" Y="510.3357" Z="8.109465" />
          <Vector3 X="6389.687" Y="513.9112" Z="8.95474" />
          <Vector3 X="6390.351" Y="520.6512" Z="8.645025" />
          <Vector3 X="6387.048" Y="530.4067" Z="8.668653" />
          <Vector3 X="6378.069" Y="535.5434" Z="8.246668" />
          <Vector3 X="6367.971" Y="538.3154" Z="8.774373" />
          <Vector3 X="6358.631" Y="541.4213" Z="14.22847" />
          <Vector3 X="6349.149" Y="547.1015" Z="15.77896" />
          <Vector3 X="6345.949" Y="550.8553" Z="15.93492" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Body and Heart Summon &amp; Kill</Name>
      <QuestId>
        <int>6001</int>
      </QuestId>
      <QuestType>OverridePulseCSharpCode</QuestType>
      <QuestClass xsi:type="OverridePulseCSharpCodeEasyQuestClass">
        <Code>Vector3 pos = new Vector3(6326.7f, 95.4f, 21.5f);
int npc = 12138;

while(ObjectManager.Me.Position.DistanceTo(pos) &gt; 5)
{
wManager.Wow.Bot.Tasks.GoToTask.ToPosition(pos, 1.0f, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore);
}

while(ObjectManager.Me.HealthPercent &lt; 95 || ObjectManager.Me.ManaPercentage &lt; 95)
{
   Thread.Sleep(1000);
}

if(ObjectManager.Me.Position.DistanceTo(pos) &lt;= 5 &amp;&amp; ItemsManager.GetItemCountById(15208) &gt; 0)
{
   wManager.Wow.Bot.Tasks.GoToTask.ToPosition(pos);
   System.Threading.Thread.Sleep(2500);
   MovementManager.StopMove();
   System.Threading.Thread.Sleep(2500);

   if(ItemsManager.GetItemCountById(15208) &gt; 0)
   {
            Logging.Write("[FNV_Quester]: Trying to summon quest npc...");
            MovementManager.StopMove();
            MovementManager.StopMoveTo(true, 5500 + Usefuls.Latency);
            MovementManager.CurrentPath.Clear();
            MovementManager.CurrentPathOrigine.Clear();
            wManager.Wow.Helpers.ItemsManager.UseItem(15208);
   }
}

var target = ObjectManager.GetObjectWoWUnit().FirstOrDefault(o =&gt; o.Entry == npc &amp;&amp; o.Position.DistanceTo(ObjectManager.Me.Position) &lt; 50 &amp;&amp; o.IsAlive);

if(target != null &amp;&amp; target.IsAlive)
{
   ObjectManager.Me.Target = target.Guid;
   Fight.StartFight();
   return true;
}

return false;
</Code>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition>var target = ObjectManager.GetObjectWoWUnit().FirstOrDefault(o =&gt; o.Entry == 12144);
return Quest.GetQuestCompleted(6001) || target != null;
</IsCompleteCondition>
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
  </EasyQuests>
  <Script>using robotManager.Helpful;
using robotManager.Products;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Threading;
using wManager.Events;
using wManager.Wow.Bot.Tasks;
using wManager.Wow.Enums;
using wManager.Wow.Helpers;
using wManager.Wow.ObjectManager;
using System.ComponentModel;
using System.Threading.Tasks;

//FlightMaster
public class FlightMaster
{

    private int priority;

    public FlightMaster(int priority)
    {
        this.priority = priority;
    }

    public static void main(String[] args)
    {
        FlightMaster temp = new FlightMaster(1);
        Logging.Write("Stuff");
        

       // temp.startFlightMaster();
    }

    public static int timer = 0;
    public static Vector3 myPositionAtStart = new Vector3(0, 0, 0);
    public static bool _deleteOldPath = false;
    public static bool _isLaunched ;
    static bool longMoveState = false;
    static Vector3 checkDistanceToDestination;
    private static int travelDistance = 1250;
    private static float saveDistance;
    public static Vector3 destinationVector = new Vector3(0, 0, 0);

    //public static MovementEvents.MovementCancelableHandler MovementEventsOnOnMovementPulse { get; private set; }

    // public static List&lt;FlightMasterDB&gt; FML = fillDB();

    public void startFlightMaster()
    {
        Logging.Write("[FNV_Quester]: Flight Master initialized");
        _isLaunched = true;
        FNVSettings.Load();
        
        //flightMasterLoop();
    }

    public void start()
    {
        //Logging.Write("Subscribing to event");
       // SubscribeToEvent();
       // watchForEvents();
    }

    public void stop()
    {
        //Logging.Write("Unsubscribing to event");
        //UnSubscribeEvents();
    }

    public static void disposeFlightMaster()
    {
        _isLaunched = false;
        FNVSettings.CurrentSettings.Save();
        //clearOldPath();
        //_deleteOldPath = true;
        //UnSubscribeEvents();
        //MovementEvents.OnMovementPulse -= new MovementEvents.MovementCancelableHandler(FlightMaster.MovementEventsOnOnMovementPulse);
        //Logging.Write("[FNV_Quester]: Flight Master disposed");
    }

    public static void disposeFlightMaster(int wert)
    {
        _isLaunched = false;
        if(wert == 1)
        {
            Logging.Write("Flight Master stopped, dead");
        }
        else
        {
            Logging.Write("Flight Master stopped, combat");
        }
    }


    private void SubscribeToEvent()
    {
         MovementEvents.OnMovementPulse += MovementEventsOnOnMovementPulse;
    }

    public void UnSubscribeEvents()
    {
        MovementEvents.OnMovementPulse -= MovementEventsOnOnMovementPulse;
    }

    private void watchForEvents()
    {

        EventsLuaWithArgs.OnEventsLuaWithArgs += (LuaEventsId id, List&lt;string&gt; args) =&gt;
        {


            if (id == wManager.Wow.Enums.LuaEventsId.PLAYER_DEAD)
            {
                Logging.Write("[FNV_Quester]: Player died, stop Flight Master");
                disposeFlightMaster(1);
            }
            if (id == wManager.Wow.Enums.LuaEventsId.PLAYER_ENTER_COMBAT)
            {
                disposeFlightMaster(2);
          		  Logging.Write("[FNV_Quester]: Player entered combat, stop Flight Master");
            }
          	

        };

    }


    private void MovementEventsOnOnMovementPulse(List&lt;Vector3&gt; path, CancelEventArgs cancelEventArgs)
    {
        if(timer &lt; 1)
        {
            //Logging.Write("Enter MovementEventsOnOnMovementPulse");
            checkDistanceToDestination = path.Last&lt;Vector3&gt;();
            longMove(path.Last&lt;Vector3&gt;());
            destinationVector = path.Last&lt;Vector3&gt;();
            if(ObjectManager.Me.Position.DistanceTo(destinationVector) &gt; 1000 &amp;&amp; !_isLaunched)
                startFlightMaster();
        }
        else
        {
            Logging.Write("[FNV_Quester]: Taxi in Pause");
        }
    }

    public bool longMove(Vector3 destination)
    {
        saveDistance = new Vector3(destination).DistanceTo(ObjectManager.Me.Position);
        //Logging.Write("[FNV_Quester]: Distance to destination " + saveDistance);
        if(new Vector3(destination).DistanceTo(ObjectManager.Me.Position) &lt; travelDistance)
        {
            longMoveState = false;
            return false;
        }
        else
        {
            longMoveState = true;
            return true;
        }
    }


    /*
    public static void flightMasterLoop()
    {

        myPositionAtStart = ObjectManager.Me.Position;
        //Logging.Write("[FNV_Quester]: Current position " + myPositionAtStart);
        while(Products.IsStarted &amp;&amp; _isLaunched)
        {
            try
            {
                if(!Products.InPause &amp;&amp; longMoveState)
                {
                    Logging.Write("[FNV_Quester]: Long move detected, checking own Taxi DB to find a better path");

                    FlightMasterDB from = getClosestFlightMasterFrom();
                    FlightMasterDB to = getClosestFlightMasterTo();

                    if(!to.name.Contains("null") &amp;&amp; !from.name.Contains("null") &amp;&amp; !from.Equals(to) &amp;&amp; from.position.DistanceTo(ObjectManager.Me.Position) + to.position.DistanceTo(destinationVector) &lt;= saveDistance)
                    {
                        Logging.Write("[FNV_Quester]: Shorter path detected, taking Taxi from " + from.name + " to " + to.name);
                        takeTaxi(from.name, to.name);

                        disposeFlightMaster();
                    }
                    else
                    {
                        Logging.Write("[FNV_Quester]: No shorter path available, skip flying");
                        disposeFlightMaster();

                    }
                }
            }
            catch(Exception e)
            {
                Logging.Write("[FNV_Quester]: Error " + e);
            }

            //Logging.Write("Pause flight master scan for 10 seconds");
            disposeFlightMaster();
            //Thread.Sleep(10000);
        }
    }
    */

    public static FlightMasterDB getClosestFlightMasterFrom()
    {
        List&lt;FlightMasterDB&gt; FMLnfmd = fillDB();
        float tempDistance = 99999;
        FlightMasterDB returnObject = new FlightMasterDB("null", 0, new Vector3(0, 0, 0), false);
        //Logging.Write("returnObject " + returnObject.name);

        foreach(var a in FMLnfmd)
        {
            //Logging.Write("A : " + a.name);
            if(a.alreadyDiscovered &amp;&amp; a.position.DistanceTo(ObjectManager.Me.Position) &lt; tempDistance &amp;&amp; (a.continent == checkContinent()))
            {
                tempDistance = a.position.DistanceTo(ObjectManager.Me.Position);
                returnObject = a;
            }
        }
        //Logging.Write("returnObject " + returnObject.name);
        return returnObject;
    }

    public static FlightMasterDB getClosestFlightMasterTo()
    {
        List&lt;FlightMasterDB&gt; FMLgcfmt = fillDB();
        float tempDistance = 99999;
        FlightMasterDB returnObject = new FlightMasterDB("null", 0, new Vector3(0, 0, 0), false);
        //Logging.Write("returnObject " + returnObject.name);

        foreach(var a in FMLgcfmt)
        {
            //Logging.Write("A : " + a.name);
            if(a.alreadyDiscovered &amp;&amp; a.position.DistanceTo(destinationVector) &lt; tempDistance &amp;&amp; (a.continent == checkContinent()))
            {
                tempDistance = a.position.DistanceTo(destinationVector);
                returnObject = a;
            }
        }
        //Logging.Write("returnObject " + returnObject.name);
        return returnObject;
    }

    public static bool checkContinent()
    {
        if(Usefuls.ContinentId == (int)ContinentId.Kalimdor)
        {
            //Logging.Write("[FNV_Quester]: Currently located in Kalimdor");
            return true;
        }
        else
        {
            //Logging.Write("[FNV_Quester]: Currently located in Eastern Kingdoms");
            return false;
        }
        
    }

    public static void waitFlying()
    {
        //Logging.Write("Disable movement during flying");
        //MovementManager.StopMove();
        /*
        //Disable movement
        if(ObjectManager.Me.IsOnTaxi)
        {
            Logging.Write("[APF]: Stopping movement");

            wManager.Events.MovementEvents.OnMovementPulse += (points, cancelable) =&gt;
            {
                cancelable.Cancel = true;
            };
            wManager.Events.MovementEvents.OnMoveToPulse += (point, cancelable) =&gt;
            {
                cancelable.Cancel = true;
            };

            wManager.Wow.Helpers.Fight.StopFight();
            Lua.LuaDoString("ClearTarget()");

            Thread.Sleep(Usefuls.Latency + 2500);
        }
        */




        while(ObjectManager.Me.IsOnTaxi)
        {
            Logging.Write("[FNV_Quester]: On taxi, waiting");
            Thread.Sleep(30000);
        }



      /*
        //Reenable movement
        if(!ObjectManager.Me.IsOnTaxi)
        {
            wManager.Events.MovementEvents.OnMovementPulse += (points, cancelable) =&gt;
            {
                cancelable.Cancel = false;
            };
            wManager.Events.MovementEvents.OnMoveToPulse += (point, cancelable) =&gt;
            {
                cancelable.Cancel = false;
            };
        }
        */
        Logging.Write("[FNV_Quester]: Arrived at destination Flight Master, finished waiting");
    }

    public static List&lt;FlightMasterDB&gt; fillDB()
    {
        //True = Kalimdor ; False = Eastern Kingdoms
        List&lt;FlightMasterDB&gt; FMListe = new List&lt;FlightMasterDB&gt;();
        FlightMasterDB Stormwind = new FlightMasterDB("Stormwind", 352, new Vector3(-8835.76f, 490.084f, 109.6157f), false);
        FMListe.Add(Stormwind);
        FlightMasterDB ArathiHighlands = new FlightMasterDB("Arathi Highlands", 2835, new Vector3(-1240.03f, -2513.96f, 21.92969f), false);
        FMListe.Add(ArathiHighlands);
        FlightMasterDB Ashenvale = new FlightMasterDB("Ashenvale", 4267, new Vector3(-7224.87f, -3738.21f, 8.401313f), true);
        FMListe.Add(Ashenvale);
        FlightMasterDB Darkshore = new FlightMasterDB("Darkshore", 3841, new Vector3(6343.2f, 561.651f, 15.79876f), true);
        FMListe.Add(Darkshore);
        FlightMasterDB Stranglethorn = new FlightMasterDB("Stranglethorn", 2859, new Vector3(-14477.9f, 464.101f, 36.38163f), false);
        FMListe.Add(Stranglethorn);
        FlightMasterDB Duskwood = new FlightMasterDB("Duskwood", 2409, new Vector3(-10513.8f, -1258.79f, 41.43174f), false);
        FMListe.Add(Duskwood);
        FlightMasterDB FeralasFeathermoon = new FlightMasterDB("Feralas, Feathermoon", 8019, new Vector3(-4370.5f, 3340f, 12f), true);
        FMListe.Add(FeralasFeathermoon);
        FlightMasterDB FeralasThalanaar = new FlightMasterDB("Feralas, Thalanaar", 4319, new Vector3(-4491f, -781f, -40f), true);
        FMListe.Add(FeralasThalanaar);
        FlightMasterDB Tanaris = new FlightMasterDB("Tanaris", 7823, new Vector3(-7224.9f, -3738.2f, 8.4f), true);
        FMListe.Add(Tanaris);
        FlightMasterDB Hinterlands = new FlightMasterDB("The Hinterlands", 8018, new Vector3(282.1f, -2001.3f, 194.1f), false);
        FMListe.Add(Hinterlands);
        FlightMasterDB Ironforge = new FlightMasterDB("Ironforge", 1573, new Vector3(-4821.13f, -1152.4f, 502.2116f), false);
        FMListe.Add(Ironforge);
        FlightMasterDB Menethil = new FlightMasterDB("Wetlands", 1571, new Vector3(-3793.2f, -782.052f, 9.014864f), false);
        FMListe.Add(Menethil);
        FlightMasterDB TheBarrens = new FlightMasterDB("The Barrens", 16227, new Vector3(-898.246f, -3769.65f, 11.71021f), true);
        FMListe.Add(TheBarrens);
        FlightMasterDB Redridge = new FlightMasterDB("Redridge Mountains", 931, new Vector3(-9435.8f, -2234.79f, 69.43174f), false);
        FMListe.Add(Redridge);
        FlightMasterDB Teldrassil = new FlightMasterDB("Teldrassil", 3838, new Vector3(8640.58f, 841.118f, 23.26363f), true);
        FMListe.Add(Teldrassil);
        FlightMasterDB Southshore = new FlightMasterDB("Hillsbrad Foothiils", 2432, new Vector3(-715.146f, -512.134f, 26.54455f), false);
        FMListe.Add(Southshore);
        FlightMasterDB Stonetalon = new FlightMasterDB("Stonetalon Mountains", 4407, new Vector3(2682.83f, 1466.45f, 233.6483f), true);
        FMListe.Add(Stonetalon);
        FlightMasterDB Thelsamar = new FlightMasterDB("Loch Modan", 1572, new Vector3(-5424.85f, -2929.87f, 347.5623f), false);
        FMListe.Add(Thelsamar);
        FlightMasterDB Theramore = new FlightMasterDB("Dustwallow Marsh", 4321, new Vector3(-3828.88f, -4517.51f, 10.66067f), true);
        FMListe.Add(Theramore);
        //Probably false coords Theramore or Western Pleagues
        FlightMasterDB WesternP = new FlightMasterDB("Western Pleaguelands", 12596, new Vector3(-3828.88f, -4517.51f, 10.66067f), false);
        FMListe.Add(WesternP);
        FlightMasterDB Westfall = new FlightMasterDB("Westfall", 523, new Vector3(-10628.8f, 1037.79f, 34.43174f), false);
        FMListe.Add(Westfall);
        return FMListe;
    }

    public static bool validFlight(String from, String to)
    {
        bool von = false;
        bool zu = false;
        List&lt;FlightMasterDB&gt; FMLvf = fillDB();

        for(int i = 0; i &lt; FMLvf.Count; i++)
        {
            if(FMLvf[i].name.Contains(from))
            {
                von = FMLvf[i].continent;
            }
            if(FMLvf[i].name.Contains(to))
            {
                zu = FMLvf[i].continent;
            }
        }
        return von != zu;
    }

    public static bool discoveredTaxiNodes(String from, String to)
    {

    //Logging.Write("Enter discoveredTaxiNodes");
        List&lt;FlightMasterDB&gt; FMLDTN = fillDB();
        //Logging.Write("Test 0: " + FMLDTN.Count);

        foreach(var ele in FMLDTN)
        {
            if(ele.name.Contains(from))
            {
            //Logging.Write("Test 1");
                if(!ele.alreadyDiscovered)
                {
                    Logging.Write("[FNV_Quester]: Taxi node from " + ele.name + " has not been discovered so far. Abort taking taxi.");
                    return false;
                }
            }
        }

        foreach(var ele in FMLDTN)
        {
            //Logging.Write("Test 2");
            if(ele.name.Contains(to))
            {
                if(!ele.alreadyDiscovered)
                {
                    Logging.Write("[FNV_Quester]: Taxi node to " + ele.name + " has not been discovered so far. Abort taking taxi.");
                    return false;
                }
            }
        }
        //Logging.Write("Test 3");
        return true;
    }

    public static void takeTaxi(String from, String to)
    {

        List&lt;FlightMasterDB&gt; FMLtt = fillDB();
        bool canProceed = true;
        try
        {
            //List&lt;FlightMasterDB&gt; 
            FMLtt = fillDB();
        }
        catch(Exception e)
        {
            Logging.Write("Error: " + e);
        }

        //Logging.Write("Enter take taxi");

        Vector3 myPos = ObjectManager.Me.Position;

        if(Usefuls.MapZoneName.Contains(to))
        {
            canProceed = false;
            Logging.Write("[FNV_Quester]: Already in the zone we are going to travel to. Skip flying.");
        }
        /*
        if(!discoveredTaxiNodes(from, to))
            canProceed = false;
        
        if(canProceed)
        {
            foreach(var temp in FMLtt)
            {
                if(temp.name.Contains(from) &amp;&amp; temp.position.DistanceTo(myPos) &gt; 1000)
                {
                    Logging.Write("[FNV_Quester]: Distance to Flight Master " + temp.position.DistanceTo(myPos) + ", &gt; 1000. Skip flying.");
                    canProceed = false;
                }
            }
        }
        */

        if(canProceed)
        {

            if(validFlight(from, to))
            {
                Logging.Write("[FNV_Quester]: Unable to fly between Kalimdor and Eastern Kingdoms");
            }

            var position = new Vector3();
            int npcEntryId = 0;

            for(int i = 0; i &lt; FMLtt.Count; i++)
            {
                if(FMLtt[i].name.Contains(from))
                {
                    position = FMLtt[i].position;
                    npcEntryId = FMLtt[i].NPCId;
                    FMLtt[i].name.Contains(from);
                }
            }


            if(!ObjectManager.Me.IsOnTaxi)
            {
                wManager.wManagerSetting.ClearBlacklistOfCurrentProductSession();

                while(!wManager.Wow.Bot.Tasks.GoToTask.ToPositionAndIntecractWithNpc(position, npcEntryId) &amp;&amp; !Fight.InFight)
                {
                    //wManager.Wow.Helpers.Conditions.ForceIgnoreIsAttacked = true;
                    wManager.wManagerSetting.ClearBlacklistOfCurrentProductSession();
                    wManager.Wow.Bot.Tasks.GoToTask.ToPositionAndIntecractWithNpc(position, npcEntryId);
                }
                if(wManager.Wow.Bot.Tasks.GoToTask.ToPositionAndIntecractWithNpc(position, npcEntryId))
                {
                    while(!ObjectManager.Me.IsOnTaxi)
                    {
                        Usefuls.SelectGossipOption(GossipOptionsType.taxi);

                        int node = Lua.LuaDoString&lt;int&gt;("for i=0,30 do if string.find(TaxiNodeName(i),'" + to + "') then return i end end");
                        Lua.LuaDoString("TakeTaxiNode(" + node + ")");
                        Logging.Write("[FNV_Quester]: Taking Taxi from " + from + " to " + to + ".");
                        Thread.Sleep(Usefuls.Latency + 2500);
                    }
                }
            }
            //wManager.Wow.Helpers.Conditions.ForceIgnoreIsAttacked = false;
            waitFlying();
            return;
        }
        //return;
    }

    public static void discoverTaxi(String discoverName)
    {
        FNVSettings.Load();
        List&lt;FlightMasterDB&gt; FMLdt = fillDB();

        var position = new Vector3();
        int npcEntryId = 0;
        int j = 0;
        bool alreadyDiscoveredFlightMaster = false;

        for(int i = 0; i &lt; FMLdt.Count; i++)
        {
            if(FMLdt[i].name.Contains(discoverName))
            {
                if(FMLdt[i].alreadyDiscovered)
                {
                    Logging.Write("[FNV_Quester]: Flight Master of " + FMLdt[i].name + " already discovered. Skip it.");
                    alreadyDiscoveredFlightMaster = true;
                    break;
                }

                position = FMLdt[i].position;
                npcEntryId = FMLdt[i].NPCId;
                j = i;
            }
        }

        if(!alreadyDiscoveredFlightMaster)
        {

            if(!ObjectManager.Me.IsOnTaxi)
            {
                wManager.wManagerSetting.ClearBlacklistOfCurrentProductSession();

                while(!wManager.Wow.Bot.Tasks.GoToTask.ToPositionAndIntecractWithNpc(position, npcEntryId))
                {
                   // wManager.Wow.Helpers.Conditions.ForceIgnoreIsAttacked = true;
                    wManager.wManagerSetting.ClearBlacklistOfCurrentProductSession();
                    wManager.Wow.Bot.Tasks.GoToTask.ToPositionAndIntecractWithNpc(position, npcEntryId);
                }
                if(wManager.Wow.Bot.Tasks.GoToTask.ToPositionAndIntecractWithNpc(position, npcEntryId))
                {
                    Usefuls.SelectGossipOption(GossipOptionsType.taxi);
                    Thread.Sleep(Usefuls.Latency + 250);
                    //wManager.Wow.Helpers.Conditions.ForceIgnoreIsAttacked = true;
                }
            }
            Logging.Write("[FNV_Quester]: Flight Master " + FMLdt[j].name + " discovered");
            FMLdt[j].alreadyDiscovered = true;
            FNVSettings.flightMasterSaveChanges(FMLdt[j]);
            //wManager.Wow.Helpers.Conditions.ForceIgnoreIsAttacked = false;
            
        }
        timer = 0;
        return;
    }

    }

    public class FlightMasterDB
    {
        public FlightMasterDB(String name, int NPCId, Vector3 position, bool continent, bool alreadyDiscovered)
        {
            this.name = name;
            this.NPCId = NPCId;
            this.position = position;
            this.continent = continent;
            this.alreadyDiscovered = alreadyDiscovered;
        }

        public FlightMasterDB(String name, int NPCId, Vector3 position, bool continent)
        {
            this.name = name;
            this.NPCId = NPCId;
            this.position = position;
            this.continent = continent;
            
        }

        public int NPCId { get; set; }
        public Vector3 position { get; set; }
        public String name { get; set; }
        public bool continent { get; set; }
        public bool alreadyDiscovered { get; set; }

    }

//Tram
public class Tram
{

    //Stormwind to Ironforge
    static Vector3 positionTramInIronforge = new Vector3(4.58065, 28.2097, 6.90526);
    static Vector3 positionTramInStormwind = new Vector3(4.581913, 2511.531, 7.091796);

    static Vector3 positionWaitTramIronforge = new Vector3(19.1, 28, -4.3);
    static Vector3 positionOnTramIronforge = new Vector3(4.8, 28.1, -4.3);

    static Vector3 positionWaitTramStormwind = new Vector3(15.3, 2510.4, -4.3);
    static Vector3 positionOnTramStormwind = new Vector3(4.3, 2510.6, -4.3);

    static Vector3 enterStormwindInside = new Vector3(67, 2490.7, -4.3);
    static Vector3 enterIronforgeInside = new Vector3(64.5, 10.2, -4.3);

    static Vector3 enterStormwindOutside = new Vector3(-8365, 536.9, 91.8);
    static Vector3 enterIronforgeOutside = new Vector3(-4836.7, -1304.6, 501.9);

    static Vector3 leavePosIronforge = new Vector3(-10.6, 30.2, -4.3);
    static Vector3 leavePosStormwind = new Vector3(-10.6, 2510.9, -4.3);

    static Vector3 playerFellDownIronforge = new Vector3(4.5, 28, -13.9);

    static int[] tramEntryArray = new int[6] { 176080, 176082, 176083, 176084, 176085, 176081 };

    //Ironforge to Stormwind
    static Vector3 waitPosPlayerInStormwindToIronforge = new Vector3(-32.8, 2512.1, -4.3);

    //Pos where upper Tram arrives and waits in Stormwind
    static Vector3 waitPosTramSwTramStormwind = new Vector3(-45.4007, 2512.15, 6.90526);
    //Pos where player waits on upper tram in Stormwind
    static Vector3 waitPosPlayerSwTramStormwind = new Vector3(-45.20206, 2512.266, -3.562748);

    static Vector3 waitPosSwTramIronforge = new Vector3(-45.399, 30.38013, 5.877773);

    static Vector3 leavePosSwTramIronforge = new Vector3(-61.8, 30.3, -4.3);
    static Vector3 waitPlayerOnTramPosSwTramIronforge = new Vector3(-34.49804, 2511.917, -4.3);
    static Vector3 posPlayerOnTramSwToIfInIronforge = new Vector3(-20.9837, 2459.93, -4.297);

    static Vector3 playerFellDownStormwind = new Vector3(-45, 2512.6, -13.9);

    static bool isRestarted = false;
    static Process[] pname = Process.GetProcessesByName(AppDomain.CurrentDomain.FriendlyName.Remove(AppDomain.CurrentDomain.FriendlyName.Length - 4));
    static Vector3 nullVector = new Vector3(0, 0, 0);


    public static void restartTram(String from)
    {
        switch(from)
        {
            case ("Stormwind"):
                takeTramStormwind();
                break;
            case ("Ironforge"):
                takeTramIronforge();
                break;
            default:
                Logging.Write("Something failed");
                break;
        }
    }

    public static void end()
    {
        Logging.Write("[FNV_Quester]: Ending Tream");
    }



    public static void takeTramStormwind()
    {
        Logging.Write("[FNV_Quester]: Taking Tram from Stormwind to Ironforge");

        if(!Usefuls.MapZoneName.Contains("Deep"))
        {
            while(!GoToTask.ToPosition(enterStormwindOutside))
            {
                GoToTask.ToPosition(enterStormwindOutside);
                Thread.Sleep(250);
            }

            wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;
            Logging.Write("[FNV_Quester]: Disable teleport during Tram");
            wManager.Wow.Helpers.MovementManager.Face(new Vector3(-8353.4, 521.4, 91.8));

            while(!Usefuls.MapZoneName.Contains("Deep"))
            {
                wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 250);
                Thread.Sleep(robotManager.Helpful.Others.Random(25, 50));
            }

        }

        if(Usefuls.MapZoneName.Contains("Deep"))
        {
            if(!GoToTask.ToPosition(enterStormwindInside))
            {
                GoToTask.ToPosition(enterStormwindInside);
                Thread.Sleep(250);
            }
            while(!GoToTask.ToPosition(waitPosPlayerInStormwindToIronforge))
            {
                GoToTask.ToPosition(waitPosPlayerInStormwindToIronforge);
                Thread.Sleep(250);
            }

            wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;
            var tram = (WoWGameObject)null;

            try
            {
                tram = chooseTramStormwind();
            }
            catch
            {

            }


            if(tram != null &amp;&amp; ObjectManager.Me.Position.DistanceTo(tram.Position) &lt; 200 &amp;&amp; !tram.Position.Equals(nullVector))
            {
                Logging.Write("[FNV_Quester]: Bad circle, restart... .");
                isRestarted = true;
                takeTramStormwind();
                end();
            }

            if(!isRestarted)
            {

                if(tram != null &amp;&amp; tram.Position.DistanceTo(nullVector) &gt; 1)
                {
                    while(tram.Position.DistanceTo(waitPosTramSwTramStormwind) &gt;= 5 || ObjectManager.Me.Position.DistanceTo(waitPosPlayerInStormwindToIronforge) &gt;= 5)
                    {
                        Thread.Sleep(500);
                    }

                    if(tram.Position.DistanceTo(waitPosTramSwTramStormwind) &lt; 5)
                    {
                        Lua.LuaDoString("ClearTarget()");
                        wManager.Wow.Helpers.MovementManager.Face(waitPosPlayerSwTramStormwind);

                        while(ObjectManager.Me.Position.DistanceTo(waitPosPlayerSwTramStormwind) &gt; 1)
                        {
                            wManager.Wow.Helpers.MovementManager.Face(waitPosPlayerSwTramStormwind);
                            wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 125);
                            Thread.Sleep(robotManager.Helpful.Others.Random(10, 25));

                            if(ObjectManager.Me.Position.DistanceTo(playerFellDownStormwind) &lt; 4)
                            {
                                Logging.Write("[FNV_Quester]: Fell down, while trying to take tram. Restart...");
                                restartTram("Stormwind");
                            }
                        }

                        GoToTask.ToPosition(waitPosPlayerSwTramStormwind);
                    }

                    while(tram.Position.DistanceTo(waitPosSwTramIronforge) &gt; 5)
                    {
                        Thread.Sleep(3000);
                    }

                    if(ObjectManager.Me.HaveBuff("Stealth"))
                    {
                        Lua.LuaDoString("CastSpellByName('Stealth')");
                    }

                    wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 1500);

                    if(ObjectManager.Me.Position.DistanceTo(posPlayerOnTramSwToIfInIronforge) &lt; 5)
                    {
                        wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 500);

                        while(ObjectManager.Me.Position.DistanceTo(leavePosSwTramIronforge) &gt; 4)
                        {
                            wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 125);
                            Thread.Sleep(robotManager.Helpful.Others.Random(10, 25));
                        }
                    }

                    if(Usefuls.MapZoneName.Contains("Deep"))
                    {
                        if(!GoToTask.ToPosition(enterIronforgeInside))
                        {
                            GoToTask.ToPosition(enterIronforgeInside);
                            Thread.Sleep(250);
                        }
                    }

                    while(Usefuls.MapZoneName.Contains("Deep"))
                    {
                        wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 250);
                        Thread.Sleep(robotManager.Helpful.Others.Random(25, 50));
                    }

                    Logging.Write("[FNV_Quester]: Re enable teleport ");
                    wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = true;


                    while(!GoToTask.ToPosition(enterIronforgeOutside))
                    {
                        wManager.Wow.Helpers.MovementManager.Face(enterIronforgeOutside);
                        GoToTask.ToPosition(enterIronforgeOutside);
                        Thread.Sleep(250);
                    }

                }
                else if(Usefuls.MapZoneName.Contains("Tram") || Usefuls.MapZoneName.Contains("Stormwind"))
                {
                    Logging.Write("[FNV_Quester]: Unable to find tram, restart... .");
                    isRestarted = true;
                    restartTram("Stormwind");
                }

            }
        }

        isRestarted = false;
    }

    public static WoWGameObject chooseTramIronforge()
    {
        List&lt;WoWGameObject&gt; tramList = new List&lt;WoWGameObject&gt;();
        var tramTemp = (WoWGameObject)null;

        foreach(int ele in tramEntryArray)
        {
            tramTemp = null;
            try
            {
                tramTemp = ObjectManager.GetWoWGameObjectByEntry(ele).OrderBy(o =&gt; o.GetDistance).FirstOrDefault();
            }
            catch
            {
            }

            if(tramTemp != null &amp;&amp; tramTemp.IsValid &amp;&amp; !tramTemp.Equals((WoWGameObject)null) &amp;&amp; tramTemp.ToString().Contains("Subway"))
            {
                tramList.Add(tramTemp);
            }
            else
            {

            }
        }

        float distance = 0;
        float entryDistance = 0;
        foreach(var ele in tramList)
        {
            if(ObjectManager.Me.Position.DistanceTo(ele.Position) &gt;= distance)
            {
                distance = ObjectManager.Me.Position.DistanceTo(ele.Position);
                entryDistance = ele.Entry;
            }
        }

        foreach(var ele in tramList)
        {
            if(ele.Entry == entryDistance &amp;&amp; ele != null &amp;&amp; !ele.Position.Equals(nullVector))
            {
                if(ObjectManager.Me.Position.DistanceTo(ele.Position) &lt; 200)
                {
                    Logging.Write("[FNV_Quester]: Bad circle, restart... .");
                    restartTram("Ironforge");
                }

                Logging.Write("[FNV_Quester]: Choosing tram id: " + ele.Entry + " with a current position of " + ele.Position);
                return ele;
            }
        }
        return null;
    }

    public static WoWGameObject chooseTramStormwind()
    {
        List&lt;WoWGameObject&gt; tramList = new List&lt;WoWGameObject&gt;();
        var tramTemp = (WoWGameObject)null;

        foreach(int ele in tramEntryArray)
        {
            tramTemp = null;
            try
            {
                tramTemp = ObjectManager.GetWoWGameObjectByEntry(ele).OrderBy(o =&gt; o.GetDistance).FirstOrDefault();
            }
            catch
            {
            }

            if(tramTemp != null &amp;&amp; tramTemp.IsValid &amp;&amp; !tramTemp.Equals((WoWGameObject)null) &amp;&amp; tramTemp.ToString().Contains("Subway"))
            {
                tramList.Add(tramTemp);
            }
            else
            {

            }
        }

        float distance = 99999;
        float entryDistance = 0;
        foreach(var ele in tramList)
        {
            if(ObjectManager.Me.Position.DistanceTo(ele.Position) &lt;= distance)
            {
                distance = ObjectManager.Me.Position.DistanceTo(ele.Position);
                entryDistance = ele.Entry;
            }
        }

        foreach(var ele in tramList)
        {
            if(ele.Entry == entryDistance &amp;&amp; ele != null &amp;&amp; !ele.Position.Equals(nullVector))
            {
                if(ObjectManager.Me.Position.DistanceTo(ele.Position) &lt; 200)
                {
                    Logging.Write("[FNV_Quester]: Bad circle, restart... .");
                    restartTram("Stormwind");
                }

                Logging.Write("[FNV_Quester]: Choosing tram id: " + ele.Entry + " with a current position of " + ele.Position);
                return ele;
            }
        }

        return null;
    }


    public static void takeTramIronforge()
    {
        Logging.Write("[FNV_Quester]: Taking Tram from Ironforge to Stormwind");

        if(!Usefuls.MapZoneName.Contains("Deep"))
        {
            while(!GoToTask.ToPosition(enterIronforgeOutside))
            {
                GoToTask.ToPosition(enterIronforgeOutside);
                Thread.Sleep(250);
            }

            wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;
            Logging.Write("[FNV_Quester]: Disable teleport during Tram");
            wManager.Wow.Helpers.MovementManager.Face(new Vector3(-4839.4, -1320.9, 501.9));

            while(!Usefuls.MapZoneName.Contains("Deep"))
            {
                wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 250);
                Thread.Sleep(robotManager.Helpful.Others.Random(25, 50));
            }
        }

        if(Usefuls.MapZoneName.Contains("Deep"))
        {
            if(!GoToTask.ToPosition(enterIronforgeInside))
            {
                GoToTask.ToPosition(enterIronforgeInside);
                Thread.Sleep(250);
            }
            while(!GoToTask.ToPosition(positionWaitTramIronforge))
            {
                GoToTask.ToPosition(positionWaitTramIronforge);
                Thread.Sleep(250);
            }

            wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;

            var tram = (WoWGameObject)null;

            try
            {
                tram = chooseTramIronforge();
            }
            catch
            {

            }

            if(ObjectManager.Me.Position.DistanceTo(tram.Position) &lt; 200 &amp;&amp; tram != null &amp;&amp; !tram.Position.Equals(nullVector))
            {
                Logging.Write("[FNV_Quester]: Bad circle, restart... .");
                isRestarted = true;
                restartTram("Ironforge");
                end();
            }

            if(!isRestarted)
            {

                if(tram != null &amp;&amp; tram.Position.DistanceTo(nullVector) &gt; 1)
                {


                    while(tram.Position.DistanceTo(positionTramInIronforge) &gt;= 5 &amp;&amp; Usefuls.MapZoneName.Contains("Deep") &amp;&amp; !tram.Position.Equals(nullVector))
                    {
                        Thread.Sleep(1000);
                    }


                    if(tram.Position.DistanceTo(positionTramInIronforge) &lt; 5 &amp;&amp; Usefuls.MapZoneName.Contains("Deep"))
                    {
                        Lua.LuaDoString("ClearTarget()");
                        wManager.Wow.Helpers.MovementManager.Face(positionOnTramIronforge);

                        while(ObjectManager.Me.Position.DistanceTo(positionOnTramIronforge) &gt; 2)
                        {
                            wManager.Wow.Helpers.MovementManager.Face(positionOnTramIronforge);
                            wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 125);
                            Thread.Sleep(robotManager.Helpful.Others.Random(10, 25));

                            if(ObjectManager.Me.Position.DistanceTo(playerFellDownIronforge) &lt; 4)
                            {
                                Logging.Write("[FNV_Quester]: Fell down, while trying to take tram. Restart");
                                restartTram("Ironforge");
                            }
                        }

                        GoToTask.ToPosition(positionOnTramIronforge);
                    }


                    while(tram.Position.DistanceTo(positionTramInStormwind) &gt; 5 &amp;&amp; Usefuls.MapZoneName.Contains("Deep"))
                    {
                        Thread.Sleep(3000);
                    }

                    if(ObjectManager.Me.Position.DistanceTo(positionOnTramStormwind) &lt; 5 &amp;&amp; Usefuls.MapZoneName.Contains("Deep"))
                    {

                        wManager.Wow.Helpers.Move.StrafeLeft(Move.MoveAction.PressKey, 350);

                        while(ObjectManager.Me.Position.DistanceTo(leavePosStormwind) &gt; 4)
                        {
                            wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 125);
                            Thread.Sleep(robotManager.Helpful.Others.Random(10, 25));

                        }

                    }

                    if(Usefuls.MapZoneName.Contains("Deep"))
                    {
                        if(!GoToTask.ToPosition(enterStormwindInside))
                        {
                            GoToTask.ToPosition(enterStormwindInside);
                            Thread.Sleep(250);
                        }
                    }

                    while(Usefuls.MapZoneName.Contains("Deep"))
                    {
                        wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 250);
                        Thread.Sleep(robotManager.Helpful.Others.Random(25, 50));
                    }

                    Logging.Write("Re enable teleport ");
                    wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = true;


                    while(!GoToTask.ToPosition(enterStormwindOutside))
                    {
                        wManager.Wow.Helpers.MovementManager.Face(enterStormwindOutside);
                        GoToTask.ToPosition(enterStormwindOutside);
                        Thread.Sleep(250);
                    }

                }
                else if(Usefuls.MapZoneName.Contains("Tram") || Usefuls.MapZoneName.Contains("Ironforge"))
                {
                    Logging.Write("[FNV_Quester]: Unable to find tram, restart... .");
                    isRestarted = true;
                    restartTram("Ironforge");
                }

            }
        }
        isRestarted = false;
    }
}

    //Additional functions for quests
    public class Quests
    {
        public static void abandon(string questName)
        {
            wManager.Wow.Helpers.Lua.LuaDoString("local name = '" + questName + "' for i=1,GetNumQuestLogEntries() do local questTitle, level, questTag, suggestedGroup, isHeader, isCollapsed, isComplete = GetQuestLogTitle(i) if string.find(questTitle, name) then SelectQuestLogEntry(i) SetAbandonQuest() AbandonQuest() end end");

        }

        public static bool hasFailed(string questName)
        {
            int temp = 0;
            temp = wManager.Wow.Helpers.Lua.LuaDoString&lt;int&gt;("local name = '" + questName + "'  for i=1,GetNumQuestLogEntries() do local questTitle, level, questTag, suggestedGroup, isHeader, isCollapsed, isComplete = GetQuestLogTitle(i) if string.find(questTitle, name) then SelectQuestLogEntry(i) local questTimer = GetQuestLogTimeLeft() return questTimer end end");

            if(temp &gt; 8)
            {
                return false;
            }
            else
            {
                return true;
            }
        }
    }


public class ProgressSettings : Settings
{
    public static bool inProgress = false;
        public static void Initialize()
        {
            ProgressSettings.Load();
        }

        public static void Dispose()
        {
            ProgressSettings.CurrentSettings.Save();
            //isLaunched = false;
        }

        public void Settings()
        {
            ProgressSettings.Load();
            ProgressSettings.CurrentSettings.ToForm();
            ProgressSettings.CurrentSettings.Save();
        }

    public ProgressSettings()
    {
        this.launcher = 2;
        this.dwarfStart = 1;
        this.humanStart = 1;
        this.nightelfStart = 1;
        this.dwarfHunter = 1;
        this.nightelfHunter = 1;
        this.nightelfDruid = 1;
        this.warlock = 1;
        this.kharanos = 1;
        this.elwynn = 1;
        this.westfallEins = 1;
        this.lochModanEins = 1;
        this.darkshoreEins = 10;
        this.westfallZwei = 1;
        this.lochModanZwei = 1;
        this.darkshoreZwei = 6;
        this.westfallDrei = 1;
        this.redridge = 1;
        this.duskwoodEins = 1;
        this.stonetalon = 1;
        this.duskwoodZwei = 1;
        this.wetlandsEins = 1;
        this.wetlandsZwei = 1;
    }
    

      public static ProgressSettings CurrentSettings { get; set; }

        public bool Save()
        {
            try
            {
                return Save(AdviserFilePathAndName("FNV_Progress", ObjectManager.Me.Name + "." + Usefuls.RealmName));
            }
            catch(Exception e)
            {
                Logging.WriteDebug("FNV_Progress =&gt; Save(): " + e);
                return false;
            }
        }

        public static bool Load()
        {
            try
            {
                if(File.Exists(AdviserFilePathAndName("FNV_Progress", ObjectManager.Me.Name + "." + Usefuls.RealmName)))
                {
                    CurrentSettings = Load&lt;ProgressSettings&gt;(AdviserFilePathAndName("FNV_Progress", ObjectManager.Me.Name + "." + Usefuls.RealmName));
                    return true;
                }

                ProgressSettings.CurrentSettings = new ProgressSettings();
            }
            catch(Exception e)
            {
                Logging.WriteDebug("FNV_Progress =&gt; Load(): " + e);
            }
            return false;
        }

        public int launcher { get; set; }
        public int dwarfStart { get; set; }
        public int dwarfHunter { get; set; }
        public int nightelfHunter { get; set; }
        public int nightelfDruid { get; set; }
        public int warlock { get; set; }
        public int nightelfStart { get; set; }
        public int humanStart { get; set; }
        public int kharanos { get; set; }
        public int elwynn { get; set; }
        public int westfallEins { get; set; }
        public int lochModanEins { get; set; }
        public int darkshoreEins { get; set; }
        public int westfallZwei { get; set; }
        public int lochModanZwei { get; set; }
        public int darkshoreZwei { get; set; }
        public int westfallDrei { get; set; }
        public int redridge { get; set; }
        public int duskwoodEins { get; set; }
        public int stonetalon { get; set; }
        public int duskwoodZwei { get; set; }
        public int wetlandsEins { get; set; }
        public int wetlandsZwei { get; set; }
        public int duskwoodDrei { get; set; }
        public int hinterlandsZwei { get; set; }
}


/*
    //Settings   
    public class QuesterSettings
    {
        private static bool isLaunched;

        public static void Initialize()
        {
            isLaunched = true;
            FNVSettings.Load();

            while(isLaunched &amp; Products.IsStarted)
            {
                Thread.Sleep(500);
                Dispose();
            }
        }

        public static void Dispose()
        {
            FNVSettings.CurrentSettings.Save();
            //isLaunched = false;
        }

        public void Settings()
        {
            FNVSettings.Load();
            FNVSettings.CurrentSettings.ToForm();
            FNVSettings.CurrentSettings.Save();
        }
    }

    */

    [Serializable]
    public class FNVSettings : Settings
    {

        public static bool inProgress = false;
        public static void Initialize()
        {
            FNVSettings.Load();
        }

        public static void Dispose()
        {
            FNVSettings.CurrentSettings.Save();
            //isLaunched = false;
        }

        public void Settings()
        {
            FNVSettings.Load();
            FNVSettings.CurrentSettings.ToForm();
            FNVSettings.CurrentSettings.Save();
        }

        public FNVSettings()
        {
        //Completed profiles -&gt; True == completed
        this.launcher = false;
        this.dwarfStart = false;
        this.humanStart = false;
        this.nightelfStart = false;
        this.dwarfHunter = false;
        this.nightelfHunter = false;
        this.nightelfDruid = false;
        this.warlock = false;
        this.kharanos = false;
        this.elwynn = false;
        this.westfallEins = false;
        this.lochModanEins = false;
        this.darkshoreEins = false;
        this.westfallZwei = false;
        this.lochModanZwei = false;
        this.darkshoreZwei = false;
        this.westfallDrei = false;
        this.redridge = false;
        this.duskwoodEins = false;
        this.stonetalon = false;
        this.duskwoodZwei = false;
        this.wetlandsEins = false;
        this.wetlandsZwei = false;

            //FlightMaster discovered
            //Eastern Kingdoms
            this.ArathiHighlands = false;
            this.Wetlands = false;
            this.WesternPlaguelands = false;
            this.EasternPlaguelands = false;
            this.HillsbradFoothills = false;
            this.TheHinterlands = false;
            this.LochModan = false;
            this.Ironforge = false;
            this.SearingGorge = false;
            this.BurningSteppes = false;
            this.RedridgeMountains = false;
            this.Stormwind = false;
            this.Westfall = false;
            this.Duskwood = false;
            this.StranglethornValley = false;
            this.BlastedLands = false;

            //Kalimdor

        }

    public static void flightMasterSaveChanges(FlightMasterDB needToChange)
    {

            if(needToChange.name.Contains("Arathi"))
                CurrentSettings.ArathiHighlands = true;

            if(needToChange.name.Contains("Wetlands"))
                CurrentSettings.Wetlands = true;

            if(needToChange.name.Contains("Western"))
                CurrentSettings.WesternPlaguelands = true;

            if(needToChange.name.Contains("Eastern"))
                CurrentSettings.EasternPlaguelands = true;

            if(needToChange.name.Contains("Hillsbrad"))
                CurrentSettings.HillsbradFoothills = true;

            if(needToChange.name.Contains("Hinterlands"))
                CurrentSettings.TheHinterlands = true;

            if(needToChange.name.Contains("Modan"))
                CurrentSettings.LochModan = true;

            if(needToChange.name.Contains("Ironforge"))
                CurrentSettings.Ironforge = true;
            
            if(needToChange.name.Contains("Searing"))
                CurrentSettings.SearingGorge = true;

            if(needToChange.name.Contains("Burning"))
                CurrentSettings.BurningSteppes = true;

            if(needToChange.name.Contains("Redridge"))
                CurrentSettings.RedridgeMountains = true;

            if(needToChange.name.Contains("Stormwind"))
                CurrentSettings.Stormwind = true;

            if(needToChange.name.Contains("Westfall"))
                CurrentSettings.Westfall = true;

            if(needToChange.name.Contains("Duskwood"))
                CurrentSettings.Duskwood = true;

            if(needToChange.name.Contains("Stranglethorn"))
                CurrentSettings.StranglethornValley = true;

            if(needToChange.name.Contains("Blasted"))
                CurrentSettings.BlastedLands = true;
            
            FNVSettings.CurrentSettings.Save();
            Logging.Write("[FNV_Quester]: Settings saved of Flight Master " + needToChange.name);
            return;
    }

        public static void flightMasterSaveChanges(String needToChange)
    {

            if(needToChange.Contains("Arathi"))
                CurrentSettings.ArathiHighlands = true;

            if(needToChange.Contains("Wetlands"))
                CurrentSettings.Wetlands = true;

            if(needToChange.Contains("Western"))
                CurrentSettings.WesternPlaguelands = true;

            if(needToChange.Contains("Eastern"))
                CurrentSettings.EasternPlaguelands = true;

            if(needToChange.Contains("Hillsbrad"))
                CurrentSettings.HillsbradFoothills = true;

            if(needToChange.Contains("Hinterlands"))
                CurrentSettings.TheHinterlands = true;

            if(needToChange.Contains("Modan"))
                CurrentSettings.LochModan = true;

            if(needToChange.Contains("Ironforge"))
                CurrentSettings.Ironforge = true;
            
            if(needToChange.Contains("Searing"))
                CurrentSettings.SearingGorge = true;

            if(needToChange.Contains("Burning"))
                CurrentSettings.BurningSteppes = true;

            if(needToChange.Contains("Redridge"))
                CurrentSettings.RedridgeMountains = true;

            if(needToChange.Contains("Stormwind"))
                CurrentSettings.Stormwind = true;

            if(needToChange.Contains("Westfall"))
                CurrentSettings.Westfall = true;

            if(needToChange.Contains("Duskwood"))
                CurrentSettings.Duskwood = true;

            if(needToChange.Contains("Stranglethorn"))
                CurrentSettings.StranglethornValley = true;

            if(needToChange.Contains("Blasted"))
                CurrentSettings.BlastedLands = true;
            
            FNVSettings.CurrentSettings.Save();
            Logging.Write("[FNV_Quester]: Settings saved of Flight Master " + needToChange);
            return;
    }

        public static FNVSettings CurrentSettings { get; set; }

        public bool Save()
        {
            try
            {
                return Save(AdviserFilePathAndName("FNV_Quester", ObjectManager.Me.Name + "." + Usefuls.RealmName));
            }
            catch(Exception e)
            {
                Logging.WriteDebug("FNV_Quester =&gt; Save(): " + e);
                return false;
            }
        }

        public static bool Load()
        {
            try
            {
                if(File.Exists(AdviserFilePathAndName("FNV_Quester", ObjectManager.Me.Name + "." + Usefuls.RealmName)))
                {
                    CurrentSettings = Load&lt;FNVSettings&gt;(AdviserFilePathAndName("FNV_Quester", ObjectManager.Me.Name + "." + Usefuls.RealmName));
                    return true;
                }

                FNVSettings.CurrentSettings = new FNVSettings();
            }
            catch(Exception e)
            {
                Logging.WriteDebug("FNV_Quester =&gt; Load(): " + e);
            }
            return false;
        }

        //Finished profiles -&gt; True == completed
        public bool launcher { get; set; }
        public bool dwarfStart { get; set; }
        public bool dwarfHunter { get; set; }
        public bool nightelfHunter { get; set; }
        public bool nightelfDruid { get; set; }
        public bool warlock { get; set; }
        public bool nightelfStart { get; set; }
        public bool humanStart { get; set; }
        public bool kharanos { get; set; }
        public bool elwynn { get; set; }
        public bool westfallEins { get; set; }
        public bool lochModanEins { get; set; }
        public bool darkshoreEins { get; set; }
        public bool westfallZwei { get; set; }
        public bool lochModanZwei { get; set; }
        public bool darkshoreZwei { get; set; }
        public bool westfallDrei { get; set; }
        public bool redridge { get; set; }
        public bool duskwoodEins { get; set; }
        public bool stonetalon { get; set; }
        public bool duskwoodZwei { get; set; }
        public bool wetlandsEins { get; set; }
        public bool wetlandsZwei { get; set; }
        public bool duskwoodDrei { get; set; }
        public bool hinterlandsZwei { get; set; }

        public bool defaultSettings { get; set; }
       // public bool dwarfStart { get; set; }
       // public bool nightelfStart { get; set; }
        //public bool humanStart { get; set; }
      //  public bool westfallEins { get; set; }
        public bool lochModan { get; set; }
        public bool auberdine { get; set; }
       // public bool westfallZwei { get; set; }
        public bool lakeshire { get; set; }
        public bool wetlands { get; set; }
        public bool ashenvale { get; set; }
        public bool thousandNeedles { get; set; }
        public bool dustwallow { get; set; }
        public bool badlands { get; set; }
        public bool alterac { get; set; }
        public bool swampOfSorrows { get; set; }
        public bool tanaris { get; set; }
        public bool stranglethorn { get; set; }
        public bool hinterlandsEins { get; set; }
        public bool feralas { get; set; }
       // public bool hinterlandsZwei { get; set; }

        //FlightMaster
        //Eastern Kingdoms
        public bool Stormwind { get; set; }
        public bool Westfall { get; set; }
        public bool RedridgeMountains { get; set; }
        public bool Duskwood { get; set; }
        public bool StranglethornValley { get; set; }
        public bool Ironforge { get; set; }
        public bool BurningSteppes { get; set; }
        public bool BlastedLands { get; set; }
        public bool SearingGorge { get; set; }
        public bool LochModan { get; set; }
        public bool Wetlands { get; set; }
        public bool ArathiHighlands { get; set; }
        public bool HillsbradFoothills { get; set; }
        public bool WesternPlaguelands { get; set; }
        public bool EasternPlaguelands { get; set; }
        public bool TheHinterlands { get; set; }

        //Kalimdor

        public bool Ashenvale { get; set; }
        public bool Azshara { get; set; }
        public bool Darkshore { get; set; }
        public bool Teldrassil { get; set; }
        public bool Desolace { get; set; }
        public bool DustwallowMarsh { get; set; }
        public bool Felwood { get; set; }
        public bool FeralasFeathermoon { get; set; }
        public bool FeralasThalanaar { get; set; }
        public bool Moonglade { get; set; }
        public bool Silithus { get; set; }
        public bool StonetalonMountains { get; set; }
        public bool Tanaris { get; set; }
        public bool TheBarrens { get; set; }
        public bool UngoroCrater { get; set; }
        public bool Winterspring { get; set; }

    }

    //Buy and check bags
    public class bags
    {
        public static bool bagsStarted = false;

        public static int bagsEquipped()
        {
            int returnValue = 0;
            string empty = "";

            for(int i = 20; i &lt;= 23; i++)
            {
                empty = wManager.Wow.Helpers.Lua.LuaDoString&lt;string&gt;("return GetInventoryItemLink('player', " + i + ")");

                if(empty.Contains("o"))
                    returnValue++;
            }

            return returnValue;
        }

        public static string checkMoney()
        {
            string returnVariableNameZ = "";

            returnVariableNameZ = wManager.Wow.Helpers.Lua.LuaDoString("returnVariableNameZ = GetMoney() return returnVariableNameZ", returnVariableNameZ);

            return returnVariableNameZ;
        }

        public static bool canEquip()
        {
            string returnVariableName = "";

            returnVariableName = wManager.Wow.Helpers.Lua.LuaDoString("returnVariableName = GetInventoryItemLink('player', 23 ) return returnVariableName", returnVariableName);


            if(returnVariableName.Equals(""))
            {
                return true;
            }
            else
            {
                return false;
            }

        }

    }


    //Abandon Quests
    public class abandonQuest
    {

        public static void abandon(string questName)
        {

            string name = questName;

            wManager.Wow.Helpers.Lua.LuaDoString("local name = '" + name + "' for i=1,GetNumQuestLogEntries() do local questTitle, level, questTag, suggestedGroup, isHeader, isCollapsed, isComplete = GetQuestLogTitle(i) if string.find(questTitle, name) then SelectQuestLogEntry(i) SetAbandonQuest() AbandonQuest() end end");


        }

    }



    //Throw away items - by Reapler
    public class throwAway
    {
        public static int GetItemQuantity(string itemName)
        {
            var execute =
                "local itemCount = 0; " +
                "for b=0,4 do " +
                    "if GetBagName(b) then " +
                        "for s=1, GetContainerNumSlots(b) do " +
                            "local itemLink = GetContainerItemLink(b, s) " +
                            "if itemLink then " +
                                "local _, stackCount = GetContainerItemInfo(b, s)\t " +
                                "if string.find(itemLink, \"" + itemName + "\") then " +
                                    "itemCount = itemCount + stackCount; " +
                                "end " +
                            "end " +
                        "end " +
                    "end " +
                "end; " +
                "return itemCount; ";
            return Lua.LuaDoString&lt;int&gt;(execute);
        }

        /// &lt;summary&gt;
        /// Used to delete all items by name.
        /// &lt;/summary&gt;
        /// &lt;param name="itemName"&gt;The item to delete.&lt;/param&gt;
        /// &lt;param name="leaveAmount"&gt;The amount of items which remain in the bag.&lt;/param&gt;
        /// &lt;remarks&gt;Bug at links with "-"&lt;/remarks&gt;
        public static void DeleteItems(string itemName, int leaveAmount)
        {
            var itemQuantity = GetItemQuantity(itemName) - leaveAmount;
            if(string.IsNullOrWhiteSpace(itemName) || itemQuantity &lt;= 0)
                return;
            var execute =
                "local itemCount = " + itemQuantity + "; " +
                "local deleted = 0; " +
                "for b=0,4 do " +
                    "if GetBagName(b) then " +
                        "for s=1, GetContainerNumSlots(b) do " +
                            "local itemLink = GetContainerItemLink(b, s) " +
                            "if itemLink then " +
                                "local _, stackCount = GetContainerItemInfo(b, s)\t " +
                                "local leftItems = itemCount - deleted; " +
                                "if string.find(itemLink, \"" + itemName + "\") and leftItems &gt; 0 then " +
                                    "if stackCount &lt;= 1 then " +
                                        "PickupContainerItem(b, s); " +
                                        "DeleteCursorItem(); " +
                                        "deleted = deleted + 1; " +
                                    "else " +
                                        "if (leftItems &gt; stackCount) then " +
                                            "SplitContainerItem(b, s, stackCount); " +
                                            "DeleteCursorItem(); " +
                                            "deleted = deleted + stackCount; " +
                                        "else " +
                                            "SplitContainerItem(b, s, leftItems); " +
                                            "DeleteCursorItem(); " +
                                            "deleted = deleted + leftItems; " +
                                        "end " +
                                    "end " +
                                "end " +
                            "end " +
                        "end " +
                    "end " +
                "end; ";
            Lua.LuaDoString(execute);
        }
    }



   


</Script>
  <OffMeshConnections />
  <BlacklistNpc />
  <BlacklistNpcType />
  <Blackspots />
</EasyQuestProfile>