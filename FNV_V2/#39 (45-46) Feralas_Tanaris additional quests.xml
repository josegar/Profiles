<?xml version="1.0" encoding="utf-8"?>
<EasyQuestProfile xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <QuestsSorted>
    <QuestsSorted Action="RunCode" NameClass="NpcDB.AcceptOnlyProfileNpc = true;&#xD;&#xA;wManager.wManagerSetting.CurrentSetting.WallDistancePathFinder = 2;&#xD;&#xA;wManager.wManagerSetting.CurrentSetting.AttackBeforeBeingAttacked = true;&#xD;&#xA;wManager.wManagerSetting.CurrentSetting.TrainNewSkills = false;&#xD;&#xA;&#xD;&#xA;FNVQuesterAuthSettings.Load();&#xD;&#xA;        if (FNVQuesterAuthSettings.CurrentSetting.TransactionId == null)&#xD;&#xA;        {&#xD;&#xA;            FNVQuesterAuthSettings.CurrentSetting.ToForm();&#xD;&#xA;        }&#xD;&#xA;        FNVQuesterAuthSettings.CurrentSetting.Save();&#xD;&#xA;        new Authentication(FNVQuesterAuthSettings.CurrentSetting.TransactionId, &quot;e8b609dcf76e&quot;); &#xD;&#xA;        ControlAuthentication.SetControl(5);&#xD;&#xA;&#xD;&#xA;NpcDB.AcceptOnlyProfileNpc = true;&#xD;&#xA;wManager.wManagerSetting.CurrentSetting.AttackBeforeBeingAttacked = true;&#xD;&#xA;QuesterSettings.SettingsKalimdor();&#xD;&#xA;wManager.Wow.Forms.UserControlTabGeneralSettings.ReloadGeneralSettings();&#xD;&#xA;" />
    <QuestsSorted Action="If" NameClass="Usefuls.ContinentId == (int) ContinentId.Azeroth" />
    <QuestsSorted Action="Pulse" NameClass="BOATShipMenethilToAuberdine" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="RunCode" NameClass="if(Usefuls.MapZoneName.Contains(&quot;Darkshore&quot;))&#xD;&#xA;{&#xD;&#xA;FlightMaster.takeTaxi(&quot;Darkshore&quot;,&quot;Feathermoon&quot;);&#xD;&#xA;}" />
    <QuestsSorted Action="PickUp" NameClass="TheMissingCourier2" />
    <QuestsSorted Action="RunCode" NameClass="ProgressSettings.Initialize();&#xD;&#xA;wManager.Wow.Helpers.Quest.QuesterCurrentContext.CurrentStep = ProgressSettings.CurrentSettings.feralasEins - 1;&#xD;&#xA;&#xD;&#xA;Logging.Write(&quot;[FNV_Quester]: Loading current Quester step &quot; + (ProgressSettings.CurrentSettings.feralasEins));&#xD;&#xA;&#xD;&#xA;Thread p = new Thread(() =&gt;&#xD;&#xA;{    &#xD;&#xA;ProgressSettings.inProgress = true;&#xD;&#xA;Logging.Write(&quot;[FNV_Quester]: Progress saver initialized&quot;);&#xD;&#xA; &#xD;&#xA; while(robotManager.Products.Products.IsStarted)&#xD;&#xA; {&#xD;&#xA;if(!ProgressSettings.inProgress)&#xD;&#xA;{&#xD;&#xA;ProgressSettings.Dispose();&#xD;&#xA;Logging.Write(&quot;[FNV_Quester]: Progress saver disposed&quot;);&#xD;&#xA;break;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;  if (Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause)&#xD;&#xA;  {&#xD;&#xA; if(ProgressSettings.CurrentSettings.feralasEins &lt; wManager.Wow.Helpers.Quest.QuesterCurrentContext.CurrentStep)&#xD;&#xA;{&#xD;&#xA;ProgressSettings.CurrentSettings.feralasEins = wManager.Wow.Helpers.Quest.QuesterCurrentContext.CurrentStep;&#xD;&#xA;ProgressSettings.CurrentSettings.Save();&#xD;&#xA;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;  Thread.Sleep(1000);&#xD;&#xA; }&#xD;&#xA;&#xD;&#xA;});&#xD;&#xA;&#xD;&#xA;p.Start();" />
    <QuestsSorted Action="RunCode" NameClass="wManager.Wow.Forms.UserControlTabGeneralSettings.ReloadGeneralSettings();" />
    <QuestsSorted Action="PickUp" NameClass="TheHighWilderness" />
    <QuestsSorted Action="PickUp" NameClass="InSearchofKnowledge" />
    <QuestsSorted Action="If" NameClass="ObjectManager.Me﻿.LevelDecimal ﻿﻿&lt; 46" />
    <QuestsSorted Action="Pulse" NameClass="ROUTEGoToGrind" />
    <QuestsSorted Action="Pulse" NameClass="GRINDGrindTo46" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="IfHasQuest" NameClass="7721" />
    <QuestsSorted Action="Pulse" NameClass="ROUTEFeathermoonGoToGoblin" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="PickUp" NameClass="FuelfortheZapping" />
    <QuestsSorted Action="Pulse" NameClass="FuelfortheZapping" />
    <QuestsSorted Action="TurnIn" NameClass="FuelfortheZapping" />
    <QuestsSorted Action="IfHasQuest" NameClass="4125" />
    <QuestsSorted Action="Pulse" NameClass="ROUTEGoblinToMissingCourier" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="TurnIn" NameClass="TheMissingCourier2" />
    <QuestsSorted Action="PickUp" NameClass="BoatWreckage" />
    <QuestsSorted Action="IfHasQuest" NameClass="2982" />
    <QuestsSorted Action="Pulse" NameClass="ROUTEMissingCourierToOgres" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="Pulse" NameClass="TheMarkofQuality" />
    <QuestsSorted Action="Pulse" NameClass="TheHighWilderness" />
    <QuestsSorted Action="Pulse" NameClass="TheHighWilderness2" />
    <QuestsSorted Action="Pulse" NameClass="TheHighWilderness3" />
    <QuestsSorted Action="IfHasQuest" NameClass="2982" />
    <QuestsSorted Action="Pulse" NameClass="ROUTEHighWildernessBackToFeathermoon" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="TurnIn" NameClass="TheHighWilderness" />
    <QuestsSorted Action="PickUp" NameClass="TheSunkenTemple" />
    <QuestsSorted Action="TurnIn" NameClass="BoatWreckage" />
    <QuestsSorted Action="PickUp" NameClass="TheKnifeRevealed" />
    <QuestsSorted Action="IfHasQuest" NameClass="4129" />
    <QuestsSorted Action="Pulse" NameClass="ROUTEUpTheTree" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="TurnIn" NameClass="TheKnifeRevealed" />
    <QuestsSorted Action="PickUp" NameClass="PsychometricReading" />
    <QuestsSorted Action="IfHasQuest" NameClass="4130" />
    <QuestsSorted Action="Pulse" NameClass="ROUTEDownTheTree" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="TurnIn" NameClass="PsychometricReading" />
    <QuestsSorted Action="PickUp" NameClass="TheWoodpawGnolls" />
    <QuestsSorted Action="TurnIn" NameClass="TheMarkofQuality" />
    <QuestsSorted Action="RunCode" NameClass="FlightMaster.takeTaxi(&quot;Feathermoon&quot;, &quot;Tanaris&quot;);" />
    <QuestsSorted Action="TurnIn" NameClass="TheSunkenTemple" />
    <QuestsSorted Action="PickUp" NameClass="TheStoneCircle" />
    <QuestsSorted Action="Pulse" NameClass="ROUTEStoneCircleBackToGadgetzan" />
    <QuestsSorted Action="RunCode" NameClass="FlightMaster.takeTaxi(&quot;Tanaris&quot;, &quot;Barrens&quot;);" />
    <QuestsSorted Action="Pulse" NameClass="TheStoneCircle" />
    <QuestsSorted Action="RunCode" NameClass="FlightMaster.takeTaxi(&quot;Barrens&quot;, &quot;Tanaris&quot;);" />
    <QuestsSorted Action="TurnIn" NameClass="TheStoneCircle" />
    <QuestsSorted Action="Pulse" NameClass="ROUTEStoneCircleBackToGadgetzan" />
    <QuestsSorted Action="RunCode" NameClass="FlightMaster.takeTaxi(&quot;Tanaris&quot;, &quot;Darkshore&quot;);" />
    <QuestsSorted Action="If" NameClass="!Quest.GetQuestCompleted(2939)" />
    <QuestsSorted Action="Pulse" NameClass="BOATSShipAuberdineToRutheran" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="TurnIn" NameClass="InSearchofKnowledge" />
    <QuestsSorted Action="TurnIn" NameClass="HandleWithCare" />
    <QuestsSorted Action="PickUp" NameClass="FavoredofElune" />
    <QuestsSorted Action="TurnIn" NameClass="InSearchofKnowledge" />
    <QuestsSorted Action="IfHasQuest" NameClass="2940" />
    <QuestsSorted Action="Pulse" NameClass="ROUTEGoToRutheranBook" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="PickUp" NameClass="FeralasAHistory" />
    <QuestsSorted Action="TurnIn" NameClass="FeralasAHistory" />
    <QuestsSorted Action="PickUp" NameClass="TheBorrower" />
    <QuestsSorted Action="RunCode" NameClass="FlightMaster.takeTaxi(&quot;Teldrassil&quot;, &quot;Tanaris&quot;);" />
    <QuestsSorted Action="TurnIn" NameClass="TheBorrower" />
    <QuestsSorted Action="PickUp" NameClass="TheSuperSnapperFX" />
    <QuestsSorted Action="RunCode" NameClass="FlightMaster.takeTaxi(&quot;Tanaris&quot;, &quot;Thalanaar&quot;);" />
    <QuestsSorted Action="IfHasQuest" NameClass="4131" />
    <QuestsSorted Action="Pulse" NameClass="ROUTEThalanaarGoToGnolls" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="TurnIn" NameClass="TheWoodpawGnolls" />
    <QuestsSorted Action="PickUp" NameClass="TheWrithingDeep" />
    <QuestsSorted Action="IfHasQuest" NameClass="4135" />
    <QuestsSorted Action="Pulse" NameClass="ROUTEGoToSiliths" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="TurnIn" NameClass="TheWrithingDeep" />
    <QuestsSorted Action="PickUp" NameClass="FreedfromtheHive" />
    <QuestsSorted Action="Pulse" NameClass="ROUTESilithsToMonkeysAndBears" />
    <QuestsSorted Action="Pulse" NameClass="RhapsodysKalimdorKocktail2" />
    <QuestsSorted Action="Pulse" NameClass="RhapsodysKalimdorKocktail3" />
    <QuestsSorted Action="IfHasQuest" NameClass="4281" />
    <QuestsSorted Action="Pulse" NameClass="ROUTEWrithingDeepBackToThalanaar" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="PickUp" NameClass="ThalanaarDelivery" />
    <QuestsSorted Action="TurnIn" NameClass="ThalanaarDelivery" />
    <QuestsSorted Action="RunCode" NameClass="FlightMaster.takeTaxi(&quot;Thalanaar&quot;, &quot;Feathermoon&quot;);" />
    <QuestsSorted Action="TurnIn" NameClass="FreedfromtheHive" />
    <QuestsSorted Action="PickUp" NameClass="AHerosWelcome" />
    <QuestsSorted Action="TurnIn" NameClass="AHerosWelcome" />
    <QuestsSorted Action="RunCode" NameClass="FlightMaster.takeTaxi(&quot;Feathermoon&quot;, &quot;Tanaris&quot;);" />
    <QuestsSorted Action="PickUp" NameClass="TheThirstyGoblin" />
    <QuestsSorted Action="PickUp" NameClass="NoxiousLairInvestigation" />
    <QuestsSorted Action="PickUp" NameClass="TheDunemaulCompound" />
    <QuestsSorted Action="PickUp" NameClass="ThistleshrubValley" />
    <QuestsSorted Action="Pulse" NameClass="GRINDGrindTo47" />
    <QuestsSorted Action="Pulse" NameClass="RhapsodysKalimdorKocktail1" />
    <QuestsSorted Action="Pulse" NameClass="NoxiousLairInvestigation" />
    <QuestsSorted Action="Pulse" NameClass="TheThirstyGoblin" />
    <QuestsSorted Action="Pulse" NameClass="ThistleshrubValley" />
    <QuestsSorted Action="Pulse" NameClass="ThistleshrubValley2" />
    <QuestsSorted Action="Pulse" NameClass="TheDunemaulCompound" />
    <QuestsSorted Action="Pulse" NameClass="TheDunemaulCompound2" />
    <QuestsSorted Action="Pulse" NameClass="TheDunemaulCompound3" />
    <QuestsSorted Action="TurnIn" NameClass="TheThirstyGoblin" />
    <QuestsSorted Action="PickUp" NameClass="InGoodTaste" />
    <QuestsSorted Action="TurnIn" NameClass="NoxiousLairInvestigation" />
    <QuestsSorted Action="TurnIn" NameClass="InGoodTaste" />
    <QuestsSorted Action="PickUp" NameClass="SprinklesSecretIngredient" />
    <QuestsSorted Action="TurnIn" NameClass="ThistleshrubValley" />
    <QuestsSorted Action="TurnIn" NameClass="TheDunemaulCompound" />
    <QuestsSorted Action="RunCode" NameClass="wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;" />
    <QuestsSorted Action="While" NameClass="Usefuls.ContinentId == (int)ContinentId.Kalimdor" />
    <QuestsSorted Action="RunCode" NameClass="wManager.Wow.Helpers.ItemsManager.UseItem(6948);" />
    <QuestsSorted Action="Wait" NameClass="20000" />
    <QuestsSorted Action="EndWhile" NameClass="" />
    <QuestsSorted Action="RunCode" NameClass="wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = true;" />
    <QuestsSorted Action="RunCode" NameClass="ProgressSettings.Dispose();&#xD;&#xA;ProgressSettings.inProgress = false;&#xD;&#xA;&#xD;&#xA;FNVSettings.Initialize();&#xD;&#xA;FNVSettings.CurrentSettings.feralasEins = true;&#xD;&#xA;FNVSettings.Dispose();" />
    <QuestsSorted Action="LoadProfile" NameClass="FNV_V2\#0 START_FNVLauncher_V2.xml" />
  </QuestsSorted>
  <NpcQuest>
    <NPCQuest Id="5594" Name="Alchemist Pestlezugg" GameObject="false">
      <PickUpQuests />
      <TurnInQuests>
        <int>82</int>
      </TurnInQuests>
      <Position X="-7115.3" Y="-3729.93" Z="8.773558" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="11758" Name="Andi Lynn" GameObject="false">
      <PickUpQuests>
        <int>5863</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>5863</int>
      </TurnInQuests>
      <Position X="-7135.48" Y="-3863.11" Z="9.431551" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="7900" Name="Angelas Moonbreeze" GameObject="false">
      <PickUpQuests>
        <int>2982</int>
        <int>3445</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>2982</int>
      </TurnInQuests>
      <Position X="-4480.03" Y="3229.6" Z="13.72976" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="7763" Name="Curgle Cranklehop" GameObject="false">
      <PickUpQuests>
        <int>2750</int>
        <int>2748</int>
        <int>2747</int>
        <int>2749</int>
        <int>3022</int>
        <int>2944</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>2750</int>
        <int>2748</int>
        <int>2747</int>
        <int>2749</int>
        <int>2941</int>
      </TurnInQuests>
      <Position X="-7112.68" Y="-3831.32" Z="9.622301" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="7907" Name="Daryn Lightwind" GameObject="false">
      <PickUpQuests>
        <int>2943</int>
        <int>5250</int>
        <int>2941</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>2940</int>
        <int>2939</int>
        <int>2944</int>
      </TurnInQuests>
      <Position X="8701.16" Y="993.116" Z="23.5037" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="7916" Name="Erelas Ambersky" GameObject="false">
      <PickUpQuests>
        <int>3661</int>
        <int>979</int>
        <int>978</int>
        <int>4902</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>3661</int>
        <int>4901</int>
        <int>3022</int>
        <int>978</int>
      </TurnInQuests>
      <Position X="8707.46" Y="988.88" Z="14.11324" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="142958" Name="Feralas: A History" GameObject="true">
      <PickUpQuests>
        <int>2940</int>
      </PickUpQuests>
      <TurnInQuests />
      <Position X="8727.45" Y="1002.96" Z="23.5019" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="7880" Name="Ginro Hearthkindle" GameObject="false">
      <PickUpQuests>
        <int>4125</int>
        <int>4266</int>
        <int>4129</int>
        <int>4131</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>4124</int>
        <int>4127</int>
        <int>4265</int>
        <int>4130</int>
      </TurnInQuests>
      <Position X="-4457.71" Y="3227.39" Z="23.11924" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="164953" Name="Large Leather Backpacks" GameObject="true">
      <PickUpQuests>
        <int>4135</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>4131</int>
      </TurnInQuests>
      <Position X="-4975.6" Y="346.066" Z="23.0333" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="7877" Name="Latronicus Moonspear" GameObject="false">
      <PickUpQuests>
        <int>4124</int>
        <int>2870</int>
        <int>2869</int>
        <int>2871</int>
        <int>7488</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>2870</int>
        <int>2869</int>
        <int>3130</int>
        <int>7494</int>
        <int>7488</int>
      </TurnInQuests>
      <Position X="-4505.91" Y="3330.33" Z="14.04209" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="7564" Name="Marin Noggenfogger" GameObject="false">
      <PickUpQuests>
        <int>2606</int>
        <int>2662</int>
        <int>2605</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>2661</int>
        <int>2662</int>
        <int>2605</int>
      </TurnInQuests>
      <Position X="-7193.42" Y="-3793.48" Z="9.679739" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="7771" Name="Marvon Rivetseeker" GameObject="false">
      <PickUpQuests>
        <int>3161</int>
        <int>3446</int>
        <int>3447</int>
        <int>3444</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>3161</int>
        <int>3444</int>
        <int>3380</int>
        <int>3445</int>
      </TurnInQuests>
      <Position X="-7987.52" Y="-3855.62" Z="17.73341" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="7852" Name="Pratt McGrubben" GameObject="false">
      <PickUpQuests>
        <int>2821</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>2821</int>
      </TurnInQuests>
      <Position X="-4345.38" Y="3312.75" Z="10.01495" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="7852" Name="Pratt McGrubben" GameObject="false">
      <PickUpQuests>
        <int>7733</int>
        <int>2821</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>7733</int>
        <int>2821</int>
      </TurnInQuests>
      <Position X="-4345.38" Y="3312.75" Z="10.01493" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="7879" Name="Quintis Jonespyre" GameObject="false">
      <PickUpQuests>
        <int>3792</int>
        <int>4130</int>
        <int>3791</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>3787</int>
        <int>3788</int>
        <int>3792</int>
        <int>4129</int>
      </TurnInQuests>
      <Position X="-4395.55" Y="3186.61" Z="58.56038" />
    </NPCQuest>
    <NPCQuest Id="7724" Name="Senior Surveyor Fizzledowser" GameObject="false">
      <PickUpQuests>
        <int>992</int>
        <int>110</int>
        <int>82</int>
        <int>32</int>
        <int>162</int>
        <int>10</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>992</int>
        <int>113</int>
        <int>10</int>
      </TurnInQuests>
      <Position X="-7139.19" Y="-3683.27" Z="20.94364" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="3936" Name="Shandris Feathermoon" GameObject="false">
      <PickUpQuests>
        <int>2866</int>
        <int>3130</int>
        <int>4267</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>4266</int>
        <int>2867</int>
      </TurnInQuests>
      <Position X="-4505.82" Y="3337.48" Z="14.03717" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="142179" Name="Solarsal Gazebo" GameObject="true">
      <PickUpQuests />
      <TurnInQuests>
        <int>2866</int>
      </TurnInQuests>
      <Position X="-4791.75" Y="3613.3" Z="12.5194" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="142179" Name="Solarsal Gazebo" GameObject="true">
      <PickUpQuests>
        <int>2867</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>2866</int>
      </TurnInQuests>
      <Position X="-4791.75" Y="3613.3" Z="12.5194" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="7583" Name="Sprinkle" GameObject="false">
      <PickUpQuests>
        <int>2661</int>
        <int>2641</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>2606</int>
        <int>2641</int>
      </TurnInQuests>
      <Position X="-7111.11" Y="-3741.78" Z="8.526388" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="7876" Name="Tran'rek" GameObject="false">
      <PickUpQuests>
        <int>3362</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>3362</int>
      </TurnInQuests>
      <Position X="-7105.84" Y="-3776.83" Z="8.709084" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="7764" Name="Troyas Moonbreeze" GameObject="false">
      <PickUpQuests>
        <int>2939</int>
        <int>2879</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>2943</int>
        <int>2942</int>
      </TurnInQuests>
      <Position X="-4474.9" Y="3232.88" Z="13.7295" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="164909" Name="Wrecked Row Boat" GameObject="true">
      <PickUpQuests>
        <int>4127</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>4125</int>
      </TurnInQuests>
      <Position X="-5376.7" Y="2283.4" Z="-2.06862" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="14637" Name="Zorbin Fandazzle" GameObject="false">
      <PickUpQuests>
        <int>7721</int>
        <int>7003</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>7721</int>
        <int>7003</int>
      </TurnInQuests>
      <Position X="-4378.62" Y="2327.33" Z="1.46345" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="164954" Name="Zukk'ash Pod" GameObject="true">
      <PickUpQuests>
        <int>4265</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>4135</int>
      </TurnInQuests>
      <Position X="-5319" Y="433" Z="13" />
    </NPCQuest>
    <NPCQuest Id="5634" Name="Rhapsody Shindigger" GameObject="false">
      <PickUpQuests>
        <int>1452</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>1452</int>
      </TurnInQuests>
      <Position X="219.598" Y="-2612.21" Z="160.449" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="4048" Name="Falfindel Waywarder" GameObject="false">
      <PickUpQuests />
      <TurnInQuests>
        <int>4281</int>
      </TurnInQuests>
      <Position X="-4524.14" Y="-787.884" Z="-41.5917" Type="Flying" />
    </NPCQuest>
  </NpcQuest>
  <Npc>
    <Npc>
      <Position X="-4381.59" Y="3289.45" Z="13.54333" Type="Flying" />
      <Entry>7736</Entry>
      <Name>Innkeeper Shyria</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>Vendor</Type>
      <VendorItemClass>Food</VendorItemClass>
      <ContinentId>Kalimdor</ContinentId>
    </Npc>
    <Npc>
      <Position X="-4365.9" Y="3302" Z="13.55598" Type="Flying" />
      <Entry>10293</Entry>
      <Name>Dulciea Frostmoon</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>Repair</Type>
      <VendorItemClass>Food</VendorItemClass>
      <ContinentId>Kalimdor</ContinentId>
    </Npc>
    <Npc>
      <Position X="-4491.6" Y="-768.035" Z="-36.71517" Type="Flying" />
      <Entry>1695</Entry>
      <Name>Rendow</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>Repair</Type>
      <VendorItemClass>Food</VendorItemClass>
      <ContinentId>Kalimdor</ContinentId>
    </Npc>
    <Npc>
      <Position X="-7141.49" Y="-3719.69" Z="8.494858" />
      <Entry>8131</Entry>
      <Name>Blizrik Buckshot</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>Repair</Type>
      <VendorItemClass>Food</VendorItemClass>
      <ContinentId>Kalimdor</ContinentId>
    </Npc>
    <Npc>
      <Position X="-7159.053" Y="-3841.672" Z="8.697378" />
      <Entry>7733</Entry>
      <Name>Innkeeper Fizzgrimble</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>Vendor</Type>
      <VendorItemClass>Food</VendorItemClass>
      <ContinentId>Kalimdor</ContinentId>
    </Npc>
    <Npc>
      <Position X="-6890.53" Y="-4816.76" Z="8.701903" />
      <Entry>8137</Entry>
      <Name>Gikkix</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>Vendor</Type>
      <VendorItemClass>Food</VendorItemClass>
      <ContinentId>Kalimdor</ContinentId>
    </Npc>
    <Npc>
      <Position X="-6886.48" Y="-4842.28" Z="8.538724" />
      <Entry>8139</Entry>
      <Name>Jabbey</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>Vendor</Type>
      <VendorItemClass>Food</VendorItemClass>
      <ContinentId>Kalimdor</ContinentId>
    </Npc>
  </Npc>
  <EasyQuests>
    <EasyQuest>
      <Name>A Hero's Welcome</Name>
      <QuestId>
        <int>4266</int>
      </QuestId>
      <QuestType>None</QuestType>
      <QuestClass />
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Against Lord Shalzaru</Name>
      <QuestId>
        <int>2870</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="-5631.35" Y="3461" Z="2.60498" />
        </HotSpots>
        <EntryTarget>
          <int>8136</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>true</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Boat Wreckage</Name>
      <QuestId>
        <int>4127</int>
      </QuestId>
      <QuestType>None</QuestType>
      <QuestClass />
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>BOATShipMenethilToAuberdine</Name>
      <QuestId />
      <QuestType>OverridePulseCSharpCode</QuestType>
      <QuestClass xsi:type="OverridePulseCSharpCodeEasyQuestClass">
        <Code>/* Quest settings:
    * Can condition: "return Usefuls.ContinentId == (int) ContinentId.Kalimdor;"
    * Is complete condition: "return Usefuls.ContinentId == (int) ContinentId.Kalimdor &amp;&amp; !ObjectManager.Me.InTransport;"
    * Not required in quest log: "True"
    * Quest type: "OverridePulseCSharpCode"
*/

// You can get zeppelin/ship/player positions and entry ID in tab "Tools" &gt; "Development Tools" &gt; "Dump all informations" (or "Memory information").

// Settings:
var zeppelinEntryId = 176310; // Zeppelin/Ship EntryId
// From
var fromZeppelinWaitPosition = new Vector3(-3709.475, -575.0988, 0); // Position where Zeppelin/Ship waits players (from)
var fromPlayerWaitPosition = new Vector3(-3727.4, -581.3, 6.2); // Position where the player waits Zeppelin/Ship (from)
var fromPlayerInZeppelinPosition = new Vector3(-3713.333, -571.7416, 6.098111); // Position where the player waits in the Zeppelin/Ship (from)
// To
var toZeppelinWaitPosition = new Vector3(6406.216, 823.0809, 0); // Position where Zeppelin/Ship waits players (to)
var toPlayerLeavePosition = new Vector3(6461.408, 806.1595, 6.770809); // Position to go out the Zeppelin/Ship (to)
//Pos1
var enterPos1 = new Vector3(-3724.827, -581.0698, 6.191196);
//Pos2
var enterPos2 = new Vector3( -3723.727, -580.3727, 6.184784);

// Change WRobot settings:
wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;
wManager.wManagerSetting.CurrentSetting.Repair = false;
wManager.wManagerSetting.CurrentSetting.Selling = false;

// Code:
if (!Conditions.InGameAndConnectedAndProductStartedNotInPause)
    return true;

if (Usefuls.ContinentId != (int)ContinentId.Kalimdor)
{
    if (!ObjectManager.Me.InTransport)
    {
        if (GoToTask.ToPosition(fromPlayerWaitPosition))
        {
            var zeppelin = ObjectManager.GetWoWGameObjectByEntry(zeppelinEntryId).OrderBy(o =&gt; o.GetDistance).FirstOrDefault();
            if (zeppelin != null &amp;&amp; zeppelin.Position.DistanceTo(fromZeppelinWaitPosition) &lt; 1)
            {

 GoToTask.ToPosition(enterPos1);
if(GoToTask.ToPosition(enterPos1))
GoToTask.ToPosition(enterPos2);

Lua.LuaDoString("ClearTarget()");

wManager.Wow.Helpers.MovementManager.Face(new Vector3(-3713.333, -571.7416, 6.098111));

while(fromPlayerInZeppelinPosition.DistanceTo(ObjectManager.Me.Position) &gt; 3)
{
wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 250);
      Thread.Sleep(robotManager.Helpful.Others.Random(25, 50));
}
               GoToTask.ToPosition(fromPlayerInZeppelinPosition);
            }
        }
    }
}
else if (Usefuls.ContinentId == (int)ContinentId.Kalimdor)
{
    if (ObjectManager.Me.InTransport)
    {
        var zeppelin = ObjectManager.GetWoWGameObjectByEntry(zeppelinEntryId).OrderBy(o =&gt; o.GetDistance).FirstOrDefault();
        if (zeppelin != null &amp;&amp; zeppelin.Position.DistanceTo(toZeppelinWaitPosition) &lt; 1)
        {
            wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 1500);
            wManager.Wow.Helpers.Move.StrafeRight(Move.MoveAction.PressKey, 1000);
            wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 1200);

            GoToTask.ToPosition(toPlayerLeavePosition);

        }
    }
}
return true;</Code>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition>return (new Vector3(6461.408f, 806.1595f, 6.770809f).DistanceTo(ObjectManager.Me.Position) &lt; 10 &amp;&amp; Usefuls.ContinentId == (int) ContinentId.Kalimdor &amp;&amp; !ObjectManager.Me.InTransport);</IsCompleteCondition>
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>BOATSShipAuberdineToRutheran</Name>
      <QuestId />
      <QuestType>OverridePulseCSharpCode</QuestType>
      <QuestClass xsi:type="OverridePulseCSharpCodeEasyQuestClass">
        <Code>/* Quest settings:
    * Can condition: "return Usefuls.ContinentId == (int) ContinentId.Kalimdor;"
    * Is complete condition: "return Usefuls.ContinentId == (int) ContinentId.Kalimdor &amp;&amp; !ObjectManager.Me.InTransport;"
    * Not required in quest log: "True"
    * Quest type: "OverridePulseCSharpCode"
*/

// You can get zeppelin/ship/player positions and entry ID in tab "Tools" &gt; "Development Tools" &gt; "Dump all informations" (or "Memory information").

// Settings:
var zeppelinEntryId = 176244; // Zeppelin/Ship EntryId
// From
var fromZeppelinWaitPosition = new Vector3(6594.373, 759.8262, 0); // Position where Zeppelin/Ship waits players (from)
var fromPlayerWaitPosition = new Vector3(6578.411, 769.0251, 5.696531); // Position where the player waits Zeppelin/Ship (from)
var fromPlayerInZeppelinPosition = new Vector3(6592.527, 765.0315, 6.098117); // Position where the player waits in the Zeppelin/Ship (from)
// To
var toZeppelinWaitPosition = new Vector3(8533.65, 1025.055, 0); // Position where Zeppelin/Ship waits players (to)
var toPlayerLeavePosition = new Vector3(8551.953, 1021.605, 5.620047); // Position to go out the Zeppelin/Ship (to)

// Change WRobot settings:
wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;
wManager.wManagerSetting.CurrentSetting.Repair = false;
wManager.wManagerSetting.CurrentSetting.Selling = false;

// Code:
if (!Conditions.InGameAndConnectedAndProductStartedNotInPause)
    return true;

if (!Usefuls.MapZoneName.Contains("Teldrassil"))
{
    if (!ObjectManager.Me.InTransport)
    {
        if (GoToTask.ToPosition(fromPlayerWaitPosition))
        {
            var zeppelin = ObjectManager.GetWoWGameObjectByEntry(zeppelinEntryId).OrderBy(o =&gt; o.GetDistance).FirstOrDefault();
            if (zeppelin != null &amp;&amp; zeppelin.Position.DistanceTo(fromZeppelinWaitPosition) &lt; 1)
            {

Lua.LuaDoString("ClearTarget()");
Thread.Sleep(robotManager.Helpful.Others.Random(3000, 5000));

wManager.Wow.Helpers.MovementManager.Face(new Vector3(6592.527, 763.5315, 6.098117));

while(fromPlayerInZeppelinPosition.DistanceTo(ObjectManager.Me.Position) &gt; 3)
{
wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 250);
      Thread.Sleep(robotManager.Helpful.Others.Random(25, 50));
}
               GoToTask.ToPosition(fromPlayerInZeppelinPosition);
            }
        }
    }
}
else if (Usefuls.MapZoneName.Contains("Teldrassil"))
{
    if (ObjectManager.Me.InTransport)
    {
        var zeppelin = ObjectManager.GetWoWGameObjectByEntry(zeppelinEntryId).OrderBy(o =&gt; o.GetDistance).FirstOrDefault();
        if (zeppelin != null &amp;&amp; zeppelin.Position.DistanceTo(toZeppelinWaitPosition) &lt; 1)
        {
/*
	wManager.Wow.Helpers.MovementManager.Face(new Vector3(8557.925, 1020.943, 5.380576));
Thread.Sleep(robotManager.Helpful.Others.Random(250, 250));
            wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 250);
Thread.Sleep(robotManager.Helpful.Others.Random(50, 100));
	wManager.Wow.Helpers.MovementManager.Face(new Vector3(8557.925, 1020.943, 5.380576));
Thread.Sleep(robotManager.Helpful.Others.Random(100, 200));
            wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 1500);
            wManager.Wow.Helpers.Move.StrafeRight(Move.MoveAction.PressKey, 1000);
            wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 1200);
*/

            GoToTask.ToPosition(toPlayerLeavePosition);

        }
    }
}
return true;</Code>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition>return (new Vector3(8557.48f, 1019.889f, 5.379804f).DistanceTo(ObjectManager.Me.Position) &lt; 10 &amp;&amp; Usefuls.MapZoneName.Contains("Teldrassil") &amp;&amp; !ObjectManager.Me.InTransport) || (Quest.GetQuestCompleted(3022));</IsCompleteCondition>
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Favored of Elune?</Name>
      <QuestId>
        <int>3661</int>
      </QuestId>
      <QuestType>Gatherer</QuestType>
      <QuestClass xsi:type="GathererEasyQuestClass">
        <HotSpots />
        <EntryIdObjects />
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Feralas: A History</Name>
      <QuestId>
        <int>2940</int>
      </QuestId>
      <QuestType>None</QuestType>
      <QuestClass />
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Freed from the Hive</Name>
      <QuestId>
        <int>4265</int>
      </QuestId>
      <QuestType>None</QuestType>
      <QuestClass />
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Fuel for the Zapping</Name>
      <QuestId>
        <int>7721</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="-4488.053" Y="2295.018" Z="10.29422" />
          <Vector3 X="-4596.397" Y="2291.142" Z="8.505332" />
          <Vector3 X="-4686.427" Y="2305.832" Z="8.070086" />
          <Vector3 X="-4804.768" Y="2211.929" Z="5.426164" />
          <Vector3 X="-4935.55" Y="2183.574" Z="5.071033" />
        </HotSpots>
        <EntryTarget>
          <int>5462</int>
          <int>5461</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>true</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>GRINDGrindTo46</Name>
      <QuestId />
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="-5048.496" Y="284.3016" Z="31.46345" />
          <Vector3 X="-5179.377" Y="612.5891" Z="50.79478" />
          <Vector3 X="-4712.882" Y="1214.087" Z="104.7668" />
          <Vector3 X="-4992.925" Y="1396.458" Z="49.26109" />
          <Vector3 X="-5202.795" Y="1414.943" Z="42.50507" />
          <Vector3 X="-5169.277" Y="1210.417" Z="65.52076" />
          <Vector3 X="-5338.79" Y="1143.527" Z="64.26511" />
        </HotSpots>
        <EntryTarget>
          <int>5287</int>
          <int>5272</int>
          <int>5260</int>
          <int>5307</int>
          <int>5254</int>
          <int>5255</int>
          <int>5251</int>
        </EntryTarget>
        <IsGrinderNotQuest>true</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>45</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>GRINDGrindTo47</Name>
      <QuestId />
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="-9346.52" Y="-3313.349" Z="10.52583" />
          <Vector3 X="-9319.738" Y="-2502.855" Z="17.10819" />
          <Vector3 X="-8729.59" Y="-2794.755" Z="17.35138" />
          <Vector3 X="-8539.365" Y="-3426.026" Z="8.625301" />
          <Vector3 X="-8340.034" Y="-4009.353" Z="12.53556" />
          <Vector3 X="-8595.134" Y="-4390.887" Z="10.93537" />
        </HotSpots>
        <EntryTarget>
          <int>5427</int>
          <int>5421</int>
          <int>5424</int>
          <int>5430</int>
          <int>8667</int>
          <int>5465</int>
          <int>5420</int>
          <int>5426</int>
          <int>5429</int>
        </EntryTarget>
        <IsGrinderNotQuest>true</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>46</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Handle With Care</Name>
      <QuestId>
        <int>3022</int>
      </QuestId>
      <QuestType>None</QuestType>
      <QuestClass />
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Improved Quality</Name>
      <QuestId>
        <int>7733</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots />
        <EntryTarget />
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>true</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>In Good Taste</Name>
      <QuestId>
        <int>2606</int>
      </QuestId>
      <QuestType>None</QuestType>
      <QuestClass />
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>In Search of Knowledge</Name>
      <QuestId>
        <int>2939</int>
      </QuestId>
      <QuestType>None</QuestType>
      <QuestClass />
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Noxious Lair Investigation</Name>
      <QuestId>
        <int>82</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="-7665.167" Y="-2733.647" Z="9.194007" />
          <Vector3 X="-7920.368" Y="-2730.889" Z="8.868263" />
          <Vector3 X="-8155.245" Y="-2682.196" Z="9.712473" />
          <Vector3 X="-8266.521" Y="-2453.019" Z="10.13191" />
        </HotSpots>
        <EntryTarget>
          <int>4196</int>
          <int>5455</int>
          <int>5456</int>
          <int>5458</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>true</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Psychometric Reading</Name>
      <QuestId>
        <int>4130</int>
      </QuestId>
      <QuestType>None</QuestType>
      <QuestClass />
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Return to Feathermoon Stronghold</Name>
      <QuestId>
        <int>2867</int>
      </QuestId>
      <QuestType>None</QuestType>
      <QuestClass />
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Rhapsody's Kalimdor Kocktail1</Name>
      <QuestId>
        <int>1452</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="-7499.29" Y="-3662.587" Z="9.819628" />
          <Vector3 X="-7578.708" Y="-3602.488" Z="14.68509" />
          <Vector3 X="-7533.875" Y="-3503.655" Z="12.22202" />
          <Vector3 X="-7572.502" Y="-3420.474" Z="39.75306" />
          <Vector3 X="-7812.245" Y="-3645.368" Z="46.67133" />
          <Vector3 X="-8103.471" Y="-3487.302" Z="45.08564" />
        </HotSpots>
        <EntryTarget>
          <int>5428</int>
          <int>5429</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>true</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Rhapsody's Kalimdor Kocktail2</Name>
      <QuestId>
        <int>1452</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="-3926.291" Y="1993.907" Z="80.83228" />
          <Vector3 X="-3750.88" Y="1987.134" Z="68.33151" />
          <Vector3 X="-3655.78" Y="1985.092" Z="71.91609" />
        </HotSpots>
        <EntryTarget>
          <int>5268</int>
          <int>5274</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>true</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Rhapsody's Kalimdor Kocktail3</Name>
      <QuestId>
        <int>1452</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="-3652.192" Y="1971.805" Z="73.57043" />
          <Vector3 X="-3794.502" Y="1978.153" Z="68.60283" />
        </HotSpots>
        <EntryTarget>
          <int>5262</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>true</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTEDownTheTree</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="-4398.563" Y="3183.75" Z="58.56102" />
          <Vector3 X="-4400.471" Y="3181.497" Z="58.56102" />
          <Vector3 X="-4402.561" Y="3178.821" Z="58.56102" />
          <Vector3 X="-4404.688" Y="3176.042" Z="58.56102" />
          <Vector3 X="-4406.467" Y="3173.029" Z="58.59111" />
          <Vector3 X="-4407.567" Y="3169.647" Z="58.71857" />
          <Vector3 X="-4405.348" Y="3167.34" Z="58.65215" />
          <Vector3 X="-4401.799" Y="3167.136" Z="58.49425" />
          <Vector3 X="-4398.536" Y="3168.072" Z="57.81964" />
          <Vector3 X="-4395.08" Y="3169.098" Z="57.25033" />
          <Vector3 X="-4392.119" Y="3170.729" Z="56.58704" />
          <Vector3 X="-4389.478" Y="3173.17" Z="56.00522" />
          <Vector3 X="-4387.508" Y="3175.928" Z="54.41969" />
          <Vector3 X="-4385.997" Y="3179.194" Z="52.5253" />
          <Vector3 X="-4385.478" Y="3182.539" Z="50.49906" />
          <Vector3 X="-4386.051" Y="3186.062" Z="48.46767" />
          <Vector3 X="-4387.692" Y="3189.029" Z="46.92327" />
          <Vector3 X="-4390.296" Y="3191.484" Z="45.64171" />
          <Vector3 X="-4393.298" Y="3193.034" Z="44.37967" />
          <Vector3 X="-4396.842" Y="3193.67" Z="43.40466" />
          <Vector3 X="-4400.212" Y="3194.079" Z="42.57397" />
          <Vector3 X="-4403.793" Y="3194.496" Z="41.49245" />
          <Vector3 X="-4407.175" Y="3194.402" Z="40.85409" />
          <Vector3 X="-4410.454" Y="3192.924" Z="39.71603" />
          <Vector3 X="-4413.484" Y="3191.391" Z="38.2404" />
          <Vector3 X="-4416.504" Y="3189.439" Z="35.99961" />
          <Vector3 X="-4418.586" Y="3186.798" Z="34.34657" />
          <Vector3 X="-4419.911" Y="3183.445" Z="32.97769" />
          <Vector3 X="-4421.048" Y="3180.248" Z="32.02223" />
          <Vector3 X="-4421.751" Y="3176.728" Z="32.11874" />
          <Vector3 X="-4421.707" Y="3175.637" Z="32.14198" />
          <Vector3 X="-4420.125" Y="3176.091" Z="32.13633" />
          <Vector3 X="-4416.751" Y="3177.021" Z="32.17619" />
          <Vector3 X="-4415.275" Y="3177.407" Z="32.1485" />
          <Vector3 X="-4412.047" Y="3178.462" Z="32.16844" />
          <Vector3 X="-4408.565" Y="3178.811" Z="32.26437" />
          <Vector3 X="-4406.018" Y="3176.615" Z="32.25591" />
          <Vector3 X="-4405.436" Y="3173.189" Z="32.25887" />
          <Vector3 X="-4406.591" Y="3170.004" Z="31.98214" />
          <Vector3 X="-4409.278" Y="3167.821" Z="31.35343" />
          <Vector3 X="-4412.118" Y="3169.229" Z="30.39932" />
          <Vector3 X="-4413.145" Y="3172.561" Z="28.98923" />
          <Vector3 X="-4412.792" Y="3175.97" Z="27.79413" />
          <Vector3 X="-4409.529" Y="3177.167" Z="26.33461" />
          <Vector3 X="-4406.542" Y="3175.852" Z="25.11362" />
          <Vector3 X="-4405.452" Y="3172.653" Z="23.75508" />
          <Vector3 X="-4406.768" Y="3169.506" Z="22.48682" />
          <Vector3 X="-4410.204" Y="3169.029" Z="21.00966" />
          <Vector3 X="-4413.051" Y="3170.71" Z="19.85477" />
          <Vector3 X="-4413.515" Y="3174.078" Z="18.56529" />
          <Vector3 X="-4411.729" Y="3177.039" Z="17.59015" />
          <Vector3 X="-4409.089" Y="3179.492" Z="17.59015" />
          <Vector3 X="-4406.467" Y="3181.648" Z="17.59015" />
          <Vector3 X="-4403.651" Y="3183.724" Z="17.59015" />
          <Vector3 X="-4400.602" Y="3185.442" Z="17.59001" />
          <Vector3 X="-4397.444" Y="3187.18" Z="17.59001" />
          <Vector3 X="-4394.925" Y="3189.448" Z="17.59001" />
          <Vector3 X="-4392.473" Y="3192.087" Z="17.62547" />
          <Vector3 X="-4390.344" Y="3194.731" Z="17.61871" />
          <Vector3 X="-4388.223" Y="3197.515" Z="17.59941" />
          <Vector3 X="-4386.103" Y="3200.3" Z="17.57958" />
          <Vector3 X="-4383.918" Y="3203.167" Z="16.98463" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>true</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTEFeathermoonGoToGoblin</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="-4438.567" Y="3207.171" Z="12.84561" />
          <Vector3 X="-4438.758" Y="3199.544" Z="13.94583" />
          <Vector3 X="-4442.447" Y="3164.75" Z="8.113622" />
          <Vector3 X="-4445.689" Y="3129.903" Z="2.736355" />
          <Vector3 X="-4449.21" Y="3097.275" Z="-0.3367126" />
          <Vector3 X="-4450.507" Y="3070.821" Z="-1.448069" Type="Swimming" />
          <Vector3 X="-4451.561" Y="3047.233" Z="-1.448069" Type="Swimming" />
          <Vector3 X="-4452.584" Y="3024.353" Z="-1.448069" Type="Swimming" />
          <Vector3 X="-4453.67" Y="3000.058" Z="-1.448069" Type="Swimming" />
          <Vector3 X="-4454.692" Y="2977.178" Z="-1.448069" Type="Swimming" />
          <Vector3 X="-4455.778" Y="2952.883" Z="-1.448069" Type="Swimming" />
          <Vector3 X="-4456.197" Y="2929.279" Z="-1.448069" Type="Swimming" />
          <Vector3 X="-4456.324" Y="2905.668" Z="-1.448069" Type="Swimming" />
          <Vector3 X="-4456.448" Y="2882.765" Z="-1.448069" Type="Swimming" />
          <Vector3 X="-4456.579" Y="2858.446" Z="-1.448069" Type="Swimming" />
          <Vector3 X="-4456.707" Y="2834.835" Z="-1.448069" Type="Swimming" />
          <Vector3 X="-4456.834" Y="2811.225" Z="-1.448069" Type="Swimming" />
          <Vector3 X="-4457.034" Y="2787.615" Z="-1.448069" Type="Swimming" />
          <Vector3 X="-4457.865" Y="2772.86" Z="-1.448069" Type="Swimming" />
          <Vector3 X="-4459.301" Y="2750.05" Z="-1.448069" Type="Swimming" />
          <Vector3 X="-4460.859" Y="2728.677" Z="-1.448069" Type="Swimming" />
          <Vector3 X="-4464.132" Y="2704.578" Z="-1.448069" Type="Swimming" />
          <Vector3 X="-4467.214" Y="2681.884" Z="-1.448069" Type="Swimming" />
          <Vector3 X="-4470.487" Y="2657.786" Z="-1.448069" Type="Swimming" />
          <Vector3 X="-4473.569" Y="2635.091" Z="-1.448069" Type="Swimming" />
          <Vector3 X="-4476.842" Y="2610.993" Z="-1.448069" Type="Swimming" />
          <Vector3 X="-4479.924" Y="2588.299" Z="-1.448069" Type="Swimming" />
          <Vector3 X="-4483" Y="2565.651" Z="-1.448069" Type="Swimming" />
          <Vector3 X="-4489.757" Y="2542.367" Z="-1.434781" Type="Swimming" />
          <Vector3 X="-4495.191" Y="2518.734" Z="-1.434781" Type="Swimming" />
          <Vector3 X="-4499.225" Y="2495.477" Z="-1.434775" Type="Swimming" />
          <Vector3 X="-4502.979" Y="2473.65" Z="-1.434775" Type="Swimming" />
          <Vector3 X="-4503.778" Y="2448.666" Z="-1.434756" Type="Swimming" />
          <Vector3 X="-4501.881" Y="2434.778" Z="-1.434756" Type="Swimming" />
          <Vector3 X="-4492.765" Y="2431.891" Z="-1.434756" Type="Swimming" />
          <Vector3 X="-4470.296" Y="2427.458" Z="-1.434756" Type="Swimming" />
          <Vector3 X="-4446.414" Y="2422.865" Z="-1.434756" Type="Swimming" />
          <Vector3 X="-4423.936" Y="2418.478" Z="-1.434756" Type="Swimming" />
          <Vector3 X="-4401.264" Y="2410.226" Z="-1.434756" Type="Swimming" />
          <Vector3 X="-4385.511" Y="2393.811" Z="-1.434756" Type="Swimming" />
          <Vector3 X="-4374.891" Y="2371.98" Z="-1.434756" Type="Swimming" />
          <Vector3 X="-4367.142" Y="2343.341" Z="1.39805" />
          <Vector3 X="-4365.711" Y="2332.261" Z="2.097913" />
          <Vector3 X="-4367.101" Y="2321.853" Z="2.35077" />
          <Vector3 X="-4373.794" Y="2321.691" Z="1.712258" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTEFeathermoonToLordS</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="-4447.695" Y="3291.096" Z="11.873" />
          <Vector3 X="-4443.756" Y="3296.332" Z="12.53915" />
          <Vector3 X="-4436.626" Y="3306.819" Z="13.48667" />
          <Vector3 X="-4431.208" Y="3323.229" Z="13.56038" />
          <Vector3 X="-4431.542" Y="3339.084" Z="15.56341" />
          <Vector3 X="-4431.623" Y="3342.898" Z="15.99781" />
          <Vector3 X="-4431.997" Y="3359.869" Z="17.80492" />
          <Vector3 X="-4432.32" Y="3377.336" Z="21.05801" />
          <Vector3 X="-4431.032" Y="3395.306" Z="21.9164" />
          <Vector3 X="-4426.203" Y="3412.013" Z="20.96301" />
          <Vector3 X="-4415.635" Y="3425.79" Z="17.02946" />
          <Vector3 X="-4404.904" Y="3439.57" Z="13.26951" />
          <Vector3 X="-4399.178" Y="3455.992" Z="11.55911" />
          <Vector3 X="-4396.216" Y="3472.704" Z="10.92363" />
          <Vector3 X="-4394.908" Y="3480.788" Z="10.7494" />
          <Vector3 X="-4392.108" Y="3497.449" Z="12.26263" />
          <Vector3 X="-4384.09" Y="3513.584" Z="10.91475" />
          <Vector3 X="-4376.112" Y="3528.568" Z="9.853939" />
          <Vector3 X="-4368.675" Y="3544.403" Z="5.850979" />
          <Vector3 X="-4362.704" Y="3560.833" Z="4.917152" />
          <Vector3 X="-4358.734" Y="3578.392" Z="5.155173" />
          <Vector3 X="-4359.469" Y="3595.741" Z="6.864798" />
          <Vector3 X="-4366.044" Y="3611.88" Z="7.03558" />
          <Vector3 X="-4376.263" Y="3626.048" Z="5.239494" />
          <Vector3 X="-4386.31" Y="3639.657" Z="1.923507" />
          <Vector3 X="-4394.705" Y="3655.012" Z="1.88092" />
          <Vector3 X="-4403.352" Y="3670.827" Z="1.673552" />
          <Vector3 X="-4412.31" Y="3685.203" Z="1.48571" />
          <Vector3 X="-4424.81" Y="3698.143" Z="1.366052" />
          <Vector3 X="-4438.31" Y="3708.333" Z="2.030368" />
          <Vector3 X="-4453.99" Y="3717.173" Z="2.068738" />
          <Vector3 X="-4469.729" Y="3723.533" Z="1.900558" />
          <Vector3 X="-4486.407" Y="3730.369" Z="1.70727" />
          <Vector3 X="-4501.868" Y="3737.377" Z="1.978436" />
          <Vector3 X="-4518.764" Y="3743.421" Z="2.153684" />
          <Vector3 X="-4535.728" Y="3743.714" Z="1.730221" />
          <Vector3 X="-4553.194" Y="3742.636" Z="0.3122968" />
          <Vector3 X="-4571.168" Y="3741.281" Z="0.5382553" />
          <Vector3 X="-4588.584" Y="3739.575" Z="1.157686" />
          <Vector3 X="-4605.468" Y="3737.818" Z="1.485607" />
          <Vector3 X="-4622.877" Y="3736.034" Z="0.9326389" />
          <Vector3 X="-4640.335" Y="3734.857" Z="2.288219" />
          <Vector3 X="-4658.14" Y="3737.001" Z="2.863107" />
          <Vector3 X="-4674.126" Y="3742.706" Z="3.229953" />
          <Vector3 X="-4690.798" Y="3747.965" Z="2.306705" />
          <Vector3 X="-4708.072" Y="3750.69" Z="2.64489" />
          <Vector3 X="-4725.552" Y="3751.339" Z="5.175071" />
          <Vector3 X="-4734.283" Y="3750.78" Z="6.169514" />
          <Vector3 X="-4752.233" Y="3749.155" Z="4.451059" />
          <Vector3 X="-4769.625" Y="3747.202" Z="2.186891" />
          <Vector3 X="-4786.501" Y="3745.379" Z="0.6208436" />
          <Vector3 X="-4803.868" Y="3743.502" Z="1.331413" />
          <Vector3 X="-4821.823" Y="3742.354" Z="1.922315" />
          <Vector3 X="-4838.411" Y="3745.892" Z="2.363165" />
          <Vector3 X="-4856.208" Y="3748.653" Z="2.75494" />
          <Vector3 X="-4873.023" Y="3750.906" Z="2.693445" />
          <Vector3 X="-4890.231" Y="3754.09" Z="1.380412" />
          <Vector3 X="-4907.439" Y="3757.274" Z="0.7039868" />
          <Vector3 X="-4925.279" Y="3759.686" Z="1.43082" />
          <Vector3 X="-4941.692" Y="3756.353" Z="1.63781" />
          <Vector3 X="-4958.009" Y="3748.693" Z="1.834222" />
          <Vector3 X="-4972.721" Y="3740.264" Z="1.955232" />
          <Vector3 X="-4987.576" Y="3731.017" Z="0.7232087" />
          <Vector3 X="-5001.517" Y="3720.481" Z="0.5854096" />
          <Vector3 X="-5015.509" Y="3710.23" Z="0.3649186" />
          <Vector3 X="-5019.833" Y="3709.924" Z="0.04258757" />
          <Vector3 X="-5035.721" Y="3709.274" Z="-1.528723" Type="Swimming" />
          <Vector3 X="-5047.517" Y="3708.792" Z="-1.528723" Type="Swimming" />
          <Vector3 X="-5059.666" Y="3708.295" Z="-1.528723" Type="Swimming" />
          <Vector3 X="-5071.108" Y="3707.827" Z="-1.528723" Type="Swimming" />
          <Vector3 X="-5075.52" Y="3707.646" Z="-1.528723" Type="Swimming" />
          <Vector3 X="-5087.693" Y="3707.149" Z="-1.528723" Type="Swimming" />
          <Vector3 X="-5099.488" Y="3706.667" Z="-1.528723" Type="Swimming" />
          <Vector3 X="-5111.638" Y="3706.17" Z="-1.528723" Type="Swimming" />
          <Vector3 X="-5123.08" Y="3705.702" Z="-1.528723" Type="Swimming" />
          <Vector3 X="-5135.229" Y="3705.205" Z="-1.528723" Type="Swimming" />
          <Vector3 X="-5146.671" Y="3704.737" Z="-1.528723" Type="Swimming" />
          <Vector3 X="-5158.467" Y="3704.255" Z="-1.528723" Type="Swimming" />
          <Vector3 X="-5170.563" Y="3703.13" Z="-1.528723" Type="Swimming" />
          <Vector3 X="-5182.254" Y="3701.494" Z="-1.528723" Type="Swimming" />
          <Vector3 X="-5193.595" Y="3699.907" Z="-1.528723" Type="Swimming" />
          <Vector3 X="-5205.638" Y="3698.222" Z="-1.528723" Type="Swimming" />
          <Vector3 X="-5215.505" Y="3696.841" Z="-1.528723" Type="Swimming" />
          <Vector3 X="-5225.771" Y="3703.34" Z="-1.528723" Type="Swimming" />
          <Vector3 X="-5235.241" Y="3710.388" Z="-1.528723" Type="Swimming" />
          <Vector3 X="-5244.297" Y="3717.957" Z="-1.528723" Type="Swimming" />
          <Vector3 X="-5253.256" Y="3725.645" Z="-1.528723" Type="Swimming" />
          <Vector3 X="-5262.543" Y="3733.492" Z="-1.528723" Type="Swimming" />
          <Vector3 X="-5272.269" Y="3739.525" Z="-1.528723" Type="Swimming" />
          <Vector3 X="-5282.826" Y="3745.554" Z="-1.528723" Type="Swimming" />
          <Vector3 X="-5296.046" Y="3748.89" Z="0.6525906" />
          <Vector3 X="-5308.276" Y="3745.901" Z="3.712869" />
          <Vector3 X="-5318.636" Y="3742.816" Z="7.138128" />
          <Vector3 X="-5322.194" Y="3741.107" Z="7.750839" />
          <Vector3 X="-5331.331" Y="3731.501" Z="9.090256" />
          <Vector3 X="-5333.062" Y="3727.977" Z="8.856992" />
          <Vector3 X="-5337.575" Y="3718.498" Z="8.194927" />
          <Vector3 X="-5341.622" Y="3708.811" Z="7.193293" />
          <Vector3 X="-5344.527" Y="3698.732" Z="8.173739" />
          <Vector3 X="-5346.244" Y="3688.715" Z="8.957943" />
          <Vector3 X="-5347.943" Y="3678.034" Z="8.092274" />
          <Vector3 X="-5355.354" Y="3671.297" Z="7.765227" />
          <Vector3 X="-5365.71" Y="3670.119" Z="7.966038" />
          <Vector3 X="-5376.035" Y="3671.893" Z="8.430802" />
          <Vector3 X="-5385.967" Y="3675.289" Z="8.734633" />
          <Vector3 X="-5395.518" Y="3678.828" Z="8.185716" />
          <Vector3 X="-5406.138" Y="3679.754" Z="7.398066" />
          <Vector3 X="-5410.413" Y="3674.617" Z="7.448308" />
          <Vector3 X="-5415.502" Y="3665.092" Z="6.383331" />
          <Vector3 X="-5421.908" Y="3656.782" Z="2.733822" />
          <Vector3 X="-5429.536" Y="3649.588" Z="0.007190749" />
          <Vector3 X="-5438.253" Y="3643.761" Z="-0.3805594" />
          <Vector3 X="-5447.936" Y="3639.738" Z="-0.007840089" />
          <Vector3 X="-5458.292" Y="3638.905" Z="-1.000142" />
          <Vector3 X="-5468.503" Y="3641.347" Z="-1.714149" />
          <Vector3 X="-5477.862" Y="3642.867" Z="-0.07512857" />
          <Vector3 X="-5481.798" Y="3637.625" Z="0.5797634" />
          <Vector3 X="-5487.927" Y="3630.373" Z="1.808574" />
          <Vector3 X="-5495.477" Y="3623.537" Z="0.8126234" />
          <Vector3 X="-5498.934" Y="3620.017" Z="-0.2366796" />
          <Vector3 X="-5506.785" Y="3613.08" Z="-3.552579" />
          <Vector3 X="-5510.85" Y="3610.985" Z="-4.8435" />
          <Vector3 X="-5515.278" Y="3608.807" Z="-6.762727" />
          <Vector3 X="-5522.23" Y="3605.122" Z="-10.09124" />
          <Vector3 X="-5526.579" Y="3602.181" Z="-11.57233" />
          <Vector3 X="-5531.385" Y="3599.335" Z="-12.91334" />
          <Vector3 X="-5535.445" Y="3598.064" Z="-13.60808" />
          <Vector3 X="-5539.562" Y="3598.81" Z="-13.00306" />
          <Vector3 X="-5542.713" Y="3601.188" Z="-12.36047" />
          <Vector3 X="-5550.855" Y="3602.118" Z="-12.03176" />
          <Vector3 X="-5555.05" Y="3597.733" Z="-11.88259" />
          <Vector3 X="-5555.092" Y="3588.549" Z="-11.9421" />
          <Vector3 X="-5563.511" Y="3584.9" Z="-10.71685" />
          <Vector3 X="-5567.282" Y="3583.735" Z="-10.38983" />
          <Vector3 X="-5564.335" Y="3580.658" Z="-10.44432" />
          <Vector3 X="-5561.711" Y="3578.176" Z="-10.55233" />
          <Vector3 X="-5565.093" Y="3573.354" Z="-10.23448" />
          <Vector3 X="-5573.905" Y="3567.682" Z="-8.812633" />
          <Vector3 X="-5582.759" Y="3562.651" Z="-6.1309" />
          <Vector3 X="-5587.987" Y="3557.293" Z="-4.183094" />
          <Vector3 X="-5596.05" Y="3560.852" Z="-2.894231" />
          <Vector3 X="-5599.755" Y="3557.714" Z="-2.075133" />
          <Vector3 X="-5597.752" Y="3550.425" Z="-1.560389" />
          <Vector3 X="-5598.196" Y="3546.167" Z="-0.9533839" />
          <Vector3 X="-5601.884" Y="3536.065" Z="1.007408" />
          <Vector3 X="-5610.624" Y="3534.489" Z="4.233532" />
          <Vector3 X="-5614.997" Y="3533.564" Z="6.6431" />
          <Vector3 X="-5619.345" Y="3532.952" Z="6.256226" />
          <Vector3 X="-5627.116" Y="3531.677" Z="5.015018" />
          <Vector3 X="-5633.69" Y="3528.938" Z="3.296086" />
          <Vector3 X="-5642.461" Y="3523.115" Z="-1.109097" Type="Swimming" />
          <Vector3 X="-5650.173" Y="3514.847" Z="-1.361382" Type="Swimming" />
          <Vector3 X="-5651.405" Y="3510.141" Z="-0.5263654" />
          <Vector3 X="-5648.377" Y="3502.17" Z="0.2648731" />
          <Vector3 X="-5650.766" Y="3496.53" Z="0.2725704" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTEGoblinToMissingCourier</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="-4394.364" Y="2318.721" Z="3.216734" />
          <Vector3 X="-4397.12" Y="2316.443" Z="4.319868" />
          <Vector3 X="-4404.2" Y="2308.693" Z="6.871599" />
          <Vector3 X="-4410.958" Y="2301.074" Z="8.223323" />
          <Vector3 X="-4417.993" Y="2293.279" Z="8.179119" />
          <Vector3 X="-4426.023" Y="2286.035" Z="8.544422" />
          <Vector3 X="-4433.792" Y="2279.449" Z="9.03704" />
          <Vector3 X="-4442" Y="2272.904" Z="7.632194" />
          <Vector3 X="-4452.716" Y="2265.347" Z="8.350414" />
          <Vector3 X="-4467.454" Y="2254.97" Z="9.581723" />
          <Vector3 X="-4481.073" Y="2244.91" Z="11.08789" />
          <Vector3 X="-4494.128" Y="2234.115" Z="10.62665" />
          <Vector3 X="-4514.189" Y="2234.26" Z="11.50829" />
          <Vector3 X="-4531.228" Y="2240.105" Z="11.54547" />
          <Vector3 X="-4547.203" Y="2245.844" Z="9.65927" />
          <Vector3 X="-4563.783" Y="2252.9" Z="7.143707" />
          <Vector3 X="-4579.646" Y="2260.282" Z="6.675571" />
          <Vector3 X="-4595.807" Y="2265.458" Z="5.687807" />
          <Vector3 X="-4612.596" Y="2270.393" Z="5.847604" />
          <Vector3 X="-4629.597" Y="2274.516" Z="5.622217" />
          <Vector3 X="-4647.021" Y="2275.932" Z="4.452725" />
          <Vector3 X="-4664.51" Y="2276.535" Z="5.533756" />
          <Vector3 X="-4682" Y="2277.138" Z="6.848467" />
          <Vector3 X="-4699.474" Y="2276.785" Z="7.195934" />
          <Vector3 X="-4715.462" Y="2273.236" Z="7.446574" />
          <Vector3 X="-4724.727" Y="2267.392" Z="7.526" />
          <Vector3 X="-4739.551" Y="2258.093" Z="10.31397" />
          <Vector3 X="-4754.437" Y="2248.895" Z="10.20094" />
          <Vector3 X="-4768.836" Y="2238.062" Z="5.342572" />
          <Vector3 X="-4779.92" Y="2224.683" Z="6.627793" />
          <Vector3 X="-4788.569" Y="2209.474" Z="7.117075" />
          <Vector3 X="-4794.146" Y="2193.469" Z="4.008162" />
          <Vector3 X="-4800" Y="2176.477" Z="3.774405" />
          <Vector3 X="-4811.604" Y="2163.734" Z="0.8810444" />
          <Vector3 X="-4829.523" Y="2155.87" Z="-1.539576" Type="Swimming" />
          <Vector3 X="-4852.067" Y="2149.08" Z="-1.539576" Type="Swimming" />
          <Vector3 X="-4860.442" Y="2149.118" Z="-0.286768" />
          <Vector3 X="-4866.936" Y="2149.918" Z="-0.8362808" />
          <Vector3 X="-4886.391" Y="2149.391" Z="1.891113" />
          <Vector3 X="-4901.768" Y="2144.741" Z="6.142413" />
          <Vector3 X="-4916.023" Y="2135.524" Z="11.12188" />
          <Vector3 X="-4921.105" Y="2132.298" Z="11.60789" />
          <Vector3 X="-4931.533" Y="2128.953" Z="14.12069" />
          <Vector3 X="-4948.65" Y="2123.306" Z="17.2154" />
          <Vector3 X="-4965.507" Y="2118.607" Z="16.76418" />
          <Vector3 X="-4982.026" Y="2114.754" Z="20.01221" />
          <Vector3 X="-4991.235" Y="2113.67" Z="20.14382" />
          <Vector3 X="-5007.059" Y="2113.202" Z="21.90625" />
          <Vector3 X="-5024.382" Y="2110.818" Z="28.53754" />
          <Vector3 X="-5034.133" Y="2111.477" Z="30.75831" />
          <Vector3 X="-5051.47" Y="2113.86" Z="26.6157" />
          <Vector3 X="-5068.312" Y="2118.283" Z="21.35114" />
          <Vector3 X="-5084.375" Y="2126.16" Z="20.15906" />
          <Vector3 X="-5098.892" Y="2134.592" Z="19.03946" />
          <Vector3 X="-5116.681" Y="2132.518" Z="20.17983" />
          <Vector3 X="-5134.066" Y="2131.213" Z="21.22569" />
          <Vector3 X="-5151.49" Y="2132.825" Z="18.6986" />
          <Vector3 X="-5168.949" Y="2132.804" Z="18.78426" />
          <Vector3 X="-5186.268" Y="2130.495" Z="20.60559" />
          <Vector3 X="-5202.847" Y="2126.946" Z="18.35519" />
          <Vector3 X="-5214.818" Y="2132.021" Z="19.68207" />
          <Vector3 X="-5232.75" Y="2133.842" Z="22.43708" />
          <Vector3 X="-5249.6" Y="2135.871" Z="21.75023" />
          <Vector3 X="-5256.086" Y="2138.508" Z="21.83334" />
          <Vector3 X="-5261.25" Y="2141.581" Z="20.41309" />
          <Vector3 X="-5275.691" Y="2151.465" Z="16.43281" />
          <Vector3 X="-5291.873" Y="2159.091" Z="14.6354" />
          <Vector3 X="-5307.326" Y="2166.068" Z="16.40111" />
          <Vector3 X="-5322.445" Y="2175.856" Z="13.5985" />
          <Vector3 X="-5336.03" Y="2186.024" Z="12.49994" />
          <Vector3 X="-5345.718" Y="2191.043" Z="11.0508" />
          <Vector3 X="-5352.667" Y="2194.28" Z="11.50565" />
          <Vector3 X="-5357.727" Y="2192.269" Z="13.52701" />
          <Vector3 X="-5362.596" Y="2192.462" Z="14.44881" />
          <Vector3 X="-5380.062" Y="2198.725" Z="16.77115" />
          <Vector3 X="-5389.996" Y="2203.335" Z="19.84518" />
          <Vector3 X="-5394.904" Y="2206.778" Z="20.54587" />
          <Vector3 X="-5398.938" Y="2209.525" Z="19.57593" />
          <Vector3 X="-5414.083" Y="2218.291" Z="12.85286" />
          <Vector3 X="-5419.598" Y="2223.532" Z="12.26315" />
          <Vector3 X="-5419.111" Y="2227.88" Z="11.01524" />
          <Vector3 X="-5415.925" Y="2237.074" Z="7.062354" />
          <Vector3 X="-5412.544" Y="2241.359" Z="5.413155" />
          <Vector3 X="-5409.375" Y="2245.143" Z="5.86739" />
          <Vector3 X="-5404.586" Y="2246.178" Z="6.265595" />
          <Vector3 X="-5387.995" Y="2249.768" Z="5.365585" />
          <Vector3 X="-5382.067" Y="2261.074" Z="2.832179" />
          <Vector3 X="-5378.875" Y="2266.788" Z="1.788647" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTEGoToGrind</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="-4428.379" Y="3289.567" Z="12.66167" />
          <Vector3 X="-4436.467" Y="3284.969" Z="12.22105" />
          <Vector3 X="-4449.102" Y="3272.217" Z="12.52471" />
          <Vector3 X="-4466.338" Y="3257.438" Z="14.26986" />
          <Vector3 X="-4491.387" Y="3236.242" Z="10.85188" />
          <Vector3 X="-4510.905" Y="3206.388" Z="11.40759" />
          <Vector3 X="-4517.524" Y="3173.24" Z="8.784868" />
          <Vector3 X="-4518.485" Y="3164.547" Z="7.035984" />
          <Vector3 X="-4515.513" Y="3141.715" Z="2.696236" />
          <Vector3 X="-4512.19" Y="3106.881" Z="0.1065108" />
          <Vector3 X="-4508.327" Y="3080.364" Z="-1.696289" Type="Swimming" />
          <Vector3 X="-4504.655" Y="3056.323" Z="-1.696289" Type="Swimming" />
          <Vector3 X="-4501.196" Y="3033.683" Z="-1.696289" Type="Swimming" />
          <Vector3 X="-4497.631" Y="3010.342" Z="-1.696289" Type="Swimming" />
          <Vector3 X="-4493.375" Y="2987.143" Z="-1.696289" Type="Swimming" />
          <Vector3 X="-4484.195" Y="2965.409" Z="-1.696289" Type="Swimming" />
          <Vector3 X="-4474.51" Y="2943.875" Z="-1.696289" Type="Swimming" />
          <Vector3 X="-4462.387" Y="2923.737" Z="-1.696289" Type="Swimming" />
          <Vector3 X="-4448.464" Y="2904.671" Z="-1.696289" Type="Swimming" />
          <Vector3 X="-4435.743" Y="2884.781" Z="-1.696289" Type="Swimming" />
          <Vector3 X="-4423.359" Y="2864.679" Z="-1.696289" Type="Swimming" />
          <Vector3 X="-4411.371" Y="2845.219" Z="-1.696289" Type="Swimming" />
          <Vector3 X="-4398.219" Y="2823.87" Z="-1.696289" Type="Swimming" />
          <Vector3 X="-4386.852" Y="2804.866" Z="-1.696289" Type="Swimming" />
          <Vector3 X="-4377.391" Y="2781.674" Z="-1.696289" Type="Swimming" />
          <Vector3 X="-4370.256" Y="2760.709" Z="-1.696289" Type="Swimming" />
          <Vector3 X="-4363.558" Y="2736.551" Z="-1.696289" Type="Swimming" />
          <Vector3 X="-4359.202" Y="2714.066" Z="-1.696289" Type="Swimming" />
          <Vector3 X="-4354.129" Y="2690.296" Z="-1.696289" Type="Swimming" />
          <Vector3 X="-4347.601" Y="2668.343" Z="-1.696289" Type="Swimming" />
          <Vector3 X="-4340.872" Y="2645.712" Z="-1.696289" Type="Swimming" />
          <Vector3 X="-4334.142" Y="2623.08" Z="-1.696289" Type="Swimming" />
          <Vector3 X="-4327.412" Y="2600.448" Z="-1.696289" Type="Swimming" />
          <Vector3 X="-4320.682" Y="2577.816" Z="-1.696289" Type="Swimming" />
          <Vector3 X="-4313.952" Y="2555.185" Z="-1.696289" Type="Swimming" />
          <Vector3 X="-4307.889" Y="2532.371" Z="-1.696289" Type="Swimming" />
          <Vector3 X="-4304.16" Y="2509.074" Z="-1.696289" Type="Swimming" />
          <Vector3 X="-4302.22" Y="2485.543" Z="-1.696289" Type="Swimming" />
          <Vector3 X="-4302.341" Y="2461.955" Z="-1.696289" Type="Swimming" />
          <Vector3 X="-4295.648" Y="2439.366" Z="-1.696289" Type="Swimming" />
          <Vector3 X="-4284.781" Y="2417.673" Z="-1.696289" Type="Swimming" />
          <Vector3 X="-4282.839" Y="2409.01" Z="-1.696289" Type="Swimming" />
          <Vector3 X="-4286.493" Y="2385.98" Z="-1.696289" Type="Swimming" />
          <Vector3 X="-4294.315" Y="2363.739" Z="-1.696289" Type="Swimming" />
          <Vector3 X="-4309.312" Y="2334.364" Z="9.021536" />
          <Vector3 X="-4327.129" Y="2304.275" Z="9.752562" />
          <Vector3 X="-4350.505" Y="2278.287" Z="6.439865" />
          <Vector3 X="-4376.304" Y="2254.641" Z="7.525218" />
          <Vector3 X="-4401.323" Y="2231.813" Z="6.056734" />
          <Vector3 X="-4419.728" Y="2200.875" Z="8.599448" />
          <Vector3 X="-4429.625" Y="2168.528" Z="16.04131" />
          <Vector3 X="-4438.527" Y="2134.688" Z="28.87457" />
          <Vector3 X="-4444.56" Y="2100.216" Z="38.75316" />
          <Vector3 X="-4450.473" Y="2070.292" Z="45.65245" />
          <Vector3 X="-4456.396" Y="2055.021" Z="45.47144" />
          <Vector3 X="-4467.416" Y="2050.172" Z="45.59838" />
          <Vector3 X="-4501.964" Y="2040.053" Z="51.28983" />
          <Vector3 X="-4536.364" Y="2033.603" Z="46.2984" />
          <Vector3 X="-4569.13" Y="2024.953" Z="46.11975" />
          <Vector3 X="-4599.369" Y="2007.423" Z="53.09415" />
          <Vector3 X="-4607.08" Y="2000.576" Z="55.33006" />
          <Vector3 X="-4613.61" Y="1994.586" Z="57.28331" />
          <Vector3 X="-4621.481" Y="1987.637" Z="59.60471" />
          <Vector3 X="-4627.4" Y="1982.979" Z="60.7704" />
          <Vector3 X="-4635.722" Y="1977.109" Z="62.74441" />
          <Vector3 X="-4644.024" Y="1970.682" Z="65.08469" />
          <Vector3 X="-4652.113" Y="1963.504" Z="66.88523" />
          <Vector3 X="-4660.284" Y="1956.938" Z="68.31996" />
          <Vector3 X="-4668.688" Y="1951.206" Z="69.76998" />
          <Vector3 X="-4675.791" Y="1943.083" Z="71.73045" />
          <Vector3 X="-4679.147" Y="1933.524" Z="73.44545" />
          <Vector3 X="-4678.103" Y="1923.274" Z="76.45631" />
          <Vector3 X="-4674.104" Y="1913.233" Z="78.59425" />
          <Vector3 X="-4672.192" Y="1903.243" Z="79.80621" />
          <Vector3 X="-4670.777" Y="1892.839" Z="80.29461" />
          <Vector3 X="-4669.605" Y="1882.405" Z="81.75508" />
          <Vector3 X="-4669.221" Y="1871.922" Z="83.92329" />
          <Vector3 X="-4669.984" Y="1861.46" Z="85.71437" />
          <Vector3 X="-4671.501" Y="1851.07" Z="87.79841" />
          <Vector3 X="-4672.475" Y="1845.913" Z="88.54976" />
          <Vector3 X="-4676.843" Y="1836.424" Z="89.13" />
          <Vector3 X="-4682.16" Y="1827.013" Z="90.28126" />
          <Vector3 X="-4687.17" Y="1818.146" Z="91.61574" />
          <Vector3 X="-4692.335" Y="1809.004" Z="91.60899" />
          <Vector3 X="-4697.5" Y="1799.863" Z="91.52851" />
          <Vector3 X="-4702.665" Y="1790.721" Z="91.60164" />
          <Vector3 X="-4707.825" Y="1781.576" Z="91.79853" />
          <Vector3 X="-4712.447" Y="1772.15" Z="91.99034" />
          <Vector3 X="-4716.946" Y="1762.682" Z="92.4227" />
          <Vector3 X="-4721.409" Y="1752.842" Z="92.87757" />
          <Vector3 X="-4725.132" Y="1743.362" Z="93.08868" />
          <Vector3 X="-4729.204" Y="1733.684" Z="93.32835" />
          <Vector3 X="-4733.58" Y="1723.793" Z="94.05113" />
          <Vector3 X="-4737.94" Y="1714.241" Z="94.24438" />
          <Vector3 X="-4741.335" Y="1704.669" Z="93.73649" />
          <Vector3 X="-4742.619" Y="1694.261" Z="92.52074" />
          <Vector3 X="-4743.169" Y="1683.46" Z="91.61388" />
          <Vector3 X="-4743.708" Y="1673.289" Z="90.5677" />
          <Vector3 X="-4744.456" Y="1662.816" Z="89.17068" />
          <Vector3 X="-4745.224" Y="1652.029" Z="88.50398" />
          <Vector3 X="-4745.862" Y="1641.864" Z="87.22372" />
          <Vector3 X="-4746.52" Y="1631.384" Z="86.24619" />
          <Vector3 X="-4747.218" Y="1620.908" Z="85.41633" />
          <Vector3 X="-4747.956" Y="1610.433" Z="84.42222" />
          <Vector3 X="-4747.904" Y="1599.63" Z="83.74269" />
          <Vector3 X="-4747.344" Y="1589.478" Z="84.02644" />
          <Vector3 X="-4746.766" Y="1578.995" Z="84.44372" />
          <Vector3 X="-4746.171" Y="1568.197" Z="85.19436" />
          <Vector3 X="-4745.99" Y="1558.024" Z="85.96639" />
          <Vector3 X="-4748.826" Y="1547.732" Z="86.93986" />
          <Vector3 X="-4756.07" Y="1540.628" Z="87.43275" />
          <Vector3 X="-4764.072" Y="1533.829" Z="86.97647" />
          <Vector3 X="-4771.886" Y="1526.819" Z="84.1823" />
          <Vector3 X="-4779.156" Y="1519.245" Z="81.6967" />
          <Vector3 X="-4786.114" Y="1511.383" Z="80.09014" />
          <Vector3 X="-4792.944" Y="1503.408" Z="80.21757" />
          <Vector3 X="-4800.138" Y="1495.773" Z="80.09577" />
          <Vector3 X="-4808.508" Y="1489.437" Z="79.16338" />
          <Vector3 X="-4817.044" Y="1483.326" Z="78.2864" />
          <Vector3 X="-4826.155" Y="1478.115" Z="77.42126" />
          <Vector3 X="-4830.896" Y="1475.861" Z="77.68549" />
          <Vector3 X="-4843.849" Y="1472.335" Z="74.8362" />
          <Vector3 X="-4854.322" Y="1471.59" Z="73.95159" />
          <Vector3 X="-4864.808" Y="1471.104" Z="77.22803" />
          <Vector3 X="-4875.156" Y="1472.628" Z="81.98455" />
          <Vector3 X="-4885.16" Y="1475.807" Z="83.85787" />
          <Vector3 X="-4895.451" Y="1477.877" Z="82.561" />
          <Vector3 X="-4905.771" Y="1479.818" Z="79.43706" />
          <Vector3 X="-4916.04" Y="1482.005" Z="80.42646" />
          <Vector3 X="-4926.276" Y="1484.325" Z="82.6604" />
          <Vector3 X="-4931.098" Y="1485.274" Z="82.61387" />
          <Vector3 X="-4929.664" Y="1494.007" Z="82.69331" />
          <Vector3 X="-4927.987" Y="1504.683" Z="82.26871" />
          <Vector3 X="-4927.939" Y="1514.859" Z="83.20827" />
          <Vector3 X="-4928.241" Y="1525.354" Z="85.02622" />
          <Vector3 X="-4928.633" Y="1535.847" Z="84.41235" />
          <Vector3 X="-4928.646" Y="1546.328" Z="82.93285" />
          <Vector3 X="-4925.654" Y="1556.389" Z="79.64906" />
          <Vector3 X="-4923.597" Y="1566.66" Z="74.62988" />
          <Vector3 X="-4924.688" Y="1576.913" Z="69.2165" />
          <Vector3 X="-4933.121" Y="1582.64" Z="66.30503" />
          <Vector3 X="-4942.919" Y="1580.983" Z="63.73942" />
          <Vector3 X="-4950.982" Y="1573.827" Z="61.72453" />
          <Vector3 X="-4956.913" Y="1565.608" Z="62.05175" />
          <Vector3 X="-4959.571" Y="1555.462" Z="62.46429" />
          <Vector3 X="-4962.15" Y="1545.284" Z="62.79463" />
          <Vector3 X="-4965.34" Y="1535.283" Z="62.80186" />
          <Vector3 X="-4970.396" Y="1521.056" Z="62.71132" />
          <Vector3 X="-4975.195" Y="1511.767" Z="59.81168" />
          <Vector3 X="-4982.945" Y="1505.296" Z="56.64297" />
          <Vector3 X="-4993.309" Y="1503.873" Z="56.57555" />
          <Vector3 X="-5003.797" Y="1503.399" Z="55.88923" />
          <Vector3 X="-5014.297" Y="1503.421" Z="52.82166" />
          <Vector3 X="-5024.797" Y="1503.496" Z="50.59302" />
          <Vector3 X="-5035.296" Y="1503.577" Z="49.55839" />
          <Vector3 X="-5046.111" Y="1503.661" Z="50.25342" />
          <Vector3 X="-5056.296" Y="1503.739" Z="50.66858" />
          <Vector3 X="-5066.795" Y="1503.82" Z="50.63222" />
          <Vector3 X="-5077.295" Y="1503.901" Z="50.56361" />
          <Vector3 X="-5087.73" Y="1504.88" Z="51.00964" />
          <Vector3 X="-5098.107" Y="1506.479" Z="50.7466" />
          <Vector3 X="-5104.971" Y="1506.963" Z="50.03896" />
          <Vector3 X="-5113.802" Y="1507.646" Z="48.72112" />
          <Vector3 X="-5124.244" Y="1508.754" Z="47.69956" />
          <Vector3 X="-5134.689" Y="1509.823" Z="46.83836" />
          <Vector3 X="-5145.383" Y="1511.354" Z="46.08044" />
          <Vector3 X="-5154.894" Y="1514.981" Z="48.61577" />
          <Vector3 X="-5164.89" Y="1519.108" Z="52.33041" />
          <Vector3 X="-5174.288" Y="1523.037" Z="52.77066" />
          <Vector3 X="-5184.214" Y="1527.33" Z="52.2631" />
          <Vector3 X="-5193.547" Y="1531.368" Z="53.96395" />
          <Vector3 X="-5203.23" Y="1535.428" Z="53.79147" />
          <Vector3 X="-5213.443" Y="1538.988" Z="52.40351" />
          <Vector3 X="-5223.305" Y="1541.503" Z="53.58894" />
          <Vector3 X="-5233.782" Y="1542.058" Z="51.1899" />
          <Vector3 X="-5244.266" Y="1542.569" Z="50.03563" />
          <Vector3 X="-5254.635" Y="1544.197" Z="50.37226" />
          <Vector3 X="-5264.972" Y="1546.042" Z="51.80798" />
          <Vector3 X="-5275.313" Y="1547.863" Z="53.18539" />
          <Vector3 X="-5281.419" Y="1549.057" Z="53.56192" />
          <Vector3 X="-5287.478" Y="1555.042" Z="54.99608" />
          <Vector3 X="-5296.161" Y="1560.944" Z="53.40296" />
          <Vector3 X="-5304.872" Y="1566.806" Z="51.20425" />
          <Vector3 X="-5313.7" Y="1572.488" Z="49.07553" />
          <Vector3 X="-5322.788" Y="1577.726" Z="46.89027" />
          <Vector3 X="-5327.539" Y="1579.961" Z="45.19434" />
          <Vector3 X="-5336.954" Y="1584.589" Z="45.24147" />
          <Vector3 X="-5345.833" Y="1590.178" Z="46.7812" />
          <Vector3 X="-5355.747" Y="1593.589" Z="45.32747" />
          <Vector3 X="-5365.771" Y="1596.715" Z="44.20333" />
          <Vector3 X="-5375.136" Y="1601.266" Z="46.23468" />
          <Vector3 X="-5382.236" Y="1608.949" Z="49.78934" />
          <Vector3 X="-5388.355" Y="1617.48" Z="50.51613" />
          <Vector3 X="-5393.978" Y="1626.344" Z="48.71322" />
          <Vector3 X="-5399.149" Y="1635.482" Z="47.18384" />
          <Vector3 X="-5404.317" Y="1644.622" Z="48.65488" />
          <Vector3 X="-5410.486" Y="1655.848" Z="50.09032" />
          <Vector3 X="-5417.311" Y="1663.704" Z="53.80568" />
          <Vector3 X="-5426.995" Y="1667.584" Z="57.30913" />
          <Vector3 X="-5437.563" Y="1669.872" Z="58.56104" />
          <Vector3 X="-5447.606" Y="1671.554" Z="59.44059" />
          <Vector3 X="-5458.313" Y="1673.076" Z="60.22615" />
          <Vector3 X="-5468.288" Y="1675.028" Z="59.74775" />
          <Vector3 X="-5473.173" Y="1676.952" Z="58.96165" />
          <Vector3 X="-5479.108" Y="1679.777" Z="57.39564" />
          <Vector3 X="-5488.268" Y="1684.788" Z="53.92536" />
          <Vector3 X="-5496.543" Y="1691.75" Z="56.15559" />
          <Vector3 X="-5504.507" Y="1698.099" Z="60.01192" />
          <Vector3 X="-5514.02" Y="1702.422" Z="62.46249" />
          <Vector3 X="-5524.409" Y="1703.685" Z="64.84973" />
          <Vector3 X="-5534.512" Y="1701.25" Z="69.19211" />
          <Vector3 X="-5543.614" Y="1696.028" Z="70.80322" />
          <Vector3 X="-5552.21" Y="1690.004" Z="70.73158" />
          <Vector3 X="-5561.005" Y="1684.315" Z="72.16044" />
          <Vector3 X="-5570.245" Y="1679.328" Z="73.07298" />
          <Vector3 X="-5579.463" Y="1674.302" Z="74.68903" />
          <Vector3 X="-5588.718" Y="1669.344" Z="76.92744" />
          <Vector3 X="-5598.027" Y="1664.488" Z="78.80742" />
          <Vector3 X="-5607.331" Y="1659.663" Z="79.60232" />
          <Vector3 X="-5617.122" Y="1655.888" Z="79.3916" />
          <Vector3 X="-5627.521" Y="1652.928" Z="79.89412" />
          <Vector3 X="-5637.365" Y="1650.316" Z="82.67587" />
          <Vector3 X="-5647.224" Y="1647.849" Z="82.88062" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>45</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTEGoToRutheranBook</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="8707.55" Y="992.6039" Z="23.50174" />
          <Vector3 X="8710.33" Y="993.1945" Z="23.50174" />
          <Vector3 X="8713.751" Y="993.9325" Z="23.50174" />
          <Vector3 X="8717.072" Y="994.6039" Z="23.29709" />
          <Vector3 X="8720.614" Y="995.3106" Z="23.30927" />
          <Vector3 X="8724.059" Y="995.9323" Z="23.32144" />
          <Vector3 X="8727.396" Y="996.8784" Z="23.50233" />
          <Vector3 X="8728.372" Y="998.0322" Z="23.50233" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>true</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTEGoToSiliths</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="-4960.392" Y="337.4614" Z="22.5274" />
          <Vector3 X="-4954.377" Y="334.8339" Z="20.84392" />
          <Vector3 X="-4944.754" Y="332.7638" Z="22.56478" />
          <Vector3 X="-4928.559" Y="318.3753" Z="26.67478" />
          <Vector3 X="-4932.642" Y="314.0002" Z="26.79608" />
          <Vector3 X="-4940.325" Y="305.0291" Z="32.83948" />
          <Vector3 X="-4949.007" Y="299.1801" Z="36.79028" />
          <Vector3 X="-4955.985" Y="291.3925" Z="38.16146" />
          <Vector3 X="-4961.434" Y="282.7898" Z="39.11355" />
          <Vector3 X="-4965.374" Y="276.0078" Z="39.30277" />
          <Vector3 X="-4965.741" Y="271.7607" Z="39.383" />
          <Vector3 X="-4968.09" Y="261.2151" Z="37.90633" />
          <Vector3 X="-4969.652" Y="254.8303" Z="36.86477" />
          <Vector3 X="-4973.747" Y="271.747" Z="38.42612" />
          <Vector3 X="-4980.318" Y="271.8978" Z="37.29841" />
          <Vector3 X="-4989.549" Y="269.949" Z="35.91558" />
          <Vector3 X="-5049.946" Y="280.8129" Z="32.8321" />
          <Vector3 X="-5059.117" Y="271.4347" Z="34.36748" />
          <Vector3 X="-5069.73" Y="257.5254" Z="38.26573" />
          <Vector3 X="-5082.318" Y="244.6303" Z="38.61197" />
          <Vector3 X="-5094.768" Y="232.3315" Z="47.01783" />
          <Vector3 X="-5098.867" Y="229.604" Z="48.07643" />
          <Vector3 X="-5114.071" Y="220.9988" Z="51.94368" />
          <Vector3 X="-5134.155" Y="215.9661" Z="52.86758" />
          <Vector3 X="-5149.908" Y="209.8463" Z="51.43242" />
          <Vector3 X="-5162.353" Y="199.2046" Z="52.88322" />
          <Vector3 X="-5176.788" Y="204.2633" Z="52.56873" />
          <Vector3 X="-5193.527" Y="206.4923" Z="49.93168" />
          <Vector3 X="-5210.798" Y="208.6614" Z="56.11869" />
          <Vector3 X="-5226.234" Y="218.7862" Z="55.18356" />
          <Vector3 X="-5231.24" Y="224.5278" Z="56.13366" />
          <Vector3 X="-5241.193" Y="238.27" Z="58.43751" />
          <Vector3 X="-5248.725" Y="254.6088" Z="55.83656" />
          <Vector3 X="-5252.747" Y="271.4887" Z="56.30314" />
          <Vector3 X="-5250.191" Y="288.7881" Z="55.72654" />
          <Vector3 X="-5248.065" Y="306.1525" Z="56.63051" />
          <Vector3 X="-5247.12" Y="323.0382" Z="57.75957" />
          <Vector3 X="-5247.886" Y="340.5118" Z="57.65769" />
          <Vector3 X="-5253.722" Y="357.4218" Z="59.49019" />
          <Vector3 X="-5265.249" Y="370.4635" Z="57.75378" />
          <Vector3 X="-5279.478" Y="380.6104" Z="55.55337" />
          <Vector3 X="-5294.15" Y="387.8406" Z="54.97787" />
          <Vector3 X="-5312.392" Y="389.0499" Z="59.94631" />
          <Vector3 X="-5317.853" Y="386.5558" Z="60.30539" />
          <Vector3 X="-5325.878" Y="379.9841" Z="62.42452" />
          <Vector3 X="-5326.57" Y="372.9715" Z="62.29299" />
          <Vector3 X="-5325.746" Y="368.675" Z="60.48259" />
          <Vector3 X="-5321.782" Y="365.7939" Z="61.22713" />
          <Vector3 X="-5316.596" Y="362.6685" Z="60.43762" />
          <Vector3 X="-5311.666" Y="362.4597" Z="62.31723" />
          <Vector3 X="-5300.886" Y="361.6382" Z="62.20829" />
          <Vector3 X="-5292.787" Y="355.8851" Z="60.45192" />
          <Vector3 X="-5290.719" Y="346.2418" Z="56.71" />
          <Vector3 X="-5294.076" Y="339.207" Z="54.22867" />
          <Vector3 X="-5296.517" Y="343.4619" Z="52.35807" />
          <Vector3 X="-5303.906" Y="350.0222" Z="49.11356" />
          <Vector3 X="-5314.225" Y="351.467" Z="45.2664" />
          <Vector3 X="-5321.801" Y="349.3403" Z="42.20919" />
          <Vector3 X="-5326.025" Y="346.2483" Z="39.62513" />
          <Vector3 X="-5330.123" Y="336.7359" Z="34.11296" />
          <Vector3 X="-5329.691" Y="326.6185" Z="30.19093" />
          <Vector3 X="-5324.519" Y="317.6497" Z="26.34885" />
          <Vector3 X="-5316.184" Y="311.0878" Z="22.44919" />
          <Vector3 X="-5307.378" Y="311.4543" Z="20.18617" />
          <Vector3 X="-5295.709" Y="317.9659" Z="19.11522" />
          <Vector3 X="-5292.01" Y="319.2838" Z="18.79989" />
          <Vector3 X="-5293.869" Y="328.2614" Z="17.64964" />
          <Vector3 X="-5330.734" Y="334.3897" Z="33.06054" />
          <Vector3 X="-5328.959" Y="322.7325" Z="29.18777" />
          <Vector3 X="-5327.082" Y="319.0801" Z="27.48194" />
          <Vector3 X="-5324.527" Y="316.7604" Z="26.02847" />
          <Vector3 X="-5318.387" Y="314.5653" Z="23.67152" />
          <Vector3 X="-5314.546" Y="313.2711" Z="22.01792" />
          <Vector3 X="-5309.769" Y="312.1914" Z="20.71649" />
          <Vector3 X="-5309.288" Y="318.9897" Z="18.90815" />
          <Vector3 X="-5312.145" Y="329.0599" Z="15.79061" />
          <Vector3 X="-5316.886" Y="338.4052" Z="16.46955" />
          <Vector3 X="-5322.285" Y="347.7752" Z="18.17468" />
          <Vector3 X="-5327.181" Y="356.7059" Z="19.12527" />
          <Vector3 X="-5332.33" Y="366.2094" Z="17.8012" />
          <Vector3 X="-5339.263" Y="373.4608" Z="17.22844" />
          <Vector3 X="-5342.2" Y="375.5643" Z="17.17711" />
          <Vector3 X="-5349.227" Y="380.9649" Z="17.26683" />
          <Vector3 X="-5356.674" Y="388.284" Z="18.93683" />
          <Vector3 X="-5359.302" Y="398.0362" Z="16.80012" />
          <Vector3 X="-5355.783" Y="407.753" Z="13.22677" />
          <Vector3 X="-5347.971" Y="414.621" Z="10.92831" />
          <Vector3 X="-5342.12" Y="418.2438" Z="11.11353" />
          <Vector3 X="-5331.109" Y="416.6416" Z="9.843302" />
          <Vector3 X="-5331.265" Y="421.1212" Z="9.600587" />
          <Vector3 X="-5330.522" Y="431.8315" Z="9.61213" />
          <Vector3 X="-5328.201" Y="435.8015" Z="10.54289" />
          <Vector3 X="-5321.248" Y="442.1713" Z="10.38381" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTEHighWildernessBackToFeathermoon</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="-4811.468" Y="1553.556" Z="87.26833" />
          <Vector3 X="-4802.514" Y="1555.566" Z="87.95897" />
          <Vector3 X="-4787.519" Y="1559.118" Z="88.00628" />
          <Vector3 X="-4771.557" Y="1567.434" Z="87.71127" />
          <Vector3 X="-4758.705" Y="1578.323" Z="85.90366" />
          <Vector3 X="-4750.864" Y="1593.705" Z="83.89082" />
          <Vector3 X="-4748.292" Y="1611.003" Z="84.51365" />
          <Vector3 X="-4747.255" Y="1629.033" Z="86.08352" />
          <Vector3 X="-4746.161" Y="1645.937" Z="87.93915" />
          <Vector3 X="-4745.02" Y="1663.961" Z="89.25089" />
          <Vector3 X="-4744.364" Y="1680.879" Z="91.37693" />
          <Vector3 X="-4742.657" Y="1698.837" Z="92.98895" />
          <Vector3 X="-4736.694" Y="1714.648" Z="94.2648" />
          <Vector3 X="-4730.222" Y="1731.508" Z="93.4738" />
          <Vector3 X="-4724.118" Y="1747.31" Z="93.07845" />
          <Vector3 X="-4717.223" Y="1764.002" Z="92.41144" />
          <Vector3 X="-4710.296" Y="1779.46" Z="91.90322" />
          <Vector3 X="-4702.315" Y="1795.66" Z="91.63837" />
          <Vector3 X="-4694.243" Y="1810.553" Z="91.49997" />
          <Vector3 X="-4685.174" Y="1826.167" Z="90.51463" />
          <Vector3 X="-4677.374" Y="1841.162" Z="89.13103" />
          <Vector3 X="-4672.774" Y="1857.994" Z="86.78936" />
          <Vector3 X="-4672.067" Y="1875.465" Z="83.2165" />
          <Vector3 X="-4672.979" Y="1893.498" Z="80.04042" />
          <Vector3 X="-4675.386" Y="1910.266" Z="78.88718" />
          <Vector3 X="-4678.123" Y="1927.549" Z="75.07845" />
          <Vector3 X="-4673.447" Y="1944.207" Z="71.33353" />
          <Vector3 X="-4660.875" Y="1956.131" Z="68.43425" />
          <Vector3 X="-4646.862" Y="1966.612" Z="65.77959" />
          <Vector3 X="-4632.86" Y="1978.019" Z="62.14968" />
          <Vector3 X="-4619.729" Y="1988.721" Z="59.21933" />
          <Vector3 X="-4606.536" Y="2000.207" Z="55.32381" />
          <Vector3 X="-4593.188" Y="2011.506" Z="51.57245" />
          <Vector3 X="-4578.287" Y="2020.635" Z="47.98046" />
          <Vector3 X="-4561.655" Y="2026.028" Z="45.41999" />
          <Vector3 X="-4544.158" Y="2030.488" Z="45.27721" />
          <Vector3 X="-4530.926" Y="2033.972" Z="48.58076" />
          <Vector3 X="-4524.098" Y="2035.934" Z="49.90898" />
          <Vector3 X="-4506.74" Y="2040.92" Z="51.55865" />
          <Vector3 X="-4490.354" Y="2045.213" Z="49.48519" />
          <Vector3 X="-4473.5" Y="2051.499" Z="45.69841" />
          <Vector3 X="-4459.408" Y="2060.857" Z="46.26688" />
          <Vector3 X="-4450.347" Y="2076.061" Z="45.17129" />
          <Vector3 X="-4447.335" Y="2092.721" Z="40.48558" />
          <Vector3 X="-4443.379" Y="2110.333" Z="36.39133" />
          <Vector3 X="-4439.411" Y="2126.799" Z="31.20608" />
          <Vector3 X="-4434.444" Y="2144.155" Z="24.96978" />
          <Vector3 X="-4429.635" Y="2161.561" Z="18.18543" />
          <Vector3 X="-4425.201" Y="2178.49" Z="12.94357" />
          <Vector3 X="-4420.034" Y="2195.754" Z="9.308062" />
          <Vector3 X="-4412.856" Y="2211.104" Z="7.57169" />
          <Vector3 X="-4403.539" Y="2226.533" Z="6.426902" />
          <Vector3 X="-4394.357" Y="2240.81" Z="6.216785" />
          <Vector3 X="-4384.995" Y="2256.192" Z="6.541201" />
          <Vector3 X="-4377.793" Y="2272.076" Z="6.975072" />
          <Vector3 X="-4371.502" Y="2288.403" Z="6.893842" />
          <Vector3 X="-4366.07" Y="2304.474" Z="6.750192" />
          <Vector3 X="-4365.96" Y="2322.424" Z="2.702935" />
          <Vector3 X="-4367.896" Y="2339.288" Z="1.744767" />
          <Vector3 X="-4369.961" Y="2357.194" Z="-0.07803586" />
          <Vector3 X="-4372.588" Y="2378.345" Z="-1.575495" Type="Swimming" />
          <Vector3 X="-4375.661" Y="2401.755" Z="-1.575495" Type="Swimming" />
          <Vector3 X="-4378.641" Y="2424.463" Z="-1.575495" Type="Swimming" />
          <Vector3 X="-4381.714" Y="2447.874" Z="-1.575495" Type="Swimming" />
          <Vector3 X="-4384.787" Y="2471.284" Z="-1.575495" Type="Swimming" />
          <Vector3 X="-4387.952" Y="2495.396" Z="-1.575495" Type="Swimming" />
          <Vector3 X="-4391.025" Y="2518.807" Z="-1.575495" Type="Swimming" />
          <Vector3 X="-4394.098" Y="2542.217" Z="-1.575495" Type="Swimming" />
          <Vector3 X="-4397.171" Y="2565.627" Z="-1.575495" Type="Swimming" />
          <Vector3 X="-4400.244" Y="2589.038" Z="-1.575495" Type="Swimming" />
          <Vector3 X="-4400.92" Y="2594.188" Z="-1.575495" Type="Swimming" />
          <Vector3 X="-4402.745" Y="2608.094" Z="-1.575495" Type="Swimming" />
          <Vector3 X="-4402.409" Y="2619.892" Z="-1.575495" Type="Swimming" />
          <Vector3 X="-4399.916" Y="2644.081" Z="-1.575495" Type="Swimming" />
          <Vector3 X="-4397.168" Y="2667.531" Z="-1.575495" Type="Swimming" />
          <Vector3 X="-4394.415" Y="2690.981" Z="-1.575495" Type="Swimming" />
          <Vector3 X="-4391.788" Y="2714.446" Z="-1.575495" Type="Swimming" />
          <Vector3 X="-4389.308" Y="2737.927" Z="-1.575495" Type="Swimming" />
          <Vector3 X="-4386.905" Y="2760.703" Z="-1.575495" Type="Swimming" />
          <Vector3 X="-4384.354" Y="2784.888" Z="-1.575495" Type="Swimming" />
          <Vector3 X="-4381.877" Y="2808.369" Z="-1.575495" Type="Swimming" />
          <Vector3 X="-4379.869" Y="2831.885" Z="-1.575495" Type="Swimming" />
          <Vector3 X="-4379.972" Y="2855.493" Z="-1.575495" Type="Swimming" />
          <Vector3 X="-4380.533" Y="2878.389" Z="-1.575495" Type="Swimming" />
          <Vector3 X="-4381.128" Y="2902.701" Z="-1.575495" Type="Swimming" />
          <Vector3 X="-4381.706" Y="2926.305" Z="-1.575495" Type="Swimming" />
          <Vector3 X="-4382.267" Y="2949.201" Z="-1.575495" Type="Swimming" />
          <Vector3 X="-4382.862" Y="2973.513" Z="-1.575495" Type="Swimming" />
          <Vector3 X="-4383.44" Y="2997.117" Z="-1.575495" Type="Swimming" />
          <Vector3 X="-4384.001" Y="3020.013" Z="-1.575495" Type="Swimming" />
          <Vector3 X="-4386.132" Y="3043.497" Z="-1.575495" Type="Swimming" />
          <Vector3 X="-4393.246" Y="3066.694" Z="-1.575495" Type="Swimming" />
          <Vector3 X="-4403.105" Y="3088.147" Z="-1.575495" Type="Swimming" />
          <Vector3 X="-4409.754" Y="3102.33" Z="0.2877791" />
          <Vector3 X="-4414.339" Y="3112.151" Z="1.602995" />
          <Vector3 X="-4421.509" Y="3128.112" Z="4.511998" />
          <Vector3 X="-4427.162" Y="3145.217" Z="6.742407" />
          <Vector3 X="-4431.945" Y="3162.035" Z="9.724113" />
          <Vector3 X="-4433.197" Y="3168.494" Z="11.39135" />
          <Vector3 X="-4435.199" Y="3187.532" Z="14.46321" />
          <Vector3 X="-4436.736" Y="3198.335" Z="14.16192" />
          <Vector3 X="-4439.625" Y="3215.595" Z="12.53269" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTELordSBackToFeathermoon</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="-5615.858" Y="3519.504" Z="5.435951" />
          <Vector3 X="-5611.157" Y="3525.412" Z="5.710478" />
          <Vector3 X="-5605.167" Y="3534.036" Z="2.283911" />
          <Vector3 X="-5599.113" Y="3542.615" Z="-0.3555897" />
          <Vector3 X="-5593.271" Y="3551.335" Z="-2.429393" />
          <Vector3 X="-5588.085" Y="3560.076" Z="-4.456476" />
          <Vector3 X="-5581.465" Y="3568.635" Z="-7.210363" />
          <Vector3 X="-5573.615" Y="3575.047" Z="-9.304254" />
          <Vector3 X="-5564.286" Y="3580.556" Z="-10.44344" />
          <Vector3 X="-5555.167" Y="3585.761" Z="-11.83487" />
          <Vector3 X="-5545.656" Y="3591.156" Z="-13.27633" />
          <Vector3 X="-5530.435" Y="3599.791" Z="-12.70615" />
          <Vector3 X="-5515.165" Y="3608.34" Z="-6.836085" />
          <Vector3 X="-5500.769" Y="3618.272" Z="-1.10704" />
          <Vector3 X="-5491.929" Y="3624.682" Z="1.420329" />
          <Vector3 X="-5486.615" Y="3631.633" Z="2.256963" />
          <Vector3 X="-5473.636" Y="3643.94" Z="-1.207762" />
          <Vector3 X="-5456.632" Y="3647.455" Z="-2.899242" />
          <Vector3 X="-5440.286" Y="3653.134" Z="-2.192945" />
          <Vector3 X="-5429.167" Y="3665.837" Z="0.8414829" />
          <Vector3 X="-5413.709" Y="3674.605" Z="6.818651" />
          <Vector3 X="-5396.963" Y="3675.95" Z="8.393585" />
          <Vector3 X="-5379.214" Y="3672.625" Z="8.536032" />
          <Vector3 X="-5362.643" Y="3669.126" Z="8.053981" />
          <Vector3 X="-5344.238" Y="3670.907" Z="7.327211" />
          <Vector3 X="-5327.161" Y="3674.731" Z="6.785895" />
          <Vector3 X="-5309.943" Y="3677.825" Z="7.053421" />
          <Vector3 X="-5293.119" Y="3679.927" Z="8.068931" />
          <Vector3 X="-5275.18" Y="3681.67" Z="5.682805" />
          <Vector3 X="-5257.847" Y="3679.646" Z="-1.07808" />
          <Vector3 X="-5246.187" Y="3675.633" Z="-1.463303" Type="Swimming" />
          <Vector3 X="-5235.004" Y="3671.861" Z="-1.434752" Type="Swimming" />
          <Vector3 X="-5223.742" Y="3668.32" Z="-1.434756" Type="Swimming" />
          <Vector3 X="-5212.48" Y="3664.778" Z="-1.434756" Type="Swimming" />
          <Vector3 X="-5201.219" Y="3661.236" Z="-1.434756" Type="Swimming" />
          <Vector3 X="-5189.957" Y="3657.694" Z="-1.434756" Type="Swimming" />
          <Vector3 X="-5178.695" Y="3654.153" Z="-1.434756" Type="Swimming" />
          <Vector3 X="-5167.771" Y="3650.717" Z="-1.434756" Type="Swimming" />
          <Vector3 X="-5156.157" Y="3651.033" Z="-1.434756" Type="Swimming" />
          <Vector3 X="-5146.021" Y="3656.362" Z="-1.434756" Type="Swimming" />
          <Vector3 X="-5135.262" Y="3662.027" Z="-1.434756" Type="Swimming" />
          <Vector3 X="-5124.815" Y="3667.527" Z="-1.434756" Type="Swimming" />
          <Vector3 X="-5114.325" Y="3672.94" Z="-1.434756" Type="Swimming" />
          <Vector3 X="-5103.814" Y="3678.316" Z="-1.434756" Type="Swimming" />
          <Vector3 X="-5093.619" Y="3683.531" Z="-1.434756" Type="Swimming" />
          <Vector3 X="-5083.109" Y="3688.908" Z="-1.434756" Type="Swimming" />
          <Vector3 X="-5072.284" Y="3694.446" Z="-1.434756" Type="Swimming" />
          <Vector3 X="-5062.089" Y="3699.661" Z="-1.434756" Type="Swimming" />
          <Vector3 X="-5051.263" Y="3705.198" Z="-1.434756" Type="Swimming" />
          <Vector3 X="-5041.068" Y="3710.414" Z="-1.434756" Type="Swimming" />
          <Vector3 X="-5028.981" Y="3716.599" Z="-0.8047156" />
          <Vector3 X="-5012.418" Y="3723.538" Z="0.0475289" />
          <Vector3 X="-4995.633" Y="3728.487" Z="0.3901516" />
          <Vector3 X="-4978.847" Y="3733.436" Z="1.716916" />
          <Vector3 X="-4962.501" Y="3738.002" Z="2.291179" />
          <Vector3 X="-4944.883" Y="3741.809" Z="2.906765" />
          <Vector3 X="-4928.289" Y="3745.382" Z="6.449074" />
          <Vector3 X="-4910.667" Y="3749.177" Z="1.903746" />
          <Vector3 X="-4893.56" Y="3752.86" Z="1.208653" />
          <Vector3 X="-4876.256" Y="3754.771" Z="2.108148" />
          <Vector3 X="-4859.643" Y="3751.348" Z="2.506157" />
          <Vector3 X="-4842.719" Y="3746.907" Z="2.644691" />
          <Vector3 X="-4825.437" Y="3741.788" Z="1.67781" />
          <Vector3 X="-4808.394" Y="3743.737" Z="1.472258" />
          <Vector3 X="-4791.487" Y="3748.141" Z="0.5649592" />
          <Vector3 X="-4774.117" Y="3750.212" Z="1.035485" />
          <Vector3 X="-4756.629" Y="3750.613" Z="4.123847" />
          <Vector3 X="-4739.703" Y="3749.478" Z="5.60003" />
          <Vector3 X="-4721.786" Y="3747.503" Z="4.952886" />
          <Vector3 X="-4704.423" Y="3745.321" Z="2.364334" />
          <Vector3 X="-4687.2" Y="3742.288" Z="3.49649" />
          <Vector3 X="-4670.359" Y="3737.537" Z="3.310625" />
          <Vector3 X="-4653.862" Y="3731.702" Z="2.898815" />
          <Vector3 X="-4637.538" Y="3725.397" Z="2.522871" />
          <Vector3 X="-4621.377" Y="3718.683" Z="1.664169" />
          <Vector3 X="-4605.235" Y="3711.924" Z="2.782182" />
          <Vector3 X="-4589.226" Y="3704.872" Z="5.213911" />
          <Vector3 X="-4574.292" Y="3695.766" Z="10.15277" />
          <Vector3 X="-4559.905" Y="3685.813" Z="10.99846" />
          <Vector3 X="-4546.508" Y="3675.387" Z="11.46274" />
          <Vector3 X="-4533.707" Y="3663.475" Z="10.0708" />
          <Vector3 X="-4520.589" Y="3651.119" Z="8.59147" />
          <Vector3 X="-4507.108" Y="3639.97" Z="8.000793" />
          <Vector3 X="-4492.923" Y="3630.648" Z="10.87228" />
          <Vector3 X="-4478.272" Y="3621.08" Z="11.79619" />
          <Vector3 X="-4463.434" Y="3610.847" Z="13.46735" />
          <Vector3 X="-4449.209" Y="3600.654" Z="15.46676" />
          <Vector3 X="-4435.199" Y="3590.182" Z="14.75625" />
          <Vector3 X="-4423.546" Y="3577.227" Z="13.43413" />
          <Vector3 X="-4416.804" Y="3561.7" Z="14.75722" />
          <Vector3 X="-4413.716" Y="3544.529" Z="12.81007" />
          <Vector3 X="-4414.107" Y="3527.601" Z="14.35838" />
          <Vector3 X="-4417.352" Y="3509.89" Z="14.50968" />
          <Vector3 X="-4420.51" Y="3492.7" Z="14.72285" />
          <Vector3 X="-4421.295" Y="3475.218" Z="13.24529" />
          <Vector3 X="-4421.567" Y="3457.721" Z="14.07607" />
          <Vector3 X="-4423.049" Y="3440.302" Z="21.52201" />
          <Vector3 X="-4426.192" Y="3423.086" Z="20.1443" />
          <Vector3 X="-4429.241" Y="3406.387" Z="21.90276" />
          <Vector3 X="-4432.244" Y="3388.618" Z="21.54858" />
          <Vector3 X="-4432.981" Y="3371.144" Z="19.91309" />
          <Vector3 X="-4432.847" Y="3353.644" Z="16.90612" />
          <Vector3 X="-4432.708" Y="3336.145" Z="14.8343" />
          <Vector3 X="-4432.585" Y="3318.645" Z="13.57631" />
          <Vector3 X="-4435.917" Y="3305.21" Z="13.77107" />
          <Vector3 X="-4441.635" Y="3296.447" Z="12.75345" />
          <Vector3 X="-4445.295" Y="3294.324" Z="12.20775" />
          <Vector3 X="-4448.756" Y="3295.359" Z="12.1137" />
          <Vector3 X="-4454.536" Y="3297.631" Z="13.53066" />
          <Vector3 X="-4460.864" Y="3302.316" Z="14.32213" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTEMissingCourierToOgres</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="-5379.243" Y="2271.519" Z="0.8695444" />
          <Vector3 X="-5380.44" Y="2263.948" Z="2.287704" />
          <Vector3 X="-5382.341" Y="2246.032" Z="6.524194" />
          <Vector3 X="-5380.594" Y="2228.64" Z="10.36931" />
          <Vector3 X="-5380.752" Y="2211.148" Z="12.06621" />
          <Vector3 X="-5380.042" Y="2202.441" Z="15.42729" />
          <Vector3 X="-5371.858" Y="2194.446" Z="15.10923" />
          <Vector3 X="-5364.219" Y="2191.494" Z="14.73766" />
          <Vector3 X="-5355.642" Y="2187.885" Z="16.09277" />
          <Vector3 X="-5340.41" Y="2180.553" Z="18.10577" />
          <Vector3 X="-5330.909" Y="2178.228" Z="14.39359" />
          <Vector3 X="-5316.156" Y="2174.797" Z="12.80018" />
          <Vector3 X="-5302.188" Y="2163.661" Z="15.32835" />
          <Vector3 X="-5286.53" Y="2157.196" Z="15.31006" />
          <Vector3 X="-5269.626" Y="2150.857" Z="15.22339" />
          <Vector3 X="-5254.244" Y="2143.763" Z="19.44854" />
          <Vector3 X="-5237.459" Y="2137.109" Z="17.0501" />
          <Vector3 X="-5220.509" Y="2133.648" Z="19.67393" />
          <Vector3 X="-5203.015" Y="2133.604" Z="16.77527" />
          <Vector3 X="-5185.571" Y="2132.217" Z="19.85214" />
          <Vector3 X="-5168.14" Y="2130.668" Z="19.6044" />
          <Vector3 X="-5151.367" Y="2128.367" Z="20.1561" />
          <Vector3 X="-5133.785" Y="2124.244" Z="21.7588" />
          <Vector3 X="-5117.346" Y="2120.158" Z="23.84336" />
          <Vector3 X="-5099.578" Y="2118.1" Z="23.52884" />
          <Vector3 X="-5092.787" Y="2123.929" Z="22.19561" />
          <Vector3 X="-5082.334" Y="2122.234" Z="21.03107" />
          <Vector3 X="-5065.88" Y="2116.354" Z="22.39366" />
          <Vector3 X="-5056.676" Y="2115.29" Z="24.7037" />
          <Vector3 X="-5039.978" Y="2112.694" Z="28.54692" />
          <Vector3 X="-5032.828" Y="2109.935" Z="31.81207" />
          <Vector3 X="-5015.893" Y="2110.169" Z="27.64326" />
          <Vector3 X="-4997.843" Y="2110.763" Z="23.42289" />
          <Vector3 X="-4981.089" Y="2109.493" Z="20.45003" />
          <Vector3 X="-4963.464" Y="2105.577" Z="20.74938" />
          <Vector3 X="-4946.814" Y="2106.718" Z="18.39585" />
          <Vector3 X="-4930.98" Y="2115.395" Z="14.6156" />
          <Vector3 X="-4914.294" Y="2119.754" Z="15.93963" />
          <Vector3 X="-4900.908" Y="2114.467" Z="20.82863" />
          <Vector3 X="-4889.79" Y="2109.916" Z="19.68446" />
          <Vector3 X="-4886.754" Y="2108.648" Z="18.4314" />
          <Vector3 X="-4877.314" Y="2104.299" Z="15.71514" />
          <Vector3 X="-4869.509" Y="2098.319" Z="12.25501" />
          <Vector3 X="-4862.907" Y="2092.585" Z="12.71409" />
          <Vector3 X="-4861.327" Y="2087.948" Z="14.28338" />
          <Vector3 X="-4862.345" Y="2080.391" Z="14.68709" />
          <Vector3 X="-4859.564" Y="2077.019" Z="14.26659" />
          <Vector3 X="-4844.354" Y="2068.399" Z="4.929483" />
          <Vector3 X="-4826.882" Y="2064.076" Z="-0.8325909" />
          <Vector3 X="-4807.327" Y="2058.369" Z="-1.220776" />
          <Vector3 X="-4792.064" Y="2048.915" Z="0.5951822" />
          <Vector3 X="-4777.539" Y="2039.235" Z="2.717624" />
          <Vector3 X="-4761.369" Y="2034.256" Z="5.00606" />
          <Vector3 X="-4744.037" Y="2031.897" Z="4.899263" />
          <Vector3 X="-4726.246" Y="2034.474" Z="8.099648" />
          <Vector3 X="-4709.295" Y="2038.735" Z="10.01164" />
          <Vector3 X="-4693.195" Y="2044.115" Z="10.45501" />
          <Vector3 X="-4676.16" Y="2049.992" Z="9.601272" />
          <Vector3 X="-4659.963" Y="2055.072" Z="6.873453" />
          <Vector3 X="-4643.124" Y="2059.822" Z="7.966154" />
          <Vector3 X="-4626.157" Y="2064.108" Z="7.028181" />
          <Vector3 X="-4608.587" Y="2068.133" Z="6.346771" />
          <Vector3 X="-4592.111" Y="2072.217" Z="5.767264" />
          <Vector3 X="-4575.68" Y="2078.053" Z="4.263677" />
          <Vector3 X="-4560.466" Y="2087.664" Z="-0.3000059" />
          <Vector3 X="-4543.337" Y="2100.755" Z="-1.517928" Type="Swimming" />
          <Vector3 X="-4528.053" Y="2112.384" Z="2.433106" />
          <Vector3 X="-4514.151" Y="2123.014" Z="4.320509" />
          <Vector3 X="-4500.25" Y="2133.642" Z="4.926064" />
          <Vector3 X="-4486.349" Y="2144.271" Z="7.094841" />
          <Vector3 X="-4471.966" Y="2155.098" Z="8.442158" />
          <Vector3 X="-4457.197" Y="2164.471" Z="10.11657" />
          <Vector3 X="-4440.516" Y="2167.478" Z="14.91791" />
          <Vector3 X="-4434.458" Y="2161.295" Z="18.46439" />
          <Vector3 X="-4432.957" Y="2144.807" Z="24.6023" />
          <Vector3 X="-4437.497" Y="2127.365" Z="30.98961" />
          <Vector3 X="-4440.876" Y="2110.199" Z="36.52624" />
          <Vector3 X="-4443.212" Y="2093.386" Z="40.46531" />
          <Vector3 X="-4447.051" Y="2076.353" Z="45.22185" />
          <Vector3 X="-4453.882" Y="2060.276" Z="45.61454" />
          <Vector3 X="-4467.878" Y="2049.678" Z="45.58286" />
          <Vector3 X="-4484.203" Y="2045.088" Z="48.57209" />
          <Vector3 X="-4503.034" Y="2040.49" Z="51.38767" />
          <Vector3 X="-4528.133" Y="2036.225" Z="49.26812" />
          <Vector3 X="-4553.709" Y="2030.386" Z="45.25426" />
          <Vector3 X="-4577.408" Y="2019.216" Z="48.12736" />
          <Vector3 X="-4599.414" Y="2003.557" Z="53.89049" />
          <Vector3 X="-4618.898" Y="1987.169" Z="59.39311" />
          <Vector3 X="-4640.141" Y="1971.753" Z="64.38348" />
          <Vector3 X="-4656.842" Y="1958.132" Z="67.96022" />
          <Vector3 X="-4670.734" Y="1947.494" Z="70.54783" />
          <Vector3 X="-4679.906" Y="1933.764" Z="73.54033" />
          <Vector3 X="-4675.578" Y="1915.696" Z="78.42341" />
          <Vector3 X="-4673.08" Y="1898.378" Z="79.92245" />
          <Vector3 X="-4671.197" Y="1881.003" Z="82.09766" />
          <Vector3 X="-4672.378" Y="1863.587" Z="85.40425" />
          <Vector3 X="-4677.356" Y="1846.298" Z="88.78806" />
          <Vector3 X="-4684.025" Y="1830.718" Z="89.89703" />
          <Vector3 X="-4691.729" Y="1815.006" Z="91.46873" />
          <Vector3 X="-4699.746" Y="1798.891" Z="91.47114" />
          <Vector3 X="-4706.523" Y="1783.332" Z="91.79735" />
          <Vector3 X="-4713.244" Y="1767.194" Z="92.29086" />
          <Vector3 X="-4720.303" Y="1750.663" Z="93.02649" />
          <Vector3 X="-4727.099" Y="1735.124" Z="93.3615" />
          <Vector3 X="-4734.747" Y="1718.802" Z="94.23611" />
          <Vector3 X="-4739.318" Y="1708.852" Z="94.14948" />
          <Vector3 X="-4740.504" Y="1701.315" Z="93.27814" />
          <Vector3 X="-4741.109" Y="1689.305" Z="92.10011" />
          <Vector3 X="-4741.775" Y="1672.343" Z="90.48024" />
          <Vector3 X="-4742.466" Y="1664.148" Z="89.36904" />
          <Vector3 X="-4743.908" Y="1646.711" Z="88.05737" />
          <Vector3 X="-4744.716" Y="1629.229" Z="86.02589" />
          <Vector3 X="-4745.297" Y="1616.678" Z="85.0661" />
          <Vector3 X="-4745.475" Y="1612.832" Z="84.62025" />
          <Vector3 X="-4746.367" Y="1594.829" Z="83.77403" />
          <Vector3 X="-4747.112" Y="1582.812" Z="84.35152" />
          <Vector3 X="-4750.784" Y="1568.653" Z="86.00787" />
          <Vector3 X="-4756.042" Y="1559.694" Z="87.73724" />
          <Vector3 X="-4764.468" Y="1555.828" Z="88.56714" />
          <Vector3 X="-4777.511" Y="1554.391" Z="87.98703" />
          <Vector3 X="-4794.99" Y="1553.573" Z="86.80495" />
          <Vector3 X="-4813.003" Y="1552.919" Z="87.01538" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTESilithsToMonkeysAndBears</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="-5330.696" Y="426.1036" Z="9.632739" />
          <Vector3 X="-5338.54" Y="420.1787" Z="10.97824" />
          <Vector3 X="-5351.308" Y="408.3939" Z="12.42092" />
          <Vector3 X="-5358.384" Y="396.8288" Z="17.00781" />
          <Vector3 X="-5359.775" Y="392.1325" Z="18.77141" />
          <Vector3 X="-5359.425" Y="385.5695" Z="18.9539" />
          <Vector3 X="-5352.383" Y="380.2982" Z="17.57485" />
          <Vector3 X="-5343.164" Y="378.4198" Z="16.88408" />
          <Vector3 X="-5336.238" Y="370.5269" Z="17.42342" />
          <Vector3 X="-5330.265" Y="361.9394" Z="18.42204" />
          <Vector3 X="-5325.792" Y="352.4411" Z="19.017" />
          <Vector3 X="-5321.459" Y="342.8769" Z="17.90124" />
          <Vector3 X="-5317.121" Y="333.3155" Z="15.62944" />
          <Vector3 X="-5311.905" Y="324.2144" Z="16.39992" />
          <Vector3 X="-5308.368" Y="314.6729" Z="20.16653" />
          <Vector3 X="-5317.489" Y="311.8558" Z="22.89683" />
          <Vector3 X="-5326.854" Y="316.0715" Z="26.64917" />
          <Vector3 X="-5330.216" Y="325.7719" Z="30.17874" />
          <Vector3 X="-5329.979" Y="336.2506" Z="33.89343" />
          <Vector3 X="-5327.172" Y="346.268" Z="39.63511" />
          <Vector3 X="-5318.257" Y="351.1638" Z="43.70614" />
          <Vector3 X="-5307.935" Y="351.9294" Z="47.54744" />
          <Vector3 X="-5299.557" Y="346.0441" Z="51.22983" />
          <Vector3 X="-5293.081" Y="337.7827" Z="54.77102" />
          <Vector3 X="-5288.148" Y="328.5901" Z="57.71468" />
          <Vector3 X="-5283.991" Y="319.1563" Z="60.26575" />
          <Vector3 X="-5275.498" Y="313.1357" Z="61.13318" />
          <Vector3 X="-5265.091" Y="312.7719" Z="61.84998" />
          <Vector3 X="-5257.214" Y="319.3553" Z="59.09277" />
          <Vector3 X="-5253.52" Y="329.5956" Z="58.49993" />
          <Vector3 X="-5247.938" Y="346.1698" Z="57.87209" />
          <Vector3 X="-5241.152" Y="362.2962" Z="59.31911" />
          <Vector3 X="-5233.558" Y="378.05" Z="60.44492" />
          <Vector3 X="-5226.145" Y="393.9007" Z="58.59547" />
          <Vector3 X="-5219.818" Y="410.2101" Z="57.27995" />
          <Vector3 X="-5222.872" Y="415.1623" Z="54.70532" />
          <Vector3 X="-5237.769" Y="424.1777" Z="50.57408" />
          <Vector3 X="-5251.721" Y="434.7406" Z="44.60098" />
          <Vector3 X="-5245.415" Y="447.055" Z="44.34469" />
          <Vector3 X="-5232.255" Y="458.502" Z="47.3368" />
          <Vector3 X="-5217.335" Y="467.574" Z="42.50609" />
          <Vector3 X="-5200.566" Y="472.1143" Z="41.41843" />
          <Vector3 X="-5183.648" Y="467.9513" Z="35.70347" />
          <Vector3 X="-5167.393" Y="461.4885" Z="32.9467" />
          <Vector3 X="-5151.502" Y="454.1639" Z="30.50552" />
          <Vector3 X="-5134.854" Y="449.1304" Z="26.11329" />
          <Vector3 X="-5117.46" Y="451.0102" Z="17.64426" />
          <Vector3 X="-5099.995" Y="451.6845" Z="14.55245" />
          <Vector3 X="-5082.6" Y="450.0726" Z="14.72363" />
          <Vector3 X="-5066.066" Y="451.0493" Z="15.83103" />
          <Vector3 X="-5057.507" Y="466.2683" Z="15.5864" />
          <Vector3 X="-5045.684" Y="478.6773" Z="11.49915" />
          <Vector3 X="-5032.207" Y="489.5649" Z="14.88244" />
          <Vector3 X="-5021.313" Y="503.26" Z="14.2602" />
          <Vector3 X="-5011.372" Y="517.6616" Z="13.26818" />
          <Vector3 X="-5001.75" Y="531.6035" Z="19.29313" />
          <Vector3 X="-4997.731" Y="542.3572" Z="21.70003" />
          <Vector3 X="-4989.688" Y="557.7483" Z="18.51675" />
          <Vector3 X="-4977.595" Y="570.1036" Z="17.50742" />
          <Vector3 X="-4960.374" Y="572.641" Z="16.62442" />
          <Vector3 X="-4943.562" Y="577.4788" Z="13.60457" />
          <Vector3 X="-4926.355" Y="579.8694" Z="16.49459" />
          <Vector3 X="-4908.922" Y="578.8668" Z="14.85402" />
          <Vector3 X="-4892.794" Y="583.5374" Z="14.94611" />
          <Vector3 X="-4878.021" Y="592.9034" Z="18.39275" />
          <Vector3 X="-4863.641" Y="602.8669" Z="24.43815" />
          <Vector3 X="-4848.081" Y="610.8683" Z="25.93578" />
          <Vector3 X="-4831.806" Y="617.1909" Z="27.99984" />
          <Vector3 X="-4814.86" Y="621.5226" Z="32.19838" />
          <Vector3 X="-4797.466" Y="623.4441" Z="37.87749" />
          <Vector3 X="-4780.043" Y="624.5804" Z="41.74517" />
          <Vector3 X="-4760.364" Y="625.152" Z="43.91315" />
          <Vector3 X="-4734.149" Y="626.4736" Z="45.15873" />
          <Vector3 X="-4707.947" Y="628.0591" Z="45.44572" />
          <Vector3 X="-4682.01" Y="631.8328" Z="51.96638" />
          <Vector3 X="-4667.6" Y="637.1022" Z="55.91646" />
          <Vector3 X="-4672.052" Y="663.5093" Z="62.14949" />
          <Vector3 X="-4679.23" Y="688.6971" Z="68.3056" />
          <Vector3 X="-4682.062" Y="714.7274" Z="74.5721" />
          <Vector3 X="-4676.198" Y="740.0925" Z="80.17278" />
          <Vector3 X="-4664.805" Y="763.7193" Z="84.02187" />
          <Vector3 X="-4657.003" Y="788.5696" Z="83.35416" />
          <Vector3 X="-4653.001" Y="814.5021" Z="82.44462" />
          <Vector3 X="-4647.125" Y="840.086" Z="82.33925" />
          <Vector3 X="-4644.379" Y="866.0665" Z="85.5723" />
          <Vector3 X="-4650.22" Y="874.7495" Z="87.04418" />
          <Vector3 X="-4660.164" Y="885.6694" Z="86.83278" />
          <Vector3 X="-4675.798" Y="906.7482" Z="87.51595" />
          <Vector3 X="-4691.696" Y="927.6251" Z="95.39533" />
          <Vector3 X="-4691.262" Y="937.5927" Z="97.91385" />
          <Vector3 X="-4688.248" Y="955.9733" Z="98.69938" />
          <Vector3 X="-4698.732" Y="976.3718" Z="100.8647" />
          <Vector3 X="-4711.356" Y="999.3416" Z="105.361" />
          <Vector3 X="-4716.007" Y="1006.082" Z="107.3142" />
          <Vector3 X="-4728.601" Y="1009.734" Z="109.1143" />
          <Vector3 X="-4749.562" Y="1016.911" Z="113.1491" />
          <Vector3 X="-4774.292" Y="1025.71" Z="113.9734" />
          <Vector3 X="-4798.675" Y="1035.429" Z="105.8601" />
          <Vector3 X="-4822.684" Y="1046.038" Z="101.842" />
          <Vector3 X="-4845.391" Y="1059.102" Z="93.64645" />
          <Vector3 X="-4851.311" Y="1083.282" Z="91.27998" />
          <Vector3 X="-4839.616" Y="1106.653" Z="90.75903" />
          <Vector3 X="-4825.607" Y="1128.851" Z="90.55152" />
          <Vector3 X="-4816.881" Y="1152.775" Z="89.86309" />
          <Vector3 X="-4820.546" Y="1178.676" Z="88.61396" />
          <Vector3 X="-4830.658" Y="1202.88" Z="86.09813" />
          <Vector3 X="-4840.604" Y="1227.16" Z="84.56711" />
          <Vector3 X="-4850.234" Y="1251.538" Z="83.35228" />
          <Vector3 X="-4852.086" Y="1277.552" Z="81.5878" />
          <Vector3 X="-4848.924" Y="1303.594" Z="80.76965" />
          <Vector3 X="-4845.72" Y="1329.596" Z="80.88274" />
          <Vector3 X="-4843.858" Y="1355.778" Z="80.0144" />
          <Vector3 X="-4835.911" Y="1380.402" Z="80.09355" />
          <Vector3 X="-4821.137" Y="1401.981" Z="81.64166" />
          <Vector3 X="-4801.965" Y="1419.819" Z="85.45878" />
          <Vector3 X="-4784.158" Y="1439.103" Z="90.29649" />
          <Vector3 X="-4766.45" Y="1458.48" Z="92.14632" />
          <Vector3 X="-4752.808" Y="1480.391" Z="93.24497" />
          <Vector3 X="-4749.68" Y="1506.414" Z="90.90098" />
          <Vector3 X="-4748.394" Y="1532.629" Z="88.18941" />
          <Vector3 X="-4747.745" Y="1558.87" Z="85.99582" />
          <Vector3 X="-4747.35" Y="1585.117" Z="84.26246" />
          <Vector3 X="-4747.158" Y="1611.366" Z="84.50072" />
          <Vector3 X="-4746.969" Y="1637.616" Z="86.8465" />
          <Vector3 X="-4746.013" Y="1663.794" Z="89.29652" />
          <Vector3 X="-4744.016" Y="1689.966" Z="92.18581" />
          <Vector3 X="-4737.426" Y="1715.053" Z="94.24618" />
          <Vector3 X="-4726.427" Y="1738.878" Z="93.21727" />
          <Vector3 X="-4716.208" Y="1763.057" Z="92.41508" />
          <Vector3 X="-4704.537" Y="1786.527" Z="91.73981" />
          <Vector3 X="-4691.378" Y="1809.24" Z="91.66883" />
          <Vector3 X="-4679.83" Y="1832.75" Z="89.3368" />
          <Vector3 X="-4672.966" Y="1858.063" Z="86.80382" />
          <Vector3 X="-4671.599" Y="1884.098" Z="81.46522" />
          <Vector3 X="-4676.13" Y="1909.898" Z="79.07923" />
          <Vector3 X="-4680.371" Y="1935.638" Z="73.33025" />
          <Vector3 X="-4664.131" Y="1955.029" Z="69.02627" />
          <Vector3 X="-4642.079" Y="1969.168" Z="64.87129" />
          <Vector3 X="-4623.313" Y="1987.521" Z="59.80484" />
          <Vector3 X="-4603.859" Y="2005.079" Z="54.08617" />
          <Vector3 X="-4580.505" Y="2017.06" Z="48.93415" />
          <Vector3 X="-4556.484" Y="2027.59" Z="45.30585" />
          <Vector3 X="-4531.125" Y="2034.34" Z="48.58083" />
          <Vector3 X="-4505.557" Y="2040.281" Z="51.55743" />
          <Vector3 X="-4480.339" Y="2047.4" Z="46.82599" />
          <Vector3 X="-4457.226" Y="2059.716" Z="45.98567" />
          <Vector3 X="-4435.259" Y="2074.085" Z="46.16537" />
          <Vector3 X="-4412.504" Y="2087.136" Z="52.3561" />
          <Vector3 X="-4387.614" Y="2095.352" Z="57.08718" />
          <Vector3 X="-4362.002" Y="2100.809" Z="61.1194" />
          <Vector3 X="-4336.301" Y="2105.83" Z="67.15703" />
          <Vector3 X="-4310.363" Y="2109.254" Z="73.26941" />
          <Vector3 X="-4284.194" Y="2110.237" Z="77.13593" />
          <Vector3 X="-4257.973" Y="2109.069" Z="79.91637" />
          <Vector3 X="-4232.088" Y="2104.945" Z="82.21349" />
          <Vector3 X="-4206.233" Y="2100.421" Z="84.40371" />
          <Vector3 X="-4180.931" Y="2093.575" Z="87.3871" />
          <Vector3 X="-4174.046" Y="2090.858" Z="87.90615" />
          <Vector3 X="-4167.746" Y="2089.022" Z="88.61091" />
          <Vector3 X="-4158.131" Y="2084.518" Z="89.82133" />
          <Vector3 X="-4149.613" Y="2079.533" Z="87.46805" />
          <Vector3 X="-4138.233" Y="2072.993" Z="85.72042" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTEStoneCircleBackToGadgetzan</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="-7983.441" Y="-3910.782" Z="13.80642" />
          <Vector3 X="-7948.693" Y="-3914.046" Z="11.63576" />
          <Vector3 X="-7913.709" Y="-3914.815" Z="9.378424" />
          <Vector3 X="-7878.717" Y="-3915.585" Z="9.650393" />
          <Vector3 X="-7843.726" Y="-3916.356" Z="9.306035" />
          <Vector3 X="-7808.912" Y="-3913.411" Z="9.775661" />
          <Vector3 X="-7773.924" Y="-3912.601" Z="10.23213" />
          <Vector3 X="-7738.934" Y="-3911.787" Z="11.76795" />
          <Vector3 X="-7703.994" Y="-3910.863" Z="9.295334" />
          <Vector3 X="-7669.206" Y="-3914.687" Z="9.392573" />
          <Vector3 X="-7634.549" Y="-3919.148" Z="10.26407" />
          <Vector3 X="-7599.835" Y="-3923.617" Z="11.44558" />
          <Vector3 X="-7565.122" Y="-3928.086" Z="11.20425" />
          <Vector3 X="-7530.408" Y="-3932.555" Z="9.333002" />
          <Vector3 X="-7495.613" Y="-3935.926" Z="10.50573" />
          <Vector3 X="-7460.68" Y="-3934.089" Z="9.032661" />
          <Vector3 X="-7426.137" Y="-3928.75" Z="9.06674" />
          <Vector3 X="-7394.008" Y="-3916.465" Z="10.43543" />
          <Vector3 X="-7368.529" Y="-3892.49" Z="14.58354" />
          <Vector3 X="-7344.466" Y="-3867.075" Z="10.1396" />
          <Vector3 X="-7320.195" Y="-3841.858" Z="9.605928" />
          <Vector3 X="-7294.825" Y="-3817.746" Z="9.089148" />
          <Vector3 X="-7269.443" Y="-3793.647" Z="8.911469" />
          <Vector3 X="-7244.061" Y="-3769.549" Z="9.27879" />
          <Vector3 X="-7232.36" Y="-3758.003" Z="9.95659" />
          <Vector3 X="-7226.161" Y="-3748.928" Z="9.190691" />
          <Vector3 X="-7223.352" Y="-3744.246" Z="8.419124" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTEThalanaarGoToGnolls</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="-4427.37" Y="-735.1099" Z="-37.61127" />
          <Vector3 X="-4434.444" Y="-723.692" Z="-31.27602" />
          <Vector3 X="-4439.829" Y="-713.101" Z="-25.37372" />
          <Vector3 X="-4443.888" Y="-700.6498" Z="-21.37248" />
          <Vector3 X="-4451.483" Y="-684.2664" Z="-20.10386" />
          <Vector3 X="-4446.271" Y="-674.516" Z="-18.05006" />
          <Vector3 X="-4445.353" Y="-670.8334" Z="-17.88592" />
          <Vector3 X="-4442.48" Y="-654.1567" Z="-14.36475" />
          <Vector3 X="-4440.369" Y="-636.2212" Z="-12.01571" />
          <Vector3 X="-4440.184" Y="-618.7367" Z="-6.606519" />
          <Vector3 X="-4440.96" Y="-601.2624" Z="-5.831923" />
          <Vector3 X="-4443.906" Y="-584.0134" Z="-1.789817" />
          <Vector3 X="-4446.723" Y="-567.3223" Z="4.204987" />
          <Vector3 X="-4445.343" Y="-550.5759" Z="9.416451" />
          <Vector3 X="-4435.324" Y="-536.3251" Z="8.483827" />
          <Vector3 X="-4420.93" Y="-526.432" Z="12.13748" />
          <Vector3 X="-4405.471" Y="-519.5934" Z="11.26599" />
          <Vector3 X="-4387.544" Y="-518.0009" Z="11.17655" />
          <Vector3 X="-4370.146" Y="-519.8152" Z="9.421222" />
          <Vector3 X="-4352.75" Y="-521.6283" Z="14.25799" />
          <Vector3 X="-4336.691" Y="-515.3408" Z="18.25811" />
          <Vector3 X="-4324.845" Y="-503.2744" Z="21.74714" />
          <Vector3 X="-4314.946" Y="-488.261" Z="24.47841" />
          <Vector3 X="-4308.498" Y="-471.9948" Z="27.6433" />
          <Vector3 X="-4304.482" Y="-455.0007" Z="30.19869" />
          <Vector3 X="-4301.133" Y="-437.8253" Z="32.60096" />
          <Vector3 X="-4298.549" Y="-420.526" Z="34.94792" />
          <Vector3 X="-4297.53" Y="-410.1913" Z="36.3216" />
          <Vector3 X="-4296.342" Y="-395.4895" Z="39.02578" />
          <Vector3 X="-4297.096" Y="-378.141" Z="41.97114" />
          <Vector3 X="-4301.626" Y="-361.2384" Z="46.05842" />
          <Vector3 X="-4303.092" Y="-343.8829" Z="49.52479" />
          <Vector3 X="-4297.889" Y="-327.3757" Z="52.13407" />
          <Vector3 X="-4286.996" Y="-313.7301" Z="53.40307" />
          <Vector3 X="-4274.098" Y="-301.9119" Z="53.69225" />
          <Vector3 X="-4261.681" Y="-289.6872" Z="54.58487" />
          <Vector3 X="-4254.026" Y="-274.0162" Z="54.64599" />
          <Vector3 X="-4249.89" Y="-257.0425" Z="55.46695" />
          <Vector3 X="-4247.996" Y="-239.6505" Z="56.34587" />
          <Vector3 X="-4246.414" Y="-222.2221" Z="57.52824" />
          <Vector3 X="-4244.932" Y="-204.7876" Z="58.76796" />
          <Vector3 X="-4246.341" Y="-187.3726" Z="59.11047" />
          <Vector3 X="-4248.122" Y="-169.9634" Z="59.40393" />
          <Vector3 X="-4251.233" Y="-152.7621" Z="60.57625" />
          <Vector3 X="-4258.888" Y="-137.7566" Z="60.8278" />
          <Vector3 X="-4268.491" Y="-122.4616" Z="62.01716" />
          <Vector3 X="-4278.526" Y="-108.1857" Z="61.48662" />
          <Vector3 X="-4291.328" Y="-96.25405" Z="61.89052" />
          <Vector3 X="-4305.187" Y="-85.77868" Z="62.47475" />
          <Vector3 X="-4322.486" Y="-86.31247" Z="56.66113" />
          <Vector3 X="-4339.665" Y="-89.60629" Z="51.99112" />
          <Vector3 X="-4356.655" Y="-91.17674" Z="52.88737" />
          <Vector3 X="-4370.562" Y="-80.78432" Z="55.99079" />
          <Vector3 X="-4383.295" Y="-68.88914" Z="58.69783" />
          <Vector3 X="-4399.479" Y="-62.32994" Z="56.95266" />
          <Vector3 X="-4416.437" Y="-58.04214" Z="55.00967" />
          <Vector3 X="-4433.395" Y="-53.8708" Z="57.4843" />
          <Vector3 X="-4449.927" Y="-48.1928" Z="57.57391" />
          <Vector3 X="-4465.715" Y="-40.64601" Z="58.52777" />
          <Vector3 X="-4481.318" Y="-32.81714" Z="64.43616" />
          <Vector3 X="-4497.153" Y="-27.35811" Z="71.43083" />
          <Vector3 X="-4514.477" Y="-31.97389" Z="79.51257" />
          <Vector3 X="-4522.213" Y="-34.63786" Z="82.47063" />
          <Vector3 X="-4531.853" Y="-32.74836" Z="83.38981" />
          <Vector3 X="-4548.339" Y="-26.88034" Z="84.64893" />
          <Vector3 X="-4557.451" Y="-22.02331" Z="87.26459" />
          <Vector3 X="-4562.488" Y="-17.32846" Z="89.16115" />
          <Vector3 X="-4569.134" Y="-9.211679" Z="89.70356" />
          <Vector3 X="-4575.383" Y="-1.196368" Z="88.4119" />
          <Vector3 X="-4580.282" Y="8.405693" Z="88.9772" />
          <Vector3 X="-4583.77" Y="18.30683" Z="89.21156" />
          <Vector3 X="-4588.227" Y="27.79576" Z="90.33647" />
          <Vector3 X="-4592.62" Y="37.31375" Z="91.34094" />
          <Vector3 X="-4596.117" Y="47.21428" Z="90.87315" />
          <Vector3 X="-4599.965" Y="56.9807" Z="90.06607" />
          <Vector3 X="-4604.013" Y="66.66893" Z="89.23619" />
          <Vector3 X="-4607.28" Y="73.83403" Z="88.47619" />
          <Vector3 X="-4612.186" Y="84.59122" Z="86.91295" />
          <Vector3 X="-4616.579" Y="94.12776" Z="83.96941" />
          <Vector3 X="-4621.268" Y="103.5225" Z="81.06925" />
          <Vector3 X="-4625.774" Y="113.0057" Z="79.43356" />
          <Vector3 X="-4630.334" Y="122.4639" Z="75.9772" />
          <Vector3 X="-4633.935" Y="132.2843" Z="70.8751" />
          <Vector3 X="-4637.418" Y="145.7095" Z="62.89211" />
          <Vector3 X="-4642.801" Y="162.9255" Z="54.39252" />
          <Vector3 X="-4654.884" Y="175.4458" Z="46.4729" />
          <Vector3 X="-4668.954" Y="183.7941" Z="40.97047" />
          <Vector3 X="-4678.516" Y="188.1306" Z="39.92429" />
          <Vector3 X="-4688.27" Y="192.0193" Z="39.13675" />
          <Vector3 X="-4692.183" Y="193.7107" Z="39.40042" />
          <Vector3 X="-4701.839" Y="196.8826" Z="39.24982" />
          <Vector3 X="-4707.444" Y="198.7291" Z="39.23731" />
          <Vector3 X="-4717.728" Y="202.1431" Z="39.38054" />
          <Vector3 X="-4727.771" Y="205.1983" Z="39.58157" />
          <Vector3 X="-4737.819" Y="208.2481" Z="39.21385" />
          <Vector3 X="-4747.866" Y="211.2979" Z="40.74091" />
          <Vector3 X="-4757.802" Y="214.6712" Z="40.67298" />
          <Vector3 X="-4764.651" Y="218.5075" Z="40.10093" />
          <Vector3 X="-4770.335" Y="221.7923" Z="40.02485" />
          <Vector3 X="-4780.048" Y="225.7812" Z="40.79629" />
          <Vector3 X="-4789.822" Y="229.6169" Z="41.21605" />
          <Vector3 X="-4799.387" Y="233.0555" Z="41.75611" />
          <Vector3 X="-4805.974" Y="235.0686" Z="41.81764" />
          <Vector3 X="-4807.658" Y="238.8732" Z="41.193" />
          <Vector3 X="-4814.771" Y="254.8625" Z="35.78531" />
          <Vector3 X="-4821.381" Y="270.4589" Z="36.13921" />
          <Vector3 X="-4829.062" Y="286.8032" Z="30.91643" />
          <Vector3 X="-4837.844" Y="301.8969" Z="26.88664" />
          <Vector3 X="-4847.606" Y="310.6115" Z="30.44493" />
          <Vector3 X="-4858.917" Y="320.9556" Z="29.27707" />
          <Vector3 X="-4873.261" Y="330.8983" Z="27.28132" />
          <Vector3 X="-4889.313" Y="337.8471" Z="25.74574" />
          <Vector3 X="-4906.158" Y="342.4496" Z="21.28832" />
          <Vector3 X="-4920.127" Y="343.0674" Z="21.76656" />
          <Vector3 X="-4923.613" Y="342.8228" Z="21.99317" />
          <Vector3 X="-4927.087" Y="342.3983" Z="22.37655" />
          <Vector3 X="-4930.561" Y="341.9739" Z="22.77294" />
          <Vector3 X="-4934.036" Y="341.5494" Z="22.99018" />
          <Vector3 X="-4937.51" Y="341.1254" Z="22.91828" />
          <Vector3 X="-4940.99" Y="340.7479" Z="22.46536" />
          <Vector3 X="-4944.486" Y="340.633" Z="21.8759" />
          <Vector3 X="-4947.979" Y="340.8212" Z="21.03683" />
          <Vector3 X="-4951.451" Y="341.2603" Z="20.17364" />
          <Vector3 X="-4957.692" Y="344.1725" Z="21.76882" />
          <Vector3 X="-4959.364" Y="347.203" Z="23.56621" />
          <Vector3 X="-4961.019" Y="353.9508" Z="23.95957" />
          <Vector3 X="-4966.785" Y="357.5828" Z="24.10372" />
          <Vector3 X="-4970.029" Y="358.8973" Z="24.16253" />
          <Vector3 X="-4976.776" Y="360.6528" Z="24.29342" />
          <Vector3 X="-4980.254" Y="361.0306" Z="24.03839" />
          <Vector3 X="-4983.68" Y="361.7447" Z="24.18862" />
          <Vector3 X="-4989.987" Y="360.2639" Z="24.05219" />
          <Vector3 X="-4987.471" Y="354.6316" Z="23.57218" />
          <Vector3 X="-4984.124" Y="353.6209" Z="23.34825" />
          <Vector3 X="-4980.724" Y="352.7899" Z="23.50778" />
          <Vector3 X="-4977.215" Y="351.9323" Z="23.68995" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTEUpTheTree</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="-4375.729" Y="3213.26" Z="12.65635" />
          <Vector3 X="-4379.455" Y="3208.685" Z="14.69162" />
          <Vector3 X="-4381.258" Y="3206.336" Z="16.02686" />
          <Vector3 X="-4383.458" Y="3203.471" Z="16.90585" />
          <Vector3 X="-4385.59" Y="3200.695" Z="17.5741" />
          <Vector3 X="-4387.721" Y="3197.919" Z="17.59412" />
          <Vector3 X="-4389.853" Y="3195.143" Z="17.61374" />
          <Vector3 X="-4392.186" Y="3192.543" Z="17.62328" />
          <Vector3 X="-4395.176" Y="3190.54" Z="17.59059" />
          <Vector3 X="-4398.254" Y="3189.115" Z="17.59059" />
          <Vector3 X="-4401.558" Y="3187.67" Z="17.59059" />
          <Vector3 X="-4404.526" Y="3186.025" Z="17.59059" />
          <Vector3 X="-4407.161" Y="3183.589" Z="17.59059" />
          <Vector3 X="-4409.082" Y="3180.789" Z="17.59059" />
          <Vector3 X="-4411.25" Y="3177.91" Z="17.59059" />
          <Vector3 X="-4413.316" Y="3175.217" Z="18.05476" />
          <Vector3 X="-4413.687" Y="3171.852" Z="19.40571" />
          <Vector3 X="-4411.542" Y="3169.149" Z="20.6436" />
          <Vector3 X="-4408.201" Y="3168.795" Z="21.84207" />
          <Vector3 X="-4405.779" Y="3171.185" Z="23.24909" />
          <Vector3 X="-4405.953" Y="3174.568" Z="24.53262" />
          <Vector3 X="-4408.179" Y="3177.152" Z="25.82597" />
          <Vector3 X="-4411.496" Y="3176.943" Z="27.20983" />
          <Vector3 X="-4413.271" Y="3174.048" Z="28.46662" />
          <Vector3 X="-4412.716" Y="3170.578" Z="29.6875" />
          <Vector3 X="-4411.975" Y="3169.24" Z="30.28578" />
          <Vector3 X="-4409.44" Y="3167.728" Z="31.29467" />
          <Vector3 X="-4407.631" Y="3167.719" Z="31.91564" />
          <Vector3 X="-4406.238" Y="3169.939" Z="32.05744" />
          <Vector3 X="-4405.239" Y="3173.134" Z="32.24907" />
          <Vector3 X="-4405.98" Y="3176.54" Z="32.25548" />
          <Vector3 X="-4408.468" Y="3178.862" Z="32.25735" />
          <Vector3 X="-4411.968" Y="3179.067" Z="32.16315" />
          <Vector3 X="-4415.094" Y="3177.756" Z="32.1491" />
          <Vector3 X="-4418.395" Y="3176.467" Z="32.12687" />
          <Vector3 X="-4420.834" Y="3178.644" Z="32.07236" />
          <Vector3 X="-4422.352" Y="3181.908" Z="32.32475" />
          <Vector3 X="-4422.095" Y="3185.215" Z="33.28046" />
          <Vector3 X="-4420.76" Y="3188.561" Z="34.34416" />
          <Vector3 X="-4419.152" Y="3191.534" Z="36.00672" />
          <Vector3 X="-4416.32" Y="3193.72" Z="37.56674" />
          <Vector3 X="-4413.134" Y="3194.891" Z="39.01002" />
          <Vector3 X="-4409.79" Y="3195.912" Z="40.44082" />
          <Vector3 X="-4406.312" Y="3196.124" Z="41.10564" />
          <Vector3 X="-4402.719" Y="3195.829" Z="41.7627" />
          <Vector3 X="-4399.372" Y="3195.278" Z="42.64283" />
          <Vector3 X="-4395.922" Y="3194.233" Z="43.55957" />
          <Vector3 X="-4392.738" Y="3193.076" Z="44.53212" />
          <Vector3 X="-4389.689" Y="3191.409" Z="45.80774" />
          <Vector3 X="-4387.516" Y="3188.673" Z="47.05993" />
          <Vector3 X="-4386.152" Y="3185.367" Z="48.89876" />
          <Vector3 X="-4386.17" Y="3182.001" Z="50.73233" />
          <Vector3 X="-4387.384" Y="3178.609" Z="52.94664" />
          <Vector3 X="-4388.758" Y="3175.504" Z="54.79429" />
          <Vector3 X="-4390.518" Y="3172.361" Z="56.20897" />
          <Vector3 X="-4393.102" Y="3170.227" Z="56.76378" />
          <Vector3 X="-4396.525" Y="3169.118" Z="57.43189" />
          <Vector3 X="-4399.813" Y="3168.274" Z="57.95676" />
          <Vector3 X="-4403.265" Y="3167.696" Z="58.66979" />
          <Vector3 X="-4405.827" Y="3169.708" Z="58.74335" />
          <Vector3 X="-4407.477" Y="3172.773" Z="58.6546" />
          <Vector3 X="-4406.457" Y="3176.065" Z="58.56102" />
          <Vector3 X="-4404.129" Y="3178.802" Z="58.56102" />
          <Vector3 X="-4401.6" Y="3181.067" Z="58.56102" />
          <Vector3 X="-4400.535" Y="3182.008" Z="58.56102" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>true</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>ROUTEWrithingDeepBackToThalanaar</Name>
      <QuestId />
      <QuestType>FollowPath</QuestType>
      <QuestClass xsi:type="FollowPathEasyQuestClass">
        <Path>
          <Vector3 X="-5333.271" Y="423.7491" Z="9.63561" />
          <Vector3 X="-5343.834" Y="417.1181" Z="11.08792" />
          <Vector3 X="-5351.713" Y="409.8925" Z="11.98358" />
          <Vector3 X="-5356.977" Y="401.1751" Z="15.31323" />
          <Vector3 X="-5359.759" Y="391.1077" Z="19.02513" />
          <Vector3 X="-5360.479" Y="384.2579" Z="18.96672" />
          <Vector3 X="-5353.433" Y="382.7337" Z="17.76052" />
          <Vector3 X="-5343.875" Y="377.7344" Z="17.04113" />
          <Vector3 X="-5336.246" Y="371.0105" Z="17.35551" />
          <Vector3 X="-5329.928" Y="362.2339" Z="18.34227" />
          <Vector3 X="-5324.988" Y="353.3417" Z="18.78314" />
          <Vector3 X="-5320.74" Y="343.4005" Z="17.93169" />
          <Vector3 X="-5316.509" Y="334.1442" Z="15.6263" />
          <Vector3 X="-5311.518" Y="324.55" Z="16.49883" />
          <Vector3 X="-5308.207" Y="315.0038" Z="20.03146" />
          <Vector3 X="-5315.316" Y="308.7925" Z="22.26175" />
          <Vector3 X="-5324.025" Y="313.8298" Z="25.43711" />
          <Vector3 X="-5328.745" Y="323.1425" Z="29.21094" />
          <Vector3 X="-5330.083" Y="333.519" Z="32.66193" />
          <Vector3 X="-5327.555" Y="343.3512" Z="37.34052" />
          <Vector3 X="-5320.501" Y="350.1184" Z="42.79258" />
          <Vector3 X="-5310.065" Y="352.0904" Z="46.75964" />
          <Vector3 X="-5301.01" Y="347.7872" Z="50.4169" />
          <Vector3 X="-5294.369" Y="339.2906" Z="54.19591" />
          <Vector3 X="-5289.625" Y="329.9786" Z="57.66808" />
          <Vector3 X="-5286.987" Y="319.8163" Z="59.5933" />
          <Vector3 X="-5284.923" Y="312.2167" Z="61.61098" />
          <Vector3 X="-5272.703" Y="309.8255" Z="60.58437" />
          <Vector3 X="-5262.294" Y="310.1754" Z="59.30672" />
          <Vector3 X="-5254.569" Y="316.8841" Z="58.94196" />
          <Vector3 X="-5252.789" Y="320.407" Z="58.85722" />
          <Vector3 X="-5251.186" Y="323.6204" Z="58.65779" />
          <Vector3 X="-5246.639" Y="332.7343" Z="57.2421" />
          <Vector3 X="-5241.812" Y="342.412" Z="57.64606" />
          <Vector3 X="-5237.133" Y="351.7977" Z="58.70087" />
          <Vector3 X="-5231.361" Y="360.5277" Z="59.17064" />
          <Vector3 X="-5224.34" Y="368.3212" Z="60.48344" />
          <Vector3 X="-5217.922" Y="376.5913" Z="59.9998" />
          <Vector3 X="-5212.232" Y="385.416" Z="59.38066" />
          <Vector3 X="-5206.616" Y="393.9129" Z="59.02737" />
          <Vector3 X="-5200.601" Y="402.8997" Z="59.40995" />
          <Vector3 X="-5205.732" Y="412.239" Z="56.92133" />
          <Vector3 X="-5214.527" Y="417.2148" Z="54.95102" />
          <Vector3 X="-5224.228" Y="421.4753" Z="50.8215" />
          <Vector3 X="-5229.909" Y="429.9258" Z="47.79736" />
          <Vector3 X="-5233.188" Y="438.8184" Z="43.16308" />
          <Vector3 X="-5226.532" Y="446.9385" Z="42.26505" />
          <Vector3 X="-5220.353" Y="455.4093" Z="40.8382" />
          <Vector3 X="-5212.045" Y="470.8424" Z="42.68331" />
          <Vector3 X="-5208.418" Y="478.1854" Z="46.02637" />
          <Vector3 X="-5199.485" Y="491.9115" Z="47.81317" />
          <Vector3 X="-5191.319" Y="503.2394" Z="48.09264" />
          <Vector3 X="-5184.567" Y="512.5455" Z="47.2429" />
          <Vector3 X="-5170.097" Y="535.3305" Z="38.65877" />
          <Vector3 X="-5157.723" Y="558.4793" Z="35.66666" />
          <Vector3 X="-5142.039" Y="578.4085" Z="35.35071" />
          <Vector3 X="-5121.219" Y="594.1962" Z="36.9603" />
          <Vector3 X="-5097.298" Y="604.6402" Z="38.10374" />
          <Vector3 X="-5087.541" Y="606.0289" Z="35.89649" />
          <Vector3 X="-5061.46" Y="613.0659" Z="31.12138" />
          <Vector3 X="-5048.424" Y="612.1731" Z="31.99894" />
          <Vector3 X="-5034.095" Y="608.4948" Z="34.6188" />
          <Vector3 X="-5014.146" Y="601.0089" Z="28.07081" />
          <Vector3 X="-5004.655" Y="583.7628" Z="27.415" />
          <Vector3 X="-4996.715" Y="575.9132" Z="26.54537" />
          <Vector3 X="-4986.564" Y="573.1922" Z="20.12225" />
          <Vector3 X="-4959.622" Y="575.0955" Z="14.88884" />
          <Vector3 X="-4934.239" Y="577.0261" Z="14.84769" />
          <Vector3 X="-4919.513" Y="576.4951" Z="14.95974" />
          <Vector3 X="-4909.761" Y="577.7085" Z="14.62227" />
          <Vector3 X="-4889.246" Y="585.2496" Z="15.54236" />
          <Vector3 X="-4867.271" Y="598.0597" Z="22.33613" />
          <Vector3 X="-4842.325" Y="608.4812" Z="26.58578" />
          <Vector3 X="-4817.518" Y="616.9919" Z="30.13697" />
          <Vector3 X="-4791.61" Y="620.637" Z="38.74371" />
          <Vector3 X="-4766.191" Y="619.7524" Z="42.46804" />
          <Vector3 X="-4752.382" Y="618.4562" Z="44.26906" />
          <Vector3 X="-4733.772" Y="615.6707" Z="44.45195" />
          <Vector3 X="-4708.481" Y="608.6431" Z="43.48223" />
          <Vector3 X="-4698.749" Y="607.1882" Z="45.20752" />
          <Vector3 X="-4678.593" Y="610.7318" Z="50.16948" />
          <Vector3 X="-4670.547" Y="614.214" Z="51.32004" />
          <Vector3 X="-4663.8" Y="638.9667" Z="55.64029" />
          <Vector3 X="-4671.543" Y="663.9821" Z="62.22423" />
          <Vector3 X="-4677.688" Y="690.174" Z="68.60139" />
          <Vector3 X="-4680.28" Y="715.4368" Z="74.94503" />
          <Vector3 X="-4675.786" Y="741.7982" Z="80.51463" />
          <Vector3 X="-4670.485" Y="753.793" Z="82.94495" />
          <Vector3 X="-4659.812" Y="777.737" Z="83.67458" />
          <Vector3 X="-4653.997" Y="802.5071" Z="83.03778" />
          <Vector3 X="-4650.706" Y="816.8336" Z="82.2884" />
          <Vector3 X="-4645.464" Y="841.7045" Z="82.22669" />
          <Vector3 X="-4644.06" Y="862.8369" Z="84.66673" />
          <Vector3 X="-4651.963" Y="876.1085" Z="87.12652" />
          <Vector3 X="-4668.152" Y="895.7588" Z="87.01555" />
          <Vector3 X="-4682.253" Y="913.8553" Z="90.09718" />
          <Vector3 X="-4693.569" Y="929.9198" Z="96.5064" />
          <Vector3 X="-4692.962" Y="934.4915" Z="97.77842" />
          <Vector3 X="-4687.425" Y="952.4539" Z="98.56224" />
          <Vector3 X="-4694.761" Y="969.8394" Z="99.89365" />
          <Vector3 X="-4707.618" Y="992.6748" Z="103.8243" />
          <Vector3 X="-4712.417" Y="1001.238" Z="105.9119" />
          <Vector3 X="-4720.616" Y="1007.946" Z="107.8672" />
          <Vector3 X="-4745.263" Y="1016.64" Z="112.7398" />
          <Vector3 X="-4770.773" Y="1025.552" Z="114.3423" />
          <Vector3 X="-4794.281" Y="1035.334" Z="107.8745" />
          <Vector3 X="-4819.126" Y="1045.992" Z="102.3664" />
          <Vector3 X="-4841.997" Y="1057.163" Z="94.86178" />
          <Vector3 X="-4854.909" Y="1079.495" Z="91.13207" />
          <Vector3 X="-4841.73" Y="1100.538" Z="90.18791" />
          <Vector3 X="-4826.854" Y="1123.106" Z="90.85027" />
          <Vector3 X="-4816.669" Y="1147.064" Z="90.20835" />
          <Vector3 X="-4818.808" Y="1173.108" Z="88.80093" />
          <Vector3 X="-4826.082" Y="1197.507" Z="86.36774" />
          <Vector3 X="-4836.649" Y="1222.352" Z="84.74878" />
          <Vector3 X="-4848.217" Y="1245.003" Z="83.84148" />
          <Vector3 X="-4852.833" Y="1270.715" Z="82.30712" />
          <Vector3 X="-4850.232" Y="1296.816" Z="80.5017" />
          <Vector3 X="-4848.266" Y="1311.383" Z="80.89266" />
          <Vector3 X="-4845.693" Y="1332.526" Z="80.88803" />
          <Vector3 X="-4842.572" Y="1359.373" Z="79.89965" />
          <Vector3 X="-4834.48" Y="1383.448" Z="80.11545" />
          <Vector3 X="-4828.931" Y="1391.509" Z="79.9835" />
          <Vector3 X="-4812.567" Y="1411.005" Z="83.45374" />
          <Vector3 X="-4796.908" Y="1427.772" Z="87.72231" />
          <Vector3 X="-4792.127" Y="1432.267" Z="88.92923" />
          <Vector3 X="-4773.208" Y="1450.464" Z="91.38314" />
          <Vector3 X="-4754.571" Y="1468.935" Z="93.1287" />
          <Vector3 X="-4751.125" Y="1483.184" Z="92.71119" />
          <Vector3 X="-4749.107" Y="1508.547" Z="90.85812" />
          <Vector3 X="-4747.568" Y="1535.54" Z="87.8967" />
          <Vector3 X="-4747.134" Y="1561.786" Z="85.76303" />
          <Vector3 X="-4746.604" Y="1588.031" Z="84.10908" />
          <Vector3 X="-4745.97" Y="1613.485" Z="84.68581" />
          <Vector3 X="-4745.06" Y="1639.719" Z="86.9727" />
          <Vector3 X="-4744.148" Y="1665.914" Z="89.53469" />
          <Vector3 X="-4741.89" Y="1692.831" Z="92.35761" />
          <Vector3 X="-4735.114" Y="1718.16" Z="94.25384" />
          <Vector3 X="-4725.061" Y="1742.388" Z="93.08581" />
          <Vector3 X="-4714.325" Y="1765.476" Z="92.38493" />
          <Vector3 X="-4702.908" Y="1789.985" Z="91.6174" />
          <Vector3 X="-4690.989" Y="1812.476" Z="91.63517" />
          <Vector3 X="-4678.189" Y="1835.389" Z="89.17062" />
          <Vector3 X="-4671.116" Y="1860.439" Z="86.00252" />
          <Vector3 X="-4672.693" Y="1887.414" Z="80.70088" />
          <Vector3 X="-4675.706" Y="1912.696" Z="78.62579" />
          <Vector3 X="-4675.75" Y="1939.653" Z="72.28711" />
          <Vector3 X="-4659.045" Y="1958.141" Z="68.1329" />
          <Vector3 X="-4637.052" Y="1973.827" Z="63.52755" />
          <Vector3 X="-4617.571" Y="1991.421" Z="58.43748" />
          <Vector3 X="-4598.022" Y="2007.716" Z="52.87175" />
          <Vector3 X="-4575.354" Y="2020.855" Z="47.55323" />
          <Vector3 X="-4550.507" Y="2029.205" Z="45.2433" />
          <Vector3 X="-4524.909" Y="2034.968" Z="49.68962" />
          <Vector3 X="-4498.85" Y="2042.172" Z="51.00118" />
          <Vector3 X="-4475.316" Y="2051.63" Z="45.76961" />
          <Vector3 X="-4455.903" Y="2068.866" Z="46.28737" />
          <Vector3 X="-4447.884" Y="2093.812" Z="40.34465" />
          <Vector3 X="-4441.07" Y="2119.967" Z="33.35352" />
          <Vector3 X="-4433.538" Y="2144.288" Z="24.85978" />
          <Vector3 X="-4426.414" Y="2169.553" Z="15.59136" />
          <Vector3 X="-4418.738" Y="2194.646" Z="9.4682" />
          <Vector3 X="-4408.16" Y="2218.621" Z="6.81757" />
          <Vector3 X="-4394.213" Y="2240.859" Z="6.233243" />
          <Vector3 X="-4384.057" Y="2264.594" Z="6.938046" />
          <Vector3 X="-4382.288" Y="2290.755" Z="7.123972" />
          <Vector3 X="-4382.155" Y="2317.792" Z="2.345254" />
          <Vector3 X="-4382.764" Y="2326.215" Z="2.125768" />
          <Vector3 X="-4393.41" Y="2325.075" Z="2.47001" />
          <Vector3 X="-4395.378" Y="2346.246" Z="2.794694" />
          <Vector3 X="-4397.314" Y="2370.971" Z="-1.524196" Type="Swimming" />
          <Vector3 X="-4398.167" Y="2395.275" Z="-1.524196" Type="Swimming" />
          <Vector3 X="-4398.812" Y="2418.169" Z="-1.524196" Type="Swimming" />
          <Vector3 X="-4399.496" Y="2442.479" Z="-1.524196" Type="Swimming" />
          <Vector3 X="-4400.141" Y="2465.372" Z="-1.524196" Type="Swimming" />
          <Vector3 X="-4400.825" Y="2489.682" Z="-1.524196" Type="Swimming" />
          <Vector3 X="-4401.314" Y="2513.287" Z="-1.524196" Type="Swimming" />
          <Vector3 X="-4401.017" Y="2536.896" Z="-1.524196" Type="Swimming" />
          <Vector3 X="-4400.583" Y="2559.794" Z="-1.524196" Type="Swimming" />
          <Vector3 X="-4400.135" Y="2583.401" Z="-1.524196" Type="Swimming" />
          <Vector3 X="-4399.687" Y="2607.008" Z="-1.524196" Type="Swimming" />
          <Vector3 X="-4399.225" Y="2631.323" Z="-1.524196" Type="Swimming" />
          <Vector3 X="-4398.791" Y="2654.222" Z="-1.524196" Type="Swimming" />
          <Vector3 X="-4399.724" Y="2677.737" Z="-1.524196" Type="Swimming" />
          <Vector3 X="-4404.618" Y="2700.835" Z="-1.524196" Type="Swimming" />
          <Vector3 X="-4409.659" Y="2724.626" Z="-1.524196" Type="Swimming" />
          <Vector3 X="-4414.406" Y="2747.031" Z="-1.524196" Type="Swimming" />
          <Vector3 X="-4419.3" Y="2770.13" Z="-1.524196" Type="Swimming" />
          <Vector3 X="-4424.341" Y="2793.921" Z="-1.524196" Type="Swimming" />
          <Vector3 X="-4429.235" Y="2817.02" Z="-1.524196" Type="Swimming" />
          <Vector3 X="-4434.109" Y="2840.122" Z="-1.524196" Type="Swimming" />
          <Vector3 X="-4436.165" Y="2863.632" Z="-1.524196" Type="Swimming" />
          <Vector3 X="-4437.876" Y="2886.469" Z="-1.524196" Type="Swimming" />
          <Vector3 X="-4442.692" Y="2909.484" Z="-1.524196" Type="Swimming" />
          <Vector3 X="-4450.53" Y="2931.756" Z="-1.524196" Type="Swimming" />
          <Vector3 X="-4458.368" Y="2954.028" Z="-1.524196" Type="Swimming" />
          <Vector3 X="-4466.441" Y="2976.969" Z="-1.524196" Type="Swimming" />
          <Vector3 X="-4474.043" Y="2998.573" Z="-1.524196" Type="Swimming" />
          <Vector3 X="-4481.314" Y="3021.023" Z="-1.524196" Type="Swimming" />
          <Vector3 X="-4486.125" Y="3044.845" Z="-1.524196" Type="Swimming" />
          <Vector3 X="-4487.636" Y="3067.687" Z="-1.524196" Type="Swimming" />
          <Vector3 X="-4489.608" Y="3091.899" Z="-1.524196" Type="Swimming" />
          <Vector3 X="-4493.075" Y="3116.872" Z="1.172518" />
          <Vector3 X="-4494.93" Y="3127.367" Z="1.568057" />
          <Vector3 X="-4498.306" Y="3151.75" Z="2.906468" />
          <Vector3 X="-4499.372" Y="3178.764" Z="7.405893" />
          <Vector3 X="-4498.463" Y="3204.162" Z="12.47826" />
          <Vector3 X="-4496.599" Y="3224.549" Z="11.43314" />
          <Vector3 X="-4492.398" Y="3236.379" Z="10.89186" />
          <Vector3 X="-4485.974" Y="3244.274" Z="12.0513" />
          <Vector3 X="-4476.508" Y="3246.953" Z="13.21622" />
          <Vector3 X="-4466.011" Y="3245.245" Z="14.38735" />
          <Vector3 X="-4456.625" Y="3241.299" Z="13.94444" />
          <Vector3 X="-4446.82" Y="3236.868" Z="12.53571" />
          <Vector3 X="-4449.488" Y="3230.313" Z="12.60276" />
          <Vector3 X="-4453.898" Y="3229.007" Z="13.60299" />
        </Path>
        <IsCompleteWhenAtLastPath>true</IsCompleteWhenAtLastPath>
        <ForceToStartFirstPosition>false</ForceToStartFirstPosition>
        <IsHotSpots>false</IsHotSpots>
        <IsLoop>false</IsLoop>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Sprinkle's Secret Ingredient</Name>
      <QuestId>
        <int>2641</int>
      </QuestId>
      <QuestType>Gatherer</QuestType>
      <QuestClass xsi:type="GathererEasyQuestClass">
        <HotSpots />
        <EntryIdObjects />
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>true</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Thalanaar Delivery</Name>
      <QuestId>
        <int>4281</int>
      </QuestId>
      <QuestType>None</QuestType>
      <QuestClass />
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>true</PickUpQuestOnItem>
      <PickUpQuestOnItemID>11463</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>The Borrower</Name>
      <QuestId>
        <int>2941</int>
      </QuestId>
      <QuestType>None</QuestType>
      <QuestClass />
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>The Dunemaul Compound</Name>
      <QuestId>
        <int>5863</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="-8415.852" Y="-2983.638" Z="9.140048" />
        </HotSpots>
        <EntryTarget>
          <int>5474</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>true</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>The Dunemaul Compound2</Name>
      <QuestId>
        <int>5863</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="-8426.795" Y="-2983.136" Z="9.583318" />
        </HotSpots>
        <EntryTarget>
          <int>5472</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>true</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>The Dunemaul Compound3</Name>
      <QuestId>
        <int>5863</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="-8534.26" Y="-3082.25" Z="8.701996" />
        </HotSpots>
        <EntryTarget>
          <int>12046</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>true</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>The High Wilderness</Name>
      <QuestId>
        <int>2982</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="-5240.904" Y="1316.393" Z="50.51258" />
          <Vector3 X="-5386.11" Y="1423.142" Z="29.32685" />
          <Vector3 X="-5534.187" Y="1428.007" Z="22.61355" />
        </HotSpots>
        <EntryTarget>
          <int>5240</int>
          <int>5234</int>
          <int>5232</int>
          <int>5236</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>true</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>The High Wilderness2</Name>
      <QuestId>
        <int>2982</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="-5246.972" Y="1321.002" Z="51.6033" />
          <Vector3 X="-5386.11" Y="1423.142" Z="29.32685" />
          <Vector3 X="-5534.187" Y="1428.007" Z="22.61355" />
        </HotSpots>
        <EntryTarget>
          <int>5236</int>
          <int>5234</int>
          <int>5240</int>
          <int>5232</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>true</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>The High Wilderness3</Name>
      <QuestId>
        <int>2982</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="-5246.972" Y="1321.002" Z="51.6033" />
          <Vector3 X="-5386.11" Y="1423.142" Z="29.32685" />
          <Vector3 X="-5534.187" Y="1428.007" Z="22.61355" />
        </HotSpots>
        <EntryTarget>
          <int>5232</int>
          <int>5240</int>
          <int>5234</int>
          <int>5236</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>true</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>The Knife Revealed</Name>
      <QuestId>
        <int>4129</int>
      </QuestId>
      <QuestType>None</QuestType>
      <QuestClass />
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>The Mark of Quality</Name>
      <QuestId>
        <int>2821</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="-4982.495" Y="1567.729" Z="60.03254" />
          <Vector3 X="-4938.132" Y="1720.487" Z="63.77987" />
          <Vector3 X="-4973.403" Y="1746.942" Z="64.49255" />
        </HotSpots>
        <EntryTarget>
          <int>5292</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>true</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>The Missing Courier</Name>
      <QuestId>
        <int>4124</int>
      </QuestId>
      <QuestType>None</QuestType>
      <QuestClass />
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>The Missing Courier2</Name>
      <QuestId>
        <int>4125</int>
      </QuestId>
      <QuestType>None</QuestType>
      <QuestClass />
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>The Ruins of Solarsal</Name>
      <QuestId>
        <int>2866</int>
      </QuestId>
      <QuestType>None</QuestType>
      <QuestClass />
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>true</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>The Stone Circle</Name>
      <QuestId>
        <int>3444</int>
      </QuestId>
      <QuestType>Gatherer</QuestType>
      <QuestClass xsi:type="GathererEasyQuestClass">
        <HotSpots>
          <Vector3 X="-988.8929" Y="-3711.628" Z="4.596276" />
        </HotSpots>
        <EntryIdObjects>
          <int>149036</int>
        </EntryIdObjects>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>true</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>The Sunken Temple</Name>
      <QuestId>
        <int>3445</int>
      </QuestId>
      <QuestType>None</QuestType>
      <QuestClass />
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>The Super Snapper FX</Name>
      <QuestId>
        <int>2944</int>
      </QuestId>
      <QuestType>UseItemOn</QuestType>
      <QuestClass xsi:type="UseItemOnEasyQuestClass">
        <HotSpots />
        <EntryIdTarget />
        <ItemId>0</ItemId>
        <Range>4.5</Range>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>The Thirsty Goblin</Name>
      <QuestId>
        <int>2605</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="-8768.407" Y="-2238.176" Z="8.902521" />
          <Vector3 X="-8947.268" Y="-2181.542" Z="8.878438" />
          <Vector3 X="-9059.263" Y="-2167.537" Z="11.58911" />
        </HotSpots>
        <EntryTarget>
          <int>5481</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>true</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>The Woodpaw Gnolls</Name>
      <QuestId>
        <int>4131</int>
      </QuestId>
      <QuestType>None</QuestType>
      <QuestClass />
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>The Writhing Deep</Name>
      <QuestId>
        <int>4135</int>
      </QuestId>
      <QuestType>None</QuestType>
      <QuestClass />
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Thistleshrub Valley</Name>
      <QuestId>
        <int>3362</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="-8765.92" Y="-2233.477" Z="8.943483" />
          <Vector3 X="-8877.822" Y="-2327.823" Z="8.878146" />
          <Vector3 X="-8989.543" Y="-2174.268" Z="9.678241" />
        </HotSpots>
        <EntryTarget>
          <int>5490</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>true</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Thistleshrub Valley2</Name>
      <QuestId>
        <int>3362</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="-8974.73" Y="-2182.939" Z="8.962267" />
          <Vector3 X="-8890.493" Y="-2297.178" Z="8.877463" />
          <Vector3 X="-8748.978" Y="-2254.409" Z="8.951445" />
        </HotSpots>
        <EntryTarget>
          <int>5485</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>true</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Zapped Giants</Name>
      <QuestId>
        <int>7003</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="-4543.151" Y="2337.553" Z="0.9347487" />
          <Vector3 X="-4688.559" Y="2365.704" Z="1.226862" />
          <Vector3 X="-4797.314" Y="2290.902" Z="-1.482979" Type="Swimming" />
          <Vector3 X="-5038.576" Y="2227.93" Z="0.2032465" />
          <Vector3 X="-5137.071" Y="2209.144" Z="3.625945" />
          <Vector3 X="-5252.647" Y="2182.847" Z="1.395895" />
          <Vector3 X="-5461.002" Y="2327.745" Z="0.1606497" />
        </HotSpots>
        <EntryTarget>
          <int>5361</int>
          <int>5360</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>true</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition>return ObjectManager.Me.WowClass != WoWClass.Druid;</CanCondition>
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
  </EasyQuests>
  <Script>using robotManager.Helpful;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Threading;
using wManager.Events;
using wManager.Wow.Bot.Tasks;
using wManager.Wow.Enums;
using wManager.Wow.Helpers;
using wManager.Wow.ObjectManager;
using System.ComponentModel;
using System.Configuration;
using System.Net;
using System.Windows.Forms;
using robotManager.Products;
using System.Threading.Tasks;



//FlightMaster
public class FlightMaster
{

    private int priority;

    public FlightMaster(int priority)
    {
        this.priority = priority;
    }

    public static void main(String[] args)
    {
        FlightMaster temp = new FlightMaster(1);
        Logging.Write("Stuff");
    }


    public static int timer = 0;
    public static Vector3 myPositionAtStart = new Vector3(0, 0, 0);
    public static bool _deleteOldPath = false;
    public static bool _isLaunched ;
    static bool longMoveState = false;
    static Vector3 checkDistanceToDestination;
    private static int travelDistance = 1250;
    private static float saveDistance;
    public static Vector3 destinationVector = new Vector3(0, 0, 0);

    //public static MovementEvents.MovementCancelableHandler MovementEventsOnOnMovementPulse { get; private set; }

    // public static List&lt;FlightMasterDB&gt; FML = fillDB();

    public void startFlightMaster()
    {
        Logging.Write("[FNV_Quester]: Flight Master initialized");
        _isLaunched = true;
        FNVQuesterFlightMaster.Load();
        //flightMasterLoop();
    }

    public void start()
    {
        //Logging.Write("Subscribing to event");
       // SubscribeToEvent();
       // watchForEvents();
    }

    public void stop()
    {
        //Logging.Write("Unsubscribing to event");
        //UnSubscribeEvents();
    }

    public static void disposeFlightMaster()
    {
        _isLaunched = false;
        FNVQuesterFlightMaster.CurrentSettings.Save();
        //clearOldPath();
        //_deleteOldPath = true;
        //UnSubscribeEvents();
        //MovementEvents.OnMovementPulse -= new MovementEvents.MovementCancelableHandler(FlightMaster.MovementEventsOnOnMovementPulse);
        //Logging.Write("[FNV_Quester]: Flight Master disposed");
    }

    public static void disposeFlightMaster(int wert)
    {
        _isLaunched = false;
        if(wert == 1)
        {
            Logging.Write("Flight Master stopped, dead");
        }
        else
        {
            Logging.Write("Flight Master stopped, combat");
        }
    }


    private void SubscribeToEvent()
    {
         MovementEvents.OnMovementPulse += MovementEventsOnOnMovementPulse;
    }

    public void UnSubscribeEvents()
    {
        MovementEvents.OnMovementPulse -= MovementEventsOnOnMovementPulse;
    }

    private void watchForEvents()
    {

        EventsLuaWithArgs.OnEventsLuaWithArgs += (LuaEventsId id, List&lt;string&gt; args) =&gt;
        {


            if (id == wManager.Wow.Enums.LuaEventsId.PLAYER_DEAD)
            {
                Logging.Write("[FNV_Quester]: Player died, stop Flight Master");
                disposeFlightMaster(1);
            }
            if (id == wManager.Wow.Enums.LuaEventsId.PLAYER_ENTER_COMBAT)
            {
                disposeFlightMaster(2);
          		  Logging.Write("[FNV_Quester]: Player entered combat, stop Flight Master");
            }

        };

    }


    private void MovementEventsOnOnMovementPulse(List&lt;Vector3&gt; path, CancelEventArgs cancelEventArgs)
    {
        if(timer &lt; 1)
        {
            checkDistanceToDestination = path.Last&lt;Vector3&gt;();
            longMove(path.Last&lt;Vector3&gt;());
            destinationVector = path.Last&lt;Vector3&gt;();
            if(ObjectManager.Me.Position.DistanceTo(destinationVector) &gt; 1000 &amp;&amp; !_isLaunched)
                startFlightMaster();
        }
        else
        {
            Logging.Write("[FNV_Quester]: Taxi in Pause");
        }
    }

    public bool longMove(Vector3 destination)
    {
        saveDistance = new Vector3(destination).DistanceTo(ObjectManager.Me.Position);
        if(new Vector3(destination).DistanceTo(ObjectManager.Me.Position) &lt; travelDistance)
        {
            longMoveState = false;
            return false;
        }
        else
        {
            longMoveState = true;
            return true;
        }
    }


    public static FlightMasterDB getClosestFlightMasterFrom()
    {
        List&lt;FlightMasterDB&gt; FMLnfmd = fillDB();
        float tempDistance = 99999;
        FlightMasterDB returnObject = new FlightMasterDB("null", 0, new Vector3(0, 0, 0), false);

        foreach(var a in FMLnfmd)
        {
            if(a.alreadyDiscovered &amp;&amp; a.position.DistanceTo(ObjectManager.Me.Position) &lt; tempDistance &amp;&amp; (a.continent == checkContinent()))
            {
                tempDistance = a.position.DistanceTo(ObjectManager.Me.Position);
                returnObject = a;
            }
        }
        return returnObject;
    }

    public static FlightMasterDB getClosestFlightMasterTo()
    {
        List&lt;FlightMasterDB&gt; FMLgcfmt = fillDB();
        float tempDistance = 99999;
        FlightMasterDB returnObject = new FlightMasterDB("null", 0, new Vector3(0, 0, 0), false);

        foreach(var a in FMLgcfmt)
        {
            if(a.alreadyDiscovered &amp;&amp; a.position.DistanceTo(destinationVector) &lt; tempDistance &amp;&amp; (a.continent == checkContinent()))
            {
                tempDistance = a.position.DistanceTo(destinationVector);
                returnObject = a;
            }
        }
        return returnObject;
    }

    public static bool checkContinent()
    {
        if(Usefuls.ContinentId == (int)ContinentId.Kalimdor)
        {
            return true;
        }
        else
        {
            return false;
        }
        
    }

    public static void waitFlying()
    {

        while(ObjectManager.Me.IsOnTaxi)
        {
            Logging.Write("[FNV_Quester]: On taxi, waiting");
            Thread.Sleep(30000);
        }

        Logging.Write("[FNV_Quester]: Arrived at destination Flight Master, finished waiting");
    }

    public static List&lt;FlightMasterDB&gt; fillDB()
    {
        //True = Kalimdor ; False = Eastern Kingdoms
        List&lt;FlightMasterDB&gt; FMListe = new List&lt;FlightMasterDB&gt;();
        FlightMasterDB Stormwind = new FlightMasterDB("Stormwind", 352, new Vector3(-8835.76f, 490.084f, 109.6157f), false);
        FMListe.Add(Stormwind);
        FlightMasterDB ArathiHighlands = new FlightMasterDB("Arathi", 2835, new Vector3(-1240.03f, -2513.96f, 21.92969f), false);
        FMListe.Add(ArathiHighlands);
        FlightMasterDB Ashenvale = new FlightMasterDB("Ashenvale", 4267, new Vector3(2828.4f, -284.3f, 106.7f), true);
        FMListe.Add(Ashenvale);
        FlightMasterDB Darkshore = new FlightMasterDB("Darkshore", 3841, new Vector3(6343.2f, 561.651f, 15.79876f), true);
        FMListe.Add(Darkshore);
        FlightMasterDB Stranglethorn = new FlightMasterDB("Stranglethorn", 2859, new Vector3(-14477.9f, 464.101f, 36.38163f), false);
        FMListe.Add(Stranglethorn);
        FlightMasterDB Duskwood = new FlightMasterDB("Duskwood", 2409, new Vector3(-10513.8f, -1258.79f, 41.43174f), false);
        FMListe.Add(Duskwood);
        FlightMasterDB FeralasFeathermoon = new FlightMasterDB("Feralas, Feathermoon", 8019, new Vector3(-4370.5f, 3340f, 12f), true);
        FMListe.Add(FeralasFeathermoon);
        FlightMasterDB FeralasThalanaar = new FlightMasterDB("Feralas, Thalanaar", 4319, new Vector3(-4491f, -781f, -40f), true);
        FMListe.Add(FeralasThalanaar);
        FlightMasterDB Tanaris = new FlightMasterDB("Tanaris", 7823, new Vector3(-7224.9f, -3738.2f, 8.4f), true);
        FMListe.Add(Tanaris);
        FlightMasterDB Hinterlands = new FlightMasterDB("The Hinterlands", 8018, new Vector3(282.1f, -2001.3f, 194.1f), false);
        FMListe.Add(Hinterlands);
        FlightMasterDB Ironforge = new FlightMasterDB("Ironforge", 1573, new Vector3(-4821.13f, -1152.4f, 502.2116f), false);
        FMListe.Add(Ironforge);
        FlightMasterDB Menethil = new FlightMasterDB("Wetlands", 1571, new Vector3(-3793.2f, -782.052f, 9.014864f), false);
        FMListe.Add(Menethil);
        FlightMasterDB TheBarrens = new FlightMasterDB("The Barrens", 16227, new Vector3(-898.246f, -3769.65f, 11.71021f), true);
        FMListe.Add(TheBarrens);
        FlightMasterDB Redridge = new FlightMasterDB("Redridge Mountains", 931, new Vector3(-9435.8f, -2234.79f, 69.43174f), false);
        FMListe.Add(Redridge);
        FlightMasterDB Teldrassil = new FlightMasterDB("Teldrassil", 3838, new Vector3(8640.58f, 841.118f, 23.26363f), true);
        FMListe.Add(Teldrassil);
        FlightMasterDB Southshore = new FlightMasterDB("Hillsbrad Foothiils", 2432, new Vector3(-715.146f, -512.134f, 26.54455f), false);
        FMListe.Add(Southshore);
        FlightMasterDB Stonetalon = new FlightMasterDB("Stonetalon Mountains", 4407, new Vector3(2682.83f, 1466.45f, 233.6483f), true);
        FMListe.Add(Stonetalon);
        FlightMasterDB Thelsamar = new FlightMasterDB("Loch Modan", 1572, new Vector3(-5424.85f, -2929.87f, 347.5623f), false);
        FMListe.Add(Thelsamar);
        FlightMasterDB Theramore = new FlightMasterDB("Dustwallow Marsh", 4321, new Vector3(-3828.88f, -4517.51f, 10.66067f), true);
        FMListe.Add(Theramore);
        FlightMasterDB WesternP = new FlightMasterDB("Western Pleaguelands", 12596, new Vector3(928.3f, -1429.1f, 64.8f), false);
        FMListe.Add(WesternP);
        FlightMasterDB Westfall = new FlightMasterDB("Westfall", 523, new Vector3(-10628.8f, 1037.79f, 34.43174f), false);
        FMListe.Add(Westfall);
        FlightMasterDB EasternP = new FlightMasterDB("Eastern Pleaguelands", 12617, new Vector3(2269.9f, -5345.4f, 86.9f), false);
        FMListe.Add(EasternP);
        FlightMasterDB SearingGorge = new FlightMasterDB("Searing Gorge", 2941, new Vector3(-6559.1f, -1169.4f, 309.8f), false);
        FMListe.Add(SearingGorge);
        FlightMasterDB BurningSteppes = new FlightMasterDB("Burning Steppes", 2299, new Vector3(-8365.1f, -2758.5f, 185.6f), false);
        FMListe.Add(BurningSteppes);
        FlightMasterDB BlastedLands = new FlightMasterDB("Blasted Lands", 8609, new Vector3(-11110.2f, -3437.1f, 79.2f), false);
        FMListe.Add(BlastedLands);
        FlightMasterDB Azshara = new FlightMasterDB("Azshara", 12577, new Vector3(2718.2f, -3880.8f, 101.4f), true);
        FMListe.Add(Azshara);
        FlightMasterDB Felwood = new FlightMasterDB("Felwood", 12578, new Vector3(6204.2f, -1951.4f, 571.3f), true);
        FMListe.Add(Felwood);
        FlightMasterDB Winterspring = new FlightMasterDB("Winterspring", 11138, new Vector3(6800.5f, -4742.4f, 701.5f), true);
        FMListe.Add(Winterspring);
        FlightMasterDB UngoroCreater = new FlightMasterDB("Ungoro Crater", 10583, new Vector3(-6110.5f, -1140.4f, -186.9f), true);
        FMListe.Add(UngoroCreater);
        FlightMasterDB Silithus = new FlightMasterDB("Silithus", 15177, new Vector3(-6758.6f, 775.6f, 89f), true);
        FMListe.Add(Silithus);
        FlightMasterDB Desolace = new FlightMasterDB("Desolace", 6706, new Vector3(136f, 1326f, 193f), true);
        FMListe.Add(Desolace);
        return FMListe;
    }

    public static bool validFlight(String from, String to)
    {
        bool von = false;
        bool zu = false;
        List&lt;FlightMasterDB&gt; FMLvf = fillDB();

        for(int i = 0; i &lt; FMLvf.Count; i++)
        {
            if(FMLvf[i].name.Contains(from))
            {
                von = FMLvf[i].continent;
            }
            if(FMLvf[i].name.Contains(to))
            {
                zu = FMLvf[i].continent;
            }
        }
        return von != zu;
    }

    public static bool discoveredTaxiNodes(String from, String to)
    {

        List&lt;FlightMasterDB&gt; FMLDTN = fillDB();

        foreach(var ele in FMLDTN)
        {
            if(ele.name.Contains(from))
            {
                if(!ele.alreadyDiscovered)
                {
                    Logging.Write("[FNV_Quester]: Taxi node from " + ele.name + " has not been discovered so far. Abort taking taxi.");
                    return false;
                }
            }
        }

        foreach(var ele in FMLDTN)
        {
            if(ele.name.Contains(to))
            {
                if(!ele.alreadyDiscovered)
                {
                    Logging.Write("[FNV_Quester]: Taxi node to " + ele.name + " has not been discovered so far. Abort taking taxi.");
                    return false;
                }
            }
        }
        return true;
    }

    public static void takeTaxi(String from, String to)
    {

        List&lt;FlightMasterDB&gt; FMLtt = fillDB();
        bool canProceed = true;
        try
        {
            FMLtt = fillDB();
        }
        catch(Exception e)
        {
            Logging.Write("Error: " + e);
        }


        Vector3 myPos = ObjectManager.Me.Position;

        if(Usefuls.MapZoneName.Contains(to))
        {
            canProceed = false;
            Logging.Write("[FNV_Quester]: Already in the zone we are going to travel to. Skip flying");
        }

        if(canProceed)
        {

            if(validFlight(from, to))
            {
                Logging.Write("[FNV_Quester]: Unable to fly between Kalimdor and Eastern Kingdoms");
            }

            var position = new Vector3();
            int npcEntryId = 0;

            for(int i = 0; i &lt; FMLtt.Count; i++)
            {
                if(FMLtt[i].name.Contains(from))
                {
                    position = FMLtt[i].position;
                    npcEntryId = FMLtt[i].NPCId;
                    FMLtt[i].name.Contains(from);
                }
            }


            if(!ObjectManager.Me.IsOnTaxi)
            {
                wManager.wManagerSetting.ClearBlacklistOfCurrentProductSession();

                while(!wManager.Wow.Bot.Tasks.GoToTask.ToPositionAndIntecractWithNpc(position, npcEntryId, -1, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore) &amp;&amp; !Fight.InFight)
                {
                    wManager.wManagerSetting.ClearBlacklistOfCurrentProductSession();
                    wManager.Wow.Bot.Tasks.GoToTask.ToPositionAndIntecractWithNpc(position, npcEntryId, -1, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore);
                }
                if(wManager.Wow.Bot.Tasks.GoToTask.ToPositionAndIntecractWithNpc(position, npcEntryId, -1, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore))
                {
                    while(!ObjectManager.Me.IsOnTaxi)
                    {
                        Usefuls.SelectGossipOption(GossipOptionsType.taxi);

                        int node = Lua.LuaDoString&lt;int&gt;("for i=0,30 do if string.find(TaxiNodeName(i),'" + to + "') then return i end end");
                        Lua.LuaDoString("TakeTaxiNode(" + node + ")");
                        Logging.Write("[FNV_Quester]: Taking Taxi from " + from + " to " + to);
                        Thread.Sleep(Usefuls.Latency + 2500);
                    }
                }
            }
            waitFlying();
            return;
        }
    }

    public static void discoverTaxi(String discoverName)
    {
        FNVQuesterFlightMaster.Load();
        List&lt;FlightMasterDB&gt; FMLdt = fillDB();

        var position = new Vector3();
        int npcEntryId = 0;
        int j = 0;
        bool alreadyDiscoveredFlightMaster = false;

        for(int i = 0; i &lt; FMLdt.Count; i++)
        {
            if(FMLdt[i].name.Contains(discoverName))
            {
                if(FMLdt[i].alreadyDiscovered)
                {
                    Logging.Write("[FNV_Quester]: Flight Master of " + FMLdt[i].name + " already discovered. Skip it.");
                    alreadyDiscoveredFlightMaster = true;
                    break;
                }

                position = FMLdt[i].position;
                npcEntryId = FMLdt[i].NPCId;
                j = i;
            }
        }

        if(!alreadyDiscoveredFlightMaster)
        {

            if(!ObjectManager.Me.IsOnTaxi)
            {
                wManager.wManagerSetting.ClearBlacklistOfCurrentProductSession();

                while(!wManager.Wow.Bot.Tasks.GoToTask.ToPositionAndIntecractWithNpc(position, npcEntryId, -1, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore))
                {
                   // wManager.Wow.Helpers.Conditions.ForceIgnoreIsAttacked = true;
                    wManager.wManagerSetting.ClearBlacklistOfCurrentProductSession();
                    wManager.Wow.Bot.Tasks.GoToTask.ToPositionAndIntecractWithNpc(position, npcEntryId, -1, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore);
                }
                if(wManager.Wow.Bot.Tasks.GoToTask.ToPositionAndIntecractWithNpc(position, npcEntryId, -1, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore))
                {
                    Usefuls.SelectGossipOption(GossipOptionsType.taxi);
                    Thread.Sleep(Usefuls.Latency + 250);
                    //wManager.Wow.Helpers.Conditions.ForceIgnoreIsAttacked = true;
                }
            }
            Logging.Write("[FNV_Quester]: Flight Master " + FMLdt[j].name + " discovered");
            FMLdt[j].alreadyDiscovered = true;
            FNVQuesterFlightMaster.flightMasterSaveChanges(FMLdt[j]);
            //wManager.Wow.Helpers.Conditions.ForceIgnoreIsAttacked = false;
            
        }
        timer = 0;
        return;
    }

    }

    public class FlightMasterDB
    {
        public FlightMasterDB(String name, int NPCId, Vector3 position, bool continent, bool alreadyDiscovered)
        {
            this.name = name;
            this.NPCId = NPCId;
            this.position = position;
            this.continent = continent;
            this.alreadyDiscovered = alreadyDiscovered;
        }

        public FlightMasterDB(String name, int NPCId, Vector3 position, bool continent)
        {
            this.name = name;
            this.NPCId = NPCId;
            this.position = position;
            this.continent = continent;
            
        }

        public int NPCId { get; set; }
        public Vector3 position { get; set; }
        public String name { get; set; }
        public bool continent { get; set; }
        public bool alreadyDiscovered { get; set; }

    }

//Tram
public class Tram
{

    //Stormwind to Ironforge
    static Vector3 positionTramInIronforge = new Vector3(4.58065, 28.2097, 6.90526);
    static Vector3 positionTramInStormwind = new Vector3(4.581913, 2511.531, 7.091796);

    static Vector3 positionWaitTramIronforge = new Vector3(19.1, 28, -4.3);
    static Vector3 positionOnTramIronforge = new Vector3(4.8, 28.1, -4.3);

    static Vector3 positionWaitTramStormwind = new Vector3(15.3, 2510.4, -4.3);
    static Vector3 positionOnTramStormwind = new Vector3(4.3, 2510.6, -4.3);

    static Vector3 enterStormwindInside = new Vector3(67, 2490.7, -4.3);
    static Vector3 enterIronforgeInside = new Vector3(64.5, 10.2, -4.3);

    static Vector3 enterStormwindOutside = new Vector3(-8365, 536.9, 91.8);
    static Vector3 enterIronforgeOutside = new Vector3(-4836.7, -1304.6, 501.9);

    static Vector3 leavePosIronforge = new Vector3(-10.6, 30.2, -4.3);
    static Vector3 leavePosStormwind = new Vector3(-10.6, 2510.9, -4.3);

    static Vector3 playerFellDownIronforge = new Vector3(4.5, 28, -13.9);

    static int[] tramEntryArray = new int[6] { 176080, 176082, 176083, 176084, 176085, 176081 };

    //Ironforge to Stormwind
    static Vector3 waitPosPlayerInStormwindToIronforge = new Vector3(-32.8, 2512.1, -4.3);

    //Pos where upper Tram arrives and waits in Stormwind
    static Vector3 waitPosTramSwTramStormwind = new Vector3(-45.4007, 2512.15, 6.90526);
    //Pos where player waits on upper tram in Stormwind
    static Vector3 waitPosPlayerSwTramStormwind = new Vector3(-45.20206, 2512.266, -3.562748);

    static Vector3 waitPosSwTramIronforge = new Vector3(-45.399, 30.38013, 5.877773);

    static Vector3 leavePosSwTramIronforge = new Vector3(-61.8, 30.3, -4.3);
    static Vector3 waitPlayerOnTramPosSwTramIronforge = new Vector3(-34.49804, 2511.917, -4.3);
    static Vector3 posPlayerOnTramSwToIfInIronforge = new Vector3(-20.9837, 2459.93, -4.297);

    static Vector3 playerFellDownStormwind = new Vector3(-45, 2512.6, -13.9);

    static bool isRestarted = false;
    static Process[] pname = Process.GetProcessesByName(AppDomain.CurrentDomain.FriendlyName.Remove(AppDomain.CurrentDomain.FriendlyName.Length - 4));
    static Vector3 nullVector = new Vector3(0, 0, 0);


    public static void restartTram(String from)
    {
        switch(from)
        {
            case ("Stormwind"):
                takeTramStormwind();
                break;
            case ("Ironforge"):
                takeTramIronforge();
                break;
            default:
                Logging.Write("Something failed");
                break;
        }
    }

    public static void end()
    {
        Logging.Write("[FNV_Quester]: Ending Tream");
    }



    public static void takeTramStormwind()
    {
        Logging.Write("[FNV_Quester]: Taking Tram from Stormwind to Ironforge");

        if(!Usefuls.MapZoneName.Contains("Deep"))
        {
            while(!GoToTask.ToPosition(enterStormwindOutside))
            {
                GoToTask.ToPosition(enterStormwindOutside);
                Thread.Sleep(250);
            }

            wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;
            Logging.Write("[FNV_Quester]: Disable teleport during Tram");
            wManager.Wow.Helpers.MovementManager.Face(new Vector3(-8353.4, 521.4, 91.8));

            while(!Usefuls.MapZoneName.Contains("Deep"))
            {
                wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 250);
                Thread.Sleep(robotManager.Helpful.Others.Random(25, 50));
            }

        }

        if(Usefuls.MapZoneName.Contains("Deep"))
        {
            if(!GoToTask.ToPosition(enterStormwindInside))
            {
                GoToTask.ToPosition(enterStormwindInside);
                Thread.Sleep(250);
            }
            while(!GoToTask.ToPosition(waitPosPlayerInStormwindToIronforge))
            {
                GoToTask.ToPosition(waitPosPlayerInStormwindToIronforge);
                Thread.Sleep(250);
            }

            wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;
            var tram = (WoWGameObject)null;

            try
            {
                tram = chooseTramStormwind();
            }
            catch
            {

            }


            if(tram != null &amp;&amp; ObjectManager.Me.Position.DistanceTo(tram.Position) &lt; 200 &amp;&amp; !tram.Position.Equals(nullVector))
            {
                Logging.Write("[FNV_Quester]: Bad circle, restart... .");
                isRestarted = true;
                takeTramStormwind();
                end();
            }

            if(!isRestarted)
            {

                if(tram != null &amp;&amp; tram.Position.DistanceTo(nullVector) &gt; 1)
                {
                    while(tram.Position.DistanceTo(waitPosTramSwTramStormwind) &gt;= 5 || ObjectManager.Me.Position.DistanceTo(waitPosPlayerInStormwindToIronforge) &gt;= 5)
                    {
                        Thread.Sleep(500);
                    }

                    if(tram.Position.DistanceTo(waitPosTramSwTramStormwind) &lt; 5)
                    {
                        Lua.LuaDoString("ClearTarget()");
                        wManager.Wow.Helpers.MovementManager.Face(waitPosPlayerSwTramStormwind);

                        while(ObjectManager.Me.Position.DistanceTo(waitPosPlayerSwTramStormwind) &gt; 1)
                        {
                            MovementManager.MoveTo(waitPosPlayerSwTramStormwind);
                            Thread.Sleep(1000);

                            if(ObjectManager.Me.Position.DistanceTo(playerFellDownStormwind) &lt; 4)
                            {
                                Logging.Write("[FNV_Quester]: Fell down, while trying to take tram. Restart...");
                                restartTram("Stormwind");
                            }
                        }

                        GoToTask.ToPosition(waitPosPlayerSwTramStormwind);
                    }

                    while(tram.Position.DistanceTo(waitPosSwTramIronforge) &gt; 5)
                    {
                        Thread.Sleep(3000);
                    }

                    if(ObjectManager.Me.HaveBuff("Stealth"))
                    {
                        Lua.LuaDoString("CastSpellByName('Stealth')");
                    }

                    wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 1500);

                    if(ObjectManager.Me.Position.DistanceTo(posPlayerOnTramSwToIfInIronforge) &lt; 5)
                    {
                        MovementManager.MoveTo(leavePosSwTramIronforge);
                        Thread.Sleep(1000);

                        while(ObjectManager.Me.Position.DistanceTo(leavePosSwTramIronforge) &gt; 4)
                        {
                            MovementManager.MoveTo(leavePosSwTramIronforge);
                            Thread.Sleep(1000);
                        }
                    }

                    if(Usefuls.MapZoneName.Contains("Deep"))
                    {
                        if(!GoToTask.ToPosition(enterIronforgeInside))
                        {
                            GoToTask.ToPosition(enterIronforgeInside);
                            Thread.Sleep(250);
                        }
                    }

                    while(Usefuls.MapZoneName.Contains("Deep"))
                    {
                        wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 250);
                        Thread.Sleep(robotManager.Helpful.Others.Random(25, 50));
                    }

                    Logging.Write("[FNV_Quester]: Re enable teleport ");
                    wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = true;


                    while(!GoToTask.ToPosition(enterIronforgeOutside))
                    {
                        wManager.Wow.Helpers.MovementManager.Face(enterIronforgeOutside);
                        GoToTask.ToPosition(enterIronforgeOutside);
                        Thread.Sleep(250);
                    }

                }
                else if(Usefuls.MapZoneName.Contains("Tram") || Usefuls.MapZoneName.Contains("Stormwind"))
                {
                    Logging.Write("[FNV_Quester]: Unable to find tram, restart... .");
                    isRestarted = true;
                    restartTram("Stormwind");
                }

            }
        }

        isRestarted = false;
    }

    public static WoWGameObject chooseTramIronforge()
    {
        List&lt;WoWGameObject&gt; tramList = new List&lt;WoWGameObject&gt;();
        var tramTemp = (WoWGameObject)null;

        foreach(int ele in tramEntryArray)
        {
            tramTemp = null;
            try
            {
                tramTemp = ObjectManager.GetWoWGameObjectByEntry(ele).OrderBy(o =&gt; o.GetDistance).FirstOrDefault();
            }
            catch
            {
            }

            if(tramTemp != null &amp;&amp; tramTemp.IsValid &amp;&amp; !tramTemp.Equals((WoWGameObject)null) &amp;&amp; tramTemp.ToString().Contains("Subway"))
            {
                tramList.Add(tramTemp);
            }
            else
            {

            }
        }

        float distance = 0;
        float entryDistance = 0;
        foreach(var ele in tramList)
        {
            if(ObjectManager.Me.Position.DistanceTo(ele.Position) &gt;= distance)
            {
                distance = ObjectManager.Me.Position.DistanceTo(ele.Position);
                entryDistance = ele.Entry;
            }
        }

        foreach(var ele in tramList)
        {
            if(ele.Entry == entryDistance &amp;&amp; ele != null &amp;&amp; !ele.Position.Equals(nullVector))
            {
                if(ObjectManager.Me.Position.DistanceTo(ele.Position) &lt; 200)
                {
                    Logging.Write("[FNV_Quester]: Bad circle, restart... .");
                    restartTram("Ironforge");
                }

                Logging.Write("[FNV_Quester]: Choosing tram id: " + ele.Entry + " with a current position of " + ele.Position);
                return ele;
            }
        }
        return null;
    }

    public static WoWGameObject chooseTramStormwind()
    {
        List&lt;WoWGameObject&gt; tramList = new List&lt;WoWGameObject&gt;();
        var tramTemp = (WoWGameObject)null;

        foreach(int ele in tramEntryArray)
        {
            tramTemp = null;
            try
            {
                tramTemp = ObjectManager.GetWoWGameObjectByEntry(ele).OrderBy(o =&gt; o.GetDistance).FirstOrDefault();
            }
            catch
            {
            }

            if(tramTemp != null &amp;&amp; tramTemp.IsValid &amp;&amp; !tramTemp.Equals((WoWGameObject)null) &amp;&amp; tramTemp.ToString().Contains("Subway"))
            {
                tramList.Add(tramTemp);
            }
            else
            {

            }
        }

        float distance = 99999;
        float entryDistance = 0;
        foreach(var ele in tramList)
        {
            if(ObjectManager.Me.Position.DistanceTo(ele.Position) &lt;= distance)
            {
                distance = ObjectManager.Me.Position.DistanceTo(ele.Position);
                entryDistance = ele.Entry;
            }
        }

        foreach(var ele in tramList)
        {
            if(ele.Entry == entryDistance &amp;&amp; ele != null &amp;&amp; !ele.Position.Equals(nullVector))
            {
                if(ObjectManager.Me.Position.DistanceTo(ele.Position) &lt; 200)
                {
                    Logging.Write("[FNV_Quester]: Bad circle, restart... .");
                    restartTram("Stormwind");
                }

                Logging.Write("[FNV_Quester]: Choosing tram id: " + ele.Entry + " with a current position of " + ele.Position);
                return ele;
            }
        }

        return null;
    }

    public static void takeTramIronforge()
    {
        Logging.Write("[FNV_Quester]: Taking Tram from Ironforge to Stormwind");

        if(!Usefuls.MapZoneName.Contains("Deep"))
        {
            while(!GoToTask.ToPosition(enterIronforgeOutside))
            {
                GoToTask.ToPosition(enterIronforgeOutside);
                Thread.Sleep(250);
            }

            wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;
            Logging.Write("[FNV_Quester]: Disable teleport during Tram");
            wManager.Wow.Helpers.MovementManager.Face(new Vector3(-4839.4, -1320.9, 501.9));

            while(!Usefuls.MapZoneName.Contains("Deep"))
            {
                wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 250);
                Thread.Sleep(robotManager.Helpful.Others.Random(25, 50));
            }
        }

        if(Usefuls.MapZoneName.Contains("Deep"))
        {
            if(!GoToTask.ToPosition(enterIronforgeInside))
            {
                GoToTask.ToPosition(enterIronforgeInside);
                Thread.Sleep(250);
            }

            var pathEins = new List&lt;Vector3&gt;() {
new Vector3(42.56478f, 10.32987f, -4.29664f, "None"),
new Vector3(36.11083f, 10.30502f, -4.29664f, "None"),
new Vector3(29.11088f, 10.27806f, -4.29664f, "None"),
new Vector3(25.49891f, 10.26415f, -4.29664f, "None"),
new Vector3(20.57794f, 10.2452f, -4.29664f, "None"),
new Vector3(16.61328f, 11.97739f, -4.29664f, "None"),
new Vector3(17.03823f, 18.79025f, -4.29664f, "None"),
new Vector3(19.41723f, 25.35655f, -4.29664f, "None"),
};


                        while(ObjectManager.Me.Position.DistanceTo2D(pathEins.Last&lt;Vector3&gt;()) &gt; 5)
                        {
                            MovementManager.Go(pathEins); // or MovementManager.GoLoop(path);
                        }

            while(!GoToTask.ToPosition(positionWaitTramIronforge))
            {
                GoToTask.ToPosition(positionWaitTramIronforge);
                Thread.Sleep(250);
            }

            wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;

            var tram = (WoWGameObject)null;

            try
            {
                tram = chooseTramIronforge();
            }
            catch
            {

            }

            if(ObjectManager.Me.Position.DistanceTo(tram.Position) &lt; 200 &amp;&amp; tram != null &amp;&amp; !tram.Position.Equals(nullVector))
            {
                Logging.Write("[FNV_Quester]: Bad circle, restart... .");
                isRestarted = true;
                restartTram("Ironforge");
                end();
            }

            if(!isRestarted)
            {

                if(tram != null &amp;&amp; tram.Position.DistanceTo(nullVector) &gt; 1)
                {


                    while(tram.Position.DistanceTo(positionTramInIronforge) &gt;= 5 &amp;&amp; Usefuls.MapZoneName.Contains("Deep") &amp;&amp; !tram.Position.Equals(nullVector))
                    {
                        Thread.Sleep(1000);
                    }


                    if(tram.Position.DistanceTo(positionTramInIronforge) &lt; 5 &amp;&amp; Usefuls.MapZoneName.Contains("Deep"))
                    {
                        Lua.LuaDoString("ClearTarget()");
                        wManager.Wow.Helpers.MovementManager.Face(positionOnTramIronforge);

                        while(ObjectManager.Me.Position.DistanceTo(positionOnTramIronforge) &gt; 2)
                        {
                            MovementManager.MoveTo(positionOnTramIronforge);
                            Thread.Sleep(1000);

                            if(ObjectManager.Me.Position.DistanceTo(playerFellDownIronforge) &lt; 4)
                            {
                                Logging.Write("[FNV_Quester]: Fell down, while trying to take tram. Restart");
                                restartTram("Ironforge");
                            }
                        }

                        GoToTask.ToPosition(positionOnTramIronforge);
                    }


                    while(tram.Position.DistanceTo(positionTramInStormwind) &gt; 5 &amp;&amp; Usefuls.MapZoneName.Contains("Deep"))
                    {
                        Thread.Sleep(3000);
                    }

                    if(ObjectManager.Me.Position.DistanceTo(positionOnTramStormwind) &lt; 5 &amp;&amp; Usefuls.MapZoneName.Contains("Deep"))
                    {

                        Vector3 leavingTramPos = new Vector3(-4.500117, 2510.398, -4.18221, "None");
                        Vector3 leavingTramPosZwei = new Vector3(-8.363175, 2510.536, -4.291304, "None");

                        MovementManager.MoveTo(leavingTramPos);
                        Thread.Sleep(1000);
                        MovementManager.MoveTo(leavingTramPosZwei);
                        Thread.Sleep(1000);

                        var pathZwei = new List&lt;Vector3&gt;() {
new Vector3(-8.722651f, 2521.781f, -4.296569f, "None"),
new Vector3(-8.406331f, 2528.227f, -4.296569f, "None"),
new Vector3(-5.509378f, 2534.194f, -4.296569f, "None"),
new Vector3(1.102043f, 2536.338f, -4.296569f, "None"),
new Vector3(8.024714f, 2535.66f, -4.296569f, "None"),
new Vector3(13.7771f, 2531.926f, -4.296569f, "None"),
new Vector3(15.53208f, 2525.218f, -4.296569f, "None"),
new Vector3(19.39666f, 2520.334f, -4.296569f, "None"),
new Vector3(26.3053f, 2519.244f, -4.296569f, "None"),
new Vector3(31.07252f, 2514.534f, -4.296569f, "None"),
new Vector3(32.08603f, 2507.629f, -4.296569f, "None"),
new Vector3(32.20792f, 2500.735f, -4.296569f, "None"),
new Vector3(32.69915f, 2493.784f, -4.296569f, "None"),
new Vector3(38.39471f, 2490.469f, -4.296569f, "None"),
new Vector3(45.39016f, 2490.699f, -4.296569f, "None"),
new Vector3(52.39009f, 2490.728f, -4.296569f, "None"),
new Vector3(55.99506f, 2490.741f, -4.296569f, "None"),
new Vector3(62.99502f, 2490.766f, -4.296569f, "None"),
};


                        while(ObjectManager.Me.Position.DistanceTo2D(pathZwei.Last&lt;Vector3&gt;()) &gt; 5)
                        {
                            MovementManager.Go(pathZwei); // or MovementManager.GoLoop(path);

                            if(ObjectManager.Me.Position.DistanceTo2D(pathZwei.Last&lt;Vector3&gt;()) &lt;= 5)
                                break;
                        }


                        //MovementManager.MoveTo(leavePosStormwind);
                        /*
                        while(ObjectManager.Me.Position.DistanceTo(leavePosStormwind) &gt; 4)
                        {
                            MovementManager.MoveTo(leavePosStormwind);
                            Thread.Sleep(1000);

                        } */

                    }

                    if(Usefuls.MapZoneName.Contains("Deep"))
                    {
                        if(!GoToTask.ToPosition(enterStormwindInside))
                        {
                            GoToTask.ToPosition(enterStormwindInside);
                            Thread.Sleep(250);
                        }
                    }

                    while(Usefuls.MapZoneName.Contains("Deep"))
                    {
                        wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 250);
                        Thread.Sleep(robotManager.Helpful.Others.Random(25, 50));
                    }

                    Logging.Write("Re enable teleport ");
                    wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = true;


                    while(!GoToTask.ToPosition(enterStormwindOutside))
                    {
                        wManager.Wow.Helpers.MovementManager.Face(enterStormwindOutside);
                        GoToTask.ToPosition(enterStormwindOutside);
                        Thread.Sleep(250);
                    }

                }
                else if(Usefuls.MapZoneName.Contains("Tram") || Usefuls.MapZoneName.Contains("Ironforge"))
                {
                    Logging.Write("[FNV_Quester]: Unable to find tram, restart... .");
                    isRestarted = true;
                    restartTram("Ironforge");
                }

            }
        }
        isRestarted = false;
    }

    /*
    public static void takeTramIronforge()
    {
        Logging.Write("[FNV_Quester]: Taking Tram from Ironforge to Stormwind");

        if(!Usefuls.MapZoneName.Contains("Deep"))
        {
            while(!GoToTask.ToPosition(enterIronforgeOutside))
            {
                GoToTask.ToPosition(enterIronforgeOutside);
                Thread.Sleep(250);
            }

            wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;
            Logging.Write("[FNV_Quester]: Disable teleport during Tram");
            wManager.Wow.Helpers.MovementManager.Face(new Vector3(-4839.4, -1320.9, 501.9));

            while(!Usefuls.MapZoneName.Contains("Deep"))
            {
                wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 250);
                Thread.Sleep(robotManager.Helpful.Others.Random(25, 50));
            }
        }

        if(Usefuls.MapZoneName.Contains("Deep"))
        {
            if(!GoToTask.ToPosition(enterIronforgeInside))
            {
                GoToTask.ToPosition(enterIronforgeInside);
                Thread.Sleep(250);
            }

            GoToTask.ToPosition(new Vector3(26.31003, 9.936551, -4.29664));
            Thread.Sleep(250);
            GoToTask.ToPosition(new Vector3(17.09965, 12.71437, -4.29664));
            Thread.Sleep(250);
            GoToTask.ToPosition(new Vector3(18.14983, 22.89955, -4.29664));
            Thread.Sleep(250);

            while(!GoToTask.ToPosition(positionWaitTramIronforge))
            {
                GoToTask.ToPosition(positionWaitTramIronforge);
                Thread.Sleep(250);
            }

            wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;

            var tram = (WoWGameObject)null;

            try
            {
                tram = chooseTramIronforge();
            }
            catch
            {

            }

            if(ObjectManager.Me.Position.DistanceTo(tram.Position) &lt; 200 &amp;&amp; tram != null &amp;&amp; !tram.Position.Equals(nullVector))
            {
                Logging.Write("[FNV_Quester]: Bad circle, restart... .");
                isRestarted = true;
                restartTram("Ironforge");
                end();
            }

            if(!isRestarted)
            {

                if(tram != null &amp;&amp; tram.Position.DistanceTo(nullVector) &gt; 1)
                {


                    while(tram.Position.DistanceTo(positionTramInIronforge) &gt;= 5 &amp;&amp; Usefuls.MapZoneName.Contains("Deep") &amp;&amp; !tram.Position.Equals(nullVector))
                    {
                        Thread.Sleep(1000);
                    }


                    if(tram.Position.DistanceTo(positionTramInIronforge) &lt; 5 &amp;&amp; Usefuls.MapZoneName.Contains("Deep"))
                    {
                        Lua.LuaDoString("ClearTarget()");
                        wManager.Wow.Helpers.MovementManager.Face(positionOnTramIronforge);

                        while(ObjectManager.Me.Position.DistanceTo(positionOnTramIronforge) &gt; 2)
                        {
                            wManager.Wow.Helpers.MovementManager.Face(positionOnTramIronforge);
                            wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 125);
                            Thread.Sleep(robotManager.Helpful.Others.Random(10, 25));

                            if(ObjectManager.Me.Position.DistanceTo(playerFellDownIronforge) &lt; 4)
                            {
                                Logging.Write("[FNV_Quester]: Fell down, while trying to take tram. Restart");
                                restartTram("Ironforge");
                            }
                        }

                        GoToTask.ToPosition(positionOnTramIronforge);
                    }


                    while(tram.Position.DistanceTo(positionTramInStormwind) &gt; 5 &amp;&amp; Usefuls.MapZoneName.Contains("Deep"))
                    {
                        Thread.Sleep(3000);
                    }

                    if(ObjectManager.Me.Position.DistanceTo(positionOnTramStormwind) &lt; 5 &amp;&amp; Usefuls.MapZoneName.Contains("Deep"))
                    {

                        wManager.Wow.Helpers.Move.StrafeLeft(Move.MoveAction.PressKey, 350);

                        while(ObjectManager.Me.Position.DistanceTo(leavePosStormwind) &gt; 4)
                        {
                            wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 125);
                            Thread.Sleep(robotManager.Helpful.Others.Random(10, 25));

                        }

                    }

                    if(Usefuls.MapZoneName.Contains("Deep"))
                    {
                        if(!GoToTask.ToPosition(enterStormwindInside))
                        {
                            GoToTask.ToPosition(enterStormwindInside);
                            Thread.Sleep(250);
                        }
                    }

                    while(Usefuls.MapZoneName.Contains("Deep"))
                    {
                        wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 250);
                        Thread.Sleep(robotManager.Helpful.Others.Random(25, 50));
                    }

                    Logging.Write("Re enable teleport ");
                    wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = true;


                    while(!GoToTask.ToPosition(enterStormwindOutside))
                    {
                        wManager.Wow.Helpers.MovementManager.Face(enterStormwindOutside);
                        GoToTask.ToPosition(enterStormwindOutside);
                        Thread.Sleep(250);
                    }

                }
                else if(Usefuls.MapZoneName.Contains("Tram") || Usefuls.MapZoneName.Contains("Ironforge"))
                {
                    Logging.Write("[FNV_Quester]: Unable to find tram, restart... .");
                    isRestarted = true;
                    restartTram("Ironforge");
                }

            }
        }
        isRestarted = false;
    }
    */
}

//Additional functions for quests
public class Quests
{
    public static void abandon(string questName)
    {
        wManager.Wow.Helpers.Lua.LuaDoString("local name = '" + questName + "' for i=1,GetNumQuestLogEntries() do local questTitle, level, questTag, suggestedGroup, isHeader, isCollapsed, isComplete = GetQuestLogTitle(i) if string.find(questTitle, name) then SelectQuestLogEntry(i) SetAbandonQuest() AbandonQuest() end end");

    }

    public static bool hasFailed(string questName)
    {
        int temp = 0;
        temp = wManager.Wow.Helpers.Lua.LuaDoString&lt;int&gt;("local name = '" + questName + "'  for i=1,GetNumQuestLogEntries() do local questTitle, level, questTag, suggestedGroup, isHeader, isCollapsed, isComplete = GetQuestLogTitle(i) if string.find(questTitle, name) then SelectQuestLogEntry(i) local questTimer = GetQuestLogTimeLeft() return questTimer end end");

        if(temp &gt; 8)
        {
            return false;
        }
        else
        {
            return true;
        }
    }

    public static bool isComplete(string questName)
    {
        int temp;
        temp = wManager.Wow.Helpers.Lua.LuaDoString&lt;int&gt;("local name = '" + questName + "'  for i=1,GetNumQuestLogEntries() do local questTitle, level, questTag, isHeader, isCollapsed, isComplete = GetQuestLogTitle(i) if string.find(questTitle, name) then local questTitleZ, levelZ, questTagZ, isHeaderZ, isCollapsedZ, isCompleteZ = GetQuestLogTitle(i) return isCompleteZ end end");

        if(temp == 1)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    public static bool isFailed(string questName)
    {
        int temp;
        temp = wManager.Wow.Helpers.Lua.LuaDoString&lt;int&gt;("local name = '" + questName + "'  for i=1,GetNumQuestLogEntries() do local questTitle, level, questTag, isHeader, isCollapsed, isComplete = GetQuestLogTitle(i) if string.find(questTitle, name) then local questTitleZ, levelZ, questTagZ, isHeaderZ, isCollapsedZ, isCompleteZ = GetQuestLogTitle(i) return isCompleteZ end end");

        if(temp == -1)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
}


public class ProgressSettings : Settings
{
    public static bool inProgress = false;
        public static void Initialize()
        {
            ProgressSettings.Load();
        }

        public static void Dispose()
        {
            ProgressSettings.CurrentSettings.Save();
            //isLaunched = false;
        }

        public void Settings()
        {
            ProgressSettings.Load();
            ProgressSettings.CurrentSettings.ToForm();
            ProgressSettings.CurrentSettings.Save();
        }

    public ProgressSettings()
    {
        this.launcher = 2;
        this.dwarfStart = 1 + 1;
        this.humanStart = 1 + 1;
        this.nightelfStart = 1 + 1;
        this.dwarfHunter = 1 + 1;
        this.nightelfHunter = 1 + 1;
        this.nightelfDruid = 1 + 1;
        this.warlock = 1 + 1;
        this.kharanos = 1 + 1;
        this.elwynn = 1 + 1;
        this.westfallEins = 1 + 1;
        this.lochModanEins = 1 + 1;
        this.darkshoreEins = 10 + 1;
        this.westfallZwei = 1 + 1;
        this.lochModanZwei = 1 + 1;
        this.darkshoreZwei = 6 + 1;
        this.westfallDrei = 1 + 1;
        this.redridge = 1 + 1;
        this.duskwoodEins = 1 + 1;
        this.stonetalon = 14 + 1;
        this.darkshoreDrei = 1 + 1;
        this.duskwoodZwei = 1 + 1;
        this.wetlandsEins = 1 + 1;
        this.ashenvaleEins = 7 + 1;
        this.wetlandsZwei = 1 + 1;
        this.duskwoodDrei = 2 + 1;
        this.ashenvaleZwei = 7 + 1;
        this.duskwoodVier = 2 + 1;
        this.ashenvaleDrei = 6 + 1;
        this.thousandNeedles = 7 + 1;
        this.desolaceEins = 7 + 1;
        this.hillsbradEins = 2 + 1;
        this.stranglethornEins = 2 + 1;
        this.stranglethornZwei = 2 + 1;
        this.hillsbradZwei = 2 + 1;
        this.arathiEins = 2 + 1;
        this.stranglethornDrei = 2 + 1;
        this.dustwallowEins = 10 + 1;
        this.desolaceZwei = 9 + 1;
        this.swampOfSorrowsEins = 2 + 1;
        this.stranglethornVier = 2 + 1;
        this.badlandsEins = 2 + 1;
        this.alteracMountain = 2 + 1;
        this.badlandsZwei = 2 + 1;
        this.tanarisEins = 7 + 1;
        this.stranglethornFünf  = 2 + 1;
        this.hinterlandsEins = 2 + 1;
        this.feralasEins = 7 + 1;
        this.hinterlandsZwei = 2 + 1;

                //48+

        this.hinterlandsDrei = 2 + 1;
        this.blastedLandsEins = 2 + 1;
        this.blastedLandsZwei = 2 + 1;
        this.blastedLandsDrei = 2 + 1;
        this.burningSteppesEins = 2 + 1;
        this.burningSteppesZwei = 2 + 1;
        this.burningSteppesDrei = 2 + 1;
        this.easternPleaguelandsEins = 2 + 1;
        this.easternPleaguelandsZwei = 2 + 1;
        this.easternPleaguelandsDrei = 2 + 1;
        this.searingGorgeEins = 2 + 1;
        this.searingGorgeZwei = 2 + 1;
        this.searingGorgeDrei = 2 + 1;
        this.swampOfSorrowsZwei = 2 + 1;
        this.westernPleaguelandsEins = 2 + 1;
        this.westernPleaguelandsZwei = 2 + 1;
        this.westernPleaguelandsDrei = 2 + 1;

        //48+ Kalimdor

        this.azsharaEins = 7 + 1;
        this.azsharaZwei = 7 + 1;
        this.azsharaDrei = 7 + 1;
        this.felwoodEins = 7 + 1;
        this.felwoodZwei = 7 + 1;
        this.felwoodDrei = 7 + 1;
        this.silithusEins = 7 + 1;
        this.silithusZwei = 7 + 1;
        this.silithusDrei = 7 + 1;
        this.feralasZwei = 7 + 1;
        this.feralasDrei = 7 + 1;
        this.feralasVier = 7 + 1;
        this.tanarisZwei = 7 + 1;
        this.tanarisDrei = 7 + 1;
        this.ungoroEins = 7 + 1;
        this.ungoroZwei = 7 + 1;
        this.ungoroDrei = 7 + 1;
        this.winterspringEins = 7 + 1; 
        this.winterspringZwei = 7 + 1;
        this.winterspringDrei = 7 + 1;
        this.winterspringVier = 7 + 1;
    }
    

      public static ProgressSettings CurrentSettings { get; set; }

        public bool Save()
        {
            try
            {
                return Save(AdviserFilePathAndName("FNV_Progress", ObjectManager.Me.Name + "." + Usefuls.RealmName));
            }
            catch(Exception e)
            {
                Logging.WriteDebug("FNV_Progress =&gt; Save(): " + e);
                return false;
            }
        }

        public static bool Load()
        {
            try
            {
                if(File.Exists(AdviserFilePathAndName("FNV_Progress", ObjectManager.Me.Name + "." + Usefuls.RealmName)))
                {
                    CurrentSettings = Load&lt;ProgressSettings&gt;(AdviserFilePathAndName("FNV_Progress", ObjectManager.Me.Name + "." + Usefuls.RealmName));
                    return true;
                }

                ProgressSettings.CurrentSettings = new ProgressSettings();
            }
            catch(Exception e)
            {
                Logging.WriteDebug("FNV_Progress =&gt; Load(): " + e);
            }
            return false;
        }

    public static bool ResetCurrentCharactersProgressSaver()
    {
        try
        {
            if(File.Exists(AdviserFilePathAndName("FNV_Progress", ObjectManager.Me.Name + "." + Usefuls.RealmName)))
            {
                File.Delete(AdviserFilePathAndName("FNV_Progress", ObjectManager.Me.Name + "." + Usefuls.RealmName));
                ProgressSettings.CurrentSettings = new ProgressSettings();
                Logging.Write("[FNV_Quester]: FNV_Progress file of " + ObjectManager.Me.Name + " on server " + Usefuls.RealmName + " successfully deleted");
                return true;
            }
            else
            {
                Logging.Write("[FNV_Quester]: No FNV_Progress file found for " + ObjectManager.Me.Name + " on server " + Usefuls.RealmName);
                return false;
            }
        }
        catch(Exception e)
        {
            Logging.WriteDebug("FNV_Progress =&gt; Load(): " + e);
        }
         return false;
    }

        public int launcher { get; set; }
        public int dwarfStart { get; set; }
        public int dwarfHunter { get; set; }
        public int nightelfHunter { get; set; }
        public int nightelfDruid { get; set; }
        public int warlock { get; set; }
        public int nightelfStart { get; set; }
        public int humanStart { get; set; }
        public int kharanos { get; set; }
        public int elwynn { get; set; }
        public int westfallEins { get; set; }
        public int lochModanEins { get; set; }
        public int darkshoreEins { get; set; }
        public int westfallZwei { get; set; }
        public int lochModanZwei { get; set; }
        public int darkshoreZwei { get; set; }
        public int westfallDrei { get; set; }
        public int redridge { get; set; }
        public int duskwoodEins { get; set; }
        public int darkshoreDrei { get; set; }
        public int stonetalon { get; set; }
        public int duskwoodZwei { get; set; }
        public int wetlandsEins { get; set; }
        public int ashenvaleEins { get; set; }
        public int wetlandsZwei { get; set; }
        public int duskwoodDrei { get; set; }
        public int ashenvaleZwei { get; set; }
        public int duskwoodVier { get; set; }
        public int ashenvaleDrei { get; set; }
        public int thousandNeedles { get; set; }
        public int desolaceEins { get; set; }
        public int hillsbradEins { get; set; }
        public int stranglethornEins { get; set; }
        public int stranglethornZwei{ get; set; }
        public int hillsbradZwei { get; set; }
        public int arathiEins { get; set; }
        public int stranglethornDrei { get; set; }
        public int dustwallowEins { get; set; }
        public int desolaceZwei { get; set; }
        public int badlandsEins { get; set; }
        public int swampOfSorrowsEins { get; set; }
        public int stranglethornVier { get; set; }
        public int alteracMountain { get; set; }
        public int badlandsZwei { get; set; }
        public int tanarisEins { get; set; }
        public int stranglethornFünf { get; set; }
        public int hinterlandsEins { get; set; }
        public int feralasEins { get; set; }
        public int hinterlandsZwei { get; set; }

        //48+ Eastern Kingdoms
        public int hinterlandsDrei { get; set; }
        public int blastedLandsEins { get; set; }
        public int blastedLandsZwei { get; set; }
        public int blastedLandsDrei { get; set; }
        public int burningSteppesEins { get; set; }
        public int burningSteppesZwei { get; set; }
        public int burningSteppesDrei { get; set; }
        public int easternPleaguelandsEins { get; set; }
        public int easternPleaguelandsZwei { get; set; }
        public int easternPleaguelandsDrei { get; set; }
        public int searingGorgeEins { get; set; }
        public int searingGorgeZwei { get; set; }
        public int searingGorgeDrei { get; set; }
        public int swampOfSorrowsZwei { get; set; }
        public int westernPleaguelandsEins { get; set; }
        public int westernPleaguelandsZwei { get; set; }
        public int westernPleaguelandsDrei { get; set; }

        //48+ Kalimdor

        public int azsharaEins { get; set; }
        public int azsharaZwei { get; set; }
        public int azsharaDrei { get; set; }
        public int felwoodEins { get; set; }
        public int felwoodZwei { get; set; }
        public int felwoodDrei { get; set; }
        public int silithusEins { get; set; }
        public int silithusZwei { get; set; }
        public int silithusDrei { get; set; }
        public int feralasZwei { get; set; }
        public int feralasDrei { get; set; }
        public int feralasVier { get; set; }
        public int tanarisZwei { get; set; }
        public int tanarisDrei { get; set; }
        public int ungoroEins { get; set; }
        public int ungoroZwei { get; set; }
        public int ungoroDrei { get; set; }
        public int winterspringEins { get; set; }
        public int winterspringZwei { get; set; }
        public int winterspringDrei { get; set; }
        public int winterspringVier { get; set; }





}


/*
    //Settings   
    public class QuesterSettings
    {
        private static bool isLaunched;

        public static void Initialize()
        {
            isLaunched = true;
            FNVSettings.Load();

            while(isLaunched &amp; Products.IsStarted)
            {
                Thread.Sleep(500);
                Dispose();
            }
        }

        public static void Dispose()
        {
            FNVSettings.CurrentSettings.Save();
            //isLaunched = false;
        }

        public void Settings()
        {
            FNVSettings.Load();
            FNVSettings.CurrentSettings.ToForm();
            FNVSettings.CurrentSettings.Save();
        }
    }

    */

    [Serializable]
    public class FNVSettings : Settings
    {

        public static bool inProgress = false;
        public static void Initialize()
        {
            FNVSettings.Load();
        }

        public static void Dispose()
        {
            FNVSettings.CurrentSettings.Save();
            //isLaunched = false;
        }

        public void Settings()
        {
            FNVSettings.Load();
            FNVSettings.CurrentSettings.ToForm();
            FNVSettings.CurrentSettings.Save();
        }

        public FNVSettings()
        {
        //Completed profiles -&gt; True == completed
        this.launcher = false;
        this.dwarfStart = false;
        this.humanStart = false;
        this.nightelfStart = false;
        this.dwarfHunter = false;
        this.nightelfHunter = false;
        this.nightelfDruid = false;
        this.warlock = false;
        this.kharanos = false;
        this.elwynn = false;
        this.westfallEins = false;
        this.lochModanEins = false;
        this.darkshoreEins = false;
        this.westfallZwei = false;
        this.lochModanZwei = false;
        this.darkshoreZwei = false;
        this.westfallDrei = false;
        this.redridge = false;
        this.duskwoodEins = false;
        this.darkshoreDrei = false;
        this.stonetalon = false;
        this.duskwoodZwei = false;
        this.wetlandsEins = false;
        this.ashenvaleEins = false;
        this.wetlandsZwei = false;
        this.duskwoodDrei = false;
        this.ashenvaleZwei = false;
        this.duskwoodVier = false;
        this.ashenvaleDrei = false;
        this.thousandNeedles = false;
        this.desolaceEins = false; 
        this.hillsbradEins = false; 
        this.stranglethornEins = false;
        this.stranglethornZwei = false;
        this.hillsbradZwei = false;
        this.arathiEins = false;
        this.stranglethornDrei = false;
        this.dustwallowEins = false; 
        this.desolaceZwei = false; 
        this.swampOfSorrowsEins = false; 
        this.stranglethornVier = false; 
        this.badlandsEins = false; 
        this.alteracMountain = false;
        this.badlandsZwei = false;
        this.tanarisEins = false;
        this.stranglethornFünf  = false;
        this.hinterlandsEins = false;
        this.feralasEins = false; 
        this.hinterlandsZwei = false; 

        //48+

        this.hinterlandsDrei = false; 
        this.blastedLandsEins = false; 
        this.blastedLandsZwei = false; 
        this.blastedLandsDrei = false; 
        this.burningSteppesEins = false; 
        this.burningSteppesZwei = false; 
        this.burningSteppesDrei = false; 
        this.easternPleaguelandsEins = false; 
        this.easternPleaguelandsZwei = false; 
        this.easternPleaguelandsDrei = false; 
        this.searingGorgeEins = false; 
        this.searingGorgeZwei = false; 
        this.searingGorgeDrei = false; 
        this.swampOfSorrowsZwei = false; 
        this.westernPleaguelandsEins = false; 
        this.westernPleaguelandsZwei = false; 
        this.westernPleaguelandsDrei = false; 

        //48+ Kalimdor

        this.azsharaEins = false; 
        this.azsharaZwei = false; 
        this.azsharaDrei = false; 
        this.felwoodEins = false; 
        this.felwoodZwei = false; 
        this.felwoodDrei = false; 
        this.silithusEins = false; 
        this.silithusZwei = false; 
        this.silithusDrei = false; 
        this.feralasZwei = false; 
        this.feralasDrei = false; 
        this.feralasVier = false; 
        this.tanarisZwei = false; 
        this.tanarisDrei = false; 
        this.ungoroEins = false; 
        this.ungoroZwei = false; 
        this.ungoroDrei = false; 
        this.winterspringEins = false; 
        this.winterspringZwei = false; 
        this.winterspringDrei = false; 
        this.winterspringVier = false; 

            //FlightMaster discovered
            //Eastern Kingdoms
            this.ArathiHighlands = false;
            this.Wetlands = false;
            this.WesternPlaguelands = false;
            this.EasternPlaguelands = false;
            this.HillsbradFoothills = false;
            this.TheHinterlands = false;
            this.LochModan = false;
            this.Ironforge = false;
            this.SearingGorge = false;
            this.BurningSteppes = false;
            this.RedridgeMountains = false;
            this.Stormwind = false;
            this.Westfall = false;
            this.Duskwood = false;
            this.StranglethornValley = false;
            this.BlastedLands = false;

            //Kalimdor
            this.Teldrassil = false;
            this.Darkshore = false;
            this.Winterspring = false;
            this.Azshara = false;
            this.Ashenvale = false;
            this.StonetalonMountains = false;
            this.Desolace = false;
            this.TheBarrens = false;
            this.Tanaris = false;
            this.FeralasFeathermoon = false;
            this.FeralasThalanaar = false;
            this.UngoroCrater = false;
            this.DustwallowMarsh = false;
            this.Silithus = false;
            this.Moonglade = false;
            this.Felwood = false;

        }

    public static void flightMasterSaveChanges(FlightMasterDB needToChange)
    {

        if(needToChange.name.Contains("Arathi"))
            CurrentSettings.ArathiHighlands = true;

        if(needToChange.name.Contains("Wetlands"))
            CurrentSettings.Wetlands = true;

        if(needToChange.name.Contains("Western"))
            CurrentSettings.WesternPlaguelands = true;

        if(needToChange.name.Contains("Eastern"))
            CurrentSettings.EasternPlaguelands = true;

        if(needToChange.name.Contains("Hillsbrad"))
            CurrentSettings.HillsbradFoothills = true;

        if(needToChange.name.Contains("Hinterlands"))
            CurrentSettings.TheHinterlands = true;

        if(needToChange.name.Contains("Modan"))
            CurrentSettings.LochModan = true;

        if(needToChange.name.Contains("Ironforge"))
            CurrentSettings.Ironforge = true;

        if(needToChange.name.Contains("Searing"))
            CurrentSettings.SearingGorge = true;

        if(needToChange.name.Contains("Burning"))
            CurrentSettings.BurningSteppes = true;

        if(needToChange.name.Contains("Redridge"))
            CurrentSettings.RedridgeMountains = true;

        if(needToChange.name.Contains("Stormwind"))
            CurrentSettings.Stormwind = true;

        if(needToChange.name.Contains("Westfall"))
            CurrentSettings.Westfall = true;

        if(needToChange.name.Contains("Duskwood"))
            CurrentSettings.Duskwood = true;

        if(needToChange.name.Contains("Stranglethorn"))
            CurrentSettings.StranglethornValley = true;

        if(needToChange.name.Contains("Blasted"))
            CurrentSettings.BlastedLands = true;

        if(needToChange.name.Contains("Teldrassil"))
            CurrentSettings.Teldrassil = true;

        if(needToChange.name.Contains("Darkshore"))
            CurrentSettings.Darkshore = true;

        if(needToChange.name.Contains("Winterspring"))
            CurrentSettings.Winterspring = true;

        if(needToChange.name.Contains("Azshara"))
            CurrentSettings.Azshara = true;

        if(needToChange.name.Contains("Ashenvale"))
            CurrentSettings.Ashenvale = true;

        if(needToChange.name.Contains("Stonetalon"))
            CurrentSettings.StonetalonMountains = true;

        if(needToChange.name.Contains("Desolace"))
            CurrentSettings.Desolace = true;

        if(needToChange.name.Contains("TheBarrens"))
            CurrentSettings.TheBarrens = true;

        if(needToChange.name.Contains("Tanaris"))
            CurrentSettings.Tanaris = true;

        if(needToChange.name.Contains("TheBarrens"))
            CurrentSettings.TheBarrens = true;

        if(needToChange.name.Contains("Feathermoon"))
            CurrentSettings.FeralasFeathermoon = true;

        if(needToChange.name.Contains("Thalanaar"))
            CurrentSettings.FeralasThalanaar = true;

        if(needToChange.name.Contains("ro Crater"))
            CurrentSettings.UngoroCrater = true;

        if(needToChange.name.Contains("Dustwallow"))
            CurrentSettings.DustwallowMarsh = true;

        if(needToChange.name.Contains("Silithus"))
            CurrentSettings.Silithus = true;

        if(needToChange.name.Contains("Felwood"))
            CurrentSettings.Felwood = true;
            
            FNVSettings.CurrentSettings.Save();
            Logging.Write("[FNV_Quester]: Settings saved of Flight Master " + needToChange.name);
            return;
    }

        public static void flightMasterSaveChanges(String needToChange)
    {

        if(needToChange.Contains("Arathi"))
            CurrentSettings.ArathiHighlands = true;

        if(needToChange.Contains("Wetlands"))
            CurrentSettings.Wetlands = true;

        if(needToChange.Contains("Western"))
            CurrentSettings.WesternPlaguelands = true;

        if(needToChange.Contains("Eastern"))
            CurrentSettings.EasternPlaguelands = true;

        if(needToChange.Contains("Hillsbrad"))
            CurrentSettings.HillsbradFoothills = true;

        if(needToChange.Contains("Hinterlands"))
            CurrentSettings.TheHinterlands = true;

        if(needToChange.Contains("Modan"))
            CurrentSettings.LochModan = true;

        if(needToChange.Contains("Ironforge"))
            CurrentSettings.Ironforge = true;

        if(needToChange.Contains("Searing"))
            CurrentSettings.SearingGorge = true;

        if(needToChange.Contains("Burning"))
            CurrentSettings.BurningSteppes = true;

        if(needToChange.Contains("Redridge"))
            CurrentSettings.RedridgeMountains = true;

        if(needToChange.Contains("Stormwind"))
            CurrentSettings.Stormwind = true;

        if(needToChange.Contains("Westfall"))
            CurrentSettings.Westfall = true;

        if(needToChange.Contains("Duskwood"))
            CurrentSettings.Duskwood = true;

        if(needToChange.Contains("Stranglethorn"))
            CurrentSettings.StranglethornValley = true;

        if(needToChange.Contains("Blasted"))
            CurrentSettings.BlastedLands = true;

        if(needToChange.Contains("Teldrassil"))
            CurrentSettings.Teldrassil = true;

        if(needToChange.Contains("Darkshore"))
            CurrentSettings.Darkshore = true;

        if(needToChange.Contains("Winterspring"))
            CurrentSettings.Winterspring = true;

        if(needToChange.Contains("Azshara"))
            CurrentSettings.Azshara = true;

        if(needToChange.Contains("Ashenvale"))
            CurrentSettings.Ashenvale = true;

        if(needToChange.Contains("Stonetalon"))
            CurrentSettings.StonetalonMountains = true;

        if(needToChange.Contains("Desolace"))
            CurrentSettings.Desolace = true;

        if(needToChange.Contains("TheBarrens"))
            CurrentSettings.TheBarrens = true;

        if(needToChange.Contains("Tanaris"))
            CurrentSettings.Tanaris = true;

        if(needToChange.Contains("TheBarrens"))
            CurrentSettings.TheBarrens = true;

        if(needToChange.Contains("Feathermoon"))
            CurrentSettings.FeralasFeathermoon = true;

        if(needToChange.Contains("Thalanaar"))
            CurrentSettings.FeralasThalanaar = true;

        if(needToChange.Contains("ro Crater"))
            CurrentSettings.UngoroCrater = true;

        if(needToChange.Contains("Dustwallow"))
            CurrentSettings.DustwallowMarsh = true;

        if(needToChange.Contains("Silithus"))
            CurrentSettings.Silithus = true;

        if(needToChange.Contains("Felwood"))
            CurrentSettings.Felwood = true;
            
            FNVSettings.CurrentSettings.Save();
            Logging.Write("[FNV_Quester]: Settings saved of Flight Master " + needToChange);
            return;
    }

        public static FNVSettings CurrentSettings { get; set; }

        public bool Save()
        {
            try
            {
                return Save(AdviserFilePathAndName("FNV_Quester", ObjectManager.Me.Name + "." + Usefuls.RealmName));
            }
            catch(Exception e)
            {
                Logging.WriteDebug("FNV_Quester =&gt; Save(): " + e);
                return false;
            }
        }

        public static bool Load()
        {
            try
            {
                if(File.Exists(AdviserFilePathAndName("FNV_Quester", ObjectManager.Me.Name + "." + Usefuls.RealmName)))
                {
                    CurrentSettings = Load&lt;FNVSettings&gt;(AdviserFilePathAndName("FNV_Quester", ObjectManager.Me.Name + "." + Usefuls.RealmName));
                    return true;
                }

                FNVSettings.CurrentSettings = new FNVSettings();
            }
            catch(Exception e)
            {
                Logging.WriteDebug("FNV_Quester =&gt; Load(): " + e);
            }
            return false;
        }

        //Finished profiles -&gt; True == completed
        public bool launcher { get; set; }
        public bool dwarfStart { get; set; }
        public bool dwarfHunter { get; set; }
        public bool nightelfHunter { get; set; }
        public bool nightelfDruid { get; set; }
        public bool warlock { get; set; }
        public bool nightelfStart { get; set; }
        public bool humanStart { get; set; }
        public bool kharanos { get; set; }
        public bool elwynn { get; set; }
        public bool westfallEins { get; set; }
        public bool lochModanEins { get; set; }
        public bool darkshoreEins { get; set; }
        public bool westfallZwei { get; set; }
        public bool lochModanZwei { get; set; }
        public bool darkshoreZwei { get; set; }
        public bool westfallDrei { get; set; }
        public bool redridge { get; set; }
        public bool duskwoodEins { get; set; }
        public bool darkshoreDrei { get; set; }
        public bool stonetalon { get; set; }
        public bool duskwoodZwei { get; set; }
        public bool wetlandsEins { get; set; }
        public bool ashenvaleEins { get; set; }
        public bool wetlandsZwei { get; set; }
        public bool duskwoodDrei { get; set; }
        public bool ashenvaleZwei { get; set; }
        public bool duskwoodVier { get; set; }
        public bool ashenvaleDrei { get; set; }
        public bool thousandNeedles { get; set; }
        public bool desolaceEins { get; set; }
        public bool hillsbradEins { get; set; }
        public bool stranglethornEins { get; set; }
        public bool stranglethornZwei{ get; set; }
        public bool hillsbradZwei { get; set; }
        public bool arathiEins { get; set; }
        public bool stranglethornDrei { get; set; }
        public bool dustwallowEins { get; set; }
        public bool desolaceZwei { get; set; }
        public bool swampOfSorrowsEins { get; set; }
        public bool stranglethornVier { get; set; }
        public bool badlandsEins { get; set; }
        public bool alteracMountain { get; set; }
        public bool badlandsZwei { get; set; }
        public bool tanarisEins { get; set; }
        public bool stranglethornFünf { get; set; }
        public bool hinterlandsEins { get; set; }
        public bool feralasEins { get; set; }
        public bool hinterlandsZwei { get; set; }

                //48+ Eastern Kingdoms
        public bool hinterlandsDrei { get; set; }
        public bool blastedLandsEins { get; set; }
        public bool blastedLandsZwei { get; set; }
        public bool blastedLandsDrei { get; set; }
        public bool burningSteppesEins { get; set; }
        public bool burningSteppesZwei { get; set; }
        public bool burningSteppesDrei { get; set; }
        public bool easternPleaguelandsEins { get; set; }
        public bool easternPleaguelandsZwei { get; set; }
        public bool easternPleaguelandsDrei { get; set; }
        public bool searingGorgeEins { get; set; }
        public bool searingGorgeZwei { get; set; }
        public bool searingGorgeDrei { get; set; }
        public bool swampOfSorrowsZwei { get; set; }
        public bool westernPleaguelandsEins { get; set; }
        public bool westernPleaguelandsZwei { get; set; }
        public bool westernPleaguelandsDrei { get; set; }

        //48+ Kalimdor

        public bool azsharaEins { get; set; }
        public bool azsharaZwei { get; set; }
        public bool azsharaDrei { get; set; }
        public bool felwoodEins { get; set; }
        public bool felwoodZwei { get; set; }
        public bool felwoodDrei { get; set; }
        public bool silithusEins { get; set; }
        public bool silithusZwei { get; set; }
        public bool silithusDrei { get; set; }
        public bool feralasZwei { get; set; }
        public bool feralasDrei { get; set; }
        public bool feralasVier { get; set; }
        public bool tanarisZwei { get; set; }
        public bool tanarisDrei { get; set; }
        public bool ungoroEins { get; set; }
        public bool ungoroZwei { get; set; }
        public bool ungoroDrei { get; set; }
        public bool winterspringEins { get; set; }
        public bool winterspringZwei { get; set; }
        public bool winterspringDrei { get; set; }
        public bool winterspringVier { get; set; }



       // public bool hinterlandsZwei { get; set; }

        public bool defaultSettings { get; set; }
       // public bool dwarfStart { get; set; }
       // public bool nightelfStart { get; set; }
        //public bool humanStart { get; set; }
      //  public bool westfallEins { get; set; }
        public bool lochModan { get; set; }
        public bool auberdine { get; set; }
       // public bool westfallZwei { get; set; }
        public bool lakeshire { get; set; }
        public bool wetlands { get; set; }
        public bool ashenvale { get; set; }
       // public bool thousandNeedles { get; set; }
        public bool dustwallow { get; set; }
        public bool badlands { get; set; }
        public bool alterac { get; set; }
        public bool swampOfSorrows { get; set; }
        public bool tanaris { get; set; }
        public bool stranglethorn { get; set; }
        //public bool hinterlandsEins { get; set; }
        public bool feralas { get; set; }
       // public bool hinterlandsZwei { get; set; }

        //FlightMaster
        //Eastern Kingdoms
        public bool Stormwind { get; set; }
        public bool Westfall { get; set; }
        public bool RedridgeMountains { get; set; }
        public bool Duskwood { get; set; }
        public bool StranglethornValley { get; set; }
        public bool Ironforge { get; set; }
        public bool BurningSteppes { get; set; }
        public bool BlastedLands { get; set; }
        public bool SearingGorge { get; set; }
        public bool LochModan { get; set; }
        public bool Wetlands { get; set; }
        public bool ArathiHighlands { get; set; }
        public bool HillsbradFoothills { get; set; }
        public bool WesternPlaguelands { get; set; }
        public bool EasternPlaguelands { get; set; }
        public bool TheHinterlands { get; set; }

        //Kalimdor
        public bool Ashenvale { get; set; }
        public bool Azshara { get; set; }
        public bool Darkshore { get; set; }
        public bool Teldrassil { get; set; }
        public bool Desolace { get; set; }
        public bool DustwallowMarsh { get; set; }
        public bool Felwood { get; set; }
        public bool FeralasFeathermoon { get; set; }
        public bool FeralasThalanaar { get; set; }
        public bool Moonglade { get; set; }
        public bool Silithus { get; set; }
        public bool StonetalonMountains { get; set; }
        public bool Tanaris { get; set; }
        public bool TheBarrens { get; set; }
        public bool UngoroCrater { get; set; }
        public bool Winterspring { get; set; }

    }

    //Buy and check bags
    public class bags
    {
        public static bool bagsStarted = false;

        public static int bagsEquipped()
        {
            int returnValue = 0;
            string empty = "";

            for(int i = 20; i &lt;= 23; i++)
            {
                empty = wManager.Wow.Helpers.Lua.LuaDoString&lt;string&gt;("return GetInventoryItemLink('player', " + i + ")");

                if(empty.Contains("o"))
                    returnValue++;
            }

            return returnValue;
        }

        public static string checkMoney()
        {
            string returnVariableNameZ = "";

            returnVariableNameZ = wManager.Wow.Helpers.Lua.LuaDoString("returnVariableNameZ = GetMoney() return returnVariableNameZ", returnVariableNameZ);

            return returnVariableNameZ;
        }

        public static bool canEquip()
        {
            string returnVariableName = "";

            returnVariableName = wManager.Wow.Helpers.Lua.LuaDoString("returnVariableName = GetInventoryItemLink('player', 23 ) return returnVariableName", returnVariableName);


            if(returnVariableName.Equals(""))
            {
                return true;
            }
            else
            {
                return false;
            }

        }

    }


    //Abandon Quests
    public class abandonQuest
    {

        public static void abandon(string questName)
        {

            string name = questName;

            wManager.Wow.Helpers.Lua.LuaDoString("local name = '" + name + "' for i=1,GetNumQuestLogEntries() do local questTitle, level, questTag, suggestedGroup, isHeader, isCollapsed, isComplete = GetQuestLogTitle(i) if string.find(questTitle, name) then SelectQuestLogEntry(i) SetAbandonQuest() AbandonQuest() end end");


        }

    }



    //Throw away items - by Reapler
    public class throwAway
    {
        public static int GetItemQuantity(string itemName)
        {
            var execute =
                "local itemCount = 0; " +
                "for b=0,4 do " +
                    "if GetBagName(b) then " +
                        "for s=1, GetContainerNumSlots(b) do " +
                            "local itemLink = GetContainerItemLink(b, s) " +
                            "if itemLink then " +
                                "local _, stackCount = GetContainerItemInfo(b, s)\t " +
                                "if string.find(itemLink, \"" + itemName + "\") then " +
                                    "itemCount = itemCount + stackCount; " +
                                "end " +
                            "end " +
                        "end " +
                    "end " +
                "end; " +
                "return itemCount; ";
            return Lua.LuaDoString&lt;int&gt;(execute);
        }

        /// &lt;summary&gt;
        /// Used to delete all items by name.
        /// &lt;/summary&gt;
        /// &lt;param name="itemName"&gt;The item to delete.&lt;/param&gt;
        /// &lt;param name="leaveAmount"&gt;The amount of items which remain in the bag.&lt;/param&gt;
        /// &lt;remarks&gt;Bug at links with "-"&lt;/remarks&gt;
        public static void DeleteItems(string itemName, int leaveAmount)
        {
            var itemQuantity = GetItemQuantity(itemName) - leaveAmount;
            if(string.IsNullOrWhiteSpace(itemName) || itemQuantity &lt;= 0)
                return;
            var execute =
                "local itemCount = " + itemQuantity + "; " +
                "local deleted = 0; " +
                "for b=0,4 do " +
                    "if GetBagName(b) then " +
                        "for s=1, GetContainerNumSlots(b) do " +
                            "local itemLink = GetContainerItemLink(b, s) " +
                            "if itemLink then " +
                                "local _, stackCount = GetContainerItemInfo(b, s)\t " +
                                "local leftItems = itemCount - deleted; " +
                                "if string.find(itemLink, \"" + itemName + "\") and leftItems &gt; 0 then " +
                                    "if stackCount &lt;= 1 then " +
                                        "PickupContainerItem(b, s); " +
                                        "DeleteCursorItem(); " +
                                        "deleted = deleted + 1; " +
                                    "else " +
                                        "if (leftItems &gt; stackCount) then " +
                                            "SplitContainerItem(b, s, stackCount); " +
                                            "DeleteCursorItem(); " +
                                            "deleted = deleted + stackCount; " +
                                        "else " +
                                            "SplitContainerItem(b, s, leftItems); " +
                                            "DeleteCursorItem(); " +
                                            "deleted = deleted + leftItems; " +
                                        "end " +
                                    "end " +
                                "end " +
                            "end " +
                        "end " +
                    "end " +
                "end; ";
            Lua.LuaDoString(execute);
        }
    }


public class Darnassus
{
    private static Vector3 darnassusEnterPos = new Vector3(8775.104, 962.8825, 30.33067);
    private static Vector3 darnassusLeavePos = new Vector3(9945.827, 2598.705, 1316.187);

    public static void enter()
    {
        Logging.Write("[FNV_Quester]: Moving to position to enter Darnassus portal...");

        GoToTask.ToPosition(darnassusEnterPos);

        Logging.Write("[FNV_Quester]: Enter Darnassus, disable teleport...");

        wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;

        Vector3 pos = new Vector3(8812.807f, 972.6884f, 32.50122f);

        while(ObjectManager.Me.Position.DistanceTo(pos) &gt; 1 &amp;&amp; Usefuls.SubMapZoneName.Contains("theran Village"))
        {
            wManager.Wow.Helpers.MovementManager.Face(pos);
            wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 125);
            Thread.Sleep(robotManager.Helpful.Others.Random(10, 25));
        }

        Logging.Write("[FNV_Quester]: Reenable teleport");

        wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = true;
    }

    public static void leave()
    {
        Logging.Write("[FNV_Quester]: Moving to position to leave Darnassus portal...");

        GoToTask.ToPosition(darnassusLeavePos);

        Logging.Write("[FNV_Quester]: Leave Darnassus, disable teleport...");

        wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;

        Vector3 pos = new Vector3(9946.378f, 2642.551f, 1316.749f);

        while(ObjectManager.Me.Position.DistanceTo(pos) &gt; 1 &amp;&amp; Usefuls.MapZoneName.Contains("Darnassus"))
        {
            wManager.Wow.Helpers.MovementManager.Face(pos);
            wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 125);
            Thread.Sleep(robotManager.Helpful.Others.Random(10, 25));
        }

        Logging.Write("[FNV_Quester]: Reenable teleport");
        wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = true;
    }
}

    [Serializable]
    public class FNVQuesterFlightMaster : Settings
    {
        public FNVQuesterFlightMaster()
        {
            //FlightMaster discovered
            //Eastern Kingdoms
            this.ArathiHighlands = false;
            this.Wetlands = false;
            this.WesternPlaguelands = false;
            this.EasternPlaguelands = false;
            this.HillsbradFoothills = false;
            this.TheHinterlands = false;
            this.LochModan = false;
            this.Ironforge = false;
            this.SearingGorge = false;
            this.BurningSteppes = false;
            this.RedridgeMountains = false;
            this.Stormwind = false;
            this.Westfall = false;
            this.Duskwood = false;
            this.StranglethornValley = false;
            this.BlastedLands = false;

            //Kalimdor
            this.Teldrassil = false;
            this.Darkshore = false;
            this.Winterspring = false;
            this.Azshara = false;
            this.Ashenvale = false;
            this.StonetalonMountains = false;
            this.Desolace = false;
            this.TheBarrens = false;
            this.Tanaris = false;
            this.FeralasFeathermoon = false;
            this.FeralasThalanaar = false;
            this.UngoroCrater = false;
            this.DustwallowMarsh = false;
            this.Silithus = false;
            this.Moonglade = false;
            this.Felwood = false;

        }

    public static void flightMasterSaveChanges(FlightMasterDB needToChange)
    {

        if(needToChange.name.Contains("Arathi"))
            CurrentSettings.ArathiHighlands = true;

        if(needToChange.name.Contains("Wetlands"))
            CurrentSettings.Wetlands = true;

        if(needToChange.name.Contains("Western"))
            CurrentSettings.WesternPlaguelands = true;

        if(needToChange.name.Contains("Eastern"))
            CurrentSettings.EasternPlaguelands = true;

        if(needToChange.name.Contains("Hillsbrad"))
            CurrentSettings.HillsbradFoothills = true;

        if(needToChange.name.Contains("Hinterlands"))
            CurrentSettings.TheHinterlands = true;

        if(needToChange.name.Contains("Modan"))
            CurrentSettings.LochModan = true;

        if(needToChange.name.Contains("Ironforge"))
            CurrentSettings.Ironforge = true;

        if(needToChange.name.Contains("Searing"))
            CurrentSettings.SearingGorge = true;

        if(needToChange.name.Contains("Burning"))
            CurrentSettings.BurningSteppes = true;

        if(needToChange.name.Contains("Redridge"))
            CurrentSettings.RedridgeMountains = true;

        if(needToChange.name.Contains("Stormwind"))
            CurrentSettings.Stormwind = true;

        if(needToChange.name.Contains("Westfall"))
            CurrentSettings.Westfall = true;

        if(needToChange.name.Contains("Duskwood"))
            CurrentSettings.Duskwood = true;

        if(needToChange.name.Contains("Stranglethorn"))
            CurrentSettings.StranglethornValley = true;

        if(needToChange.name.Contains("Blasted"))
            CurrentSettings.BlastedLands = true;

        if(needToChange.name.Contains("Teldrassil"))
            CurrentSettings.Teldrassil = true;

        if(needToChange.name.Contains("Darkshore"))
            CurrentSettings.Darkshore = true;

        if(needToChange.name.Contains("Winterspring"))
            CurrentSettings.Winterspring = true;

        if(needToChange.name.Contains("Azshara"))
            CurrentSettings.Azshara = true;

        if(needToChange.name.Contains("Ashenvale"))
            CurrentSettings.Ashenvale = true;

        if(needToChange.name.Contains("Stonetalon"))
            CurrentSettings.StonetalonMountains = true;

        if(needToChange.name.Contains("Desolace"))
            CurrentSettings.Desolace = true;

        if(needToChange.name.Contains("Tanaris"))
            CurrentSettings.Tanaris = true;

        if(needToChange.name.Contains("The Barrens"))
            CurrentSettings.TheBarrens = true;

        if(needToChange.name.Contains("Feathermoon"))
            CurrentSettings.FeralasFeathermoon = true;

        if(needToChange.name.Contains("Thalanaar"))
            CurrentSettings.FeralasThalanaar = true;

        if(needToChange.name.Contains("ro Crater"))
            CurrentSettings.UngoroCrater = true;

        if(needToChange.name.Contains("Dustwallow"))
            CurrentSettings.DustwallowMarsh = true;

        if(needToChange.name.Contains("Silithus"))
            CurrentSettings.Silithus = true;

        if(needToChange.name.Contains("Felwood"))
            CurrentSettings.Felwood = true;

        FNVQuesterFlightMaster.CurrentSettings.Save();
        Logging.Write("[FNV_FlightMaster]: Settings saved of Flight Master " + needToChange.name);
        return;
    }

        public static FNVQuesterFlightMaster CurrentSettings { get; set; }

        public bool Save()
        {
            try
            {
                return Save(AdviserFilePathAndName("FNVQuesterFlightMaster", ObjectManager.Me.Name + "." + Usefuls.RealmName));
            }
            catch(Exception e)
            {
                Logging.WriteDebug("FNVQuesterFlightMaster =&gt; Save(): " + e);
                return false;
            }
        }

        public static bool Load()
        {
            try
            {
                if(File.Exists(AdviserFilePathAndName("FNVQuesterFlightMaster", ObjectManager.Me.Name + "." + Usefuls.RealmName)))
                {
                    CurrentSettings = Load&lt;FNVQuesterFlightMaster&gt;(AdviserFilePathAndName("FNVQuesterFlightMaster", ObjectManager.Me.Name + "." + Usefuls.RealmName));
                    return true;
                }

                FNVQuesterFlightMaster.CurrentSettings = new FNVQuesterFlightMaster();
            }
            catch(Exception e)
            {
                Logging.WriteDebug("FNVQuesterFlightMaster =&gt; Load(): " + e);
            }
            return false;
        }


        //FlightMaster
        //Eastern Kingdoms
        public bool Stormwind { get; set; }
        public bool Westfall { get; set; }
        public bool RedridgeMountains { get; set; }
        public bool Duskwood { get; set; }
        public bool StranglethornValley { get; set; }
        public bool Ironforge { get; set; }
        public bool BurningSteppes { get; set; }
        public bool BlastedLands { get; set; }
        public bool SearingGorge { get; set; }
        public bool LochModan { get; set; }
        public bool Wetlands { get; set; }
        public bool ArathiHighlands { get; set; }
        public bool HillsbradFoothills { get; set; }
        public bool WesternPlaguelands { get; set; }
        public bool EasternPlaguelands { get; set; }
        public bool TheHinterlands { get; set; }

        //Kalimdor

        public bool Ashenvale { get; set; }
        public bool Azshara { get; set; }
        public bool Darkshore { get; set; }
        public bool Teldrassil { get; set; }
        public bool Desolace { get; set; }
        public bool DustwallowMarsh { get; set; }
        public bool Felwood { get; set; }
        public bool FeralasFeathermoon { get; set; }
        public bool FeralasThalanaar { get; set; }
        public bool Moonglade { get; set; }
        public bool Silithus { get; set; }
        public bool StonetalonMountains { get; set; }
        public bool Tanaris { get; set; }
        public bool TheBarrens { get; set; }
        public bool UngoroCrater { get; set; }
        public bool Winterspring { get; set; }

    }

public class Boat
{
    private static bool _boatTaken = false;

    public static void menethilToAuberdine()
    {

        // Settings
        var zeppelinEntryId = 176310; // Zeppelin/Ship EntryId
                                      // From
        var fromZeppelinWaitPosition = new Vector3(-3709.475, -575.0988, 0); // Position where Zeppelin/Ship waits players (from)
        var fromPlayerWaitPosition = new Vector3(-3727.4, -581.3, 6.2); // Position where the player waits Zeppelin/Ship (from)
        var fromPlayerInZeppelinPosition = new Vector3(-3713.333, -571.7416, 6.098111); // Position where the player waits in the Zeppelin/Ship (from)
                                                                                        // To
        var toZeppelinWaitPosition = new Vector3(6406.216, 823.0809, 0); // Position where Zeppelin/Ship waits players (to)
        var toPlayerLeavePosition = new Vector3(6461.408, 806.1595, 6.770809); // Position to go out the Zeppelin/Ship (to)
                                                                               //Pos1
        var enterPos1 = new Vector3(-3724.827, -581.0698, 6.191196);
        //Pos2
        var enterPos2 = new Vector3(-3723.727, -580.3727, 6.184784);
        _boatTaken = false;

        if(!_boatTaken)
        {
            // Change WRobot settings:
            Logging.Write("[FNV_Quester]: Taking boat from Menethil to Auberdine");
            wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;
            wManager.wManagerSetting.CurrentSetting.Repair = false;
            wManager.wManagerSetting.CurrentSetting.Selling = false;
            wManager.wManagerSetting.CurrentSetting.UsePathsFinder = false;

            // Code:
            if(!Conditions.InGameAndConnectedAndProductStartedNotInPause)
                return;

            while(Products.IsStarted &amp;&amp; !_boatTaken)
            {
                while(Usefuls.ContinentId != (int)ContinentId.Kalimdor)
                {
                    if(!ObjectManager.Me.InTransport)
                    {
                        if(GoToTask.ToPosition(fromPlayerWaitPosition))
                        {
                            var zeppelin = ObjectManager.GetWoWGameObjectByEntry(zeppelinEntryId).OrderBy(o =&gt; o.GetDistance).FirstOrDefault();
                            if(zeppelin != null &amp;&amp; zeppelin.Position.DistanceTo(fromZeppelinWaitPosition) &lt; 1)
                            {

                                MovementManager.MoveTo(enterPos1);
                                if(GoToTask.ToPosition(enterPos1))
                                    MovementManager.MoveTo(enterPos2);

                                Lua.LuaDoString("ClearTarget()");

                                //wManager.Wow.Helpers.MovementManager.Face(new Vector3(-3713.333, -571.7416, 6.098111));

                                MovementManager.MoveTo(fromPlayerInZeppelinPosition);
                            }
                        }
                    }
                }
                while(Usefuls.ContinentId == (int)ContinentId.Kalimdor)
                {
                    if(ObjectManager.Me.InTransport)
                    {
                        var zeppelin = ObjectManager.GetWoWGameObjectByEntry(zeppelinEntryId).OrderBy(o =&gt; o.GetDistance).FirstOrDefault();
                        if(zeppelin != null &amp;&amp; zeppelin.Position.DistanceTo(toZeppelinWaitPosition) &lt; 1)
                        {
                            MovementManager.MoveTo(toPlayerLeavePosition);
                            break;
                        }
                    }
                }

                Logging.Write("[FNV_Quester]: Boat taken from Menethil to Auberdine");

                wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = true;
                wManager.wManagerSetting.CurrentSetting.Repair = true;
                wManager.wManagerSetting.CurrentSetting.Selling = true;
                wManager.wManagerSetting.CurrentSetting.UsePathsFinder = true;
                _boatTaken = true;
            }
            return;
        }
        return;
    }
}

public class Key
{
    public static bool haveKey(int keyId)
    {
        bool haveKey = Lua.LuaDoString&lt;bool&gt;("local itemIdSearch = " + keyId + "; local bag = KEYRING_CONTAINER; for slot = 1,MAX_CONTAINER_ITEMS do local itemLink = GetContainerItemLink(bag,slot); local _, itemCount = GetContainerItemInfo(bag,slot); if itemLink and itemCount then local _,_,itemId = string.find(itemLink, '.*|Hitem:(%d+):.*'); if itemId and tonumber(itemId) == itemIdSearch then return true end end end return false");
        return haveKey;
    }
}




public class Authentication
{
    
    private readonly string orderId;
    private readonly string productId;
    private readonly string wRobotAuthKey;

    private readonly BackgroundWorker _validationThread = new BackgroundWorker();
    private bool _isRunning = false;
    private string authUrl;

    public Authentication(string orderId, string productId)
    {
    
        return;  if (orderId == null)
        {
            MessageBox.Show("You need to enter your transaction id (from your Rocketr email) into the plugin settings to use this!");
        }

        this.orderId = orderId;
        this.productId = productId;

        this.wRobotAuthKey = robotManager.Helpful.Others.StringBetween(authManager.LoginServer.GetSubcriptionInfoThread(), robotManager.Translate.Get("License Key") + ": ", "...  - " + robotManager.Translate.Get("Subscription time expire"));
            authUrl = "http://51.38.127.249:8080/authenticate?orderId=" + orderId.Trim() + "&amp;productId=" + productId + "&amp;wRobotAuthKey=" + wRobotAuthKey;
        


        _isRunning = true;
        _validationThread.DoWork += CheckValidiation;
        _validationThread.RunWorkerAsync();
    }
    
    ~Authentication()
    {
        _isRunning = false;
        _validationThread.DoWork -= CheckValidiation;
        _validationThread.Dispose();
    }

    private void CheckValidiation(object sender, DoWorkEventArgs e)
    {
        while (Products.IsStarted &amp;&amp; _isRunning)
        {
            try
            {
                bool timedOut = false;
                HttpWebResponse content = null;
                try
                {
                    var request = (HttpWebRequest)WebRequest.Create(authUrl);
                    request.Timeout = 30000;
                    request.ReadWriteTimeout = 30000;
                    content = (HttpWebResponse)request.GetResponse();
                }
                catch (Exception ex)
                {
                    timedOut = true;
                }
                
                //give it another try
                if ((content != null &amp;&amp; content.StatusCode != HttpStatusCode.OK) || timedOut)
                {
                    Thread.Sleep(60 * 1000);
                    try
                    {
                        var request = (HttpWebRequest)WebRequest.Create(authUrl);
                        request.Timeout = 30000;
                        request.ReadWriteTimeout = 30000;
                        content = (HttpWebResponse)request.GetResponse();
                        timedOut = false;
                    }
                    catch (Exception ex)
                    {
                        timedOut = true;
                    }
                }

                string result = content != null ? new StreamReader(content.GetResponseStream()).ReadToEnd() : "false";

                if (!bool.Parse(result) || (content != null &amp;&amp; content.StatusCode != HttpStatusCode.OK) || timedOut)
                {
                    Products.ProductStop();
                    _isRunning = false;
                    _validationThread.DoWork -= CheckValidiation;
                    _validationThread.Dispose();
                    MessageBox.Show("You are trying to use a different wRobot key with the same order Id or your wRobot key is used by more than 10 IPs. \n\nBot name: " + ObjectManager.Me.Name + "\n\nIf your wRobot key has changed recently (f.e. after purchasing a new one), please contact FNV316");
                    return;
                }

                Thread.Sleep(60 * 1000);
            }
            catch (Exception exp)
            {
                Logging.WriteError("" + exp);
            }
        }
    }
}

    /*
    static ControlAuthentication()
    {
        new Thread(() =&gt;
        {
            while (!Conditions.InGameAndConnectedAndAliveAndProductStarted)
            {
                Thread.Sleep(500);
            }
            Thread.Sleep(30000);
            string status = Logging.Status;
            if (_controlVariable != 5 &amp;&amp; !status.Contains("To Town") &amp;&amp; !status.Contains("Regeneration") &amp;&amp; !status.Contains("Attacked") &amp;&amp; !status.Contains("Trainers") &amp;&amp; !status.Contains("Ressurect") &amp;&amp; !status.Contains("Started"))
            {
                Products.ProductStop();
                MessageBox.Show("Please enter your ID faster, restart the Bot now.");
            }
            Logging.Write("[FNV_Quester]: Launcher authentication sucessful");
        }).Start();
    }
    */

public class ControlAuthentication
{
    private static volatile int _controlVariable = 0;
    private static int _timeout = 0;
    private static bool _isRunning = true;
    private static bool disposeAuthThread = false;
    private static string profileName = "";

    public static void SetControl(int control)
    {
        _controlVariable = control;
    }

    static ControlAuthentication()
    {
        new Thread(() =&gt;
        {
            profileName = wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName;

            while(_isRunning &amp;&amp; !disposeAuthThread &amp;&amp; (wManager.Wow.Helpers.Conditions.ProductIsStarted || wManager.Wow.Helpers.Conditions.ProductInPause))
            {
                if(!wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName.Equals(profileName))
                {
                    disposeAuthThread = true;
                    break;
                }

                if(!wManager.Wow.Helpers.Conditions.ProductIsStarted)
                {
                    disposeAuthThread = true;
                    break;
                }

                while(wManager.Wow.Helpers.Quest.QuesterCurrentContext.CurrentStep &lt; 2)
                {
                    Thread.Sleep(500);

                    if(_controlVariable == 5 || !wManager.Wow.Helpers.Conditions.ProductIsStarted)
                        break;

                    _timeout += 500;

                    if(_timeout &gt;= 910000)
                    {
                        Products.ProductStop();
                        MessageBox.Show("[FNV_Quester]: Timeout error. Unable to authenticate for more than 15 minutes. \n\nBot name: " + ObjectManager.Me.Name);
                        break;
                    }
                }

                _isRunning = false;

                if(wManager.Wow.Helpers.Conditions.ProductIsStarted || wManager.Wow.Helpers.Conditions.ProductInPause)
                {
                    Thread.Sleep(60000);

                    if(_controlVariable != 5)
                    {
                        Products.ProductStop();
                        MessageBox.Show("[FNV_Quester]: Please enter your ID faster or make sure the authentication step is enabled (#0 START_FNVLauncher_V2 -&gt; Step [1], any other profile -&gt; Step [0]). \nRestart the Bot now. \n\nBot name: " + ObjectManager.Me.Name);
                    }
                    /*
                    else
                    {
                        if(!disposeAuthThread &amp;&amp; wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName.Equals(profileName) &amp;&amp; Conditions.ProductIsStarted)
                            Logging.Write("[FNV_Quester]: Authentication sucessful");
                    }
                    */
                    _timeout = 0;
                    _isRunning = true;
                }
            }

        }).Start();
    }
    
}

[Serializable]
public class FNVQuesterAuthSettings : robotManager.Helpful.Settings
{
    [Setting]
    [Category("__IMPORTANT__")]
    [DisplayName("Rocketr Order id")]
    [Description("This is your tracking number for when you purchased this product, it is required to use this consistently. You can find it within your product delivery e-mail")]
    public string TransactionId { get { return "free"; } set { } }

    public FNVQuesterAuthSettings()
    {
        TransactionId = null;
    }
    
    public static FNVQuesterAuthSettings CurrentSetting { get; set; }

    public bool Save()
    {
        try
        {
            return Save(AdviserFilePathAndName("FNVQuester_AuthSettings", "Vanilla_Alliance"));
        }
        catch (Exception e)
        {
            robotManager.Helpful.Logging.Write("FNVQuester_AuthSettings &gt; Save(): " + e);
            return false;
        }
    }

    public static bool Load()
    {
        try
        {
            if (File.Exists(AdviserFilePathAndName("FNVQuester_AuthSettings", "Vanilla_Alliance")))
            {
                CurrentSetting =
                    Load&lt;FNVQuesterAuthSettings&gt;(AdviserFilePathAndName("FNVQuester_AuthSettings", "Vanilla_Alliance"));
                return true;
            }
            CurrentSetting = new FNVQuesterAuthSettings();
        }
        catch (Exception e)
        {
            robotManager.Helpful.Logging.Write("FNVQuester_AuthSettings &gt; Load(): " + e);
        }
        return false;
    }
}

public class SearingGorge
{
     private static bool _isStarted = false;
     private static bool _inPause = false;
     private static int gateId = 161536;
     private static Vector3 gatePosition = new Vector3(-6756, -1166, 187);

    public static void initializeGateDetection()
    {
        if(!_isStarted)
        {
            Logging.Write("[FNV_Quester]: Searing Gorge gate detection initialized");
            _isStarted = true;
            MovementEvents.OnSeemStuck += MovementEventsOnOnSeemStuck;
        }
    }

    private static void pause()
    {
        for(int i = 0; i &lt; 15000; i += 1000)
        {
            Thread.Sleep(1000);
        }
        _inPause = false;
        return;
    }

    public static void disposeGateDetection()
    {
        if(_isStarted)
        {
            Logging.Write("[FNV_Quester]: Searing Gorge gate detection disposed");
            _isStarted = false;
            MovementEvents.OnSeemStuck -= MovementEventsOnOnSeemStuck;
        }
    }

    private static void MovementEventsOnOnSeemStuck()
    {
        Logging.Write("SeemStuck detected");

        if(ObjectManager.Me.Position.DistanceTo(gatePosition) &lt;= 10 &amp;&amp; !_inPause)
        {
            Logging.Write("[FNV_Quester]: Stuck at Quarry Gate, trying to open it...");

            GoToTask.ToPositionAndIntecractWithGameObject(gatePosition, gateId, -1, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore);
            
            if(GoToTask.ToPositionAndIntecractWithGameObject(gatePosition, gateId, -1, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore))
            {
               // _inPause = true;
               // pause();
            }
        }
    }
}

public class SearingGorgeFixedPathfinding
{
    private static List&lt;Vector3&gt; brokenLocationNodes = new List&lt;Vector3&gt;();
    private static bool _inProcessing;
    private static Vector3 currentDestination = new Vector3(0, 0, 0);
    private static string status = "";

    private static void ApplyNodes()
    {
        Vector3 thoriumPoint = new Vector3(-6514, -1162, 308);
        brokenLocationNodes.Add(thoriumPoint);
    }

    public static void Initialize()
    {
        Logging.Write("[FNV_Quester]: Thorium Point pathfinder workaround started");
        MovementEvents.OnMovementPulse += MovementEventsOnOnMovementPulse;
        MovementEvents.OnSeemStuck += MovementEventsOnOnSeemStuck;
        Logging.OnChanged += LoggingEvents_OnChangedStatus;
        ApplyNodes();
        _inProcessing = false;
    }

    public static void Dispose()
    {
        MovementEvents.OnMovementPulse -= MovementEventsOnOnMovementPulse;
        MovementEvents.OnSeemStuck -= MovementEventsOnOnSeemStuck;
        Logging.OnChanged -= LoggingEvents_OnChangedStatus;
    }

    private static void MovementEventsOnOnSeemStuck()
    {
        _inProcessing = false;
    }

    private static void MovementEventsOnOnMovementPulse(List&lt;Vector3&gt; points, CancelEventArgs cancelable)
    {  
        //status = Logging.Status;
        if(CheckDestination(points.LastOrDefault&lt;Vector3&gt;()) &amp;&amp; !_inProcessing &amp;&amp; ObjectManager.Me.Position.DistanceTo(points.Last&lt;Vector3&gt;()) &gt; 50 &amp;&amp; !status.Contains("Follow Path"))
        {
            _inProcessing = true;
            Logging.Write("[FNV_Quester]: Destination vector within broken path finder range. Using custom path for movement to enter instead");
            cancelable.Cancel = true;
            UseCustomPathIn(points.LastOrDefault&lt;Vector3&gt;());
            cancelable.Cancel = false;
            _inProcessing = false;
        }

        if(CheckDestination(ObjectManager.Me.Position) &amp;&amp; !_inProcessing &amp;&amp; ObjectManager.Me.Position.DistanceTo(points.Last&lt;Vector3&gt;()) &gt; 50 &amp;&amp; !status.Contains("Follow Path"))
        {
            _inProcessing = true;
            Logging.Write("[FNV_Quester]: Starting vector within broken path finder range. Using custom path for movement to leave instead");
            cancelable.Cancel = true;
            UseCustomPathOut(points.LastOrDefault&lt;Vector3&gt;());
            cancelable.Cancel = false;
            _inProcessing = false;
        }

        if(CheckDestination(ObjectManager.Me.Position) &amp;&amp; !_inProcessing &amp;&amp; CheckDestination(points.Last&lt;Vector3&gt;()) &amp;&amp; ObjectManager.Me.Position.DistanceTo(points.Last&lt;Vector3&gt;()) &gt; 10 &amp;&amp; !status.Contains("Follow Path"))
        {
            _inProcessing = true;
            currentDestination = points.Last&lt;Vector3&gt;();
            Logging.Write("[FNV_Quester]: Starting and destination vector within broken path finder range. Using custom path for movement instead");
            cancelable.Cancel = true;
            UseCustomPathLoop(points.LastOrDefault&lt;Vector3&gt;());
            cancelable.Cancel = false;
            _inProcessing = false;
        }
    }

    
    private static void LoggingEvents_OnChangedStatus(object sender, Logging.LoggingChangeEventArgs e)
    {
        status = Logging.Status;
    }
    

    private static bool CheckDestination(Vector3 destination)
    {
        foreach(var ele in brokenLocationNodes)
        {
            //Logging.Write("Distance is: " + destination.DistanceTo(ele)); 
            if(destination.DistanceTo(ele) &lt;= 60)
                return true;
        }
        return false;
    }

    private static void UseCustomPathIn(Vector3 destination)
    {

        Vector3 currentDestination = new Vector3(0, 0, 0);

        var path = new List&lt;Vector3&gt;() {
new Vector3(-6605.966f, -1023.291f, 244.5074f, "None"),
new Vector3(-6601.826f, -1023.744f, 244.9385f, "None"),
new Vector3(-6597.218f, -1026.855f, 248.186f, "None"),
new Vector3(-6593.908f, -1031.353f, 252.414f, "None"),
new Vector3(-6591.3f, -1036.307f, 255.8175f, "None"),
new Vector3(-6588.852f, -1041.541f, 258.5742f, "None"),
new Vector3(-6586.07f, -1046.571f, 260.5392f, "None"),
new Vector3(-6582.013f, -1050.151f, 262.3918f, "None"),
new Vector3(-6577.125f, -1052.881f, 264.4617f, "None"),
new Vector3(-6572.03f, -1055.201f, 266.5196f, "None"),
new Vector3(-6566.89f, -1057.423f, 268.521f, "None"),
new Vector3(-6561.761f, -1059.671f, 270.6708f, "None"),
new Vector3(-6556.499f, -1062.034f, 272.971f, "None"),
new Vector3(-6551.548f, -1064.268f, 275.2576f, "None"),
new Vector3(-6546.625f, -1066.932f, 277.3527f, "None"),
new Vector3(-6541.8f, -1069.774f, 279.032f, "None"),
new Vector3(-6536.636f, -1071.892f, 280.7285f, "None"),
new Vector3(-6531.107f, -1072.746f, 282.576f, "None"),
new Vector3(-6525.543f, -1073.38f, 284.4381f, "None"),
new Vector3(-6519.98f, -1074.023f, 286.3544f, "None"),
new Vector3(-6514.447f, -1074.884f, 288.3375f, "None"),
new Vector3(-6508.975f, -1076.073f, 290.369f, "None"),
new Vector3(-6503.632f, -1077.715f, 292.0928f, "None"),
new Vector3(-6498.638f, -1080.577f, 293.695f, "None"),
new Vector3(-6494.001f, -1083.713f, 295.3442f, "None"),
new Vector3(-6490.028f, -1087.634f, 296.9394f, "None"),
new Vector3(-6486.872f, -1092.256f, 298.4525f, "None"),
new Vector3(-6484.295f, -1097.215f, 300.1746f, "None"),
new Vector3(-6483.278f, -1102.701f, 301.5711f, "None"),
new Vector3(-6483.816f, -1108.252f, 302.851f, "None"),
new Vector3(-6485.005f, -1113.707f, 304.0922f, "None"),
new Vector3(-6487.139f, -1118.884f, 305.0337f, "None"),
new Vector3(-6489.344f, -1124.032f, 305.7626f, "None"),
new Vector3(-6491.585f, -1129.163f, 306.1504f, "None"),
new Vector3(-6494.281f, -1134.475f, 306.4971f, "None"),
new Vector3(-6497.214f, -1139.442f, 306.8915f, "None"),
new Vector3(-6500.032f, -1144.085f, 307.3696f, "None"),
new Vector3(-6503.025f, -1149.016f, 307.632f, "None"),
new Vector3(-6505.93f, -1153.804f, 307.8793f, "None"),
new Vector3(-6508.76f, -1158.441f, 307.9853f, "None"),
new Vector3(-6512.148f, -1162.893f, 308.3222f, "None"),
new Vector3(-6517.508f, -1163.161f, 308.5844f, "None"),
            };

        foreach(var ele in path)
        {
            if(ele.DistanceTo(destination) &lt; ele.DistanceTo(currentDestination))
                currentDestination = ele;
        }

        if(wManager.Wow.Bot.Tasks.GoToTask.ToPosition(path.First&lt;Vector3&gt;(), 3.5f, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore))
        {
            wManager.Wow.Bot.Tasks.GoToTask.ToPosition(path.First&lt;Vector3&gt;(), 3.5f, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore);
        }

        while(ObjectManager.Me.Position.DistanceTo(currentDestination) &gt; 5 &amp;&amp; !currentDestination.Equals((Vector3)null) &amp;&amp; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore)
        {
            MovementManager.Go(path);
            Thread.Sleep(100);
        }

        //Logging.Write("Finished takeCustomPath");
        //Reenable();
        _inProcessing = false;
        return;
    }

    private static void UseCustomPathOut(Vector3 destination)
    {

        Vector3 currentDestination = new Vector3(0, 0, 0);

        var path = new List&lt;Vector3&gt;() {
new Vector3(-6520.889f, -1186.334f, 309.2557f, "None"),
new Vector3(-6511.543f, -1163.732f, 308.3743f, "None"),
new Vector3(-6508.988f, -1161.179f, 308.1429f, "None"),
new Vector3(-6504.05f, -1156.218f, 308.0315f, "None"),
new Vector3(-6501.398f, -1153.294f, 308.1518f, "None"),
new Vector3(-6495.091f, -1144.908f, 307.875f, "None"),
new Vector3(-6489.66f, -1136.319f, 307.1272f, "None"),
new Vector3(-6484.931f, -1126.579f, 306.6054f, "None"),
new Vector3(-6481.782f, -1116.925f, 305.3705f, "None"),
new Vector3(-6480.768f, -1106.506f, 302.6744f, "None"),
new Vector3(-6483.211f, -1096.021f, 299.9566f, "None"),
new Vector3(-6488.722f, -1087.545f, 297.2002f, "None"),
new Vector3(-6496.905f, -1080.999f, 294.2147f, "None"),
new Vector3(-6506.868f, -1076.894f, 291.0374f, "None"),
new Vector3(-6516.972f, -1075.943f, 287.6053f, "None"),
new Vector3(-6527.435f, -1075.096f, 283.8497f, "None"),
new Vector3(-6537.802f, -1073.449f, 280.6175f, "None"),
new Vector3(-6548.082f, -1070.127f, 276.9659f, "None"),
new Vector3(-6556.992f, -1065.242f, 273.4804f, "None"),
new Vector3(-6566.444f, -1059.943f, 269.1368f, "None"),
new Vector3(-6575.575f, -1055.484f, 265.3927f, "None"),
new Vector3(-6585.064f, -1050.99f, 261.5944f, "None"),
new Vector3(-6592.596f, -1046.345f, 258.3036f, "None"),
new Vector3(-6594.945f, -1035.768f, 253.8222f, "None"),
new Vector3(-6598.657f, -1026.457f, 247.278f, "None"),
new Vector3(-6605.125f, -1027.011f, 244.9202f, "None"),
new Vector3(-6614.792f, -1030.953f, 244.2407f, "None"),
};

        foreach(var ele in path)
        {
            if(ele.DistanceTo(destination) &lt; ele.DistanceTo(currentDestination))
                currentDestination = ele;
        }

        if(wManager.Wow.Bot.Tasks.GoToTask.ToPosition(path.First&lt;Vector3&gt;(), 3.5f, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore))
        {
            wManager.Wow.Bot.Tasks.GoToTask.ToPosition(path.First&lt;Vector3&gt;(), 3.5f, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore);
        }

        while(ObjectManager.Me.Position.DistanceTo(currentDestination) &gt; 5 &amp;&amp; !currentDestination.Equals((Vector3)null) &amp;&amp; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore)
        {
            MovementManager.Go(path);
            Thread.Sleep(100);
        }

       // Logging.Write("Finished takeCustomPathOut");
        //Reenable();
        _inProcessing = false;
        return;
    }

    private static void UseCustomPathLoop(Vector3 destination)
    {

var path = new List&lt;Vector3&gt;() {
new Vector3(-6511.968f, -1178.022f, 309.2499f, "None"),
new Vector3(-6514.226f, -1180.391f, 309.2652f, "None"),
new Vector3(-6514.92f, -1183.646f, 309.2562f, "None"),
new Vector3(-6512.791f, -1186.548f, 309.2562f, "None"),
new Vector3(-6510.783f, -1189.414f, 309.2562f, "None"),
new Vector3(-6509.006f, -1192.427f, 309.2562f, "None"),
new Vector3(-6512.155f, -1191.501f, 309.2562f, "None"),
new Vector3(-6515.301f, -1190.243f, 309.2562f, "None"),
new Vector3(-6518.614f, -1189.136f, 309.2562f, "None"),
new Vector3(-6522.209f, -1188.875f, 309.2562f, "None"),
new Vector3(-6524.712f, -1188.661f, 309.2562f, "None"),
new Vector3(-6522.414f, -1187.187f, 309.2562f, "None"),
new Vector3(-6521.051f, -1184.315f, 309.2562f, "None"),
new Vector3(-6522.533f, -1181.164f, 309.5719f, "None"),
new Vector3(-6525.171f, -1178.908f, 310.5407f, "None"),
new Vector3(-6528.434f, -1177.668f, 311.458f, "None"),
new Vector3(-6531.906f, -1176.674f, 311.5628f, "None"),
new Vector3(-6535.271f, -1175.711f, 311.0577f, "None"),
new Vector3(-6538.62f, -1174.692f, 310.2652f, "None"),
new Vector3(-6541.887f, -1173.795f, 309.7975f, "None"),
new Vector3(-6545.396f, -1172.942f, 309.3479f, "None"),
new Vector3(-6548.806f, -1172.151f, 309.2578f, "None"),
new Vector3(-6552.216f, -1171.361f, 309.2927f, "None"),
new Vector3(-6555.617f, -1170.538f, 309.4913f, "None"),
new Vector3(-6558.993f, -1169.615f, 309.787f, "None"),
new Vector3(-6559.922f, -1167.805f, 309.8352f, "None"),
new Vector3(-6556.908f, -1165.864f, 310.0252f, "None"),
new Vector3(-6553.557f, -1164.877f, 310.0215f, "None"),
new Vector3(-6550.08f, -1164.484f, 309.926f, "None"),
new Vector3(-6544.97f, -1163.94f, 309.7741f, "None"),
new Vector3(-6534.195f, -1162.793f, 309.3187f, "None"),
new Vector3(-6523.741f, -1161.811f, 309.0215f, "None"),
new Vector3(-6513.615f, -1160.933f, 308.2635f, "None"),
new Vector3(-6506.418f, -1160.309f, 308.1041f, "None"),
new Vector3(-6502.819f, -1159.997f, 308.3569f, "None"),
new Vector3(-6499.444f, -1159.705f, 308.7631f, "None"),
new Vector3(-6496.717f, -1159.744f, 309.0773f, "None"),
new Vector3(-6495.118f, -1161.894f, 309.1303f, "None"),
new Vector3(-6493f, -1162.4f, 309.2f, "None"),
new Vector3(-6495.47f, -1165.365f, 309.19f, "None"),
new Vector3(-6496.578f, -1168.801f, 309.2209f, "None"),
new Vector3(-6497.424f, -1172.189f, 309.2521f, "None"),
new Vector3(-6496.599f, -1175.496f, 311.4286f, "None"),
new Vector3(-6494.471f, -1178.274f, 314.4402f, "None"),
new Vector3(-6492.365f, -1181.069f, 316.9778f, "None"),
new Vector3(-6490.402f, -1183.967f, 319.4284f, "None"),
new Vector3(-6488.469f, -1186.885f, 322.0103f, "None"),
new Vector3(-6486.568f, -1189.69f, 324.5566f, "None"),
new Vector3(-6484.392f, -1192.128f, 325.7157f, "None"),
new Vector3(-6479.565f, -1189.753f, 325.8502f, "None"),
new Vector3(-6477.512f, -1187.101f, 325.9147f, "None"),
new Vector3(-6478.307f, -1183.857f, 325.7819f, "None"),
new Vector3(-6480.627f, -1181.089f, 325.6377f, "None"),
new Vector3(-6482.864f, -1178.397f, 325.7611f, "None"),
new Vector3(-6485f, -1175.625f, 325.7878f, "None"),
new Vector3(-6487.067f, -1172.94f, 325.5157f, "None"),
new Vector3(-6489.333f, -1170.127f, 325.4131f, "None"),
new Vector3(-6492.227f, -1171.737f, 325.9383f, "None"),
new Vector3(-6495.255f, -1173.477f, 326.5012f, "None"),
new Vector3(-6498.819f, -1173.806f, 326.2171f, "None"),
new Vector3(-6501.867f, -1173.776f, 325.811f, "None"),
new Vector3(-6504.835f, -1175.808f, 325.9436f, "None"),
new Vector3(-6507.222f, -1178.351f, 326.3931f, "None"),
new Vector3(-6507.92f, -1181.704f, 326.9203f, "None"),
new Vector3(-6506.445f, -1184.833f, 327.1803f, "None"),
new Vector3(-6504.251f, -1187.702f, 326.8068f, "None"),
new Vector3(-6502.15f, -1190.501f, 326.4582f, "None"),
new Vector3(-6500.116f, -1193.21f, 326.1217f, "None"),
new Vector3(-6498.121f, -1196.085f, 325.64f, "None"),
new Vector3(-6496.097f, -1199.072f, 325.2523f, "None"),
new Vector3(-6493.148f, -1199.734f, 325.4391f, "None"),
new Vector3(-6490.279f, -1197.56f, 325.5786f, "None"),
new Vector3(-6488.075f, -1194.888f, 325.6983f, "None"),
new Vector3(-6489.056f, -1191.798f, 324.8035f, "None"),
new Vector3(-6491.162f, -1189.002f, 322.1753f, "None"),
new Vector3(-6493.301f, -1186.232f, 319.5414f, "None"),
new Vector3(-6495.447f, -1183.467f, 316.7057f, "None"),
new Vector3(-6497.518f, -1180.777f, 313.957f, "None"),
new Vector3(-6499.785f, -1177.831f, 311.3158f, "None"),
new Vector3(-6501.965f, -1175.094f, 309.255f, "None"),
new Vector3(-6504.853f, -1173.284f, 309.1891f, "None"),
new Vector3(-6507.97f, -1174.138f, 309.1942f, "None"),
new Vector3(-6511.066f, -1175.981f, 309.2368f, "None"),
new Vector3(-6513.179f, -1177.529f, 309.2469f, "None"),
};


        foreach(var ele in path)
        {
            if(ele.DistanceTo(destination) &lt; ele.DistanceTo(currentDestination))
                currentDestination = ele;
        }

        if(wManager.Wow.Bot.Tasks.GoToTask.ToPosition(path.First&lt;Vector3&gt;(), 3.5f, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore))
        {
            wManager.Wow.Bot.Tasks.GoToTask.ToPosition(path.First&lt;Vector3&gt;(), 3.5f, false, context =&gt; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore);
        }
        

        while(ObjectManager.Me.Position.DistanceTo(currentDestination) &gt; 2 &amp;&amp; !currentDestination.Equals((Vector3)null) &amp;&amp; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore)
        {
            if(ObjectManager.Me.Position.DistanceTo(currentDestination) &lt;= 2)
            {
                break;
            }
            
            MovementManager.Go(path);
            Thread.Sleep(100);
        }

        MovementManager.MoveTo(currentDestination);

        //Logging.Write("Finished takeCustomPathLoop");
        currentDestination = new Vector3(0, 0, 0);
        //Reenable();
        _inProcessing = false;
        return;
    }

    //By Matenia
    private static async void Reenable()
    {
        //Logging.Write("Enter reenable");
        await Task.Run(() =&gt;
        {
            Products.InPause = true;
            if(ObjectManager.Me.WowClass == WoWClass.Hunter)
                Lua.LuaDoString("RotaOn = false");
            MovementManager.StopMove();
            MovementManager.CurrentPath.Clear();
            MovementManager.CurrentPathOrigine.Clear();
            Thread.Sleep(5000);
            Products.InPause = false;
            if(ObjectManager.Me.WowClass == WoWClass.Hunter)
                Lua.LuaDoString("RotaOn = true");
            Logging.Write("[VanillaFlightMaster]: Resetting pathing");
        });
    }

}

public class QuesterSettings
{

    public static void ClassSettings()
    {
        if(ObjectManager.Me.WowClass == WoWClass.Warlock)
        {
            switch(ObjectManager.Me.Level / 10)
            {
                case (1):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (2):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (3):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (4):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 45;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 45;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (5):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 50;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 50;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (6):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 50;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 50;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                default:
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;
            }

            if(wManager.wManagerSetting.CurrentSetting.DrinkName.Length &lt; 2)
            {
                wManager.wManagerSetting.CurrentSetting.DrinkIsSpell = false;
                wManager.wManagerSetting.CurrentSetting.DrinkName = "Refreshing Spring Water";
            }


            if(wManager.wManagerSetting.CurrentSetting.FoodName.Length &lt; 2)
            {
                wManager.wManagerSetting.CurrentSetting.FoodIsSpell = false;
                wManager.wManagerSetting.CurrentSetting.FoodName = "Tough Hunk of Bread";
            }

            Logging.Write("[FNV_Quester]: Using default food / drink settings for Warlock");
        }

        if(ObjectManager.Me.WowClass == WoWClass.Warrior)
        {
            switch(ObjectManager.Me.Level / 10)
            {

                case (1):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;

                case (2):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;

                case (3):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 60;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 70;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;

                case (4):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 80;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;

                case (5):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 100;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 80;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;

                case (6):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 120;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 80;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;

                default:
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;
            }

            if(wManager.wManagerSetting.CurrentSetting.FoodName.Length &lt; 2)
            {
                wManager.wManagerSetting.CurrentSetting.FoodIsSpell = false;
                wManager.wManagerSetting.CurrentSetting.FoodName = "Tough Hunk of Bread";
            }

            Logging.Write("[FNV_Quester]: Using default food / drink settings for Warrior");
        }

        if(ObjectManager.Me.WowClass == WoWClass.Rogue)
        {
            switch(ObjectManager.Me.Level / 10)
            {
                case (1):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;

                case (2):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;

                case (3):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;

                case (4):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 75;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;

                case (5):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 100;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 80;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;

                case (6):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 120;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 80;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;

                default:
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 0;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = false;
                    break;
            }


            if(wManager.wManagerSetting.CurrentSetting.FoodName.Length &lt; 2)
            {
                wManager.wManagerSetting.CurrentSetting.FoodIsSpell = false;
                wManager.wManagerSetting.CurrentSetting.FoodName = "Tough Hunk of Bread";
            }

            Logging.Write("[FNV_Quester]: Using default food / drink settings for Rogue");
        }

        if(ObjectManager.Me.WowClass == WoWClass.Mage)
        {
            switch(ObjectManager.Me.Level / 10)
            {
                case (1):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 50;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (2):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 50;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (3):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 50;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (4):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 60;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 70;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (5):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 60;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 75;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (6):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 60;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 75;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                default:
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 50;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;
            }

            if(wManager.wManagerSetting.CurrentSetting.DrinkName.Length &lt; 2)
            {
                wManager.wManagerSetting.CurrentSetting.DrinkIsSpell = false;
                wManager.wManagerSetting.CurrentSetting.DrinkName = "Refreshing Spring Water";
            }


            if(wManager.wManagerSetting.CurrentSetting.FoodName.Length &lt; 2)
            {
                wManager.wManagerSetting.CurrentSetting.FoodIsSpell = false;
                wManager.wManagerSetting.CurrentSetting.FoodName = "Tough Hunk of Bread";
            }

            Logging.Write("[FNV_Quester]: Using default food / drink settings for Mage");
        }

        if(ObjectManager.Me.WowClass == WoWClass.Druid)
        {
            switch(ObjectManager.Me.Level / 10)
            {
                case (1):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (2):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (3):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (4):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 45;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (5):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 50;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (6):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                default:
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;
            }

            if(wManager.wManagerSetting.CurrentSetting.DrinkName.Length &lt; 2)
            {
                wManager.wManagerSetting.CurrentSetting.DrinkIsSpell = false;
                wManager.wManagerSetting.CurrentSetting.DrinkName = "Refreshing Spring Water";
            }

            if(wManager.wManagerSetting.CurrentSetting.FoodName.Length &lt; 2)
            {
                wManager.wManagerSetting.CurrentSetting.FoodName = "Healing Touch";
                wManager.wManagerSetting.CurrentSetting.FoodIsSpell = true;
            }

            Logging.Write("[FNV_Quester]: Using default food / drink settings for Druid");
        }

        if(ObjectManager.Me.WowClass == WoWClass.Paladin)
        {

            switch(ObjectManager.Me.Level / 10)
            {
                case (1):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (2):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (3):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 60;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (4):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 45;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (5):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 50;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (6):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 100;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 55;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                default:
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 0;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 15;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;
            }

            if(wManager.wManagerSetting.CurrentSetting.DrinkName.Length &lt; 2)
            {
                wManager.wManagerSetting.CurrentSetting.DrinkIsSpell = false;
                wManager.wManagerSetting.CurrentSetting.DrinkName = "Refreshing Spring Water";
            }

            if(wManager.wManagerSetting.CurrentSetting.FoodName.Length &lt; 2)
            {
                wManager.wManagerSetting.CurrentSetting.FoodName = "Holy Light";
                wManager.wManagerSetting.CurrentSetting.FoodIsSpell = true;
            }


            Logging.Write("[FNV_Quester]: Using default food / drink settings for Paladin");
        }

        if(ObjectManager.Me.WowClass == WoWClass.Hunter)
        {
            switch(ObjectManager.Me.Level / 10)
            {
                case (1):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    Lua.LuaDoString("DEFAULT_CHAT_FRAME:AddMessage('[FNV_Quester]: Do not forget that wRobot counts empty bag slots of ammo bags as free bag space!')");
                    break;

                case (2):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (3):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 40;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (4):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 60;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 60;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (5):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                case (6):
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 80;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    break;

                default:
                    wManager.wManagerSetting.CurrentSetting.DrinkAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.FoodAmount = 20;
                    wManager.wManagerSetting.CurrentSetting.DrinkMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.FoodMaxPercent = 95;
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
                    wManager.wManagerSetting.CurrentSetting.FoodPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    Lua.LuaDoString("DEFAULT_CHAT_FRAME:AddMessage('[FNV_Quester]: Do not forget that wRobot counts empty bag slots of ammo bags as free bag space!')");
                    break;
            }

            if(wManager.wManagerSetting.CurrentSetting.DrinkName.Length &lt; 2)
            {
                wManager.wManagerSetting.CurrentSetting.DrinkIsSpell = false;
                wManager.wManagerSetting.CurrentSetting.DrinkName = "Refreshing Spring Water";
            }

            if(wManager.wManagerSetting.CurrentSetting.FoodName.Length &lt; 2)
            {
                wManager.wManagerSetting.CurrentSetting.FoodIsSpell = false;
                wManager.wManagerSetting.CurrentSetting.FoodName = "Tough Hunk of Bread";
            }

            Logging.Write("[FNV_Quester]: Using default food / drink settings for Hunter");

        }
    }

    public static void SettingsEasternKingdoms()
    {
        //Eastern Kingdoms only
        wManager.wManagerSetting.CurrentSetting.TrainNewSkills = true;

        wManager.wManagerSetting.CurrentSetting.DontStartFighting = false;
        wManager.wManagerSetting.CurrentSetting.DetectNodesStuck = true;
        wManager.wManagerSetting.CurrentSetting.CanAttackUnitsAlreadyInFight = false;
        wManager.wManagerSetting.CurrentSetting.AvoidBlacklistedZonesPathFinder = true;
        wManager.wManagerSetting.CurrentSetting.AttackElite = false;
        wManager.wManagerSetting.CurrentSetting.AttackBeforeBeingAttacked = true;
        wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = true;
        wManager.wManagerSetting.CurrentSetting.FlightMasterTaxiUse = false;
        wManager.wManagerSetting.CurrentSetting.IgnoreFightWhenInMove = false;

        wManager.wManagerSetting.CurrentSetting.Repair = true;
        wManager.wManagerSetting.CurrentSetting.SellGray = true;
        wManager.wManagerSetting.CurrentSetting.SellGreen = true;
        wManager.wManagerSetting.CurrentSetting.Selling = true;
        wManager.wManagerSetting.CurrentSetting.SellWhite = true;
        wManager.wManagerSetting.CurrentSetting.MinFreeBagSlotsToGoToTown = 4;

        wManager.wManagerSetting.CurrentSetting.SearchRadius = 100;
        wManager.wManagerSetting.CurrentSetting.MaxUnitsNear = 100;

        wManager.wManagerSetting.CurrentSetting.WallDistancePathFinder = 2;
        wManager.wManagerSetting.CurrentSetting.AddToNpcDb = false;
        wManager.wManagerSetting.CurrentSetting.BlackListIfNotCompletePath = false;
        wManager.wManagerSetting.CurrentSetting.UseCTM = true;
        wManager.wManagerSetting.CurrentSetting.UseLuaToMove = true;

        wManager.wManagerSetting.CurrentSetting.NpcScanAuctioneer = false;
        wManager.wManagerSetting.CurrentSetting.NpcScanMailboxes = false;
        wManager.wManagerSetting.CurrentSetting.NpcScanRepair = false;
        wManager.wManagerSetting.CurrentSetting.NpcScanVendor = false;

        wManager.wManagerSetting.CurrentSetting.HarvestHerbs = false;
        wManager.wManagerSetting.CurrentSetting.HarvestMinerals = false;

        wManager.wManagerSetting.CurrentSetting.AvoidBlacklistedZonesPathFinder = true;
        wManager.wManagerSetting.CurrentSetting.AvoidWallWithRays = true;
        wManager.wManagerSetting.CurrentSetting.BlackListTrainingDummy = true;
        wManager.wManagerSetting.CurrentSetting.BlackListZoneWhereDead = false;
        wManager.wManagerSetting.CurrentSetting.CalcuCombatRange = false;
        wManager.wManagerSetting.CurrentSetting.CanAttackUnitsAlreadyInFight = false;
        wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;
        wManager.wManagerSetting.CurrentSetting.DetectNodesStuck = true;
        wManager.wManagerSetting.CurrentSetting.DontStartFighting = false;
        wManager.wManagerSetting.CurrentSetting.FlightMasterDiscoverRange = 50;
        wManager.wManagerSetting.CurrentSetting.FlightMasterTaxiUse = false;
        wManager.wManagerSetting.CurrentSetting.HarvestAvoidPlayersRadius = 1;
        wManager.wManagerSetting.CurrentSetting.HarvestDuringLongMove = false;
        wManager.wManagerSetting.CurrentSetting.HarvestTimber = false;
        wManager.wManagerSetting.CurrentSetting.HelpingGroupMembers = true;
        wManager.wManagerSetting.CurrentSetting.IgnoreCombatWithPet = false;
        wManager.wManagerSetting.CurrentSetting.IgnoreFightDuringFarmIfDruidForm = false;
        wManager.wManagerSetting.CurrentSetting.IgnoreFightGoundMount = true;
        wManager.wManagerSetting.CurrentSetting.LootChests = false;
        wManager.wManagerSetting.CurrentSetting.LootMobs = true;
        wManager.wManagerSetting.CurrentSetting.MountDistance = 100;
        wManager.wManagerSetting.CurrentSetting.Relogger = true;
        wManager.wManagerSetting.CurrentSetting.SecurityPauseBotIfNerbyPlayer = false;
        wManager.wManagerSetting.CurrentSetting.RecordChatInLog = true;
        wManager.wManagerSetting.CurrentSetting.SecurityShutdownComputer = false;
        wManager.wManagerSetting.CurrentSetting.UsePathsFinder = true;
        wManager.wManagerSetting.CurrentSetting.UseSpiritHealer = false;
        wManager.wManagerSetting.CurrentSetting.WaitResurrectionSickness = true;
        wManager.wManagerSetting.CurrentSetting.WallDistancePathFinder = 2;

        ClassSettings();

        if(Conditions.ForceIgnoreIsAttacked)
        {
            Logging.Write("[FNV_Quester]: Force ignore attack is enabled, going to disable it...");
            Conditions.ForceIgnoreIsAttacked = false;
        }

         wManager.wManagerSetting.CurrentSetting.Save();
         Thread.Sleep(500);
         wManager.wManagerSetting.CurrentSetting.Save();

        wManager.Wow.Forms.UserControlTabGeneralSettings.ReloadGeneralSettings();

        Logging.Write("[FNV_Quester]: Applied default settings for Eastern Kingdoms");

        return;
    }

    public static void SettingsKalimdor()
    {
        //Kalimdor only
        wManager.wManagerSetting.CurrentSetting.TrainNewSkills = false;

        wManager.wManagerSetting.CurrentSetting.DontStartFighting = false;
        wManager.wManagerSetting.CurrentSetting.DetectNodesStuck = true;
        wManager.wManagerSetting.CurrentSetting.CanAttackUnitsAlreadyInFight = false;
        wManager.wManagerSetting.CurrentSetting.AvoidBlacklistedZonesPathFinder = true;
        wManager.wManagerSetting.CurrentSetting.AttackElite = false;
        wManager.wManagerSetting.CurrentSetting.AttackBeforeBeingAttacked = true;
        wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = true;
        wManager.wManagerSetting.CurrentSetting.FlightMasterTaxiUse = false;
        wManager.wManagerSetting.CurrentSetting.IgnoreFightWhenInMove = false;

        wManager.wManagerSetting.CurrentSetting.Repair = true;
        wManager.wManagerSetting.CurrentSetting.SellGray = true;
        wManager.wManagerSetting.CurrentSetting.SellGreen = true;
        wManager.wManagerSetting.CurrentSetting.Selling = true;
        wManager.wManagerSetting.CurrentSetting.SellWhite = true;
        wManager.wManagerSetting.CurrentSetting.MinFreeBagSlotsToGoToTown = 4;

        wManager.wManagerSetting.CurrentSetting.SearchRadius = 100;
        wManager.wManagerSetting.CurrentSetting.MaxUnitsNear = 100;

        wManager.wManagerSetting.CurrentSetting.WallDistancePathFinder = 2;
        wManager.wManagerSetting.CurrentSetting.AddToNpcDb = false;
        wManager.wManagerSetting.CurrentSetting.BlackListIfNotCompletePath = false;
        wManager.wManagerSetting.CurrentSetting.UseCTM = true;
        wManager.wManagerSetting.CurrentSetting.UseLuaToMove = true;

        wManager.wManagerSetting.CurrentSetting.NpcScanAuctioneer = false;
        wManager.wManagerSetting.CurrentSetting.NpcScanMailboxes = false;
        wManager.wManagerSetting.CurrentSetting.NpcScanRepair = false;
        wManager.wManagerSetting.CurrentSetting.NpcScanVendor = false;

        wManager.wManagerSetting.CurrentSetting.HarvestHerbs = false;
        wManager.wManagerSetting.CurrentSetting.HarvestMinerals = false;

        wManager.wManagerSetting.CurrentSetting.AvoidBlacklistedZonesPathFinder = true;
        wManager.wManagerSetting.CurrentSetting.AvoidWallWithRays = true;
        wManager.wManagerSetting.CurrentSetting.BlackListTrainingDummy = true;
        wManager.wManagerSetting.CurrentSetting.BlackListZoneWhereDead = false;
        wManager.wManagerSetting.CurrentSetting.CalcuCombatRange = false;
        wManager.wManagerSetting.CurrentSetting.CanAttackUnitsAlreadyInFight = false;
        wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;
        wManager.wManagerSetting.CurrentSetting.DetectNodesStuck = true;
        wManager.wManagerSetting.CurrentSetting.DontStartFighting = false;
        wManager.wManagerSetting.CurrentSetting.FlightMasterDiscoverRange = 50;
        wManager.wManagerSetting.CurrentSetting.FlightMasterTaxiUse = false;
        wManager.wManagerSetting.CurrentSetting.HarvestAvoidPlayersRadius = 1;
        wManager.wManagerSetting.CurrentSetting.HarvestDuringLongMove = false;
        wManager.wManagerSetting.CurrentSetting.HarvestTimber = false;
        wManager.wManagerSetting.CurrentSetting.HelpingGroupMembers = true;
        wManager.wManagerSetting.CurrentSetting.IgnoreCombatWithPet = false;
        wManager.wManagerSetting.CurrentSetting.IgnoreFightDuringFarmIfDruidForm = false;
        wManager.wManagerSetting.CurrentSetting.IgnoreFightGoundMount = true;
        wManager.wManagerSetting.CurrentSetting.LootChests = false;
        wManager.wManagerSetting.CurrentSetting.LootMobs = true;
        wManager.wManagerSetting.CurrentSetting.MountDistance = 100;
        wManager.wManagerSetting.CurrentSetting.Relogger = true;
        wManager.wManagerSetting.CurrentSetting.SecurityPauseBotIfNerbyPlayer = false;
        wManager.wManagerSetting.CurrentSetting.RecordChatInLog = true;
        wManager.wManagerSetting.CurrentSetting.SecurityShutdownComputer = false;
        wManager.wManagerSetting.CurrentSetting.UsePathsFinder = true;
        wManager.wManagerSetting.CurrentSetting.UseSpiritHealer = false;
        wManager.wManagerSetting.CurrentSetting.WaitResurrectionSickness = true;
        wManager.wManagerSetting.CurrentSetting.WallDistancePathFinder = 2;

        ClassSettings();

        if(Conditions.ForceIgnoreIsAttacked)
        {
            Logging.Write("[FNV_Quester]: Force ignore attack is enabled, going to disable it...");
            Conditions.ForceIgnoreIsAttacked = false;
        }

         wManager.wManagerSetting.CurrentSetting.Save();
         Thread.Sleep(500);
         wManager.wManagerSetting.CurrentSetting.Save();

        wManager.Wow.Forms.UserControlTabGeneralSettings.ReloadGeneralSettings();

        Logging.Write("[FNV_Quester]: Applied default settings for Kalimdor");

        return;
    }

}


public class Blackspots
{
   

    public static void StartThread()
    {

    Thread BlackspotValidation = new Thread(() =&gt;
    {
        Logging.Write("[FNV_Quester]: Blackspot validation started");
        Dictionary&lt;Vector3, float&gt; blackspots = new Dictionary&lt;Vector3, float&gt;();
        bool _isStarted = false;

        string profileName = "FNV_V2\\#0 START_FNVLauncher_V2.xml";
        string currentProfileName = wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName;
        int counter = 0;

        if(!_isStarted)
        {
            _isStarted = true;

            while(wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName.Equals(profileName) &amp;&amp; Conditions.ProductIsStarted)
            {
                Thread.Sleep(1000);
            }

            while(Conditions.ProductIsStarted || Conditions.ProductInPause)
            {

                if(wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName.Equals(profileName))
                    break;

                if(counter &gt; 300)
                {
                    Logging.Write("[FNV_Quester]: Clear blacklist of current product session");
                    wManager.wManagerSetting.ClearBlacklistOfCurrentProductSession();
                    counter = 0;
                }

                if(wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported)
                    wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;

                if(!wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName.Equals(currentProfileName))
                {
                    Logging.Write("[FNV_Quester]: Profile has been changed. Reset current blackspots and save blackspots of loaded profile...");
                    currentProfileName = wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName;

                    blackspots.Clear();

                    foreach(var temp in wManager.wManagerSetting.GetListZoneBlackListed())
                    {
                        blackspots.Add(temp.GetPosition(), temp.Radius);
                    }
                }

                if(blackspots.Count &gt; wManager.wManagerSetting.GetListZoneBlackListed().Count)
                {
                    Logging.Write("[FNV_Quester]: Reaply default blackspots");
                    try
                    {
                        foreach(var temp in blackspots)
                        {
                            if (!wManager.wManagerSetting.GetListZoneBlackListed().Any(b =&gt; b.GetPosition().DistanceTo(temp.Key) &lt; 0.1 &amp;&amp; System.Math.Abs(b.Radius - temp.Value) &lt; 0.1))
                                wManager.wManagerSetting.AddBlackListZone(temp.Key, temp.Value, true);
                        }
                    }
                    catch(Exception e)
                    {
                    }
                }

                if(wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName.Equals(profileName))
                    break;

                counter++;
                Thread.Sleep(1000);
            }
        }
        _isStarted = false;
        Logging.Write("[FNV_Quester]: Blackspot validation disposed");

    });

        BlackspotValidation.Start();
    }
}

public class ProfileRestarter
{
    private static bool _IsAfk = false;
    private static Vector3 afkPosition = (Vector3)null;
    private static int timer = 0;
    private static bool _isSubscribed = false;
    private static void WatchForEvents()
    {
        if(!_isSubscribed)
        {
            _isSubscribed = true;

            EventsLuaWithArgs.OnEventsLuaWithArgs += (LuaEventsId id, List&lt;string&gt; args) =&gt;
            {
                if(id == wManager.Wow.Enums.LuaEventsId.CHAT_MSG_SYSTEM &amp;&amp; Conditions.ProductIsStartedNotInPause)
                {

                    if(args.FirstOrDefault().Contains("You are now AFK"))
                    {
                        _IsAfk = true;
                        timer = 0;
                        afkPosition = ObjectManager.Me.Position;
                    }
                }
            };
        }
    }

    public static void StartProfileRestarter()
    {

        Thread ProfileRestarterThread = new Thread(() =&gt;
        {
            Logging.Write("[FNV_Quester]: Profile Restarter initialized");

            string profileName = "FNV_V2\\#0 START_FNVLauncher_V2.xml";
            string currentProfileName = wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName;


            while((wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName.Equals(profileName) || !ObjectManager.Me.GetMove) &amp;&amp; Conditions.ProductIsStarted)
            {
                Thread.Sleep(1000);
            }

            if(!_isSubscribed)
            {
                Thread.Sleep(Usefuls.Latency + 500);
                WatchForEvents();
            }

            while(Conditions.ProductIsStarted || Conditions.ProductInPause)
            {

                if(wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName.Equals(profileName))
                    break;

                while(_IsAfk &amp;&amp; timer &lt; 600 &amp;&amp; !wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName.Equals(profileName))
                {
                    Thread.Sleep(1000);
                    timer++;
                }

                if(_IsAfk &amp;&amp; timer &gt;= 600 &amp;&amp; ObjectManager.Me.Position.DistanceTo(afkPosition) &lt; 25)
                {
                    Logging.Write("[FNV_Quester]: Bot seems to stopped / went AFK for too long. Restart of profile in process...");
                    wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName = profileName;
                    robotManager.Products.Products.ProductRestart();
                    break;
                }

                timer = 0;
                _IsAfk = false;
                Thread.Sleep(10000);
            }

            Logging.Write("[FNV_Quester]: Profile Restarter disposed");

        });

        ProfileRestarterThread.Start();
    }
}


class test
{


    public static void testen()
    {

    }
}
    </Script>
  <OffMeshConnections />
  <BlacklistNpc />
  <BlacklistNpcType />
  <Blackspots>
    <Blackspot X="-4400.82861" Y="261.044861" Z="25.34247" Radius="75" Continent="None" Comment="" />
    <Blackspot X="-4392.78467" Y="213.361786" Z="25.414093" Radius="75" Continent="None" Comment="" />
    <Blackspot X="-4368.8374" Y="96.07657" Z="36.3602867" Radius="50" Continent="None" Comment="" />
    <Blackspot X="-4345.001" Y="30.7279587" Z="50.9304581" Radius="50" Continent="None" Comment="" />
    <Blackspot X="-4346.58643" Y="257.667328" Z="26.3175182" Radius="50" Continent="None" Comment="" />
    <Blackspot X="-4457.84033" Y="244.957962" Z="39.1075058" Radius="50" Continent="None" Comment="" />
    <Blackspot X="-4454.78369" Y="295.8864" Z="36.2863541" Radius="50" Continent="None" Comment="" />
    <Blackspot X="-5042.37549" Y="1235.77856" Z="53.8623619" Radius="30" Continent="None" Comment="" />
    <Blackspot X="-5289.745" Y="1275.47559" Z="50.74426" Radius="30" Continent="None" Comment="" />
    <Blackspot X="-5382.59131" Y="1369.06934" Z="24.1359577" Radius="30" Continent="None" Comment="" />
    <Blackspot X="-5446.4375" Y="1265.9751" Z="20.0914783" Radius="30" Continent="None" Comment="" />
    <Blackspot X="-5507.44043" Y="1203.7688" Z="18.8545246" Radius="30" Continent="None" Comment="" />
    <Blackspot X="-5572.56836" Y="1177.54639" Z="26.76219" Radius="30" Continent="None" Comment="" />
    <Blackspot X="-5521.637" Y="1313.93323" Z="20.4829617" Radius="30" Continent="None" Comment="" />
    <Blackspot X="-4597.246" Y="1354.8772" Z="105.246712" Radius="50" Continent="None" Comment="" />
    <Blackspot X="-4477.162" Y="1206.17334" Z="125.899857" Radius="50" Continent="None" Comment="" />
    <Blackspot X="-4480.74854" Y="1306.6825" Z="125.173874" Radius="50" Continent="None" Comment="" />
    <Blackspot X="-4480.485" Y="1420.23376" Z="126.429932" Radius="50" Continent="None" Comment="" />
    <Blackspot X="-4425.244" Y="1470.99146" Z="126.083572" Radius="50" Continent="None" Comment="" />
    <Blackspot X="-4461.281" Y="1537.50916" Z="127.376984" Radius="50" Continent="None" Comment="" />
    <Blackspot X="-4425.287" Y="1192.82971" Z="127.74408" Radius="50" Continent="None" Comment="" />
    <Blackspot X="-4319.176" Y="1331.66455" Z="159.233948" Radius="100" Continent="None" Comment="" />
    <Blackspot X="-8362.53" Y="-3018.16064" Z="8.649812" Radius="35" Continent="None" Comment="" />
    <Blackspot X="-8230.053" Y="-2983.52661" Z="9.608597" Radius="35" Continent="None" Comment="" />
    <Blackspot X="-4401.30029" Y="2490.317" Z="-1.50658727" Radius="50" Continent="None" Comment="" />
    <Blackspot X="-4457.623" Y="2484.64136" Z="-1.50658727" Radius="50" Continent="None" Comment="" />
    <Blackspot X="-4523.26367" Y="2461.14648" Z="-1.50658727" Radius="50" Continent="None" Comment="" />
    <Blackspot X="-4587.701" Y="2443.41943" Z="-1.50658727" Radius="50" Continent="None" Comment="" />
    <Blackspot X="-4634.675" Y="2440.10815" Z="-1.50658727" Radius="50" Continent="None" Comment="" />
    <Blackspot X="-4692.059" Y="2437.89185" Z="-1.50658727" Radius="50" Continent="None" Comment="" />
    <Blackspot X="-4733.416" Y="2430.49927" Z="-1.50658727" Radius="50" Continent="None" Comment="" />
    <Blackspot X="-4779.16553" Y="2420.43237" Z="-1.50658727" Radius="50" Continent="None" Comment="" />
    <Blackspot X="-4825.28467" Y="2410.28418" Z="-1.50658727" Radius="50" Continent="None" Comment="" />
    <Blackspot X="-4867.4375" Y="2401.00879" Z="-1.50658727" Radius="50" Continent="None" Comment="" />
    <Blackspot X="-4950.85254" Y="2385.802" Z="-1.50658727" Radius="50" Continent="None" Comment="" />
    <Blackspot X="-4984.069" Y="2385.26025" Z="-1.50658727" Radius="50" Continent="None" Comment="" />
    <Blackspot X="-5036.077" Y="2384.41162" Z="-1.50658727" Radius="50" Continent="None" Comment="" />
    <Blackspot X="-5096.20654" Y="2383.43042" Z="-1.50658727" Radius="50" Continent="None" Comment="" />
    <Blackspot X="-5143.045" Y="2382.66626" Z="-1.50658727" Radius="50" Continent="None" Comment="" />
    <Blackspot X="-4976.18164" Y="1614.74536" Z="64.19535" Radius="35" Continent="None" Comment="" />
    <Blackspot X="-4900.39453" Y="1352.77979" Z="63.7640152" Radius="60" Continent="None" Comment="" />
    <Blackspot X="-4399.38965" Y="236.671082" Z="25.5707359" Radius="200" Continent="None" Comment="" />
    <Blackspot X="-4526.781" Y="329.273834" Z="33.597744" Radius="60" Continent="None" Comment="" />
    <Blackspot X="-4343.67334" Y="12.7183218" Z="53.9786224" Radius="60" Continent="None" Comment="" />
    <Blackspot X="-4517.73926" Y="778.555359" Z="60.2229767" Radius="100" Continent="None" Comment="" />
    <Blackspot X="-4090.35645" Y="2688.035" Z="-1.28618264" Radius="150" Continent="None" Comment="" />
    <Blackspot X="-4553.289" Y="2416.0957" Z="-1.330545" Radius="150" Continent="None" Comment="" />
    <Blackspot X="-4810.80566" Y="2435.65039" Z="-1.27538824" Radius="150" Continent="None" Comment="" />
    <Blackspot X="-9309.32" Y="-3818.19873" Z="10.3558559" Radius="200" Continent="None" Comment="" />
    <Blackspot X="-9327.688" Y="-4038.33618" Z="10.1038589" Radius="200" Continent="None" Comment="" />
    <Blackspot X="-9009.229" Y="-4018.93628" Z="11.5646305" Radius="300" Continent="None" Comment="" />
    <Blackspot X="-8762.1" Y="-4214.299" Z="11.00025" Radius="60" Continent="None" Comment="" />
    <Blackspot X="-8685.329" Y="-3973.87646" Z="14.5808535" Radius="60" Continent="None" Comment="" />
    <Blackspot X="-8969.359" Y="-3681.06738" Z="10.91345" Radius="60" Continent="None" Comment="" />
    <Blackspot X="-9169.734" Y="-3577.02319" Z="10.9762268" Radius="60" Continent="None" Comment="" />
    <Blackspot X="-8903.381" Y="-3468.66772" Z="11.8334684" Radius="150" Continent="None" Comment="" />
    <Blackspot X="-9199.492" Y="-3012.78369" Z="25.2210217" Radius="150" Continent="None" Comment="" />
    <Blackspot X="-9584.493" Y="-2784.70874" Z="8.268025" Radius="200" Continent="None" Comment="" />
    <Blackspot X="-9029.847" Y="-2775.58765" Z="39.0603" Radius="150" Continent="None" Comment="" />
    <Blackspot X="-8812.38" Y="-3050.08813" Z="37.02155" Radius="150" Continent="None" Comment="" />
    <Blackspot X="-8656.415" Y="-2465.9563" Z="29.9368286" Radius="150" Continent="None" Comment="" />
    <Blackspot X="-4989.323" Y="1196.60876" Z="55.3580933" Radius="100" Continent="None" Comment="" />
    <Blackspot X="-4963.503" Y="1153.8175" Z="73.82525" Radius="100" Continent="None" Comment="" />
    <Blackspot X="-4949.05566" Y="645.168" Z="42.6650543" Radius="50" Continent="None" Comment="" />
    <Blackspot X="-4883.51855" Y="672.7981" Z="42.2982559" Radius="50" Continent="None" Comment="" />
    <Blackspot X="-4785.985" Y="860.4252" Z="143.709518" Radius="100" Continent="None" Comment="" />
    <Blackspot X="-4836.4126" Y="538.5783" Z="20.231287" Radius="50" Continent="None" Comment="" />
    <Blackspot X="-4877.44629" Y="468.7755" Z="19.1591816" Radius="50" Continent="None" Comment="" />
    <Blackspot X="-4962.43066" Y="472.6246" Z="17.2976055" Radius="75" Continent="None" Comment="" />
    <Blackspot X="-4991.92529" Y="414.438263" Z="17.0220337" Radius="25" Continent="None" Comment="" />
    <Blackspot X="-5041.139" Y="318.9682" Z="24.1063271" Radius="25" Continent="None" Comment="" />
    <Blackspot X="-5039.03955" Y="359.7113" Z="16.5273476" Radius="25" Continent="None" Comment="" />
    <Blackspot X="-8843.145" Y="-3369.6" Z="10.4983635" Radius="50" Continent="None" Comment="" />
  </Blackspots>
</EasyQuestProfile>